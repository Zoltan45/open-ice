  	.MLIB	"HHMACS.LIB"
	.FILE	"HHPUCK.ASM"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

*
*GET THE SYSTEM STUFF
*
	.INCLUDE	"HH.INC"
	.INCLUDE	"HHSTRING.H"
	.INCLUDE	"IMGTBL.GLO"
	.include	"hhpuck.e"
	.INCLUDE	"HHPUCK.TBL"
	.include	"hhd.g"
	.include	"hhmisc.g"
	.include	"hhproc.g"
	.include	"hhutil.g"
	.include	"hhcontrl.g"
	.include	"hhplayer.g"
	.include	"hhmath.g"
	.include	"hhc.g"
	.include	"hha.g"
	.include	"hhpall.g"
	.include	"hhscore.g"
	.include	"hhram.g"
	.include	"hhshow.g"
	.include	"hhgscr2.g"
	.include	"hhgame.g"
	.include	"hhspeech.g"
;	.include	"hhtimer.g"
	.ref	tenseconds
	.ref	minutes
	.ref	seconds
	.include	"hhgctrl.g"
	.include	"hhcontr2.g"
;	.include	"hhscr_fn.g"
	.ref	start_anim_if_not
	.ref	a_delete_obj
;	.include	"hhscr_sh.g"
	.ref	set_immediate_onetime_script
	.include	"hhtext.g"
	.include	"hhcmos.g"
	.include	"hhpup.g"

; end of include files

	.bss	PUCK_OBJECT,32		;object of puck
	.bss	PUCK_SHADOW,32		;object of puck shadow
	.bss	PUCK_CONTROL,16		;player controlling puck (0=no player)
	.bss	PUCK_CONTROL_START,32	;time when puck control last changed
	.bss	PUCK_LAST_CONTROL,16	;player who last controlled puck (for passing, shooting)
	.bss	PUCK_INTENDED,16	;player puck is intended for
	.bss	NO_PUCK_SLOW,16
	.bss	PUCK_OPEN_CONTROL_TIME,16 ;time til last person to touch puck can touch it again
	.bss	PUCK_OPEN_LAST_TIME,16	;time til we kill all last puck data and puck mode (>= puck_open_control_time)
	.bss	PUCK_MODE,16		;only valid if puck_control = 0
	.bss	PUCK_MODE_2,16		;only valid if puck_control = 0
	.bss	PUCK_MODE_2_DIR,16	;clockwise or counterclockwise puck_mode_2
	.bss	PUCK_M2_TIME,16		;time at current state (1,2) of PUCK_MODE_2 (if on ground)
	.bss	outlaw_puck,16		;-1 = puck is outlawed from left goal, 1 = puck is outlawed from right goal
	.bss	outlaw_puck2,16		;-1 = puck is stuck in left goal, 1 = puck is stuck in right goal
	.bss	trigger_puck_sound,16
	.bss	puck_owner_data,8*8
	.bss	puck_owner_pointer,32
	.bss	not_free_receiver,16	;receiver is not free to move ok (clear after knock down, or other stop)
	.bss	bounce_save_temp,32
	.bss	goal_pass,16		;goal is about to pass through -1=left goal +1=right goal (so goal happens on current frame)
	.bss	goal_pcount1,16
	.bss	goal_pcount2,16
	.bss	track_puck_data,(16*48)*2000
	.bss	track_puck_pointer,32
	.bss	bhit_dest_time,32		;ok to bounce off board and be intended	(is time of intended)
	.bss	PUCK_NEWDIR_TIME,32	;the puck last changed direction at this time
	.bss	killtrails,16
	.bss	show_puck_on_fire,16	;actually show puck on fire
	.bss	puck_control_blink,16

	.BSS	SHOT_ATTEMPTS,16	;SHOOTER'S ATTEMPTS SINCE LAST GOAL
	.BSS	SHOTIRQ,32		;IRQ TIME OF SHOT
	.BSS	GOALIE_MISS,16		;GOALIE WILL GIVE UP THE GOAL
	.BSS	FIVE_HOLE,16		;FIVE HOLE SCORE

	.TEXT
	.EVEN

**************************************************************************
*								         *
* puck_watch								 *
* 	this is the process that watches the puck, and when a player	 *
* 	does not control it, watches for player interaction and rink	 *
* 	collisions							 *
* 	 maybe make this an irq event					 *
*								         *
**************************************************************************
puck_watch
pw_0	calla	set_puck_control_indicator
	move	@PUCK_CONTROL,a0,W
	jrz	pw_free			;puck is free
	GBLOCK	a0,a6
	move	@PUCK_OBJECT,a8,L
	move	*a6(POF_MODE),a14,W
	cmpi	PM_ONETIME,a14
	jrz	puck_rink_check		;if we have control, but are onetimeing, still check rink
	callr	puck_shadow_off
	jruc	set_puck_script

pw_free	move	@PUCK_OPEN_LAST_TIME,a4,W
	jrz	pw_f3
	dec	a4
	move	a4,@PUCK_OPEN_LAST_TIME,W
	jrnz	pw_f3
	clr	a4
	move	a4,@PUCK_INTENDED,W
	move	a4,@PUCK_LAST_CONTROL,W
	callr	set_safe_puck_mode_a4
pw_f3	move	@PUCK_OPEN_CONTROL_TIME,a4,W
	jrz	pwf33
	dec	a4
	move	a4,@PUCK_OPEN_CONTROL_TIME,W
pwf33	callr	puck_rink_check
	move	@NO_PUCK_SLOW,a4,W
	jrz	pwf_1
	dec	a4
	move	a4,@NO_PUCK_SLOW,W
	jruc	pwf_2
pwf_1	move	@PUCK_OBJECT,a8,L
	move	*a8(OYVAL),a4,L
	jrn	pwf_2
	callr	slow_puck_down
pwf_2	jruc	puck_player_check

**************************************************************************
*								         *
* PUCK_GOALIE_CHECK - CHECK FOR GOALIE COLLISION WITH PUCK		 *
* 									 *
* PASS:									 *
* A3 = GOALIE NUMBER							 *
* A4 = DISTANCE FROM GOALIE'S PUCK POINT				 *
* A6 = PLAYER BLOCK							 *
* A8 = OBJECT								 *
* RETURN:								 *
* NUTIN'								 *
*								         *
**************************************************************************

INTERCEPT_DIST_PERCENT	EQU	50		;INTERCEPT DISTANCE FROM GOALIE
SPEED_PERCENT		EQU	25		;PUCK SPEED
REBOUND_PERCENT		EQU	95		;NUMBER OF REBOUNDS
SHOOTER_PERCENT		EQU	38	;easier	;SHOOTER

MISS_PERCENT_MODIFIER	EQU	90 ;95,90,80,75	;LARGER INCREASES SCORING
MAX_SCORE_DIFF		EQU	10		;MAX SCORE DIFFERENCE
MIN_SCORE_DIFF		EQU	1		;MIN SCORE DIFFERENCE

MAX_SHOT_ATTEMPT	EQU	5

MAX_INTERCEPT_DIST	EQU	92 ;05CH	

SHOT_ATTEMPT_TABLE
;	.WORD	0,5,25,50,100
	.WORD	0,5,10,20,500

shot_attempt_drone_table
	.WORD	0,5,10,20,100


SCORE_DIFF_TABLES
	.LONG	POINT_1_TABLE,POINT_2_TABLE,POINT_3_TABLE,POINT_4_TABLE
	.LONG	POINT_5_TABLE,POINT_6_TABLE,POINT_7_TABLE,POINT_8_TABLE
	.LONG	POINT_9_TABLE,POINT_10_TABLE

;POINT_n_TABLE
;	.WORD	GREATER THAN 2 MINS, 1 MIN, 30 SECS, 10 SECS, 0 SECS


;MODIFIER VALUES FOR MISS_PERCENT_MODIFIER:
;
; ADDED IF SHOOTING ON WINNING TEAM
; SUBTRACTED TWICE IF SHOOTING ON LOSING TEAM (once, MDP) (easier)

POINT_1_TABLE
	.WORD	 0, 0, 0, 0, 0
POINT_2_TABLE
	.WORD	 0, 0, 0, 0, 0
POINT_3_TABLE
	.WORD	 0, 0, 0, 0, 0
POINT_4_TABLE
	.WORD	 1, 1, 1, 1, 1
POINT_5_TABLE
	.WORD	 2, 2, 2, 2, 2
POINT_6_TABLE
	.WORD	 5, 5, 5, 5, 5
POINT_7_TABLE
	.WORD	 7, 7, 7, 7, 7
POINT_8_TABLE
	.WORD	10,10,10,10,10
POINT_9_TABLE
	.WORD	10,10,10,10,10
POINT_10_TABLE
	.WORD	10,10,10,10,10

;POINT_1_TABLE
;	.WORD	 0, 0, 0, 1, 2
;POINT_2_TABLE
;	.WORD	 0, 0, 1, 2, 5
;POINT_3_TABLE
;	.WORD	 0, 1, 2, 5, 7
;POINT_4_TABLE
;	.WORD	 1, 2, 5, 7,10
;POINT_5_TABLE
;	.WORD	 2, 5, 7,10,10
;POINT_6_TABLE
;	.WORD	 5, 7,10,10,10
;POINT_7_TABLE
;	.WORD	 7,10,10,10,10
;POINT_8_TABLE
;	.WORD	10,10,10,10,10
;POINT_9_TABLE
;	.WORD	10,10,10,10,15
;POINT_10_TABLE
;	.WORD	10,10,10,15,15

**************************************************************************
*								         *
* NUMBER OF REBOUNDS							 *
*								         *
**************************************************************************

TSAVE_MOD_TABLE
	;	0   1   2   3   4   5   6   7   8   9   10
;	.WORD	0,102,205,307,410,512,614,717,819,922,1024

;	.WORD	0, 12, 25, 37, 50, 62, 75, 87,100,112,125
;	.WORD	0, 40, 80, 90,120,150,180,210,240,270,300
	.WORD	0,128,256,512,1024,1024,1024,1024,1024,1024,1024

tsave_mod_drone_table
	;	0   1   2   3   4   5   6   7   8   9   10
	.word	0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0

**************************************************************************
*								         *
* HIGH WORD OF SPEED							 *
*								         *
**************************************************************************

SPEED_MOD_TABLE
	;	 14   15   16   17   18   19   20   21   22   23   24
	.WORD	 57, 114, 170, 228, 284, 341, 398, 455, 512, 569, 626
	;	 25   26   27   28   29   30   31   32   33   34   35
	.WORD	683, 740, 796, 853, 910, 967,1024,1025,1026,1027,1028


PUCK_GOALIE_CHECK0
	MOVE	@PUCK_CONTROL,A0,W
;	JRNZ	PGC_DONE			;BR=SOMEBODY HAS CONTROL
;	JRNZ	PGC_RESET			;BR=SOMEBODY HAS CONTROL
	JRZ	PGC0_CHECK_PUCK_MODE		;BR=NOBODY HAS CONTROL

	GBLOCK	A0,A0
	MOVE	*A0(POF_MODE),A14,W
	SUBK	PM_ONETIME,A14
	JRNZ	PGC_RESET			;BR=NOT THE ONE TIMER CASE
	JRUC	PGC0_GO
PGC0_CHECK_PUCK_MODE
	MOVE	@PUCK_MODE,A14,W
	CMPI	PUM_SCORE,A14
	JREQ	PGC_DONE
	CMPI	PUM_FACEOFF,A14
	JREQ	PGC_DONE
PGC0_GO

;	MOVE	@PUCK_NEWDIR_TIME,A14,L
;	MOVE	*A8(ODT_GCOMPTIME),A1,L
;	CMP	A1,A14
;	JREQ
;	JRUC	PGC_CHECK_SAVETIME


;	JRZ	PGC0_CHECK_SIDE			;BR=NOBODY HAS CONTROL
;
;	GBLOCK	a0,a5
;	MOVE	*A5(POF_MODE),A14,W
;	CMPI	PM_ONETIME,A14
;	JRNE	PGC_DONE			;BR=NOT THE ONE TIMER CASE
;PGC0_CHECK_SIDE

	MOVE	*A8(ODT_GFLAGS),A14,W
	BTST	B_MISSSAVE,A14
	JRNZ	PGC_CHECK_MISS			;BR=MISSIN' PUCK

	CLR	A14
	MOVE	A14,@GOALIE_MISS,W		;DON'T GIVE UP ANYTHING YET!

	MOVB	*A6(POF_NUMBER),A3

	MOVE	@PUCK_OBJECT,A9,L
	MOVE	*A9(OXVAL),A4,L

	MOVE	A3,B3
	SUBK	4,B3
	JRNZ	PGC0_CHECK_RIGHT		;BR=RIGHT GOALIE

	CMPI	-019B0000H,A4
	JRGE	PGC_RESET			;BR=IN FRONT OF BLUELINE+EXTRA
	CMPI	LEFT_GOALLINE_X,A4
	JRLE	PGC_RESET			;BR=BEHIND LEFT GOALLINE
	JRUC	PUCK_GOALIE_CHECK

PGC0_CHECK_RIGHT
	CMPI	019B0000H,A4
	JRLE	PGC_RESET			;BR=IN FRONT OF BLUELINE+EXTRA
	CMPI	RGHT_GOALLINE_X,A4
	JRGE	PGC_RESET			;BR=BEHIND RIGHT GOALLINE

PUCK_GOALIE_CHECK
;	MOVE	@PUCK_INTENDED,A5,W
;	CMP	A3,A5
;	JREQ	PGC_DONE			;BR=INTENDED FOR GOALIE
	MOVB	*A6(POF_IGNORE_PUCK),A14
	JRNZ	PGC_DONE			;BR=IGNORE PUCK
	MOVE	@PUCK_OPEN_CONTROL_TIME,A0,W
	JRZ	PGC_OPEN			;BR=DON'T CARE ABOUT LAST CONTRL
	MOVE	@PUCK_LAST_CONTROL,A0,W
	CMP	A0,A3
	JREQ	PGC_DONE			;BR=GOALIE CONTROLLED PUCK LAST
PGC_OPEN
	MOVE	*A6(POF_MODE),A14,W		;CHECK INTERRUPTABLE SEQUENCES
;	CMPI	PM_GHUGPOST,B0
;	JREQ	PGC_GO
;	CMPI	PM_GSIDESHUFF,B0
;	JREQ	PGC_GO
	CMPI	PM_GSTAND,A14
	JREQ	PGC_GO
	CMPI	PM_GSKATE,A14
	JREQ	PGC_GO
	CMPI	PM_GPASS,A14
	JREQ	PGC_GO
	CMPI	PM_GSKID,A14
	JREQ	PGC_GO
	CMPI	PM_GDEFLECT,A14
	JREQ	PGC_GO
	CMPI	PM_GCHECKED,A14
	JREQ	PGC_GO
	CMPI	PM_GCROSSCHECK,A14
	JRNE	PGC_DONE			;BR=DON'T INTERRUPT SEQUENCE
PGC_GO
	MOVE	*A9(ODT_VEL),A0,L
	JRZ	PGC_RESET			;BR=STOPPED

	MOVE	*A9(OYVAL),A14,L
	CMPI	MAX_GAIN_POSSY,A14
	JRLT	PGC_NOSLOW			;BR=TOO HIGH IN THE AIR

;	CMPI	GSLOW_PUCK-040000H,A0
	CMPI	GSLOW_PUCK,A0
	JRLE	PGC_RESET			;BR=MOVING SLOW ENOUGH TO FETCH
;	JRGT	PGC_NOSLOW
;
;	MOVE	*A6(POF_D_PUCK),A14,W
;	CMPI	080H,A14
;	JRLT	PGC_NOSLOW			;BR=TOO CLOSE, TRY TO SAVE
;
;	JRUC	PGC_RESET
PGC_NOSLOW

	MOVB	*A6(POF_DIRECTION),A0		;GET GOALIE'S FACING DIRECTION
;	DEC	A0
;	SLL	5,A0
;	ADDI	FIX_GOALIE_DIR_TABLE,A0
;	MOVE	B3,A14
;	SLL	2,A14
;	ADD	A14,A0
;	MOVB	*A0,A0

	MOVE	A0,B0
	MOVE	A0,B4

	MOVE	B0,B14
	ANDI	3,B0
	SUBK	3,B0				;DIRECTION 3 OR 7 FLAG
	JRZ	PGC_CHECK_X			;BR=DIRECTION 3 OR 7

	MOVE	*A9(OZVEL),A1,L
	JRZ	PGC_CHECK_X			;BR=NOT MOVIN' IN Z

	ANDI	4,B14
	JRZ	PGC_CHECK_ZVEL_2AND8		;BR=DIRECTION 2 AND 8 CHECK

	MOVE	A1,A1
	JRP	PGC_RESET			;BR=GOIN' WRONG WAY
	JRUC	PGC_CHECK_X
PGC_CHECK_ZVEL_2AND8
	MOVE	A1,A1
	JRN	PGC_RESET			;BR=GOIN' WRONG WAY
PGC_CHECK_X

;	CLR	A10				;FLAG NO ANGLE 3(7) DATA
	CLR	A14				;FLAG NO ANGLE 3(7) DATA
;	MOVE	A14,*A13(PGDIMPACT),L
	MOVE	A14,*A13(PGXIMPACT),L

	CLR	B5				;DEFAULT PUCK ZDEST OUTSIDE GOAL
	MOVE	*A9(OXVEL),A1,L			;PUCK
;	MOVE	*A9(OXVAL),A4,L			;PUCK X POSITION IN A4
	MOVE	*A8(OXVAL),A2,L			;GOALIE

	CLR	A11				;FLAG CALCULATE Z INTERCEPT

	MOVE	B3,B3
	JRNZ	PGC_CHECK_RIGHT_GOAL		;BR=RIGHT GOALIE

	MOVI	LEFT_GOALLINE_X,A0
	MOVE	A1,A1
	JRZ	PGC_LEFT_CHECK_3OR7		;BR=NO PUCK X MOTION
	JRNN	PGC_RESET			;BR=PUCK HEADING AWAY (RIGHT)

	CMP	A2,A4
	JRGE	PGC_CHECK_GOAL			;BR=PUCK X IN FRONT OF GOALIE X
PGC_LEFT_CHECK_3OR7
	MOVE	B0,B0
	JRZ	PGC_RESET			;BR=DIRECTION 3 OR 7
	MOVK	1,A11				;FLAG CALCULATE X INTERCEPT
	JRUC	PGC_CHECK_GOAL

PGC_CHECK_RIGHT_GOAL
	MOVI	RGHT_GOALLINE_X,A0
	MOVE	A1,A1
	JRZ	PGC_RIGHT_CHECK_3OR7		;BR=PUCK NO X MOTION
	JRN	PGC_RESET			;BR=PUCK HEADING AWAY (LEFT)

	CMP	A2,A4
	JRLE	PGC_CHECK_GOAL			;BR=PUCK X IN FRONT OF GOALIE X
PGC_RIGHT_CHECK_3OR7
	MOVE	B0,B0
	JRZ	PGC_RESET			;BR=DIRECTION 3 OR 7
	MOVK	1,A11				;FLAG CALCULATE X INTERCEPT
;	JRUC	PGC_CHECK_GOAL

PGC_CHECK_GOAL
	SUB	A4,A0
	CALLA	SAFEDIV
	JRV	PGC_CALC_GOALIE_INTERCEPT	;BR=OVERFLOW!
	.if	DEBUG
	LOCKON	N
	.endif
;	JRN	PGC_CALC_GOALIE_INTERCEPT	;BR=TOO MUCH TIME

	MOVE	*A9(OZVEL),A0,L
	CALLA	SAFEMULT
	JRNC	PGC_CALC_GOALIE_INTERCEPT	;BR=WAY OUT THERE!
	MOVE	*A9(OZVAL),A14,L
	ADD	A14,A1				;Z @ GOAL LINE X
	MOVE	A1,B5				;PUCK Z DEST

PGC_CALC_GOALIE_INTERCEPT
	MOVE	A11,A11
	JRNZ	PGC_CALC_GOALIE_INTERCEPTZ	;BR=CALCULATE X INTERCEPT

;	MOVE	B0,B14
;	ANDI	3,B0
;	SUBK	3,B0				;DIRECTION 3 OR 7 FLAG
;
;	MOVE	A2,A0				;GOALIE X
;	ABS	A0
;	MOVE	A4,A1				;PUCK X
;	ABS	A1
;
;	CMP	A0,A1
;	JRLE	PGC_CALC_GO			;BR=PUCK X IN FRONT OF GOALIE X
;
;	MOVE	B0,B0
;	JRZ	PGC_RESET			;BR=DIRECTION 3 OR 7
;
;	MOVE	*A8(OZVAL),A0,L
;	MOVE	*A9(OZVAL),A1,L
;
;	ANDI	4,B14
;	JRZ	PGC_CALC_CHECK_2AND8		;BR=DIRECTION 2 AND 8 CHECK
;
;	CMP	A0,A1				;DIRECTION 4 AND 6 CHECK
;	JRGE	PGC_CALC_GOALIE_INTERCEPTZ	;BR=SOLVE FOR Z
;	JRUC	PGC_RESET			;BR=PUCK BEHIND GOALIE
;
;PGC_CALC_CHECK_2AND8
;	CMP	A0,A1				;DIRECTION 2 AND 8 CHECK
;	JRLE	PGC_CALC_GOALIE_INTERCEPTZ	;BR=SOLVE FOR Z
;	JRUC	PGC_RESET			;BR=PUCK BEHIND GOALIE
;
;PGC_CALC_GO

;	MOVE	*A8(OXVAL),A0,L
	MOVE	A2,A0
	MOVE	A0,A11				;X IMPACT POSITION
	MOVE	A0,B9
;	MOVE	*A9(OXVAL),A4,L
	MOVE	A4,B10
	SUB	A4,A0
;	GETST   A14
	MOVE	*A9(OXVEL),A1,L
;	GETST   A4
;	XOR	A4,A14
;	BTST	31,A14
;	JRNZ	PGC_RESET			;BR=DIFFERENT SIGNS

;	MOVE	*A9(OZVAL),A14,L
;	CMPI	TOP_CREASE_Z,A14
;	JRGT	PGC_CALC_CHECK_Z
;	CMPI	BOT_CREASE_Z,A14
;	JRGE	PGC_CALC_TIME
;PGC_CALC_CHECK_Z
;	MOVE	*A8(OZVAL),A4,L
;	SUB	A14,A4
;	GETST	A4
;	MOVE	*A9(OZVEL),A5,L
;	GETST   A5
;	XOR	A5,A4
;	BTST	31,A4
;
;	LOCKON	NZ
;
;	JRNZ	PGC_RESET			;BR=DIFFERENT SIGNS
;PGC_CALC_TIME

	CALLA	SAFEDIV
	JRV	PGC_RESET			;BR=OVERFLOW!
	.if	DEBUG
	LOCKON	N
	.endif
	MOVE	A1,A4
;	SRA	16,A4				;A4 = TIME WITH NO FRICTION

	MOVE	*A9(OZVEL),A0,L
	CALLA	SAFEMULT
	JRNC	PGC_RESET			;BR=OVERFLOW!
	MOVE	A1,A5
	MOVE	*A9(OZVAL),A1,L
	ADD	A1,A5				;A5 = Z @ GOALIE'S X

	MOVE	A5,B7				;Z IMPACT POSITION
	MOVE	*A8(OZVAL),A2,L
	SUB	A2,A5

	MOVE	B0,B0
	JRZ	PGC_DIST_CHECK_3OR7		;EITHER 3 OR 7 DIRECTION
	MOVE	B0,B1

	MOVE	B9,A14				;SAVE ANGLE 3(7) IMPACT POINT
	MOVE	A14,*A13(PGXIMPACT),L
	MOVE	B7,A14
	MOVE	A14,*A13(PGZIMPACT),L
	MOVE	A4,*A13(PGTIMPACT),L
	MOVE	A5,*A13(PGDIMPACT),L

;	MOVE	B9,B8				;SAVE Z IMPACT POINT
;	MOVE	B7,B6				;SAVE X IMPACT POINT
;	MOVE	A4,*A13(PGTIMPACT),L		;SAVE TIME
;	MOVE	A5,A10				;SAVE DISTANCE

	SUB	A2,A1				;PZ RELATIVE TO GZ
	SUB	A5,A1
	MOVE	A1,A3				;(PZ - Z INTERCEPT)

	MOVE	B10,A0
	SUB	A11,A0				;PX RELATIVE TO GX
	MOVE	A5,A1

	INC	B1
	JRZ	PGC_2OR6			;BR=DIRECTION 2 OR 6

	NEG	A1				;-(Z INTERCEPT)
	NEG	A3				;-(PZ - Z INTERCEPT)
PGC_2OR6
	CALLA	SAFEMULT			;PX*(Z INTERCEPT)
	JRNC	PGC_RESET			;BR=OVERFLOW!
	SUB	A3,A0				;PX - (PZ - Z INTERCEPT)
	SWAP	A0,A1
	CALLA	SAFEDIV				;SOLVED FOR X
	JRV	PGC_RESET

	ADD	A1,A11				;X IMPACT POSITION

	MOVE	A11,A14
	ABS	A14
	CMPI	RGHT_GOALLINE_X,A14
;	JRLT	PGC_INFRONT
	JRGE	PGC_DIST_CHECK_3OR7
;;PGC_FORCEDIR
;	MOVK	3,B4
;	MOVE	B3,B3
;	JRZ	PGC_DIST_CHECK			;BR=ON THE LEFT
;	MOVK	7,B4
;	JRUC	PGC_DIST_CHECK
;PGC_INFRONT

	MOVE	B1,B1
	JRZ	PGC_2OR6_OK			;BR=DIRECTION 2 OR 6
	NEG	A1
PGC_2OR6_OK
	ADD	A1,A2				;Z IMPACT POSITION

	MOVE	A2,B7				;SET NEW IMPACT POSITIONS
	MOVE	A11,B9

	MOVI	016A0AH,A0
	CALLA	SAFEMULT
	JRNC	PGC_RESET			;BR=TOO DAMN BIG!

	MOVE	A1,A5

	MOVE	A11,A0
	MOVE	*A9(OXVAL),A14,L
	SUB	A14,A0
	MOVE	*A9(OXVEL),A1,L
	CALLA	SAFEDIV
	JRV	PGC_RESET			;BR=OVERFLOW!
;	SRA	16,A1
	MOVE	A1,A4
	JRUC	PGC_DIST_CHECK

PGC_CALC_GOALIE_INTERCEPTZ

	.if	DEBUG
	MOVE	B0,B0				;TEST FOR DIRECTION 3 AND 7
	LOCKON	Z				;
	.endif

	MOVE	*A8(OZVAL),A0,L
	MOVE	A0,A11				;Z IMPACT POSITION
	MOVE	*A9(OZVAL),A14,L
	MOVE	A14,B10
	SUB	A14,A0
	GETST	A14
	MOVE	*A9(OZVEL),A1,L
	JRZ	PGC_RESET			;BR=NOT MOVING IN Z
	GETST   A4
	XOR	A4,A14
	BTST	31,A14
	JRNZ	PGC_RESET			;BR=DIFFERENT SIGNS

	CALLA	SAFEDIV
	JRV	PGC_RESET
	.if	DEBUG
	LOCKON	N
	.endif
	MOVE	A1,A4
;	SRA	16,A4				;A4 = TIME WITH NO FRICTION

	MOVE	*A9(OXVEL),A0,L
	CALLA	SAFEMULT
	JRNC	PGC_RESET
	MOVE	A1,A5
	MOVE	*A9(OXVAL),A1,L
	ADD	A1,A5				;A5 = X @ GOALIE'S Z

	MOVE	*A8(OXVAL),A2,L
	SUB	A2,A5				;GOALIE X POSITION IN A2

	MOVE	B0,B1

	SUB	A2,A1				;PX RELATIVE TO GX
	SUB	A5,A1
	MOVE	A1,A3				;(PX - X INTERCEPT)

	MOVE	B10,A0
	SUB	A11,A0				;PZ RELATIVE TO GZ
	MOVE	A5,A1

	INC	B1
	JRZ	PGC_2OR6Z			;BR=DIRECTION 2 OR 6

	NEG	A1				;-(X INTERCEPT)
	NEG	A3				;-(PX - X INTERCEPT)
PGC_2OR6Z
	CALLA	SAFEMULT			;PZ*(X INTERCEPT)
	JRNC	PGC_RESET			;BR=WAY OUT THERE!
	SUB	A3,A0				;PZ - (PX - X INTERCEPT)
	SWAP	A0,A1
	CALLA	SAFEDIV				;SOLVED FOR Z
	JRV	PGC_RESET

	ADD	A1,A11				;Z IMPACT POSITION

	MOVE	A1,A14				;DON'T TRASH Z SIGN!

	MOVE	B1,B1
	JRZ	PGC_2OR6_OKZ			;BR=DIRECTION 2 OR 6
	NEG	A14
PGC_2OR6_OKZ
	ADD	A14,A2				;X IMPACT POSITION

;	MOVE	A2,A14
;	ABS	A14
;	CMPI	RGHT_GOALLINE_X,A14
;	JRGE	PGC_FORCEDIR

	MOVE	A11,B7				;SET NEW IMPACT POSITIONS
	MOVE	A2,B9

	MOVI	016A0AH,A0
	CALLA	SAFEMULT
	JRNC	PGC_RESET			;BR=TOO DAMN BIG!

	MOVE	A1,A5

	MOVE	A11,A0
	MOVE	*A9(OZVAL),A14,L
	SUB	A14,A0
	MOVE	*A9(OZVEL),A1,L
	CALLA	SAFEDIV
	JRV	PGC_RESET
;	SRA	16,A1
	MOVE	A1,A4

PGC_DIST_CHECK
	CMPI	TOP_GOALPOST_Z+[4,0],B5
	JRGT	PGC_DIST_CHECK_3OR7_0		;BR=ABOVE GOAL
	CMPI	BOT_GOALPOST_Z-[4,0],B5
	JRLT	PGC_DIST_CHECK_3OR7_0		;BR=BELOW GOAL

	SRA	16,A4				;A4 = TIME WITH NO FRICTION
	DEC	A4
	JRNN	PGC_TIME_OKAY
	CLR	A4
PGC_TIME_OKAY

	MOVE	A5,A5
	GETST	A0
	ABS	A5
	ADDI	08000H,A5
	SRA	16,A5				;DISTANCE FROM GOALIE AND Z SIDE

;	SRA	16,A5				;DISTANCE FROM GOALIE AND Z SIDE
;	MOVE	A5,A14
;	ABS	A14
;	CMPI	MAX_INTERCEPT_DIST,A14		;05CH, 058H, 048H

	CMPI	MAX_INTERCEPT_DIST,A5		;05CH, 058H, 048H
	JRLE	PGC_SAVETIME

PGC_DIST_CHECK_3OR7_0
;	MOVE	*A13(PGDIMPACT),A5,L
	MOVE	*A13(PGXIMPACT),A14,L
;	MOVE	A10,A5				;RESTORE DISTANCE
	JRZ	PGC_TMOVE			;BR=NO DIRECTION 3(7) IMPACT

;	MOVE	B8,B9				;RESTORE Z IMPACT POINT
;	MOVE	B6,B7				;RESTORE X IMPACT POINT
;	MOVE	*A13(PGTIMPACT),A4,L		;RESTORE TIME

	MOVE	*A13(PGDIMPACT),A5,L

;	MOVE	*A13(PGXIMPACT),A14,L
	MOVE	A14,B9
	MOVE	*A13(PGZIMPACT),A14,L
	MOVE	A14,B7
	MOVE	*A13(PGTIMPACT),A4,L

PGC_DIST_CHECK_3OR7

	MOVE	A5,A5
	GETST	A0
	ABS	A5
	ADDI	08000H,A5
	SRA	16,A5				;DISTANCE FROM GOALIE AND Z SIDE

;	SRA	16,A5				;DISTANCE FROM GOALIE AND Z SIDE
;	MOVE	A5,A14
;	ABS	A14
;	CMPI	MAX_INTERCEPT_DIST,A14		;05CH, 058H, 048H

	CMPI	MAX_INTERCEPT_DIST,A5		;05CH, 058H, 048H
	JRGT	PGC_CHECK_GOALPOSTS

	SRA	16,A4				;A4 = TIME WITH NO FRICTION
	DEC	A4
	JRNN	PGC_SET_3OR7_DIR
	CLR	A4

PGC_SET_3OR7_DIR
	CLR	B0				;FLAG DIRECTION 3 OR 7
	MOVK	3,B4
	MOVE	B3,B3
	JRZ	PGC_SAVETIME			;BR=ON THE LEFT
	MOVK	7,B4
	JRUC	PGC_SAVETIME

PGC_CHECK_GOALPOSTS
;	CMPI	TOP_GOALPOST_Z,B5
;	JRGT	PGC_RESET			;BR=ABOVE GOAL
;	CMPI	BOT_GOALPOST_Z,B5
;	JRLT	PGC_RESET			;BR=BELOW GOAL

;	.if	DEBUG
;	.BSS	LONGDIST,16
;	MOVE	@LONGDIST,A0,W
;	CMP	A0,A14
;	JRLE	PGC_NONEWDIST
;	MOVE	A14,@LONGDIST,W
;PGC_NONEWDIST
;	.endif

;	.if	DEBUG
;	MOVE	A14,A0
;	LOCKUP
;	.endif

PGC_TMOVE
	MOVE	*A8(ODT_GFLAGS),A14,W
	ANDNI	M_FREEZE,A14
	ORI	M_TMOVE,A14
	MOVE	A14,*A8(ODT_GFLAGS),W

	CLR	A14
	MOVE	A14,*A8(ODT_GSAVETIME),W
	RETS

PGC_SAVETIME

	BTST	31,A0
	JRZ	PGC_DIST_FIXED			;BR=DISTANCE WASN'T NEGATIVE
	NEG	A5
PGC_DIST_FIXED

**************************************************************************
*								         *
* A PUCK VELOCITY CHECK IS ALSO REQUIRED!				 *
*								         *
**************************************************************************

;	CMPI	5,A4
;	JRGT	PGC_GET_SAVETIME
;;	JRGT	PGC_RESET			;BR=TOO SOON, MOVE TO PUCK
;
;	SUBK	01CH,A14
;	JRP	PGC_GET_SAVETIME
;
;	MOVE	*A9(OYVAL),A14,L
;	CMPI	MAX_GAIN_POSSY,A14
;	JRLT	PGC_GET_SAVETIME		;BR=TOO HIGH IN THE AIR
;
;	MOVE	*A9(ODT_VEL),A14,L
;;	CMPI	GSLOW_PUCK-080000H,A14
;	CMPI	GSLOW_PUCK,A14
;;	JRLE	PGC_RESET
;	JRGT	PGC_GET_SAVETIME
;	JRUC	PGC_RESET
;PGC_GET_SAVETIME

	MOVE	*A8(ODT_GSAVETIME),A14,W
	JRNZ	PGC_CHECK_SAVETIME

	MOVE	A6,B6
	MOVE	A8,B8

	MOVE	@WAVEIRQS,A3,L
	ADD	A4,A3
	CALLA	get_puck_y_data_for_t
	MOVE	A2,A2
	JRNN	PGC_SHIFT_Y			;BR=ON DA GROUND
	SUBI	08000H,A2
PGC_SHIFT_Y
	SRA	16,A2

	MOVI	STAND_SAVE_TABLE,A11
PGC_Y_ZONE_LUPE
	MOVE	*A11+,A14,W
	JRP	PGC_RESET			;BR=TOO HIGH!
	MOVE	*A11+,A7,W
	CMP	A2,A14
	JRLE	PGC_X_ZONE_LUPE
	ADD	A7,A11
	JRUC	PGC_Y_ZONE_LUPE
PGC_X_ZONE_LUPE
	MOVE	*A11+,A14,W
	CMP	A5,A14
	JRGE	PGC_ZONE_FOUND
	ADDI	010H+010H+020H-010H,A11
	JRUC	PGC_X_ZONE_LUPE
PGC_ZONE_FOUND

	MOVE	*A11+,A7,W			;TIME
;	MOVE	*A11(0),*A8(ODT_GSAVE),L	;SAVE
	MOVE	*A11,A11,L
	JRZ	PGC_TMOVE			;BR=GO GET THAT FUCKIN' PUCK!

	CLR	A10				;TURN OFF SAVE FLAG

	BTST	1,A11
	.if	SHOT_DATA
	JRNZ	PGC_SAVE_MESS			;BR=SAVE!
	.else
	JRNZ	PGC_SAVE			;BR=SAVE!
	.endif

**************************************************************************
*								         *
* DETERMINE SAVE OR MISS						 *
*								         *
**************************************************************************

;	JRUC	PGC_MISS

	MOVE	@SUPER_GOALIE,A14,W
	JRNZ	PGC_SAVE			;BR=SUPER GOALIE MOTHERFUCKER!	

	MOVE	@PUCK_MODE,A14,W
	CMPI	PUM_ENDPER,A14
	.if	SHOT_DATA
	JREQ	PGC_SAVE_MESS			;BR=ALWAYS SAVE AT END OF PERIOD
	.else
	JREQ	PGC_SAVE			;BR=ALWAYS SAVE AT END OF PERIOD
	.endif

	CLR	A3

	MOVE	A5,A1
	ABS	A1

	.if	SHOT_DATA
;	MOVE	A1,@RAMTEMP1,W			;INTERCEPT DISTANCE
	.endif

	SUBI	011H,A1
	JRN	PGC_SPEED_MODIFIER		;BR=NOT FAR ENOUGH AWAY
	CMPI	MAX_INTERCEPT_DIST-011H,A1
	JRLT	PGC_DIST_GO			;BR=UNDER MAXIMUM DISTANCE
;	MOVI	MAX_INTERCEPT_DIST-011H+1,A1
	INC	A1
PGC_DIST_GO
	MOVI	1024/(MAX_INTERCEPT_DIST-011H+1),A14
	MPYU	A14,A1
	MOVI	INTERCEPT_DIST_PERCENT,A14
	MPYU	A14,A1
	MOVI	100,A14
	DIVU	A14,A1
	ADD	A1,A3

PGC_SPEED_MODIFIER
	.if	SHOT_DATA
	MOVE	A3,@RAMTEMP1,W			;INTERCEPT DISTANCE
	.endif

	MOVE	*A9(ODT_VEL+010H),A1,W

;	.if	SHOT_DATA
;	MOVE	A1,@RAMTEMP1+010H,W		;SPEED
;	.endif

	CMPI	ROUGH_PUCK_MAX >> 16,A1
	JRLE	PGC_GET_SPEED_MODIFIER		;BR=UNDER MAXIMUM SPEED
	MOVI	1029,A1				;MAXIMUM SPEED MODIFIER
	JRUC	PGC_PERCENTAGE_SPEED_MODIFIER

PGC_GET_SPEED_MODIFIER
	SUBK	0EH,A1
	.if	SHOT_DATA
	JRN	PGC_SAVE_MESS			;BR=UNDER MINIMUM SPEED
	.else
	JRN	PGC_SAVE			;BR=UNDER MINIMUM SPEED
	.endif
	SLL	4,A1
	ADDI	SPEED_MOD_TABLE,A1
PGC_PERCENTAGE_SPEED_MODIFIER
	MOVE	*A1,A1,W
	MOVI	SPEED_PERCENT,A14
	MPYU	A14,A1
	MOVI	100,A14
	DIVU	A14,A1
	ADD	A1,A3

	.if	SHOT_DATA
	MOVE	A1,@RAMTEMP1+010H,W		;SPEED
	CLR	A14
	.endif

	MOVE	*A8(ODT_GTSAVES),A1,W
	JRZ	PGC_SHOOTER_MODIFIER		;BR=NO REBOUNDS
	CMPI	10,A1
	JRLE	PGC_GET_REBOUND_MODIFIER	;BR=UNDER MAXIMUM REBOUNDS
	MOVK	10,A1

PGC_GET_REBOUND_MODIFIER
	SLL	4,A1
	mmtm	sp,a2
	movb	*a6(POF_NUMBER),a2
	move	a2,a14
	srl	3,a14
	sll	1,a14
	xori	2,a14
	neg	a14
	move	@PLAYER_BITS,a2
	srl	a14,a2
	andi	011b,a2
	mmfm	sp,a2
	jrnz	stih
	addi	tsave_mod_drone_table,a1
	jruc	stind
stih	ADDI	TSAVE_MOD_TABLE,A1
stind	MOVE	*A1,A1,W
	MOVI	REBOUND_PERCENT,A14
	MPYU	A14,A1
	MOVI	100,A14
	DIVU	A14,A1
	ADD	A1,A3

	.if	SHOT_DATA
	MOVE	A1,A14
	.endif

PGC_SHOOTER_MODIFIER
	.if	SHOT_DATA
	MOVE	A14,@RAMTEMP2,W			;REBOUNDS
	.endif

	MOVE	@global_shot_percentage,A1,W
	.if	SHOT_DATA
	JRZ	PGC_SAVE_MESS			;BR=NO CHANCE IN HELL SHOT
	.else
	JRZ	PGC_SAVE			;BR=NO CHANCE IN HELL SHOT
	.endif
	MOVI	SHOOTER_PERCENT,A14
	MPYU	A14,A1
	MOVI	100,A14
	DIVU	A14,A1
	ADD	A1,A3

PGC_COMP_ASS
	.if	SHOT_DATA
	MOVE	A1,@RAMTEMP2+010H,W		;SHOOTER
	.endif

**************************************************************************
*								         *
* ADD DUMMY PLAYER CHECK AND HAVE MISS WEIGH HEAVILY ON PUCK'S SPEED!	 *
*								         *
**************************************************************************

	MOVI	MISS_PERCENT_MODIFIER,A2	;DEFAULT MISS CHANCE PERCENT

	MOVE	@COMP_ASS_OFF,A14,W
	JRNZ	PGC_CHECK_ATTEMPTS		;BR=COMPUTER ASSISTANCE OFF

	MOVE	@team1_score,A0,W
	MOVE	@team2_score,A1,W
	SUB	A0,A1
	MOVE	A1,A0
	ABS	A0
	CMPI	MAX_SCORE_DIFF,A0
	JRLE	PGC_CA_CHECK_MIN		;BR=UNDER MAXIMUM DIFFERENCE
	MOVK	MAX_SCORE_DIFF,A0
PGC_CA_CHECK_MIN
	CMPI	MIN_SCORE_DIFF,A0
	JRLT	PGC_CHECK_ATTEMPTS		;BR=USE DEFAULT PERCENTAGE

	CLR	A14
	MOVE	@minutes,B14,W
	CMPI	2,B14
	JRGE	PGC_CA_GET_TABLE		;BR=MORE THAN 2 MINUTES LEFT
	INC	A14
	CMPI	1,B14
	JRGE	PGC_CA_GET_TABLE		;BR=MORE THAN 1 MINUTE LEFT

	MOVE	@tenseconds,B14,W
	INC	A14
	CMPI	3,B14
	JRGE	PGC_CA_GET_TABLE		;BR=MORE THAN 30 SECONDS LEFT
	INC	A14
	CMPI	1,B14
	JRGE	PGC_CA_GET_TABLE		;BR=MORE THAN 10 SECONDS LEFT
	INC	A14
PGC_CA_GET_TABLE
	SLL	5,A0
	ADDI	SCORE_DIFF_TABLES-020H,A0
	MOVE	*A0,A0,L			;GET TABLE
	JRZ	PGC_CHECK_ATTEMPTS		;BR=NO TABLE

	SLL	4,A14
	ADD	A14,A0
	MOVE	*A0,A14,W			;GET ENTRY

	MOVB	*B6(POF_NUMBER),B14
	MOVE	B14,B10
	SRL	3,B10
	SLL	1,B10				;SHIFT VALUE
	XORI	2,B10				;TOGGLE OTHER TEAM
	NEG	B10				;RIGHT SHIFT VALUE
	MOVE	@PLAYER_BITS,B2,W
	SRL	B10,B2
	ANDI	011B,B2
	JRZ	PGC_CHECK_ATTEMPTS		;BR=ALL DRONE TEAM

	MOVE	A1,A1
	JRNN	PGC_CA_CHECK_RIGHT		;BR=RIGHT TEAM LEADING
;	MOVB	*B6(POF_NUMBER),B14		;LEFT TEAM LEADING
	SUBK	4,B14
	JRZ	PGC_CA_ADD_MODIFIER		;BR=SHOT ON LEFT GOALIE,INCREASE
	SLL	1,A14
	NEG	A14				;SHOT ON RIGHT GOALIE, REDUCE
	JRUC	PGC_CA_ADD_MODIFIER

PGC_CA_CHECK_RIGHT
;	MOVB	*B6(POF_NUMBER),B14		;RIGHT TEAM LEADING
	SUBK	8,B14
	JRZ	PGC_CA_ADD_MODIFIER		;BR=SHOT ON RGHT GOALIE,INCREASE
	SLL	1,A14
	NEG	A14				;SHOT ON LEFT GOALIE, REDUCE

PGC_CA_ADD_MODIFIER
	ADD	A14,A2
PGC_CHECK_ATTEMPTS
	MOVE	@SHOTIRQ,A0,L
	MOVE	@PUCK_NEWDIR_TIME,A1,L
	CMP	A0,A1
	JRNE	PGC_PERCENTAGE			;BR=PUCK WAS TOUCHED

	MOVE	@SHOT_ATTEMPTS,A14,W
	CMPI	MAX_SHOT_ATTEMPT,A14
	JRLE	PGC_GET_ATTEMPT_THINGY		;BR=UNDER MAXIMUM ATTEMPTS
	MOVK	MAX_SHOT_ATTEMPT,A14		;SET TO MAXIMUM
PGC_GET_ATTEMPT_THINGY
	DEC	A14
	SLL	4,A14

	mmtm	sp,a1,a2
	movb	*a6(POF_NUMBER),a2
	move	a2,a1
	srl	3,a1
	sll	1,a1
	xori	2,a1
	neg	a1
	move	@PLAYER_BITS,a2
	srl	a1,a2
	andi	011b,a2
	mmfm	sp,a1,a2
	jrnz	sgah
	addi	shot_attempt_drone_table,a14
	jruc	sgac
sgah	ADDI	SHOT_ATTEMPT_TABLE,A14
sgac	MOVE	*A14,A14,W
	ADD	A14,A2
PGC_PERCENTAGE
	.if	SHOT_DATA
	MOVE	A3,@RAMTEMP3,W			;TOTAL
	.endif

	MPYU	A2,A3				;MODIFY MISS CHANCE
	MOVI	100,A14
	DIVU	A14,A3

	MOVI	1024,A0				;100% SAVE CHANCE
	SUB	A3,A0				;MINUS MISS CHANCE

	.if	SHOT_DATA
	MOVE	A0,@RAMTEMP3+010H,W
	.endif

	MOVE	A0,A0
	JRN	PGC_MISS			;BR=MISS!
	CALLA	RANDPER
	JRNC	PGC_MISS			;BR=MISS!

;	move	@GAME_STATE,a0,W
;	cmpi	INAMODE,a0
;	jrz	nad1
;	move	@PUCK_MODE,a0,W
;	cmpi	PUM_FACEOFF,a0
;	jrhs	nad1
;	MOVI	AUD_GOALIE_SAVES,A0
;	CALLA	AUD1
;nad1
	.if	SHOT_DATA
	JRUC	PGC_SAVE_NOMESS
PGC_SAVE_MESS
	MMTM	SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
	MMTM	SP,B0,B1,B3,B4,B5,B6
	CALLA	CLRTEXT
	MOVI	SAVE_MESS,A8
	JSRP	LM_PRINTF
	MMFM	SP,B0,B1,B3,B4,B5,B6
	MMFM	SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
	MOVK	1,A10				;SAVE!
	JRUC	PGC_DETERMINED_NOMESS
PGC_SAVE_NOMESS
	.endif
PGC_SAVE
	MOVK	1,A10				;SAVE!
	JRUC	PGC_DETERMINED

PGC_MISS
;	move	@GAME_STATE,a0,W
;	cmpi	INAMODE,a0
;	jrz	nads
;	move	@PUCK_MODE,a0,W
;	cmpi	PUM_FACEOFF,a0
;	jrhs	nads
;	MOVI	AUD_GOALIE_MISSES,A0
;	CALLA	AUD1
;nads

**************************************************************************
*								         *
* DETERMINED								 *
*								         *
**************************************************************************
PGC_DETERMINED
	.if	SHOT_DATA
	MMTM	SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
	MMTM	SP,B0,B1,B3,B4,B5,B6
	CALLA	CLRTEXT
	MOVI	CHANCE_MESS,A8
	JSRP	LM_PRINTF
	MMFM	SP,B0,B1,B3,B4,B5,B6
	MMFM	SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
PGC_DETERMINED_NOMESS
	.endif

	BTST	0,A11
	JRZ	PGC_SET_GSAVE
	SRL	4,A11
	SLL	4,A11
	JUMP	A11				;SAVE ROUTINE
PGC_SET_GSAVE
	SRL	4,A11
	SLL	4,A11
	MOVE	A11,*A8(ODT_GSAVE),L		;SAVE
PGC_SET_IMPACT
	MOVE	B7,*B8(ODT_GZIMPACT),L		;SAVE IMPACT POINT
	MOVE	B9,*B8(ODT_GXIMPACT),L

	CLR	A14
	MOVE	A14,*A8(ODT_VEL),L
	MOVE	A14,*A8(OXVEL),L
	MOVE	A14,*A8(OZVEL),L

	MOVE	A5,A1

	MOVE	*A8(ODT_GFLAGS),A5,W
	ANDNI	M_TMOVE|M_SAVEMADE|M_MISSSAVE|M_GLOVESIDE,A5
	ORI	M_FREEZE|M_PUCKCHECK,A5

	MOVE	A1,A1
	JRNN	PGC_DOIT			;BR=PUCK ON BLOCKER SIDE
	ORI	M_GLOVESIDE,A5			;PUCK ON GLOVE SIDE
PGC_DOIT
	MOVE	A10,A10
	JRNZ	PGC_SET_SAVE			;BR=DON'T MISS

	MOVK	1,A14
	MOVE	A14,@GOALIE_MISS,W		;GIVE IT UP!

	ANDNI	M_PUCKCHECK,A5
	ADDK	M_MISSSAVE,A5
	MOVE	A5,*A8(ODT_GFLAGS),W

	MOVE	*A8(ODT_GSAVE),A14,L		;SAVE
	SRL	4,A14
	SLL	4,A14

	CMPI	SET_GKO_SCRIPT,A14
	JRNE	PGC_CHECK_BUTT_MISS		;BR=NOT KO MISS
	SUBK	4,A4
	JRP	PGC_SET_MISS			;BR=TIME OKAY
	MOVK	1,A4				;NO TIME TO LOSE
	MOVE	A4,*A8(ODT_GSAVETIME),W
	JRUC	PGC_START_ANIM

PGC_CHECK_BUTT_MISS
	CMPI	SET_GFULLBUTT_SCRIPT,A14
	JRNE	PGC_NORM_MISS			;BR=NOT EARLY BUTTERFLY
	SUBK	3,A4				;MAKE BUTTERFLY EARLY
	JRP	PGC_SET_MISS			;BR=TIME OKAY
	MOVK	1,A4				;NO TIME TO LOSE
	MOVE	A4,*A8(ODT_GSAVETIME),W
	JRUC	PGC_START_ANIM

PGC_NORM_MISS
	INC	A4				;MAKE A LITTLE MORE LATE
PGC_SET_MISS
	MOVE	A4,*A8(ODT_GSAVETIME),W
	JRUC	PGC_DONE

PGC_CHECK_MISS
	MOVE	*A6(POF_MODE),A14,W
	CMPI	PM_GSAVE,A14
	JREQ	PGC_DONE			;BR=ALREADY SAVIN'

	MOVE	*A8(ODT_GSAVETIME),A7,W		;ALSO MISS TIMER
	DEC	A7
	JRZ	PGC_START_ANIM			;BR=ANIMATE!
	MOVE	A7,*A8(ODT_GSAVETIME),W
	JRUC	PGC_DONE

PGC_SET_SAVE
	MOVE	A5,*A8(ODT_GFLAGS),W
	MOVE	A7,*A8(ODT_GSAVETIME),W

PGC_CHECK_SAVETIME
	MOVE	*A8(ODT_GSAVETIME),A7,W
	SUB	A7,A4
	JRP	PGC_DONE			;BR=DON'T SAVE ON THIS TICK
PGC_START_ANIM
	MOVE	@WAVEIRQS,A14,L			;TIME OF ANIMATION START
	MOVE	A14,*A8(ODT_GCOMPTIME),L

;	MOVK	30,A0
;	MOVK	10,A1
;	CALLA	RANGERND
;	MOVB	A0,*A8(ANIMLOOP)		;MISS HOLD TIME

	CLR	A14
	MOVB	A14,*A6(POF_BDIRECTION)

	MOVK	PM_GSAVE,A14
	MOVE	A14,*A6(POF_MODE),W
	CALLA	take_player_control

;	MOVE	*A6(POF_FLAGS),A14,W
;	ORI	M_PF_TRAILS,A14
;	MOVE	A14,*A6(POF_FLAGS),W


	MOVE	*A8(ODT_GSAVE),A0,L
	MOVE	A0,A14
	SLL	28,A14
	SRL	28,A14
;	JRZ	PGC_SAVE_FIX_N_JUMP		;BR=NO SAVE DIRECTION
	JRZ	PGC_SAVE_JUMP			;BR=NO SAVE DIRECTION
	MOVB	A14,*A6(POF_DIRECTION)
	XOR	A14,A0
	MOVE	A0,*A8(ODT_GSAVE),L
;	JRUC	PGC_SAVE_JUMP
;PGC_SAVE_FIX_N_JUMP
;	CALLA	FIX_GOALIE_DIR
PGC_SAVE_JUMP
	JUMP	A0

PGC_RESET
	MOVE	*A8(ODT_GFLAGS),A14,W
	MOVE	A14,A1
	ANDI	M_FREEZE|M_TMOVE,A14
	JRZ	PGC_DONE
	XOR	A14,A1
	ORI	M_PUCKCHECK,A1
	MOVE	A1,*A8(ODT_GFLAGS),W

	CLR	A14
	MOVE	A14,*A8(ODT_GSAVETIME),W
PGC_DONE
	RETS

	.if	SHOT_DATA
CHANCE_MESS
	.if	BILL & 1

	MESS_MAC RD5FONT,2,85,160,COLOR_PBLACK,STRRNRMO,OID_TEXT
	.STRING	"%d\n%d\n%d\n%d\n%d\n%d",0
	.LONG	RAMTEMP1
	.LONG	RAMTEMP1+010H
	.LONG	RAMTEMP2
	.LONG	RAMTEMP2+010H
	.LONG	RAMTEMP3
	.LONG	RAMTEMP3+010H
	.EVEN

	.else

	MESS_MAC RD5FONT,2,85,240,COLOR_PBLACK,STRRNRMO,OID_TEXT
	.STRING	"%d",0
	.LONG	RAMTEMP3+010H
	.EVEN

	.endif

SAVE_MESS
	MESS_MAC RD5FONT,2,85,240,COLOR_PBLACK,STRRNRMO,OID_TEXT
	.STRING	"SAVE",0
	.EVEN

	.endif

**************************************************************************
*								         *
* SAVE TABLES								 *
*								         *
**************************************************************************

;	.word	YOFFSET LIMIT
;	WWL	DISTANCE LIMIT AND SIDE, TIME, SAVE

ST_ENTRY_SIZE	EQU	010H+010H+020H

STAND_SAVE_TABLE
	.word	0,ST_ENTRY_SIZE*7
	WWL	-049H,7,PGC_GRPADST+1
;	WWL	-011H,7,PGC_GRPADST+1
	WWL	-011H,3,PGC_GGSKATE+1
	WWL	-006H,6,PGC_FULLBUTT+1
	WWL	 005H,3,PGC_STICK+1	;2+1
	WWL	 010H,6,PGC_FULLBUTT+1
	WWL	 048H,3,PGC_GSSKATE+1
;	WWL	 048H,7,PGC_GLPADST+1
	WWL	 07FH,7,PGC_GLPADST+1

	.word	-010H,ST_ENTRY_SIZE*5
	WWL	-049H,7,PGC_GRPADST+1
;	WWL	-011H,7,PGC_GRPADST+1
	WWL	-011H,3,PGC_GGSKATE+1
	WWL	 010H,6,PGC_FULLBUTT+1
	WWL	 048H,3,PGC_GSSKATE+1
;	WWL	 048H,7,PGC_GLPADST+1
	WWL	 07FH,7,PGC_GLPADST+1

	.word	-021H,ST_ENTRY_SIZE*5
	WWL	-049H,0,0
	WWL	-011H,3,PGC_GGLOVE_MID+1
	WWL	 010H,3,PGC_GBODY+1
	WWL	 048H,3,PGC_GBLOCKER_MID+1
	WWL	 07FH,0,0

	.word	-07FH,ST_ENTRY_SIZE*5
	WWL	-049H,0,0
	WWL	-011H,6,PGC_GGLOVE+1
	WWL	 010H,3,PGC_GHGLOVE+1
	WWL	 048H,6,PGC_GBLOCKER+1
	WWL	 07FH,0,0

	.word	1

**************************************************************************
*								         *
* REGISTERS FOR PGC FUNCTIONS:						 *
*								         *
* A4  = TIME TIL INTERCEPT (MAKE NON-POSITIVE FOR SAVE ON THIS TICK)	 *
* A5  = INTERCEPT DISTANCE FROM GOALIE (NEGATIVE IF GLOVE SIDE)		 *
* A6  = PLAYER BLOCK							 *
* A7  = TICKS TIL IMPACT FRAME IN SAVE ANIMATION			 *
* A8  = GOALIE OBJECT							 *
* A9  = PUCK OBJECT							 *
* A10 = SAVE IF = 1, MISS IF = 0					 *
* 									 *
* A0, A1, A2, A3, A11, A14 FREE						 *
* 									 *
* B0  = NOT DIRECTION 3 OR 7 FLAG					 *
* B1  = ONLY VALID IF B0 IS NON-ZERO					 *
*       DIRECTION 4 OR 8 FLAG (ZERO IF DIRECTION 2 OR 6)		 *
* B3  = RIGHT GOALIE FLAG (ZERO IF LEFT GOALIE)				 *
* B4  = SAVE DIRECTION							 *
* B5  = PUCK Z DESTINATION @ GOALLINE					 *
* B6  = PLAYER BLOCK							 *
* B7  = Z IMPACT POINT							 *
* B8  = GOALIE OBJECT							 *
* B9  = X IMPACT POINT							 *
*								         *
* B2, B10, B14 FREE							 *
*								         *
**************************************************************************

**************************************************************************
*								         *
* PGC_GBODY								 *
*								         *
**************************************************************************

PGC_GBODY
	MOVI	SET_GBODY_SCRIPT,A11
	JRUC	PGC_GHG_GO

**************************************************************************
*								         *
* PGC_GHGLOVE								 *
*								         *
**************************************************************************

PGC_GHGLOVE
	MOVI	SET_GHGLOVE_SCRIPT,A11
PGC_GHG_GO
	MOVE	A10,A10
	JRNZ	PGC_CHG_CHECK_BOUNCE		;SAVE!

	movb	*a6(POF_NUMBER),a1
	dec	a1
	srl	2,a1
	dec	a1
	abs	a1
	calla	get_potential_scorer
	move	a0,a0
	jrz	PGC_GHG_CHECK_KO		;BR=NONE
	GBLOCK	a0,a0
	move	*a0(POF_HOT_VALUE),a0,W
	cmpi	18,a0
	jrlt	PGC_GHG_CHECK_KO		;BR=ON FIRE DON'T KO
PGC_GHG_NO_KO
	MOVK	1,A10				;DON'T SLIDE INTO GOAL
	JRUC	PGC_GHG_SET 

;PGC_CHG_G_CHECK
;	MOVE	A10,A10
;;	JRNZ	PGC_GHG_SET			;SAVE!
;	JRZ	PGC_GHG_CHECK_KO		;MISS!

PGC_CHG_CHECK_BOUNCE
	MOVI	511,A0
	CALLA	RANDPER
	JRNC	PGC_GHG_SET			;BR=SAVE!

;	CLR	A10				;MISS!

PGC_GHG_CHECK_KO	      

	MOVE	*A9(ODT_VEL),A14,L
	CMPI	[24,0],A14
	JRLT	PGC_GHG_NO_KO			;BR=NOT FAST ENOUGH			

	MOVE	*A8(OXVAL),A2,L
	ABS	A2

	MOVE	B0,B0
	JRNZ	PGC_GHG_2OR8			;BR=NOT DIRECTION 3

	CMPI	029E0000H,A2
	JRLT	PGC_GHG_KO			;BR=WITHIN X LIMIT
	JRUC	PGC_GHG_SET 
			
PGC_GHG_2OR8
	BTST	2,B4
	JRNZ	PGC_GHG_KO			;BR=DIRECTION 4 OR 6

	CMPI	027E0000H,A2
	JRGT	PGC_GHG_SET			;BR=BEYOND X LIMIT FOR DIR 2(8)
			
PGC_GHG_KO
	MOVK	1,A7
	MOVI	SET_GKO_SCRIPT,A11

PGC_GHG_SET
;	MOVK	1,A10				;DON'T MISS					
	MOVE	A11,*A8(ODT_GSAVE),L		;SAVE
	JRUC	PGC_SET_IMPACT

**************************************************************************
*								         *
* PGC_GGLOVE								 *
*								         *
**************************************************************************

PGC_GGLOVE_MID
	MOVK	2,A1
	MOVK	3-2,A2
	JRUC	PGC_GGL_GO
PGC_GGLOVE
	CLR	A1
	MOVK	1,A2
PGC_GGL_GO
	MOVI	SET_GGLOVE_SCRIPT,A11

	MOVE	A4,A14
	SUB	A7,A14
	SUB	A1,A14
	JRP	PGC_GGL_CHECK_QUICK		;BR=GOT ENOUGH TIME

	MOVK	1,A7
	MOVI	SET_GGHOP_SCRIPT,A11
	JRUC	PGC_GGL

PGC_GGL_CHECK_QUICK
	MOVE	A10,A10
	JRZ	PGC_GGL_QUICKER			;BR=MISS ON QUICKER SAVE

	SUB	A2,A14
	JRP	PGC_GGL				;BR=GOT ENOUGH TIME
PGC_GGL_QUICKER
	MOVE	A7,A14
	MOVK	1,A7
	MOVI	SET_GQGLOVE_SCRIPT,A11		;QUICKER
	CMPI	3,A14
	JREQ	PGC_GGL				;BR=LOW GLOVE
	MOVI	SET_GQHGLOVE_SCRIPT,A11		;QUICKER, HIGH GLOVE
PGC_GGL
	MOVE	A11,*A8(ODT_GSAVE),L		;SAVE
	JRUC	PGC_SET_IMPACT

**************************************************************************
*								         *
* PGC_GBLOCKER								 *
*								         *
**************************************************************************

PGC_GBLOCKER_MID
	MOVK	2,A1
	MOVK	3-2,A2
	JRUC	PGC_GBL_GO
PGC_GBLOCKER
	CLR	A1
	MOVK	1,A2
PGC_GBL_GO
	MOVI	SET_GBLOCKER_SCRIPT,A11

	MOVE	A4,A14
	SUB	A7,A14
	SUB	A1,A14
	JRP	PGC_GBL_CHECK_QUICK		;BR=GOT ENOUGH TIME

	MOVK	1,A7
	MOVI	SET_GBHOP_SCRIPT,A11
	JRUC	PGC_GBL

PGC_GBL_CHECK_QUICK
	MOVE	A10,A10
	JRZ	PGC_GBL_QUICKER			;BR=MISS ON QUICKER SAVE

	SUB	A2,A14
	JRP	PGC_GBL				;BR=GOT ENOUGH TIME
PGC_GBL_QUICKER
	MOVE	A7,A14
	MOVK	1,A7
	MOVI	SET_GQBLOCKER_SCRIPT,A11	;QUICKER
	CMPI	3,A14
	JREQ	PGC_GBL				;BR=LOW BLOCKER
	MOVI	SET_GQHBLOCKER_SCRIPT,A11	;QUICKER, HIGH BLOCKER
PGC_GBL
	MOVE	A11,*A8(ODT_GSAVE),L		;SAVE
	JRUC	PGC_SET_IMPACT

**************************************************************************
*								         *
* PGC_GGSKATE								 *
*								         *
**************************************************************************

PGC_GGSKATE
	MOVI	PGC_GRPADST,B10			;PAD STACK ROUTINE
	MOVI	SET_GGSKATE_SCRIPT,A11		;SAVE
	MOVI	SET_GQGSKATE_SCRIPT,B2		;QUICKER SAVE
	JRUC	PGC_GSKATE

**************************************************************************
*								         *
* PGC_GSSKATE								 *
*								         *
**************************************************************************

PGC_GSSKATE
	MOVI	PGC_GLPADST,B10			;PAD STACK ROUTINE
	MOVI	SET_GSSKATE_SCRIPT,A11		;SAVE
	MOVI	SET_GQSSKATE_SCRIPT,B2		;QUICKER SAVE
PGC_GSKATE
;	CMPI	TOP_GOALPOST_Z,B5
;	JRGT	PGC_GSS_CHECK_QUICK		;BR=ABOVE GOAL
;	CMPI	BOT_GOALPOST_Z,B5
;	JRLT	PGC_GSS_CHECK_QUICK		;BR=BELOW GOAL
;
;	CMPI	TOP_GOALPOST_Z+0BH,B5
;	JRGT	PGC_RESET			;BR=ABOVE GOAL
;	CMPI	BOT_GOALPOST_Z-0BH,B5
;	JRLT	PGC_RESET			;BR=BELOW GOAL

	MOVE	A10,A10
	JRZ	PGC_GSS_QUICKER			;BR=MISS ON QUICKER SAVE

	MOVE	*A8(OXVAL),A0,L
	MOVE	*A8(OZVAL),A1,L

	MOVI	LEFT_GOALLINE_X,A2

	MOVE	B3,B3
	JRZ	PGC_GSS_ANGLE			;BR=ON THE LEFT
	NEG	A2				;RIGHT GOALLINE X
PGC_GSS_ANGLE
	MOVI	CENTER_Z,A3
	CALLA	find_dir_to_point
	MOVE	A0,A1

	MOVB	*A6(POF_DIRECTION),A0
	CALLA	dir_to_degrees			;GET GOALIE FACING ANGLE

	MOVB	*A6(POF_NUMBER),A14
	SUBK	4,A14
	JRNZ	PGC_GSS_DIFF			;BR=ON THE LEFT SIDE
	THETA_H	A0
	THETA_H	A1
PGC_GSS_DIFF
	SUB	A0,A1
	ABS	A1

	CMPI	XD0250,A1
	JRGE	PGC_GSS_PAD_STACK		;BR=ANGLE DIFF TOO MUCH

	CALLA	IS_A8_IN_GOALR
	JRNC	PGC_GSS_CHECK_QUICK		;BR=SKATE SAVE
PGC_GSS_PAD_STACK
	JUMP	B10				;DO PAD STACK

PGC_GSS_CHECK_QUICK
	MOVE	A4,A14
	SUB	A7,A14
	SUBK	5,A14
	JRP	PGC_GSS_SET			;BR=GOT ENOUGH TIME
PGC_GSS_QUICKER
	MOVK	1,A7
	MOVE	B2,A11
PGC_GSS_SET
	MOVE	A11,*A8(ODT_GSAVE),L		;SAVE
	JRUC	PGC_SET_IMPACT

**************************************************************************
*								         *
* PGC_GLPADST								 *
*								         *
**************************************************************************

PGC_GLPADST
;	CMPI	TOP_GOALPOST_Z,B5
;	JRGT	PGC_RESET			;BR=ABOVE GOAL
;	CMPI	BOT_GOALPOST_Z,B5
;	JRLT	PGC_RESET			;BR=BELOW GOAL

;	MOVK	3,A7
;	MOVI	SET_GBSPLIT_SCRIPT,B14
;	JRUC	PGC_GLP_SAVE

	MOVI	SET_GLPADST_SCRIPT,B14

	MOVE	A4,A14
	SUB	A7,A14
	JRP	PGC_GLP				;BR=GOT ENOUGH TIME

	MOVE	*A9(OYPOS),A14,W
	CMPI	-080000H,A14
	JRLE	PGC_QUICKIE			;BR=TOO HIGH FOR THE SPLIT

	MOVE	A4,A14
	SUBK	4,A14
	JRZ	PGC_QUICKIE			;BR=QUICKIE
	JRN	PGC_QUICKIE			;BR=QUICKIE

;	MOVE	B0,B0
;	JRZ	PGC_QUICKIE

	MOVK	3,A7
	MOVI	SET_GBSPLIT_SCRIPT,B14
	JRUC	PGC_GLP_SAVE
PGC_QUICKIE
	CLR	A4
	MOVI	SET_GQLPADST_SCRIPT,B14		;QUICKER
PGC_GLP
	MOVE	B0,B0
	JRZ	PGC_GLP_SAVE			;BR=DIRECTION 3 OR 7

	MOVE	*A8(OXVAL),A0,L
	ABS	A0
	MOVE	*A9(OXVAL),A1,L
	ABS	A1
	CMP	A0,A1
	JRGT	PGC_GLP_SAVE			;BR=PUCK BEHIND GOALIE X-PLANE

	MOVE	*A8(OZVAL),A0,L
	CMPI	TOP_GOALPOST_Z,A0
	JRGT	PGC_GLP_SAVE			;BR=ABOVE GOAL
	CMPI	BOT_GOALPOST_Z,A0
	JRLT	PGC_GLP_SAVE			;BR=BELOW GOAL

;	CALLA	IS_A8_IN_GOALR
;	JRNC	PGC_GLP_SAVE			;BR=NORMAL PAD STACK

;	MOVE	*A13(PGDIMPACT),A14,L
	MOVE	*A13(PGXIMPACT),A14,L
	JRZ	PGC_GLP_SAVE			;BR=NO ANGLE 3(7) DATA

;	MOVE	*A13(PGXIMPACT),A14,L
	MOVE	A14,B9
	MOVE	*A13(PGZIMPACT),A14,L
	MOVE	A14,B7

	MOVK	3,B4
	MOVE	B3,B3
	JRZ	PGC_GLP_SET_SAVE		;BR=ON THE LEFT
	MOVK	7,B4
PGC_GLP_SET_SAVE
	ADD	B14,B4
	MOVE	B4,*B8(ODT_GSAVE),L		;SAVE

	MOVE	A4,A4
	JRZ	PGC_GLP_TIME_OKAY
	MOVE	*A13(PGTIMPACT),A4,L
	SRA	16,A4				;A4 = TIME WITH NO FRICTION
	DEC	A4
	JRNN	PGC_GLP_TIME_OKAY
	CLR	A4
PGC_GLP_TIME_OKAY
	MOVI	0100000H,B14
	JRUC	PGC_ROTATE

PGC_GLP_SAVE
	ADD	B14,B4
	MOVE	B4,*B8(ODT_GSAVE),L		;SAVE

	MOVI	0100000H,B14
	JRUC	PGC_ROTATE

**************************************************************************
*								         *
* PGC_GRPADST								 *
*								         *
**************************************************************************

PGC_GRPADST
;	CMPI	TOP_GOALPOST_Z,B5
;	JRGT	PGC_RESET			;BR=ABOVE GOAL
;	CMPI	BOT_GOALPOST_Z,B5
;	JRLT	PGC_RESET			;BR=BELOW GOAL

;	MOVK	3,A7
;	MOVI	SET_GGSPLIT_SCRIPT,B14
;	JRUC	PGC_GLP_SAVE

	MOVI	SET_GRPADST_SCRIPT,B14

	MOVE	A4,A14
	SUB	A7,A14
	JRP	PGC_GLP				;BR=GOT ENOUGH TIME

	MOVE	*A9(OYPOS),A14,W
	CMPI	-080000H,A14
	JRLE	PGC_GRP_QUICKIE			;BR=TOO HIGH FOR THE SPLIT

	MOVE	A4,A14
	SUBK	4,A14
	JRZ	PGC_GRP_QUICKIE			;BR=QUICKIE
	JRN	PGC_GRP_QUICKIE			;BR=QUICKIE

;	MOVE	B0,B0
;	JRZ	PGC_GRP_QUICKIE

	MOVK	3,A7
	MOVI	SET_GGSPLIT_SCRIPT,B14
	JRUC	PGC_GLP_SAVE
PGC_GRP_QUICKIE
	CLR	A4
	MOVI	SET_GQRPADST_SCRIPT,B14		;QUICKER
	JRUC	PGC_GLP


**************************************************************************
*								         *
* PGC_STICK								 *
*								         *
**************************************************************************

PGC_STICK
	MOVE	A10,A10
	JRZ	PGC_S_BUTT			;BR=MISS ON BUTTERFLY

	MOVI	0160000H,B14
	MOVI	SET_GSTICK_SCRIPT,A14
	MOVE	A14,*A8(ODT_GSAVE),L		;STICK SAVE

	MOVE	*A9(ODT_VEL),A14,L
	CMPI	GSLOW_PUCK,A14
	JRLE	PGC_S_GO			;BR=MOVING SLOW ENOUGH

	MOVI	748,A0
	CALLA	RANDPER
	JRC	PGC_S_GO			;BR=USE STICK SAVE

PGC_S_BUTT
	MOVI	0200000H,B14			;2(8) OFFSET
	MOVI	SET_GFULLBUTT_SCRIPT,A14
	MOVE	A14,*A8(ODT_GSAVE),L		;BUTTERFLY STICK SAVE
	MOVB	*A6(POF_DIRECTION),A14		;GET GOALIE DIRECTION
	SUBK	2,A14
	JRZ	PGC_S_GO			;BR=DIRECTION 2
	SUBK	6,A14
	JRZ	PGC_S_GO			;BR=DIRECTION 8
	MOVI	0300000H,B14
PGC_S_GO
	MOVE	B3,B3
	JRZ	PGC_ROTATE			;BR=ON THE LEFT
	NEG	B14				;ON THE RIGHT
	XORI	010B,B1
	JRUC	PGC_ROTATE


**************************************************************************
*								         *
* PGC_FULLBUTT								 *
*								         *
**************************************************************************

PGC_FULLBUTT
	MOVI	SET_GFULLBUTT_SCRIPT,A14
	MOVE	A14,*A8(ODT_GSAVE),L		;SAVE

	MOVE	A10,A10
	JRNZ	PGC_FB_GO			;BR=SAVE!
	MOVE	A5,A14
	ABS	A14
	SUBK	10,A14
	JRP	PGC_FB_GO			;BR=NO FIVE HOLE
	MOVK	1,A14
	MOVE	A14,@FIVE_HOLE,W		;THROUGH THE FIVE HOLE

PGC_FB_GO
	MOVI	0200000H,B14
	MOVE	B3,B3
	JRZ	PGC_CHECK_TRAPEZOID		;BR=ON THE LEFT
	NEG	B14
	XORI	010B,B1
PGC_CHECK_TRAPEZOID
;	MOVE	B0,B0
;	JRNZ	PGC_ROTATE_FUDGE		;BR=NOT DIRECTION 3 OR 7

	MOVE	A5,A14
	ABS	A14
	SUBK	4,A14
;	JRZ	PGC_ROTATE			;BR=ON THE TOP PART
;	JRN	PGC_ROTATE			;BR=ON THE TOP PART

	MOVE	A14,B5
	SUBK	12,B5
	ABS	B5
	MPYS	B14,B5
	MOVK	12,B14
	DIVS	B14,B5
	MOVE	B5,B14

PGC_ROTATE
	MOVE	B0,B0
	JRNZ	PGC_ROTATE_FUDGE		;BR=NOT DIRECTION 3 OR 7

	ADD	B14,B9
	JRUC	PGC_SET_IMPACT

PGC_ROTATE_FUDGE
	MOVE	B14,A1
	MOVI	0B505H,A0
	CALLA	MULT
	MOVE	A1,B14
	ADD	B14,B9				;OFFSET X
	ABS	B14

	BTST	1,B1
	JRZ	PGC_OFFZ_BUTTFLY		;BR=DIRECTION 2 OR 8
	NEG	B14
PGC_OFFZ_BUTTFLY
	SUB	B14,B7
	JRUC	PGC_SET_IMPACT


**************************************************************************
*								         *
* puck_player_check							 *
*								         *
**************************************************************************

puck_player_check
	move	@PUCK_MODE,a0,W
	cmpi	99,a0			;are we in just scored goal mode?
	jrhs	papc_9			;br= yes, noone can touch it
	callr	check_puck_intended_player
	move	@PUCK_CONTROL,a0,W
	jrnz	papc_9
	jruc	check_puck_any_player
papc_9	rets

check_puck_intended_player
	move	@PUCK_INTENDED,a0,W
	jrz	cpip_9
	GBLOCK	a0,a6
	movb	*a6(POF_IGNORE_PUCK),a14
	jrnz	cpip_9
	callr	find_quick_player_to_puck
	move	a7,a7
	jrnz	cpiy1		;if we were the closer point, no need to check puck point in net
	mmtm	sp,a2
	move	b0,a2
	calla	are_we_inside_goal
	mmfm	sp,a2
	jrnc	cpiy1
	rets			;our point was inside goal, no control
cpiy1	move	*a6(POF_S_HAND),a14,L
	move	*a14(PS_HN_INT_CONTROL),a14,L
	jruc	puck_control_in

check_puck_any_player
	callr	find_closest_player_to_puck
	move	a3,a3
	jrn	cpip_9
	GBLOCK	a3,a6

	MOVE	*A6(POF_FLAGS),A14,W
	BTST	B_PF_GOALIE,A14
	JRZ	CPAP_PLAYER			;BR=NOT A GOALIE

	MOVE	*A6(POF_OBJECT),A14,L
	MOVE	*A14(ODT_GFLAGS),A14,W
	BTST	B_PUCKCHECK,A14
	JRZ	cpip_9				;BR=IGNORE THE PUCK

	MOVE	@PUCK_LAST_CONTROL,A14,W
	CMP	A3,A14
	JRNE	cpapao				;BR=NOT DA GOALIE

	MOVE	@PUCK_MODE,A14,W
	CMPI	PUM_PASS,A14
	JREQ	cpip_9				;BR=JUST PASSED PUCK
	CMPI	PUM_TPASS,A14
	JREQ	cpip_9				;BR=JUST TURBO PASSED PUCK
	JRUC	cpapao

CPAP_PLAYER
	move	@PUCK_CONTROL_START,a0,L
	move	@WAVEIRQS,a14,L
	sub	a0,a14
	cmpi	8,a14
	jrls	cpip_9
cpapao
;	GBLOCK	a3,a6
	move	@PUCK_INTENDED,a5,W
	cmp	a3,a5
	jrz	cpip_9
	movb	*a6(POF_IGNORE_PUCK),a14
	jrnz	cpip_9
	move	@PUCK_OPEN_CONTROL_TIME,a0,W
	jrz	cpapaok			;if control time is 0, we don't care about last control
	move	@PUCK_LAST_CONTROL,a0,W
	cmp	a0,a3
	jrz	cpip_9
cpapaok	move	a3,a0		;player to a0
	move	*a6(POF_S_HAND),a7,L
	move	*a7(PS_HN_OFF_CONTROL),a7,L
	calla	get_offense_mode
	move	a1,a1
	jrz	cpap_3
	move	*a6(POF_S_HAND),a7,L
	move	*a7(PS_HN_DEF_CONTROL),a7,L
cpap_3	move	a7,a14
puck_control_in
	move	@PUCK_OBJECT,a8,L
	move	*a6(POF_MODE),a0,W
	cmpi	PM_ONETIME,a0
	jrnz	ca141
	move	*a6(POF_FLAGS),a0,W
	btst	B_PF_OTD,a0
	jrnz	cpip_ignore
;	cmpi	300,a4
;	jrhi	ca141
	jruc	cpip_control		;if we are onetiming, we control always (unless we just had it)
ca141	call	a14
	sll	5,a0
	addi	cpip_l,a0
	move	*a0,a0,L
	jump	a0
cpip_l	.long	cpip_ignore
	.long	cpip_missed
	.long	cpip_rebound
	.long	cpip_control

cpip_ignore
	rets
cpip_missed
	movb	a2,*a6(POF_IGNORE_PUCK)
	rets
cpip_rebound
	move	*a6(POF_FLAGS),a14,W
	btst	B_PF_HUMAN,a14
	jrnz	cpr_a
	movi	500,a0			;50% chance of deflection for drone
	calla	RANDPER
	jrnc	cpip_missed
cpr_a	calla	spx_intercept_bounce
	movb	a2,*a6(POF_IGNORE_PUCK)
	clr	a0
	move	a0,@PUCK_INTENDED,W
	move	a0,@PUCK_LAST_CONTROL,W
	move	a0,@bhit_dest_time,L
	callr	record_puck_a6		;we deflect it, record us in owner record
	move	@WAVEIRQS,@PUCK_NEWDIR_TIME,L
	jruc	put_puck_in_other_direction
cpip_control
GET_PUCK_CONTROL
	movb	*a6(POF_NUMBER),a0
	move	a0,@PUCK_CONTROL,W
	movi	150,a0
	move	a0,*a6(POF_ARROW_TIME),W
	clr	a0
	move	a0,@PUCK_INTENDED,W
	move	a0,@PUCK_LAST_CONTROL,W
	jruc	new_puck_control		;new player has control
cpip_9	rets

record_puck_a0
	mmtm	sp,a0,a1
	jruc	rpo_1
record_puck_a6
	mmtm	sp,a0,a1
	callr	kill_all_trails
	movb	*a6(POF_NUMBER),a0
	cmpi	4,a0
	jrz	rpa6g
	cmpi	8,a0
	jrnz	rpo_1
rpa6g	clr	a1
	move	a1,@PUCK_CONTROL_START,L	;after goalie deflects it, it is anyones puck
	move	a1,@PUCK_OPEN_CONTROL_TIME,W
	move	a1,@PUCK_OPEN_LAST_TIME,W
	calla	set_safe_puck_mode_a1
	jruc	rpo_1

**************************************************************************
*								         *
* LAST_PUCK_OWNER - RETURN THE LAST PLAYER (GOALIE) TO TOUCH THE PUCK	 *
*								         *
* PASS:									 *
* NUTIN'								 *
* RETURN:								 *
* A0 = PLAYER NUMBER							 *
*								         *
**************************************************************************

LAST_PUCK_OWNER
	MOVE	@puck_owner_pointer,A14,L
	SUBK	8,A14
	CMPI	puck_owner_data,A14
	JRHS	LPO_GET					;BR=Q WRAPS
	MOVI	puck_owner_pointer-8,A14
LPO_GET
	MOVB	*A14,A0
	RETS

last_puck_owner_a14
	move	@puck_owner_pointer,a14,L
	subk	8,a14
	cmpi	puck_owner_data,a14
	jrhs	lpg_csc
	movi	puck_owner_pointer-8,a14
lpg_csc	movb	*a14,a14
	rets

record_puck_owner
	mmtm	sp,a0,a1
	move	@PUCK_CONTROL,a0,W
rpo_1	;cmpi	4,a0
	;jrz	rpo2
	;cmpi	8,a0
	;jrnz	rpo3
rpo2	;clr	a1
	;movb	a1,@PLAYER_1_BLOCK+POF_IGNORE_PUCK
	;movb	a1,@PLAYER_2_BLOCK+POF_IGNORE_PUCK
	;movb	a1,@PLAYER_5_BLOCK+POF_IGNORE_PUCK
	;movb	a1,@PLAYER_6_BLOCK+POF_IGNORE_PUCK
	;move	a1,@PUCK_OPEN_CONTROL_TIME,W
rpo3	clr	a14
	move	a14,@global_shot_percentage,W
	move	@puck_owner_pointer,a1,L
	movb	a0,*a1
	addk	8,a1
	cmpi	puck_owner_pointer,a1
	jrlo	npcppa
	movi	puck_owner_data,a1
npcppa	move	a1,@puck_owner_pointer,L
	mmfm	sp,a0,a1
	rets

new_puck_control		;new player has control
	mmtm	sp,a0

;	clr	a0
;	clr	a1
;	clr	a2
;	.ref	do_flash
;	calla	do_flash

	move	@WAVEIRQS,@PUCK_NEWDIR_TIME,L
	MOVE	@PUCK_OBJECT,A0,L	;IS THERE A BETTER PLACE FOR THIS?
	MOVE	*A0(ODT_PFLAGS),A14,W
	ANDNI	M_INFRONT|M_INBACK,A14	;RESET FLAGS
	MOVE	A14,*A0(ODT_PFLAGS),W

	clr	a0
	move	a0,@goal_pass,W		;mark no goal pending
	move	a0,@goal_pcount1,W
	move	a0,@goal_pcount2,W
	move	a0,@bhit_dest_time,L

;	callr	LAST_PUCK_OWNER
;	move	@PUCK_CONTROL,a14,W
;	jrz	snpcr
;	dec	a0
;	dec	a14
;	srl	2,a0
;	srl	2,a14
;	cmp	a0,a14
;	jrz	snpcr			; don't clear out our slow timer, we are hogging the puck with our teammate
	clr	a0
	move	a0,@global_control_slow,L
snpcr	move	@WAVEIRQS,@PUCK_CONTROL_START,L
	move	@PUCK_CONTROL,a0,W
	mmfm	sp,a0
	jrz	nobody
	callr	record_puck_owner
	movi	60,a0
	move	a0,@puck_control_blink,W	;blink players arrow for 1/3 second
	clr	a0
	move	a0,@PUCK_MODE_2,W
	move	a0,@PUCK_MODE_2_DIR,W
	move	a0,@outlaw_puck2,W
	move	@PUCK_CONTROL,a0,W
	move	@hot_player,a14,W
	cmp	a0,a14
	jrnz	nof
	movk	1,a14
	jruc	nof2
nof	clr	a14
nof2	move	a14,@show_puck_on_fire,W
	calla	clear_all_signals
	calla	fix_all_signals
	GBLOCK	a0,a6
	clr	a1
	move	a1,*a6(POF_SAFETY_WARNING),W
	move	a1,*a6(POF_DSP_TIME),L
	move	a1,*a6(POF_DSP_TYPE),W
	move	*a6(POF_BUTTONS),a1,W
	btst	0,a1			;is shoot button in
	jrz	npc_9			;br=no
	movi	onetime_ok_mlist,a3
	calla	check_mode_ok
	jrnc	npc_9

	move	*a6(POF_FLAGS),a14,W
	btst	B_PF_CONTROL,a14
	jrz	npc_9
	btst	B_PF_OTD,a14
	jrnz	npc_9

	move	@PUCK_MODE,a3		;we now allow one timers from any mode
	cmpi	PUM_PASS,a3
	jrz	npct
	cmpi	PUM_TPASS,a3
	jrnz	npc_9
npct	movk	PUM_ONETIME,a1
	callr	set_safe_puck_mode_a1
	move	*a6(POF_OBJECT),a8,L

	calla	take_player_control
	movk	PM_ONETIME,a0
	move	a0,*a6(POF_MODE),W
	movb	*a6(POF_NUMBER),a0
	calla	get_quick_shot_point
	move	*a8(OXVAL),a2,L
	move	*a8(OZVAL),a3,L
	calla	find_dir_to_point_18
	movb	a0,*a6(POF_DIRECTION)
	jauc	set_immediate_onetime_script

npc_9	clr	a0
	jruc	set_safe_puck_mode_a0
nobody	mmtm	sp,a14
	callr	puck_release_check	;we are releasing a puck, make sure it's out of a goal
	calla	clear_all_signals
	callr	set_puck_outlaw
	callr	insure_puck_to_ice
	mmfm	sp,a14
	rets

insure_puck_to_ice
	mmtm	sp,a0,a1,a7		;we use a process
	CREATE	PID_PUCK_INSURE,ipti	;so any changes we make after call
	mmfm	sp,a0,a1,a7		;are checked as well
	rets
ipti	move	@PUCK_CONTROL,a14,W
	jrnz	ipt_9			;somebody has us
	move	@PUCK_OBJECT,a8,L
	move	*a8(OYACCEL),a14,W
	jrn	ipt_ab			;puck is accelerating up?
	jrp	ipt_9			;puck is accelerating down, is ok
	move	*a8(OYVEL),a14,L
	jrn	ipt_ab			;puck is traveling up, without a downward acc.
	jrp	ipt_9			;puck is traveling down, is ok
	move	*a8(OYVAL),a14,L
	jrz	ipt_9			;puck is on ice, ok
ipt_ab	callr	give_puck_gravity	;puck is anywhere else, give it gravity and assume the best
ipt_9	jauc	SUCIDE

set_puck_outlaw
	mmtm	sp,a0,a9
	move	@PUCK_OBJECT,a9,L
	move	*a9(OXVAL),a0,L
	addi	[0,08000h],a0
	sra	16,a0
;	move	*a9(OXPOS),a0,W		;half
	cmpi	-688,a0
	jrlt	pol
	cmpi	688,a0
	jrgt	por
	clr	a0
pox	move	a0,@outlaw_puck,W
	mmfm	sp,a0,a9
	rets
por	movk	1,a0
	jruc	pox
pol	movi	-1,a0
	jruc	pox

onetime_ok_mlist
	.word	0,1,4,-1

puck_release_check
	rets

**************************************************************************
*								         *
* find_closest_player_to_puck_r						 *
* 									 *
* PASS:									 *
* NUTIN'								 *
* 									 *
* RETURN:								 *
* A3 = PLAYER NUMBER (NEGATIVE IF NOBODY)				 *
* A4 = DISTANCE								 *
*								         *
**************************************************************************

find_closest_player_to_puck_r
	MMTM	SP,A0,A1,A2,A5,A6,A7,A8,A9,A10,A11
	CALLR	find_closest_player_to_puck
	MMFM	SP,A0,A1,A2,A5,A6,A7,A8,A9,A10,A11
	RETS

find_closest_player_to_puck
	movi	[32767,0],a4
	move	@PUCK_OBJECT,a9,L
	move	*a9(OYPOS),a10,W
	neg	a10
	clr	a3
	dec	a3		;a3 if negative, then we found noone
	move	@WAVEIRQS,a11,W
	sra	1,a11
	jrc	fcp_0
	movi	FCPLST1,a11
	jruc	fcp_1
fcp_0	movi	FCPLST2,a11
fcp_1	move	*a11+,a0,W
	jrz	fcpxx
	mmtm	sp,a0,a3,a4
	callr	find_quick_player_to_puck_adj
	mmfm	sp,a0,a3,a4
	move	*a8(ODT_FHEIGHT),a14,W
	jrnz	fcpoi
	move	*a8(OSIZEY),a14,W
fcpoi	cmp	a14,a10
	jrhs	fcp_2
	movb	*a6(POF_IGNORE_PUCK),a14
	jrnz	fcp_2
	cmp	a4,a1
	jrhs	fcp_2
	move	a1,a5		;we have a close player, check if moving toward or away
	MOVE	*A6(POF_FLAGS),A14
	BTST	B_PF_GOALIE,A14
	JRNZ	FCP_NEWMIN			;BR=DON'T CHECK THIS FOR GOALIE
	mmtm	sp,a0,a3,a4,a5
	callr	find_quick_to_next_puck_adj
	mmfm	sp,a0,a3,a4,a5
	cmp	a5,a1
	jrhi	fcp_2		;br= puck is moving away from player, it doesn't count
FCP_NEWMIN
	move	a0,a3		;player is in a3
	move	a5,a4		;new min distance in a4
fcp_2	jruc	fcp_1
fcpxx	move	a4,a1
	rets

FCPLST1	.word	8,6,5,4,2,1,0
FCPLST2	.word	4,1,2,8,5,6,0


**************************************************************************
*								         *
* FIND_D_PCENTER_TO_PUCK - FIND DISTANCE FROM CENTER OF PLAYER TO PUCK	 *
* 									 *
* PASS:									 *
* A6 = PLAYER DATA BLOCK						 *
* 									 *
* RETURN:								 *
* A1 = DISTANCE								 *
*								         *
**************************************************************************

;FIND_D_PCENTER_TO_PUCK
;	MOVE	*A6(POF_OBJECT),A8,L
;	MOVE	*A8(OXVAL),A0,L
;	MOVE	*A8(OZVAL),A1,L
;	move	@PUCK_OBJECT,a9,L
;	move	*a9(OXVAL),a2,L
;	move	*a9(OZVAL),a3,L
;fdp1	move	a0,a5
;	sub	a2,a5
;	abs	a5
;	move	a1,a4
;	sub	a3,a4
;	abs	a4
;	add	a4,a5
;	cmpi	[300,0],a5
;	jrgt	fdp_8		;too far to bother with
;	calla	find_dis_to_point_whole
;	move	a4,a1
;	rets
;fdp_8	movi	[32767,0],a4
;	move	a4,a1		;needed in a1 and a4
;	rets

find_quick_to_next_puck_adj		;adj for drone
find_quick_to_next_puck		;takes a6, a7, a8
	move	@PUCK_OBJECT,a9,L
	move	*a9(OXVAL),a2,L
	move	*a9(OZVAL),a3,L
	move	*a9(OXVEL),a14,L
	add	a14,a2
	move	*a9(OZVEL),a14,L
	add	a14,a3
	move	*a8(OXVAL),a0,L
	move	*a8(OZVAL),a1,L
	move	a7,a7
	jrnz	fqtnp1
	calla	get_players_puck_point_o

	move	a0,a2
	sra	16,a2
	movy	a1,a2
	calla	are_we_inside_goal
	jrc	fqtp8			;use regular point only if puck point inside goal
	move	*a9(OXVAL),a2,L

fqtnp1	move	*a8(OXVEL),a14,L
	add	a14,a0
	move	*a8(OZVEL),a14,L
	add	a14,a1
	addi	[0,08000h],a0		;half
	sra	16,a0
	sra	16,a1
	addi	[0,08000h],a2		;half
	sra	16,a2
	sra	16,a3
	calla	find_dist_quick
	move	a4,a1
	rets
fqtp8	movi	[30000,0],a4
	move	a4,a1
	rets

find_quick_player_to_puck_adj		;adjust for drone
find_quick_player_to_puck	;takes a0
	GBLOCK	a0,a6
	move	*a6(POF_OBJECT),a8,L
	move	@PUCK_OBJECT,a9,L
	move	*a9(OXVAL),a2,L
	addi	[0,08000h],a2
	sra	16,a2
	move	*a9(OZPOS),a3,W
	calla	get_players_puck_point_o
	addi	[0,08000h],a0		;half
	sra	16,a0
	move	a0,a14
	movy	a1,a14
	move	a14,b0		;return b0 for check of xy goal later
	sra	16,a1
	calla	find_dist_quick
	move	*a6(POF_D_PUCK),a1,W
	clr	a7
	cmp	a1,a4
	jrls	fqp1
	move	a1,a4
	inc	a7
fqp1	move	a4,a1
	rets


**************************************************************************
*								         *
* create_puck: create puck object and insert on list			 *
*              zero's velocities and position				 *
*              returns a8 = PUCK_OBJECT = puck object			 *
*								         *
**************************************************************************
create_puck
	calla	create_puck_control_indicator
	movi	puck_init,b0
	calla	EASYMAKE
	CALLR	FIX_PUCK_SCALE
	CALLA	CLR_ODATA
	move	a0,a8
	move	a8,@PUCK_OBJECT,L
	movi	puck_shadow_init,b0
	calla	EASYMAKE
	CALLR	FIX_PUCK_SCALE
	move	a0,@PUCK_SHADOW,L

	CREATE	PID_IND,PUCK_PAL_PROC

	rets
;	move	@PUCK_OBJECT,a8,L
;	jruc	reset_puck_position

**************************************************************************
*								         *
* PUCK_PAL_PROC								 *
*								         *
**************************************************************************

PUCK_PAL_PROC
	MOVE	@PUCK_OBJECT,A8,L

	MOVI	PCKSCRN2P,A0
	CALLA	GETFPAL
	MOVI	PCKSCRYx,A0
	CALLA	GETFPAL
	MOVI	PCKSCRYz,A0
	CALLA	GETFPAL

PPP_LUPE
	MOVI	PCKSCRYx,A0
	MOVK	7,A9

;	MOVE	@PUCK_MODE,A1,W
;	CMPI	PUM_ENDPER,A1
;	JREQ	PPP_NORM

	MOVE	@PUCK_CONTROL,A14,W
	JRNZ	PPP_FLASH
;	MOVE	A1,A1
	MOVE	@PUCK_MODE,A14,W
	JRNZ	PPP_FLASH			;BR=PUCK NOT "OPEN"

	MOVI	PCKSCRYz,A0
	MOVK	15,A9
PPP_FLASH
	CALLA	CHANGE_PAL

	SLEEPR	A9

	MOVI	PCKSCRN2P,A0
	CALLA	CHANGE_PAL

	MOVE	@PUCK_CONTROL,A14,W
	JRNZ	PPP_NORM
	MOVE	@PUCK_MODE,A14,W
	JRNZ	PPP_NORM			;BR=PUCK NOT "OPEN"

	MOVK	25,A9
PPP_NORM
	SLEEPR	A9

	JRUC	PPP_LUPE

PCKSCRYx:
   .word   64 
   .word   07c1fh,07f40h,07ee0h,07ea0h,07ee0h,07ee0h,07ea0h,07f00h
   .word   07f20h,07e80h,07ec0h,07e40h,07dc0h,07e60h,07da0h,0316bh
   .word   07741h,05dc0h,0294ah,03ce5h,06661h,02929h,02ce6h,05e20h
   .word   059a2h,05941h,020e7h,028a5h,05140h,02462h,02c00h,018a5h
   .word   01c62h,02020h,01063h,00842h,00000h,00000h,00000h,04296h
   .word   04276h,03e53h,03a33h,03612h,031f1h,02dd0h,02dcfh,031aeh
   .word   029afh,025afh,0298dh,0256ch,0214bh,0212ah,01d2ah,02109h
   .word   01d09h,018e8h,014e8h,01cc7h,01085h,00c84h,00442h,00422h

;PCKSCRYz:
;   .word   64 
;   .word   07c1fh,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h
;   .word   07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07c00h
;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h

PCKSCRYz:
   .word   64 
   .word   07c1fh,07fe0h,07fe0h,07fe0h,07fe0h,07fe0h,07fe0h,07fe0h
   .word   07fa0h,07fa0h,07f80h,07f60h,07f20h,07f00h,07ee0h,07ec0h
   .word   07d20h,07d20h,07d20h,07d20h,07d20h,07d20h,07ca0h,07ca0h
   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
   .word   07c80h,07c60h,07c40h,07c20h,07c00h,07c00h,07c00h,07c00h
   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h

;PCKSCRNYC:
;   .word   64 
;   .word   07c1fh,07fc3h,07f60h,07f20h,07f60h,07f60h,07f20h,07f80h
;   .word   07fa0h,07f00h,07f40h,07ec0h,07e40h,072e0h,07e20h,0316bh
;   .word   07741h,05dc0h,0294ah,03ce5h,06661h,02929h,02ce6h,05e20h
;   .word   059a2h,05941h,020e7h,028a5h,05140h,02462h,02c00h,018a5h
;   .word   01c62h,02020h,01063h,00842h,00000h,00000h,00000h,04296h
;   .word   04276h,03e53h,03a33h,03612h,031f1h,02dd0h,02dcfh,031aeh
;   .word   029afh,025afh,0298dh,0256ch,0214bh,0212ah,01d2ah,02109h
;   .word   01d09h,018e8h,014e8h,01cc7h,01085h,00c84h,00442h,00422h
;
;PCKSCRNYA:
;   .word   64 
;   .word   07c1fh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh

**************************************************************************
*								         *
* FIX_PUCK_SCALE - SET SCALE FOR NORMAL OR BIG MODE			 *
*								         *
**************************************************************************

FIX_PUCK_SCALE
	MOVI	SCALE_1TO1,A1
	MOVE	@BIG_PUCK,A14,W
	JRZ	FPS_SET					;BR=NORMAL PUCK
	SRL	1,A1					;BIG PUCK
FPS_SET
	MOVE	A1,*A8(OSCALE),L
	RETS

puck_init
;	.long	puck2a
	.long	puck104
	.word	DMAWNZ,M_NOSCALE
	.word	OM_OID|OM_POS|OM_INSERT
	.word	OID_PUCK
	.long	[0,0],[0,0],[339,08000h]		;x,y,z

puck_shadow_init
	.long	pckshado
	.word	DMAWNZ,M_NOSCALE
	.word	OM_OID|OM_INSERT
	.word	OID_PUCK_SHADOW

puck_trail_init
	.long	pckshado
	.word	DMAWNZ,M_NOSCALE
	.word	OM_OID,OID_PUCK_TRAIL
puck_fire_init
	.long	SMBRST01
	.word	DMAWNZ,M_NOSCALE
	.word	OM_OID,OID_PUCK_TRAIL

reset_puck_position
	callr	turn_puck_off
	clr	a14
	move	a14,*a8(OYACCEL),W
	move	a14,*a8(OYVEL),L
	move	a14,*a8(OYVAL),L
	move	a14,*a8(OXVEL),L
	move	a0,*a8(OXPOS),W
	move	a14,*a8(OXPOS+010h),W
	move	a1,*a8(OZPOS),W
	move	a14,*a8(OZPOS+010h),W
	move	a14,*a8(ODT_VEL),L
	move	a14,*a8(ODT_DIR),L
	move	a14,@PUCK_CONTROL,W
	move	a14,@PUCK_LAST_CONTROL,W
	move	a14,@NO_PUCK_SLOW,W
	move	a14,@PUCK_OPEN_CONTROL_TIME,W
	move	a14,@PUCK_OPEN_LAST_TIME,W
	move	a14,@PUCK_MODE_2,W
	move	a14,@PUCK_M2_TIME,W
	move	a14,@puck_owner_data,L
	move	a14,@puck_owner_data+32,L
	move	a14,@outlaw_puck2,W
	move	a14,@has_scored,W
	move	a14,@goalpost_holding,W
	movi	puck_owner_data,a14
	move	a14,@puck_owner_pointer,L
	rets

turn_puck_on
	move	@PUCK_OBJECT,a8,L
	move	*a8(OCTRL),a14,W
	ori	DMAWNZ,a14
	move	a14,*a8(OCTRL),W
	rets

turn_puck_off
	move	@PUCK_SHADOW,a8,L
	movi	DMAGO,a14
	move	a14,*a8(OCTRL),W
	move	@PUCK_OBJECT,a8,L
	move	a14,*a8(OCTRL),W
	rets
**************************************************************************
*								         *
* NOTE: all puck angles are in the range 0 - 2pi			 *
*								         *
**************************************************************************

**************************************************************************
*								         *
* send_puck_to_player							 *
* 	input	a0 = player number to send to				 *
* 		a6 = our block						 *
* 		a7 = velocity to send to puck				 *
* 	 unused	a10= maximum velocity given to puck (from player block)	 *
* 		b6 = routine to modify angle (error)			 *
* 	 we iterate three times through a formula to get direction	 *
* 	 based on how destination player is moving			 *
* 	 to come up with a reasonably close approximation of		 *
* 	 where we want to send the puck to. then we adjust our speed	 *
* 	 to get where we want to go anyway				 *
* 	output	a10 = distance to player				 *
*								         *
**************************************************************************
send_puck_to_player_part1
	GBLOCK	a0,a14
	move	*a14(POF_MODE),a10,W
	move	b6,@not_free_receiver,W		;we know b6 is not 0
	calla	get_players_destination_point
	move	a0,b1
	move	a1,a11
	move	@PUCK_OBJECT,a9,L
	move	*a9(OXVAL),a2,L
	move	a2,*a9(ODT_XSTRT),L
	move	*a9(OZVAL),a3,L
	move	a3,*a9(ODT_ZSTRT),L
	movk	3,b0
	cmpi	PM_SHAKE,a10
	jrnz	l1loi
	movi	PM_FALL,a10		;for only one check later
l1loi	callr	find_time_to_get_to_point
	move	b1,a0
	move	a11,a1
	cmpi	PM_FALL,a10
	jrz	l1loi2
	move	*a8(ODT_REALXVEL),a5,L	;once we send puck to a player, he will stop the double speed bit, so we use this
	mpys	a4,a5
	add	a5,a0
	move	*a8(OZVEL),a5,L
	mpys	a4,a5
	add	a5,a1
l1loi2	callr	put_point_in_rink
	dsjs	b0,l1loi
	srl	16,a2
	movy	a3,a2		;puck position
	move	a0,*a9(ODT_XDEST),L		;x destination of pass
	srl	16,a0
	move	a0,a3
	move	a1,*a9(ODT_ZDEST),L		;z destination of pass
	movy	a1,a3
	calla	SLINEVEL
	move	a1,a0
	move	a2,a1
	move	a9,a8
	move	a0,a2
	move	a1,a3
	rets

**************************************************************************
*								         *
* send_puck_to_player_part2						 *
* 	input	a0 = intended receiver					 *
* 		a2 = x velocity to give to puck				 *
* 		a3 = z velocity to give to puck				 *
* 		a4 = distance puck will travel				 *
* 		a10= unknown, but keep unaltered			 *
* 		b6 = routine to call to change angle			 *
*								         *
**************************************************************************
send_puck_to_player_part2
	move	a4,@NO_PUCK_SLOW,W	;full distance to the player uninhibited
	move	a4,a7
	addk	30,a7			;1/2 second after we were supposed to catch it
	move	a7,@PUCK_OPEN_CONTROL_TIME,W	;make it anybody's puck
	move	a7,@PUCK_OPEN_LAST_TIME,W	;make it anybody's puck
	move	a2,a0
	move	a3,a1
	calla	rect_to_polar
	call	b6
	jauc	set_obj_to_polar

send_puck_to_player
	callr	send_puck_to_player_part1
	jruc	send_puck_to_player_part2

;	GBLOCK	a0,a14
;	move	*a14(POF_MODE),a10,W
;	move	b6,@not_free_receiver,W		;we know b6 is not 0
;	calla	get_players_destination_point
;	move	a0,b1
;	move	a1,a11
;	move	@PUCK_OBJECT,a9,L
;	move	*a9(OXVAL),a2,L
;	move	a2,*a9(ODT_XSTRT),L
;	move	*a9(OZVAL),a3,L
;	move	a3,*a9(ODT_ZSTRT),L
;	movk	3,b0
;	cmpi	PM_SHAKE,a10
;	jrnz	lloi
;	movi	PM_FALL,a10		;for only one check later
;lloi	callr	find_time_to_get_to_point
;	move	b1,a0
;	move	a11,a1
;	cmpi	PM_FALL,a10
;	jrz	lloi2
;	move	*a8(ODT_REALXVEL),a5,L	;once we send puck to a player, he will stop the double speed bit, so we use this
;	mpys	a4,a5
;	add	a5,a0
;	move	*a8(OZVEL),a5,L
;	mpys	a4,a5
;	add	a5,a1
;lloi2	callr	put_point_in_rink
;	dsjs	b0,lloi
;	move	a4,@NO_PUCK_SLOW,W	;full distance to the player uninhibited
;	move	a4,a7
;	addk	30,a7			;1/2 second after we were supposed to catch it
;	move	a7,@PUCK_OPEN_CONTROL_TIME,W	;make it anybody's puck
;	move	a7,@PUCK_OPEN_LAST_TIME,W	;make it anybody's puck
;	srl	16,a2
;	movy	a3,a2		;puck position
;	move	a0,*a9(ODT_XDEST),L		;x destination of pass
;	srl	16,a0
;	move	a0,a3
;	move	a1,*a9(ODT_ZDEST),L		;z destination of pass
;	movy	a1,a3
;	calla	SLINEVEL
;	move	a1,a0
;	move	a2,a1
;	move	a9,a8
;	calla	rect_to_polar
;	call	b6		;modify angle
;	calla	set_obj_to_polar
;	jauc	puck_slide_sound

send_puck_to_player_boards
	move	a0,a4
	sll	4,a4
	addi	POF_D_1P-16,a4
	add	a6,a4
	clr	a5
	divu	a7,a4
	srl	16,a4		;a4 is our time estimate
	GBLOCK	a0,a11
	move	*a11(POF_OBJECT),a11,L
	move	*a11(ODT_REALXVEL),a5,L
	move	*a11(OZVEL),a9,L
	mpys	a4,a5
	mpys	a4,a9
	mmtm	sp,a0,a1
	calla	get_players_destination_point
	move	a0,a14			;rough x preditiction
	move	a1,a11			;rough z preditiction
	mmfm	sp,a0,a1
	move	@PUCK_OBJECT,a9,L
	move	*a9(OXVAL),a3,L
	move	a3,*a9(ODT_XSTRT),L
	move	*a9(OZVAL),*a9(ODT_ZSTRT),L
	cmpi	LEFT_GOALLINE_X+[20,0],a3
	jrgt	spbbcr
	cmpi	LEFT_GOALLINE_X+[20,0],a14
	jrle	send_puck_to_player_ll
spbbcr	cmpi	RGHT_GOALLINE_X-[20,0],a3
	jrlt	spbbud
	cmpi	RGHT_GOALLINE_X-[20,0],a14
	jrge	send_puck_to_player_rr
spbbud	cmpi	CENTER_Z,a11
	jrgt	send_puck_to_player_tt
send_puck_to_player_bb
	clr	b10
	jruc	spbrdx
send_puck_to_player_tt
	movi	TOP_SIDEBOARD_Z,b10
	jruc	spbrdx
send_puck_to_player_rr
	movi	RGHT_ENDBOARD_X,b10
	jruc	splrdx
send_puck_to_player_ll
	movi	LEFT_ENDBOARD_X,b10
	jruc	splrdx

splrdx	calla	get_players_destination_point	;a0 = x, a1 = z, a8 = player
	SWAP	a0,a1
	move	@PUCK_OBJECT,a9,L
	move	*a9(OZVAL),a2,L
	move	*a9(OXVAL),a3,L
	calla	put_point_in_rink_rot_23
	move	*a8(OZVEL),a4,L
	move	*a8(ODT_REALXVEL),a5,L
	callr	spbsb1b
	move	a0,*a9(ODT_ZDEST),L		;x destination of pass
	move	a1,*a9(ODT_XDEST),L		;z destination of pass
	callr	spbsub2
	SWAP	a0,a1
	SWAP	a2,a3
	calla	find_dir_to_point
	move	a7,a1
	move	a9,a8
	calla	set_obj_to_polar
	rets

spbrdx	calla	get_players_destination_point	;a0 = x, a1 = z, a8 = player
	move	@PUCK_OBJECT,a9,L
	move	*a9(OXVAL),a2,L
	move	*a9(OZVAL),a3,L
	calla	put_point_in_rink_23
	move	*a8(ODT_REALXVEL),a4,L
	move	*a8(OZVEL),a5,L
	callr	spbsub1
	move	a0,*a9(ODT_XDEST),L		;x destination of pass
	move	a1,*a9(ODT_ZDEST),L		;z destination of pass
	callr	spbsub2
	calla	find_dir_to_point
	move	a7,a1
	move	a9,a8
	calla	set_obj_to_polar
	rets

spbsub1	move	a0,b1				;b1 = destination x
	move	a1,b2				;b2 = destination z
	move	a2,b5			;puck x
	move	a3,b7			;puck z
	move	a4,b8
	move	a5,b9
	move	b6,@not_free_receiver,W		;we know b6 is not 0
	movk	4,b0		;loop 4
sptbb_1	callr	bbnsub1
	callr	put_point_in_rink
	dsjs	b0,sptbb_1
	move	@WAVEIRQS,a14,L
	add	a4,a14			;time of destination
	move	a14,@bhit_dest_time,L
	rets

spbsb1b	move	a0,b1
	move	a1,b2
	move	a2,b5
	move	a3,b7
	move	a4,b8
	move	a5,b9
	move	b6,@not_free_receiver,W		;we know b6 is not 0
	movk	4,b0		;loop 4
sptll_1	callr	bbnsub1
	callr	put_point_in_rink_rot
	dsjs	b0,sptll_1
	move	@WAVEIRQS,a14,L
	add	a4,a14			;time of destination
	move	a14,@bhit_dest_time,L
	rets

bbnsub1	mmtm	sp,a7
	move	a0,b3
	move	a1,b4
	move	b10,a14
	sub	a14,a1
	neg	a1
	move	b7,a3
	sub	a14,a3
	neg	a3
	add	a3,a1
	move	a3,a0
	move	a1,a1
	jrz	rb1_0		;if a1 = 0, then return a zero (just stick us at our position)
	calla	DIV		;a1 = a0/a1
rb1_0	move	b3,a0		;b3 = saved x
	move	b5,a2
	sub	a2,a0		;a0 = x delta
	calla	MULT		;a1 = a0*a1
	add	a2,a1		;a1 = our board x position
	move	a1,a0

	move	b10,a1		;a0,a1 = xy of board point  - a2,a3 = xy of puck
	move	b7,a3

	callr	find_time_to_get_to_point	;a4 = time to board
	move	a4,a5
	mmtm	sp,a0,a1	;save our board point
	calla	find_dir_to_point	;a0 = angle from wall
	mmtm	sp,a3
	move	a0,a3
	callr	compute_velocity_change
	mmfm	sp,a3
	move	a4,a0		;velocity change
	move	a7,a1		;velocity
	calla	MULT		;a1 = a0*a1 = new velocity
	move	a1,a7
	mmfm	sp,a2,a3	;get our board point
	move	b3,a0
	move	b4,a1		;get our destination point
	callr	find_time_to_get_to_point
	move	b1,a0
	move	b2,a1		;get our destination point
	add	a5,a4		;a4 is our total time
	move	b8,a5		;regular speed
	mpys	a4,a5
	add	a5,a0
	move	b9,a5
	mpys	a4,a5
	add	a5,a1
	mmfm	sp,a7
	rets

spbsub2	mmtm	sp,a7
	move	a4,@NO_PUCK_SLOW,W
	addk	30,a4
	move	a4,@PUCK_OPEN_CONTROL_TIME,W
	move	a4,@PUCK_OPEN_LAST_TIME,W
	move	a0,a4		;save x
	move	b7,a3
	move	b10,a14
	sub	a14,a1
	neg	a1
	sub	a14,a3
	neg	a3
	add	a3,a1
	move	a3,a0
	move	a1,a1
	jrz	ra1_0		;if a1 = 0, then return a zero (just stick us at our position)
	calla	DIV		;a1 = a0/a1
ra1_0	move	a4,a0		;a4 = saved x
	move	b5,a2
	sub	a2,a0		;a0 = x delta
	calla	MULT		;a1 = a0*a1
	add	a2,a1		;a1 = our board x position
	move	a1,a0
	move	b10,a1		;a0,a1 = xy of board point  - a2,a3 = xy of puck
	move	b7,a3
	mmfm	sp,a7
	rets

**************************************************************************
*								         *
* send_puck_to_point_xyz						 *
* 	send puck to point x,z (with y velocity				 *
* 	gives puck up velocity and gravity if necessary			 *
*      input	a0 = x							 *
* 		a1 = z							 *
* 		a2 = y							 *
* 		a7 = velocity to give to puck				 *
* 		a10= maximum velocity given to puck (from player block)	 *
* 		b6 = routine to modify angle (error)			 *
*								         *
**************************************************************************
send_puck_to_point_xyz_v	;take a8 velocity/2 and direction into account
	move	a2,b2
	move	@PUCK_OBJECT,a9,L
	move	*a9(OXVAL),a2,L
	move	*a9(OZVAL),a3,L
	calla	find_dirdis_to_point
	move	a1,b1
	mmtm	sp,a0
	move	*a8(ODT_DIR),a2,L
	sub	a2,a0
	calla	GETCOS
	move	a0,a0
	jrn	sptp55
	move	*a8(ODT_VEL),a1,L
	cmpi	[9,0],a1
	jrls	spvu
	movi	[9,0],a1
spvu	sra	1,a1
	calla	MULT
	add	a1,a7
sptp55	mmfm	sp,a0
	jruc	sptp1

send_puck_to_point_xyz_asamev	;take current velocity of puck into account
;	move	@PUCK_OBJECT,a9,L
;	move	*a9(ODT_VEL),a7,L
;	move	a7,a3
;	sra	1,a7			;3/4 vel
;	sra	2,a3
;	add	a3,a7
;	MOVE	A2,B2			;SAVE Y DESTINATION
;	jruc	stpxa

	move	a7,a14
	sra	2,a14
	sub	a14,a7
	;
send_puck_to_point_xyz
	move	a2,b2
	move	@PUCK_OBJECT,a9,L
stpxa	move	*a9(OXVAL),a2,L
	move	*a9(OZVAL),a3,L
	calla	find_dirdis_to_point
	move	a1,b1
sptp1	move	a7,a1
	move	a9,a8
	move	a1,b3
	MOVE	B2,A2			;RESTORE Y DESTINATION

	.if	BILL & 1
	.else
	call	b6			;call routine to modify direction
	.endif

	move	a1,b3		;save velocity
	calla	set_obj_to_polar
	move	b2,b2		;test y position
	jrnn	sptp9
	callr	give_puck_shot_gravity
	move	b1,a3		;distance
	move	b3,a1		;velocity
	move	b2,a2		;yp position
	calla	get_correct_y_velocity
	neg	a10
	cmp	a10,a3
	jrge	sptp6
	move	a10,a3
sptp6	move	a3,*a8(OYVEL),L
sptp9	jauc	puck_slide_sound

**************************************************************************
*								         *
* get_puck_time_for_x							 *
* 	input	a0 = x position to return data on			 *
* 	output	a0 = x position (as input)				 *
* 		a3 = WAVEIRQS (given current velocity) for x = a0	 *
* 		c  = puck is ok						 *
* 		nc = puck has passed our given x (time is negative)	 *
*								         *
**************************************************************************
get_puck_time_for_x	;takes a0, returns a3,c
	mmtm	sp,a0,a1,a8
	move	@PUCK_OBJECT,a8,L
	move	*a8(OXVAL),a14,L
	sub	a14,a0
	move	*a8(OXVEL),a1,L
	jrnz	gtpx1
	movi	[0,01000h],a1
gtpx1
	calla	DIV			;a1 = time
	move	a1,a3
	sra	16,a3
	move	@WAVEIRQS,a0,L
	add	a0,a3
	clrc
	move	a1,a1
	jrn	sptx1
	setc
sptx1	mmfm	sp,a0,a1,a8
	rets

**************************************************************************
*								         *
* get_puck_data_for_x							 *
* 	input	a0 = x position to return data on			 *
* 	output	a0 = x position (as input)				 *
* 		a1 = z position for x = a0				 *
* 		a3 = WAVEIRQS (given current velocity) for x = a0	 *
* 		c  = puck is ok						 *
* 		nc = puck has passed our given x (time is negative)	 *
*								         *
**************************************************************************
get_puck_data_for_x	;takes a0, returns a1,a3,c
	mmtm	sp,a0,a4,a8
	move	@PUCK_OBJECT,a8,L
	move	*a8(OXVAL),a14,L
	sub	a14,a0
	move	*a8(OXVEL),a1,L
	jrnz	gtpx2
	movi	[0,01000h],a1
gtpx2

	calla	DIV			;a1 = time
	move	a1,a4			;so we can check for negative time later
	move	a1,a3
	sra	16,a3
	move	@WAVEIRQS,a0,L
	add	a0,a3
	move	*a8(OZVEL),a0,L
	calla	MULT
	move	*a8(OZVAL),a0,L
	add	a0,a1			;a1 = z at x = goal
	clrc
	move	a4,a4
	jrn	gpd1
	setc
gpd1	mmfm	sp,a0,a4,a8
	rets

**************************************************************************
*								         *
* get_puck_y_data_for_t							 *
* 	input	a3 = WAVEIRQS of point desired				 *
* 	output	a2 = y position at time a3				 *
*								         *
**************************************************************************
get_puck_y_data_for_t	;take a3, return a2
	mmtm	sp,a1,a8
	move	@PUCK_OBJECT,a8,L
	move	@WAVEIRQS,a2,L
	sub	a2,a3			;a3 is our time (whole number)
	move	a3,a1
	mpys	a3,a1			;a1 is our time squared
	move	*a8(OYACCEL),a2,W
	mpys	a2,a1
	sra	1,a1			;a1 = 1/2at^2
	move	*a8(OYVEL),a2,L
	mpys	a2,a3			;a3 = Vt
	move	*a8(OYVAL),a2,L
	add	a3,a2
	add	a1,a2
	jrn	gpyd1
	clr	a2
gpyd1	mmfm	sp,a1,a8
	rets

**************************************************************************
*								         *
* SEND_PUCK_POLAR - MODIFY PUCK VECTOR WITH POLAR PARAMETERS		 *
* 									 *
* PASS:									 *
* A0 = ANGLE								 *
* A1 = SPEED								 *
* A8 = OBJECT								 *
* RETURN:								 *
* NUTIN'								 *
*								         *
**************************************************************************

SEND_PUCK_POLAR
	CALLA	set_obj_to_polar
;	CALLR	give_puck_gravity
	JAUC	puck_slide_sound

**************************************************************************
*								         *
* put_puck_in_other_direction						 *
* 	for when someone contacts puck, but does not control it		 *
* 	it will bounce in somewhat the opposite direction from		 *
* 	the way it is heading						 *
* 	input	a8 = puck object					 *
* 		a1 = speed to bounce puck away at			 *
* 	trashes	b1,a0,a1						 *
*								         *
**************************************************************************
put_puck_in_other_direction
	move	a1,b1
	move	*a8(ODT_DIR),a0,L
	addi	XD1800,a0
	move	a0,a1
	addi	XD0250,a1
	subi	XD0250,a0
	calla	RANGERND
	move	b1,a1
	calla	set_obj_to_polar
	move	*a8(OYVEL),a0,L
	move	a0,a1
	addi	[1,08000h],a0
	subi	[1,08000h],a1
	calla	RANGERND
	move	a0,*a8(OYVEL),L
	callr	give_puck_gravity
	jauc	puck_slide_sound

**************************************************************************
*								         *
* find_time_to_get_to_point						 *
* 	input	a0 = point 2 x						 *
* 		a1 = point 2 z						 *
* 		a2 = point 1 x						 *
* 		a3 = point 1 z						 *
* 		a7 = velocity of puck					 *
* 	output	a4 = time to get there					 *
* 		a10 = distance to point					 *
*								         *
**************************************************************************
find_time_to_get_to_point
fttgp1	calla	find_dis_to_point_whole
	move	a4,a10
	MOVE	A5,A14				;SAVE A5
	clr	a5
	divu	a7,a4
	srl	16,a4
	MOVE	A14,A5				;RESTORE A5
	rets

find_time_to_get_to_point_okb	;handle bounce
	move	@bhit_dest_time,a4,L
	jrz	fttgp1
	move	@WAVEIRQS,a14,L
	sub	a14,a4
	subi	2,a4
	rets

**************************************************************************
*								         *
* bounce_puck								 *
* bounce_puck_corner							 *
* 	bounces puck off of a wall at angle a2				 *
* input a2= angle to bounce puck off					 *
*       a8= puck object							 *
*  in puck object ODATA= puck angle, ODATA+020H= puck velocity		 *
* trashes a bunch of registers						 *
*								         *
**************************************************************************
gbounce_puck_corner
	move	a8,a6				;set a6 to non-zero
	jruc	gbp1
gbounce_puck
	clr	a6
gbp1	mmtm	sp,a9
	clr	a14
	move	a14,@global_shot_percentage,W
	move	@WAVEIRQS,@PUCK_NEWDIR_TIME,L
	move	*a8(ODT_DIR),a1,L			;get angle
	callr	compute_bounce_angle
	jrnc	bpa9				;br= no collision, done
	move	a3,a5				;save for sign bit for later
	abs	a3				;make it 0-90 degrees
	subi	XD0900,a3
	neg	a3				;now it is delta from parallel to surface
	callr	bp21x
	calla	puck_goal_sound2	;read vels, and see if post
	setc
bpa9	mmfm	sp,a9
	rets

bp21x	mmtm	sp,a9
	jruc	bp21

bounce_puck_corner
	move	a8,a6				;set a6 to non-zero
	jruc	bp1
bounce_puck
	clr	a6
bp1	clr	a14
	move	a14,@global_shot_percentage,W
	mmtm	sp,a9
	move	@WAVEIRQS,@PUCK_NEWDIR_TIME,L
	callr	set_puck_outlaw
	move	*a8(ODT_DIR),a1,L			;get angle
	callr	compute_bounce_angle
	jrnc	bp9				;br= no collision, done
	move	@PUCK_MODE,a5,W
	cmpi	PUM_SHOT,a5
	jrz	pdmis
	cmpi	PUM_SSHOT,a5
	jrz	pdmis
	cmpi	PUM_ONETIME,a5
	jrnz	pdng
pdmis
	cmpi	XD0900,a2
	jrz	pdng
	cmpi	XD2700,a2
	jrz	pdng
	calla	spx_missed_shot
	clr	a5
	calla	set_safe_puck_mode_a5
pdng	move	@PUCK_OPEN_CONTROL_TIME,a5,W
	jrnn	pdng1
	movk	1,a5
	move	a5,@PUCK_OPEN_CONTROL_TIME,W
pdng1	move	@PUCK_OPEN_LAST_TIME,a5,W
	jrnn	pdng2
	movk	1,a5
	move	a5,@PUCK_OPEN_LAST_TIME,W
pdng2	move	a3,a5				;save for sign bit for later
	abs	a3				;make it 0-90 degrees
	subi	XD0900,a3
	neg	a3				;now it is delta from parallel to surface
	move	a6,a6
	jrz	bp_19
	calla	puck_board_corner_sound
	jruc	bp21
bp_19	move	@bhit_dest_time,a14,L
	jrz	bp2121
	calla	pass_off_boards_sound
	jruc	bp21
bp2121	calla	puck_board_sound
bp21	move	a3,a9				;save it for use later
	callr	compute_velocity_change
	callr	compute_angle_change
	mpys	a3,a0				;multiply angle change by angle
	sll	16,a0
	srl	16,a1
	movx	a1,a0
	subi	XD0900,a0			;change it back to angle from normal
	move	a5,a5				;check sign of original angle
	jrn	bp2				;br= original was negative so minus is ok
	neg	a0				;correct if original was positive
bp2	add	a2,a0				;add it to normal to surface
	THETA_N	a0
	move	a0,*a8(ODT_DIR),L			;store in angle
	move	a0,a2				;save for polar to rect conversion
	move	*a8(ODT_VEL),a2,L			;get velocity
	move	a2,a5
	mpys	a4,a2				;multiply velocity change by velocity
	sll	16,a2
	srl	16,a3
	movx	a3,a2
	sub	a2,a5			;a5 is how much we lost
	move	a2,*a8(ODT_VEL),L			;store in velocity
	move	*a8(OYPOS),a14,W		;get y of puck
	jrnn	xx1				;br= puck on ground
	abs	a9				;make difference absolute
	cmpi	XD0150,a9			;if angle to wall is < 15 degrees
	jrls	xx1				;then we don't add a random amount.
	move	@bhit_dest_time,a14,L
	jrnz	xx1			;we are on bounce pass
	move	a0,a1			;puck in air, give it
	movi	XD0150,a14		;+/- 15 degrees
	sub	a14,a0
	add	a14,a1
	calla	RANGERND
	move	a0,a0
	jrnn	xx1
	addi	XD3600,a0
xx1	move	a2,a1				;now move vel to correct reg for ptor
	callr	kill_all_trails
	calla	polar_to_rect
	move	a0,*a8(OXVEL),L
	move	a1,*a8(OZVEL),L
	move	*a8(OYVEL),a0,L
	jrnz	bp9
	clr	a1
	neg	a5
	sra	2,a5
	move	@PUCK_MODE_2,a0,W
	jrz	bp81			;if flat on ground normal
	move	a5,a1
	sra	1,a5			;if puck is rolling or flopping, usually bring it up higher
bp81	clr	a14
	move	a14,@bhit_dest_time,L
	move	a5,a0
	calla	RANGERND
	cmpi	-4000h,a0
	jrge	bp9
	move	a0,*a8(OYVEL),L
	callr	give_puck_gravity
bp9	mmfm	sp,a9
	rets

compute_velocity_change
	move	@bhit_dest_time,a14,L		;are we bounce pass?
	jrnz	cvc_b				;we are bounce pass
	move	a3,a0				;get angle to correct reg
	calla	GETCOS				;velocity change is
	abs	a0
	sra	1,a0				; ((cos(angle))/2 + .5)^2
	move	*a8(OYPOS),a1,W		;check if puck is in air
	jrnn	cvc_1			;br= puck on ground
	subi	[0,00800h],a0		;if puck in air, make it + 15/32 instead of 1/2
cvc_1	addi	[0,08000h],a0
	move	a0,a1
	calla	SQUARE
	move	a1,a4
	rets
cvc_b	move	a3,a0				;get angle to correct reg
	calla	GETCOS				;velocity change is
	abs	a0
	sra	1,a0				; ((cos(angle))/2 + .5)^2
	addi	[0,08000h],a0
	move	a0,a1
	calla	SQUARE
	cmpi	[0,0a000h],a1
	jrhs	cvcb2
	movi	[0,0a000h],a1
cvcb2	move	a1,a4
	rets

compute_angle_change
	move	@bhit_dest_time,a1,L
	jrnz	cac_p		;perfect bounce on bounce pass
	move	a6,a6
	jrnz	cac_c				;br=puck in corner
	cmpi	XD0400,a3
	jrlt	caclo
	move	a3,a0
	calla	GETSIN				;for angles > 40
	move	a0,a1				; amount sin^2
	calla	SQUARE
	move	a1,a0
	rets
cac_c	cmpi	XD0570,a3
	jrlt	caclo
	move	a3,a0
	calla	GETCOS				;for angles > 57
	neg	a0				; amount is 1-cos
	addi	[1,0],a0
	rets
caclo	move	a3,a0
	calla	GETSIN
	move	a0,a1
	calla	SQUARE_ROOT			;for angles < 57 (or 40)
	sra	1,a1				; amount (sin^.5)/2
	move	a1,a0
	rets
cac_p	movi	[1,0],a1
	move	a1,a0
	rets

**************************************************************************
*								         *
* compute_bounce_angle: computes the angle of reflection of the puck	 *
* 			 bouncing off of a surface			 *
* 	input:	a1 = puck angle						 *
* 		a2 = normal to surface					 *
* 	output: CC = no collision					 *
* 		  a3 = garbage						 *
* 		CS = collision						 *
* 		  a3 = amount to add to a2 to get reflection angle	 *
*								         *
**************************************************************************
compute_bounce_angle
	move	a2,@bounce_save_temp,L
	THETA_N	a1
	move	a2,a3
	sub	a1,a3
	addi	XD1800,a3
	THETA_N	a3
	cmpi	XD0900,a3
	jrlt	cba_ok
	cmpi	XD2700,a3
	jrle	cba_nok
	subi	XD3600,a3
cba_ok	setc
	rets
cba_nok	clrc
	rets

slow_object_down
	movi	spd2_friction,a2
	jruc	spd11
slow_puck_down
	move	@PUCK_OBJECT,a8,L
	movi	spd_friction,a2
spd11	move	*a8(ODT_VEL),a0,L		;velocity
	lmo	a0,a1
	sll	4,a1
	add	a2,a1
	move	*a1,a2,W
	jrz	spd_stop
	sll	16,a2
	srl	16,a2
	mpys	a2,a0
	sll	16,a0
	srl	16,a1
	movx	a1,a0
	move	a0,*a8(ODT_VEL),L
	move	*a8(OXVEL),a0,L		;velocity
	mpys	a2,a0
	sll	16,a0
	srl	16,a1
	movx	a1,a0
	move	a0,*a8(OXVEL),L
	move	*a8(OZVEL),a0,L		;velocity
	mpys	a2,a0
	sll	16,a0
	srl	16,a1
	movx	a1,a0
	move	a0,*a8(OZVEL),L
	rets

spd_stop
	clr	a1
	move	a1,@PUCK_MODE_2,W
	callr	set_safe_puck_mode_a1
	jauc	set_obj_to_polar

spd_friction
	.word	0		;lmo = 31	80000000-ffffffff, 0
	.word	0ff80h		;lmo = 30	40000000-7fffffff
	.word	0ff80h		;lmo = 29	20000000-3fffffff
	.word	0ff74h		;lmo = 28	10000000-1fffffff
	.word	0ff70h		;lmo = 27	08000000-0fffffff
	.word	0ff6ch		;lmo = 26	04000000-07ffffff
	.word	0ff60h		;lmo = 25	02000000-03ffffff
	.word	0ff50h		;lmo = 24	01000000-01ffffff
	.word	0ff28h		;lmo = 23	00800000-00ffffff
	.word	0ff10h		;lmo = 22	00400000-007fffff
	.word	0fef8h		;lmo = 21	00200000-003fffff
	.word	0fee0h		;lmo = 20	00100000-001fffff
	.word	0fe70h		;lmo = 19	00080000-000fffff
	.word	0fe00h		;lmo = 18	00040000-0007ffff
	.word	0fce0h		;lmo = 17	00020000-0003ffff
	.word	0fa78h		;lmo = 16	00010000-0001ffff
	.word	0fa68h		;lmo = 15	00008000-0000ffff
	.word	0fa68h		;lmo = 14	00004000-00007fff
	.word	0    		;lmo = 13	00002000-00003fff
	.word	0    		;lmo = 12	00001000-00001fff
	.word	0    		;lmo = 11	00000800-00000fff
	.word	0    		;lmo = 10	00000400-000007ff
	.word	0    		;lmo = 9	00000200-000003ff
	.word	0    		;lmo = 8	00000100-000001ff
	.word	0    		;lmo = 7	00000080-000000ff
	.word	0    		;lmo = 6	00000040-0000007f
	.word	0    		;lmo = 5	00000020-0000003f
	.word	0    		;lmo = 4	00000010-0000001f
	.word	0    		;lmo = 3	00000008-0000000f
	.word	0    		;lmo = 2	00000004-00000007
	.word	0    		;lmo = 1	00000002-00000003
	.word	0    		;lmo = 0	00000000-00000001

spd2_friction
	.word	0		;lmo = 31	80000000-ffffffff, 0
	.word	0ff74h		;lmo = 30	40000000-7fffffff
	.word	0ff70h		;lmo = 29	20000000-3fffffff
	.word	0ff6ch		;lmo = 28	10000000-1fffffff
	.word	0ff60h		;lmo = 27	08000000-0fffffff
	.word	0ff50h		;lmo = 26	04000000-07ffffff
	.word	0ff28h		;lmo = 25	02000000-03ffffff
	.word	0ff10h		;lmo = 24	01000000-01ffffff
	.word	0fef8h		;lmo = 23	00800000-00ffffff
	.word	0fee0h		;lmo = 22	00400000-007fffff
	.word	0fe70h		;lmo = 21	00200000-003fffff
	.word	0fce0h		;lmo = 20	00100000-001fffff
	.word	0fa78h		;lmo = 19	00080000-000fffff
	.word	0fa68h		;lmo = 18	00040000-0007ffff
	.word	0fa58h		;lmo = 17	00020000-0003ffff
	.word	0fa48h		;lmo = 16	00010000-0001ffff
	.word	0		;lmo = 15	00008000-0000ffff
	.word	0		;lmo = 14	00004000-00007fff
	.word	0    		;lmo = 13	00002000-00003fff
	.word	0    		;lmo = 12	00001000-00001fff
	.word	0    		;lmo = 11	00000800-00000fff
	.word	0    		;lmo = 10	00000400-000007ff
	.word	0    		;lmo = 9	00000200-000003ff
	.word	0    		;lmo = 8	00000100-000001ff
	.word	0    		;lmo = 7	00000080-000000ff
	.word	0    		;lmo = 6	00000040-0000007f
	.word	0    		;lmo = 5	00000020-0000003f
	.word	0    		;lmo = 4	00000010-0000001f
	.word	0    		;lmo = 3	00000008-0000000f
	.word	0    		;lmo = 2	00000004-00000007
	.word	0    		;lmo = 1	00000002-00000003
	.word	0    		;lmo = 0	00000000-00000001

set_safe_puck_mode_a1
	mmtm	sp,a0,a14
	move	a1,a0
	jruc	sspm1
set_safe_puck_mode_a4
	mmtm	sp,a0,a14
	move	a4,a0
	jruc	sspm1
set_safe_puck_mode_a5
	mmtm	sp,a0,a14
	move	a5,a0
	jruc	sspm1
set_safe_puck_mode_a14
	mmtm	sp,a0,a14
	move	a14,a0
	jruc	sspm1
set_safe_puck_mode_a0
	mmtm	sp,a0,a14
sspm1	move	@PUCK_MODE,a14,W
	cmpi	PUM_SCORE,a14
	jrhs	sspm9
	move	a0,@PUCK_MODE,W
sspm9	mmfm	sp,a0,a14
	rets

**************************************************************************
*								         *
* puck_rink_check							 *
* 	this is a mechanism for checking puck collisions with		 *
* 	the physical properties of the rink. (ie walls and goal areas)	 *
* 	it runs through a table of check values, forking into the	 *
* 	corresponding routine for further analysis.  This is to speed	 *
* 	up the majority of checks, where no collision occurs		 *
*								         *
**************************************************************************
puck_rink_check
	move	@PUCK_OBJECT,a8,L
	move	*a8(OYVAL),a14,L		;no get pos
	jrz	prcx1
	jrn	prc22			;br= we are above ground, don't worry
	move	*a8(OYVEL),a0,L
	jrz	prc22			;br= we are not going down yet, don't worry
	jrn	prc22			;br= we are going up, don't worry about it
	callr	puck_hits_ground
	jruc	prc22
prcx1	callr	puck_on_ground
prc22
	move	*a8(OYVAL),a14,L
	jrz	pc224
	jrn	pc224
	clr	a14
	move	a14,*a8(OYVAL),L
pc224

 	callr	set_puck_script		;also sets puck palette
	callr	set_puck_shadow
	move	@trigger_puck_sound,a14,W
	jrz	prc_ns
	clr	a14
	move	a14,@trigger_puck_sound,W
	calla	puck_slide_sound
prc_ns	move	*a8(OXVAL),a0,L
	addi	[0,08000h],a0
	sra	16,a0
;prc_ns	move	*a8(OXPOS),a0,W		;half
	move	*a8(OZPOS),a1,W
	sll	16,a1
	movy	a1,a0			;a0 = [z,x] of puck
	movi	rink_check_table,a6
	movi	[1,1],a14
prc_1	mmfm	a6,a1,a2,a3		;a3 = lowerleft, a2 = upperright, a1 = address
	add	a14,a2			;sub 1 pixel over so we check like xge, yge
	move	a3,a3
	jrz	prc_err			;we hit end of table, something is wrong
	cmpxy	a3,a0
	jryle	prc_1			;br= outside lower
	jrxle	prc_1			;br= outside left
	cmpxy	a2,a0
	jrygt	prc_1			;br= outside top
	jrxgt	prc_1			;br= outside right
	jump	a1			;go to address for further checks

prc_err	LOCKUP			;we hit end of table without match
	clr	a0
	move	a0,*a8(OXVEL),L
	move	a0,*a8(OXVAL),L
	move	a0,*a8(OZVEL),L
	move	a0,*a8(OZVAL),L
	move	a0,*a8(OYACCEL),W
	move	a0,*a8(OYVEL),L
	move	a0,*a8(OYVAL),L
	rets

puck_on_ground
	move	@PUCK_MODE_2,a0,W
	jrz	pog_9
	move	@PUCK_M2_TIME,a14,W
	inc	a14
	move	a14,@PUCK_M2_TIME,W
	cmpi	80,a14
	jrls	pog_9
	clr	a14
	move	a14,@PUCK_MODE_2,W
pog_9	rets

puck_hits_ground
	move	*a8(OYVEL),a1,L
	calla	puck_drop_sound
	cmpi	[1,0],a1
	jrls	phg1

	.if	BILL
	JRUC	phg2			;MOST EXTREME RESULT ALWAYS!
	.endif

	calla	RANDOM
	sll	30,a0
	srl	25,a0
	addi	phglist,a0
	move	*a0,a0,L
	jump	a0
phglist	.long	phg1
	.long	phg2
	.long	phg3
	.long	phg4
phg2	cmpi	[3,0],a1	;4
	jrlt	phg2t
	movi	[3,0],a1	;4
phg2t	sra	1,a1
	neg	a1
	move	a1,*a8(OYVEL),L
	rets
phg3	cmpi	[3,0],a1	;4
	jrlt	phg3t
	movi	[3,0],a1	;4
phg3t	move	a1,a14
	sra	2,a1
	sra	3,a14
	add	a14,a1
	neg	a1
	move	a1,*a8(OYVEL),L
	rets
phg4	sra	2,a1
	neg	a1
	move	a1,*a8(OYVEL),L
	rets
phg1	cmpi	[3,0],a1
	jrhs	phg2			;if it is really fast, it must bounce
	movk	1,a0
	move	a0,@PUCK_MODE_2
	clr	a0
	move	a0,@PUCK_M2_TIME,W
	move	a0,*a8(OYACCEL),W	;clear out all y
	move	a0,*a8(OYVEL),L
	move	a0,*a8(OYVAL),L
	rets

give_puck_gravity	;a8 = puck
	movi	NORM_GRAVITY,a14	;if we change this, change y position routines to match
	move	a14,*a8(OYACCEL),W
	rets

give_puck_shot_gravity	;a8 = puck
	movi	SHOT_GRAVITY,a14	;if we change this, change y position routines to match
	move	a14,*a8(OYACCEL),W
	rets

set_puck_script
	move	@PUCK_OBJECT,a7,L
	move	@show_puck_on_fire,a14,W
	jrnz	sps_fire
	move	*a7(ODT_VEL+010h),a14,W
	cmpi	18,a14
	jrlo	spse1
	clr	a0
	move	a0,@killtrails,W
	movi	puck_trail_init,b0
	calla	EASYMAKE
	jrz	spse1
	CALLR	FIX_PUCK_SCALE
	move	*a7(OXVAL),*a8(OXVAL),L
	move	*a7(OYVAL),*a8(OYVAL),L
	move	*a7(OZVAL),a14,L
	addi	200,a14
	move	a14,*a8(OZVAL),L
	callr	cpvelp
	movi	puck_trail_script,a1
	calla	INSERT_OBJ
	calla	STRT_ANIM
spse1	move	a7,a8

	clr	a0
	move	@PUCK_CONTROL,a1,W
	jrnz	sps8
	move	@PUCK_MODE,a14,W
	cmpi	PUM_FACEOFF,a14
	jrz	sps8
	movk	1,a0
	move	*a8(OYPOS),a1,W
	jrnz	sps81
	move	@PUCK_MODE_2,a0,W
	jrz	spse2w
	movk	1,a0		;on ice 0 or 1
spse2w	sll	5,a0
	addi	spssl,a0
	move	*a0,a0,L
	jump	a0
sps81	clr	a1
	move	@PUCK_MODE_2_DIR,a0,W
	jrnz	sps82a
	movk	2,a0
	calla	RANDU
	move	a0,@PUCK_MODE_2_DIR,W
sps82a	cmpi	1,a0
	jrz	sps82b
	movk	12,a1
sps82b
sps82	move	@PUCK_MODE_2,a0,W
	jrnz	sps83
	move	*a7(ODT_VEL+010h),a14,W
	cmpi	20,a14
	jrls	sps8xa
	movk	2,a0
	jruc	sps8xb
sps8xa	movk	12,a0
	calla	RANDU
sps8xb	move	a0,@PUCK_MODE_2,W
sps83	add	a0,a1

;
; here here here
;


	sll	27,a1
	srl	22,a1
;	sll	5,a1

	addi	big_puck_scr_list-32,a1
	move	*a1,a1,L
	jauc	start_anim_if_not
sps8	jruc	set_flat_puck_script

spssl	.long	set_flat_puck_script
	.long	set_flop_puck_script
	.long	set_roll_puck_script

sps_fire
	move	@WAVEIRQS,a14,W
;	move	a14,a2
;	sll	31,a14
;	srl	31,a14
	BTST	0,A14
	jrnz	spxe1
	movi	puck_fire_init,b0
	calla	EASYMAKE
	jrz	spxe1

	CALLR	FIX_PUCK_SCALE

	MOVK	2,A0				;RANDOM FIRE H-FLIP
	CALLA	RAND0
	SLL	4,A0
	MOVE	*A8(OCTRL),A14,W
	OR	A0,A14
	MOVE	A14,*A8(OCTRL),W

	move	*a7(OXVAL),a14,L
;	sll	30,a2				;THIS IS ALWAYS ZERO.
;	srl	15,a2
;	add	a2,a14

	MOVI	020000H,A0
	MOVE	@BIG_PUCK,A1,W
	JRZ	SPS_F_OFFSET_X			;BR=NORMAL PUCK
	NEG	A0				;BIG PUCK
SPS_F_OFFSET_X
	SUB	A0,A14

	move	a14,*a8(OXVAL),L
	move	*a7(OYVAL),*a8(OYVAL),L
	move	*a7(OZVAL),*a8(OZVAL),L
	callr	cvelxp
	movi	puck_trail_fire_script,a1
	calla	INSERT_OBJ
	calla	STRT_ANIM
spxe1	move	a7,a8
	jruc	set_flat_puck_script

kill_all_trails
	mmtm	sp,a0
	move	@show_puck_on_fire,a0,W
	jrnz	kat2
	move	@killtrails,a0,W
	jrnz	kat1
	clr	a0
	dec	a0
	move	a0,@killtrails,W
kat2	movi	OID_PUCK_TRAIL,a0
	calla	KILOBJ_ALL
kat1	mmfm	sp,a0
	rets

puck_trail_script
	LWL	1,1|AFUNC,a_cpypv
	LWL	1,1|AFUNC,a_cpypv
	LWL	1,1|AFUNC,a_cpypv
	LWL	1,AFUNC|1,a_delete_obj
	.long	0

puck_trail_fire_script
	LWL	SMBRST01,2|AFUNC,a_cpypf
	LWL	SMBRST02,2|AFUNC,a_cpypf
	LWL	SMBRST03,2|AFUNC,a_cpypf
	LWL	SMBRST04,2|AFUNC,a_cpypf
	LWL	SMBRST05,2|AFUNC,a_cpypf
	LWL	SMBRST06,2|AFUNC,a_cpypf
	LWL	SMBRST07,2|AFUNC,a_cpypf
	LWL	SMBRST08,2|AFUNC,a_cpypf
	LWL	SMBRST09,2|AFUNC,a_cpypf
	LWL	SMBRST10,2|AFUNC,a_cpypf
	LWL	1,AFUNC|1,a_delete_obj
	.long	0

SAVE_FIRE_INIT
	.long	SMBRST01
	.word	DMAWNZ,M_NOSCALE
	.word	OM_OID,OID_JUNK

SAVE_FIRE_ANIM
	LW	SMBRST01,2
	LW	SMBRST02,2
	LW	SMBRST03,2
	LW	SMBRST04,2
	LW	SMBRST05,2
	LW	SMBRST06,2
	LW	SMBRST07,2
	LW	SMBRST08,2
	LW	SMBRST09,2
	LW	SMBRST10,2
	LWL	1,AFUNC|1,DELETE_OBJ

FIREBALL_INIT
	.long	SMBRST01
	.word	DMAWNZ,0
	.word	OM_OID|OM_ANIM
	.WORD	OID_JUNK
	.LONG	FIREBALL_ANIM

FIREBALL_ANIM
	LW	SMBRST01,2
	LW	SMBRST02,2
	LW	SMBRST03,2
	LW	SMBRST04,2
	LW	SMBRST05,2
	LW	SMBRST06,2
	LW	SMBRST07,2
	LW	SMBRST08,2
	LW	SMBRST09,2
	LW	SMBRST10,2
	LWL	1,AFUNC|1,DELETE_OBJ

a_cpypv	;move	@killtrails,a0,W
	;janz	DELETE_OBJ
	move	@PUCK_OBJECT,a7,L
	;
cpvelp	move	*a7(OXVEL),a14,L
	callr	axv
	move	a14,*a8(OXVEL),L
	move	*a7(OZVEL),a14,L
	callr	axv
	move	a14,*a8(OZVEL),L
	move	*a7(OYVEL),a14,L
	callr	axv
	move	a14,*a8(OYVEL),L
	rets

a_cpypf	;move	@killtrails,a0,W
	;janz	DELETE_OBJ
	move	@PUCK_OBJECT,a7,L
	;
cvelxp	move	*a7(OXVEL),a14,L
	callr	axvf
	MOVE	A14,A0
	ABS	A0
	CMPI	[1,0],A0
	JRGE	CPYPF_XVEL				;BR=X VELOCITY ENOUGH
;	MOVE	A14,A14
;	JRNZ	CPYPF_XVEL				;BR=NON-ZERO X VELOCITY
	MOVI	[1,0],A0
	MOVI	[-1,0],A1
	CALLA	RANGRAND
	MOVE	A0,A14					;ADD RANDOM X VELOCITY
CPYPF_XVEL

	move	a14,*a8(OXVEL),L
	move	*a7(OZVEL),a14,L
	callr	axvf
	subi	[0,4000h],a14
	move	a14,*a8(OZVEL),L
	move	*a7(OYVEL),a14,L
	callr	axvf

	MOVI	0F000H,A0
	MOVE	@BIG_PUCK,A1,W
	JRZ	CPYPF_YVEL				;BR=NORMAL PUCK
	SLL	1,A0					;BIG PUCK
CPYPF_YVEL
	SUB	A0,A14

;	subi	[0,0f000h],a14
	move	a14,*a8(OYVEL),L
	rets

axvf	move	a14,a0
	sra	1,a14		;1/2
	sra	2,a0		;
	add	a0,a14		;+ 1/4 =  3/4
	sra	2,a0
	add	a0,a14		;+ 1/16= 13/16
	rets

axv	move	a14,a0
	sra	1,a14		;1/2
	sra	2,a0		;
	add	a0,a14		;+ 1/4 =  3/4
	sra	1,a0
	add	a0,a14		;+ 1/8 =  7/8
	sra	3,a0
	add	a0,a14		;+ 1/64= 57/64
	rets

set_flat_puck_script
	clr	a1
	move	a1,@PUCK_MODE_2_DIR,W		;enable any direction
	movi	anim_flat_puck,a1
	jauc	start_anim_if_not
set_roll_puck_script
	movi	anim_roll_puck,a1
	jauc	start_anim_if_not
set_flop_puck_script
	move	@PUCK_MODE_2_DIR,a0,W
	jrnz	sfps1
	movk	2,a0
	calla	RANDU
	move	a0,@PUCK_MODE_2_DIR,W
sfps1	movi	anim_flop_puck_c,a1
	movi	anim_flopl_puck_c,a3
	cmpi	1,a0
	jrz	sfps2
	movi	anim_flop_puck_cc,a1
	movi	anim_flopl_puck_cc,a3
sfps2	move	@PUCK_M2_TIME,a14,W
	cmpi	40,a14
	jrls	sfps3
	move	a3,a1
sfps3	jauc	start_anim_if_not

	.long	anim_flop_puck_c
big_puck_scr_list
	.long	anim_flop_puck_c
	.long	anim_flopl_puck_c
	.long	anim_flip_puck_c1
	.long	anim_flip_puck_fc1
	.long	anim_flip_puck_c2
	.long	anim_flip_puck_fc2
	.long	anim_flip_puck_c3
	.long	anim_flip_puck_fc3
	.long	anim_flip_puck_c4
	.long	anim_flip_puck_fc4
	.long	anim_flip_puck_c5
	.long	anim_flip_puck_fc5

	.long	anim_flop_puck_cc
	.long	anim_flopl_puck_cc
	.long	anim_flip_puck_cc1
	.long	anim_flip_puck_fcc1
	.long	anim_flip_puck_cc2
	.long	anim_flip_puck_fcc2
	.long	anim_flip_puck_cc3
	.long	anim_flip_puck_fcc3
	.long	anim_flip_puck_cc4
	.long	anim_flip_puck_fcc4
	.long	anim_flip_puck_cc5
	.long	anim_flip_puck_fcc5

	.long	anim_flip_puck_fcc5
	.long	anim_flip_puck_fcc5
	.long	anim_flip_puck_fcc5


	.long	anim_flip_puck_fcc5
	.long	anim_flip_puck_fcc5
	.long	anim_flip_puck_fcc5
	.long	anim_flip_puck_fcc5
	.long	anim_flip_puck_fcc5
	.long	anim_flip_puck_fcc5

anim_flat_puck
	LWW	PUCK2,120|AFLIP,0
	.long	0

anim_roll_puck
	LWW	PUCK2,25|AFLIP,0
	.long	0

anim_flop_puck_c
	LWW	puck103,3|AFLIP,0
	LW	puck207,3
	LW	puck206,3
	LW	puck204,3
	LW	puck107,3
	LWW	puck204,3|AFLIP,M_FLIPH
	LW	puck206,3
	LW	puck207,3
	.long	0

anim_flopl_puck_c
	LWW	puck601,3|AFLIP,0
	LW	puck602,3
	LW	puck603,3
	LW	puck604,3
	LWW	puck603,3|AFLIP,M_FLIPH
	LW	puck602,3
	.long	0

anim_flip_puck_c1
	LWW	puck101,2|AFLIP,0
	LW	puck102,1
	LW	puck103,2
	LW	puck104,1
	LW	puck105,2
	LW	puck106,1
	LW	puck107,2
	LW	puck108,1
	LW	puck109,2
	.long	0

anim_flip_puck_fc1
	LWW	puck101,2|AFLIP,M_FLIPH
	LW	puck102,1
	LW	puck103,2
	LW	puck104,1
	LW	puck105,2
	LW	puck106,1
	LW	puck107,2
	LW	puck108,1
	LW	puck109,2
	.long	0

anim_flip_puck_c2
	LWW	puck201,2|AFLIP,0
	LW	puck202,1
	LW	puck203,2
	LW	puck204,1
	LW	puck205,2
	LW	puck206,1
	LW	puck207,2
	LW	puck208,1
	LW	puck209,2
	.long	0

anim_flip_puck_fc2
	LWW	puck201,2|AFLIP,M_FLIPH
	LW	puck202,1
	LW	puck203,2
	LW	puck204,1
	LW	puck205,2
	LW	puck206,1
	LW	puck207,2
	LW	puck208,1
	LW	puck209,2
	.long	0

anim_flip_puck_c3
	LWW	puck301,2|AFLIP,0
	LW	puck302,1
	LW	puck303,2
	LW	puck304,1
	LW	puck305,2
	LW	puck306,1
	LW	puck307,2
	LW	puck308,1
	LW	puck309,2
	.long	0

anim_flip_puck_fc3
	LWW	puck301,2|AFLIP,M_FLIPH
	LW	puck302,1
	LW	puck303,2
	LW	puck304,1
	LW	puck305,2
	LW	puck306,1
	LW	puck307,2
	LW	puck308,1
	LW	puck309,2
	.long	0

anim_flip_puck_c4
	LWW	puck401,2|AFLIP,0
	LW	puck402,1
	LW	puck403,2
	LW	puck404,1
	LW	puck405,2
	LW	puck406,1
	LW	puck407,2
	LW	puck408,1
	LW	puck409,2
	.long	0

anim_flip_puck_fc4
	LWW	puck401,2|AFLIP,M_FLIPH
	LW	puck402,1
	LW	puck403,2
	LW	puck404,1
	LW	puck405,2
	LW	puck406,1
	LW	puck407,2
	LW	puck408,1
	LW	puck409,2
	.long	0

anim_flip_puck_c5
	LWW	puck501,2|AFLIP,0
	LW	puck502,1
	LW	puck503,2
	LW	puck504,1
	LW	puck505,2
	LW	puck506,1
	LW	puck507,2
	LW	puck508,1
	.long	0

anim_flip_puck_fc5
	LWW	puck501,2|AFLIP,M_FLIPH
	LW	puck502,1
	LW	puck503,2
	LW	puck504,1
	LW	puck505,2
	LW	puck506,1
	LW	puck507,2
	LW	puck508,1
	.long	0

anim_flop_puck_cc
	LWW	puck207,2|AFLIP,M_FLIPH
	LW	puck206,1
	LW	puck204,2
	LWW	puck107,1|AFLIP,0
	LW	puck204,2
	LW	puck206,1
	LW	puck207,2
	LW	puck103,1
	.long	0

anim_flopl_puck_cc
	LWW	puck602,3|AFLIP,M_FLIPH
	LW	puck603,3
	LWW	puck604,3|AFLIP,0
	LW	puck603,3
	LW	puck602,3
	LW	puck601,3
	.long	0

anim_flip_puck_cc1
	LWW	puck109,2|AFLIP,0
	LW	puck108,1
	LW	puck107,2
	LW	puck106,1
	LW	puck105,2
	LW	puck104,1
	LW	puck103,2
	LW	puck102,1
	LW	puck101,2
	.long	0

anim_flip_puck_fcc1
	LWW	puck109,2|AFLIP,M_FLIPH
	LW	puck108,1
	LW	puck107,2
	LW	puck106,1
	LW	puck105,2
	LW	puck104,1
	LW	puck103,2
	LW	puck102,1
	LW	puck101,2
	.long	0

anim_flip_puck_cc2
	LWW	puck209,2|AFLIP,0
	LW	puck208,1
	LW	puck207,2
	LW	puck206,1
	LW	puck205,2
	LW	puck204,1
	LW	puck203,2
	LW	puck202,1
	LW	puck201,2
	.long	0

anim_flip_puck_fcc2
	LWW	puck209,2|AFLIP,M_FLIPH
	LW	puck208,1
	LW	puck207,2
	LW	puck206,1
	LW	puck205,2
	LW	puck204,1
	LW	puck203,2
	LW	puck202,1
	LW	puck201,2
	.long	0

anim_flip_puck_cc3
	LWW	puck309,2|AFLIP,0
	LW	puck308,1
	LW	puck307,2
	LW	puck306,1
	LW	puck305,2
	LW	puck304,1
	LW	puck303,2
	LW	puck302,1
	LW	puck301,2
	.long	0

anim_flip_puck_fcc3
	LWW	puck309,2|AFLIP,M_FLIPH
	LW	puck308,1
	LW	puck307,2
	LW	puck306,1
	LW	puck305,2
	LW	puck304,1
	LW	puck303,2
	LW	puck302,1
	LW	puck301,2
	.long	0

anim_flip_puck_cc4
	LWW	puck409,2|AFLIP,0
	LW	puck408,1
	LW	puck407,2
	LW	puck406,1
	LW	puck405,2
	LW	puck404,1
	LW	puck403,2
	LW	puck402,1
	LW	puck401,2
	.long	0

anim_flip_puck_fcc4
	LWW	puck409,2|AFLIP,M_FLIPH
	LW	puck408,1
	LW	puck407,2
	LW	puck406,1
	LW	puck405,2
	LW	puck404,1
	LW	puck403,2
	LW	puck402,1
	LW	puck401,2
	.long	0

anim_flip_puck_cc5
	LWW	puck508,2|AFLIP,0
	LW	puck507,1
	LW	puck506,2
	LW	puck505,1
	LW	puck504,2
	LW	puck503,1
	LW	puck502,2
	LW	puck501,1
	.long	0

anim_flip_puck_fcc5
	LWW	puck508,2|AFLIP,M_FLIPH
	LW	puck507,1
	LW	puck506,2
	LW	puck505,1
	LW	puck504,2
	LW	puck503,1
	LW	puck502,2
	LW	puck501,1
	.long	0

set_puck_shadow
	move	*a8(OYVAL),a0,L
	jrn	puck_shadow_on
puck_shadow_off
	move	@PUCK_SHADOW,a0,L
	movi	DMAGO,a14
	move	a14,*a0(OCTRL),W
	clr	a14
	move	a14,*a0(OXVEL),L
	move	a14,*a0(OZVEL),L
	clr	a14
	move	a14,*a0(OYACCEL),W
	move	a14,*a0(OYVEL),L
	rets
puck_shadow_on
	move	@PUCK_SHADOW,a0,L
	movi	DMAWNZ+01000h,a14
	move	a14,*a0(OCTRL),W
	move	*a8(OXVAL),*a0(OXVAL),L
	move	*a8(OZVAL),a14,L
	inc	a14
	move	a14,*a0(OZVAL),L
	move	*a8(OXVEL),*a0(OXVEL),L
	move	*a8(OZVEL),*a0(OZVEL),L
	clr	a14
	move	a14,*a0(OYACCEL),W
	move	a14,*a0(OYVEL),L
	move	a14,*a0(OYVAL),L
	rets

**************************************************************************
*								         *
* r_stick_and_bounce							 *
* 	input	a8 = puck object					 *
* 		a2 = angle to bounce off				 *
* 		a0 = z:x of puck					 *
*								         *
**************************************************************************
r_stick_or_nostick_bounce
	move	*a8(ODT_DIR),a14,L
	sub	a2,a14
	abs	a14
	THETA_N	a14
	cmpi	XD0800,a14
	jrls	r_stick_and_bounce
	cmpi	(XD3600-XD0800),a14
	jrlo	r_nostick_and_bounce
r_stick_and_bounce
	move	*a8(ODT_DIR),a1,L
	calla	compute_bounce_angle
	jrnc	r_nostick_and_bounce
	move	*a8(OFLAGS),a14,W	;
	ori	M_FVELADD,a14		; makes puck stick one veladd
	move	a14,*a8(OFLAGS),W	;
r_nostick_and_bounce
	move	a0,*a8(OXPOS),W
	sra	16,a0
	move	a0,*a8(OZPOS),W
	jruc	bounce_puck

r_no_coll
	clr	a0
	move	a0,@last_corner_vel,L
	move	a0,@outlaw_puck2,W
	move	a0,@goal_pass,W		;record no goal
	move	a0,@goal_pcount1,W
	move	a0,@goal_pcount2,W
	rets

r_horizontal_wall
	move	*a8(OXVAL),a1,L
	addi	[0,08000h],a1
	sra	16,a1
;	move	*a8(OXPOS),a1,W		;half
	move	*a8(OZPOS),a0,W
	cmpi	677,a0
	jrle	rhw_b
	movi	[677,0],a0
	movx	a1,a0
	movi	XD2700,a2
	jruc	r_stick_or_nostick_bounce
rhw_b	cmpi	2,a0
	jrge	rhw_9
	movi	[2,0],a0
	movx	a1,a0
	movi	XD0900,a2
	jruc	r_stick_or_nostick_bounce
rhw_9	rets

pcr_tab	.long	XD1800
	.long	0
	.long	XD2700
	.long	XD0900

pco_tab	.long	0
	.long	XD1800
	.long	XD0900
	.long	XD2700

**************************************************************************
*								         *
* r_lgoal_check								 *
* r_rgoal_check these routines check our point and our anticipated	 *
* 	      point for intersection with goal				 *
*								         *
**************************************************************************
r_lgoal_check
	callr	get_in_out
	sll	5,a4
	addi	rlj_tab,a4
	move	*a4,a4,L
	jump	a4
rlj_tab	.long	l_safety_outside
	.long	l_bounce_inside
	.long	l_bounce_outside
	.long	l_safety_inside

r_rgoal_check
	callr	get_in_out
	sll	5,a4
	addi	rrj_tab,a4
	move	*a4,a4,L
	jump	a4
rrj_tab	.long	r_safety_outside
	.long	r_bounce_inside
	.long	r_bounce_outside
	.long	r_safety_inside

l_safety_inside
	callr	goal_score_check_left
	;extra step here that kinda negates all we know to be right
	move	@goal_pcount1,a14,W
	inc	a14
	move	a14,@goal_pcount1,W
	cmpi	4,a14
	jrnz	lrsi1

	move	@PUCK_MODE,a14,W
	cmpi	PUM_SCORE,a14
	jrhs	lsi_o1
	move	@GAME_STATE,a14,W
	cmpi	INAMODE,a14
	jrz	lsi_o2
	cmpi	INPLAY,a14
	jrnz	lsi_o1
lsi_o2
	.if	BILL & 0
	.else
	calla	score_right_team		;safety, in case we miss
	.endif
lsi_o1	jruc	lrsi1
r_safety_inside
	callr	goal_score_check_right
	;extra step here that kinda negates all we know to be right
	move	@goal_pcount2,a14,W
	inc	a14
	move	a14,@goal_pcount2,W
	cmpi	4,a14
	jrnz	lrsi1

	move	@PUCK_MODE,a14,W
	cmpi	PUM_SCORE,a14
	jrhs	rsi_o1
	move	@GAME_STATE,a14,W
	cmpi	INAMODE,a14
	jrz	rsi_o2
	cmpi	INPLAY,a14
	jrnz	rsi_o1
rsi_o2
	.if	BILL & 0
	.else
	calla	score_left_team		;safety, in case we miss
	.endif
rsi_o1

lrsi1	movk	1,a14		;only 1 needed for check (sign not used)
	move	a14,@outlaw_puck2,W
	move	*a8(OYPOS),a0,W
	abs	a0
	cmpi	48,a0
	jrls	rsi_9
	move	*a8(OYVEL),a0,L
	jrp	rsi_9
	sra	2,a0
	abs	a0
	move	a0,*a8(OYVEL),L
rsi_9	rets

l_safety_outside			;puck is outside goal, do a safety check.
r_safety_outside			;puck is outside goal, do a safety check.
	clr	a14
	move	a14,@goal_pass,W
	move	a14,@goal_pcount1,W
	move	a14,@goal_pcount2,W
	rets

l_bounce_inside
	callr	goal_score_check_left
	clr	a3
	movy	a1,a3		;a3 = point 2 z
	movx	a1,a2
	sll	16,a2		;a2 = point 2 x
	cmpi	[-730,0],a2
	jrlo	lbi_clw			;check intersection on left wall
	cmpi	[-688,0],a2
	jrhi	lbi_crw			;check intersection on right wall
	cmpi	[339,0],a3
	jrhi	lbi_ct			;check top curve
	jruc	lbi_cb			;check bottom curve
lbi_clw	movi	-730,a2
	callr	get_z_from_x_midpoint
	cmpi	[376,0],a2
	jrhi	lbi_ct		;intersection is on top curve
	cmpi	[303,0],a2
	jrlo	lbi_cb		;intersection is on bottom curve
	clr	a2
	jruc	lgoal_bounce_wall_inside
lbi_crw	movi	-688,a2
	callr	get_z_from_x_midpoint
	cmpi	[392,0],a2
	jrhi	lbi_ct		;intersection is on top curve
	cmpi	[287,0],a2
	jrlo	lbi_cb		;intersection is on bottom curve
	clr	a14
	move	a14,@outlaw_puck2,W
	rets			;puck is exiting at opening, ok
lbi_ct	movi	[376,0],a7
	jruc	lbicbt
lbi_cb	movi	[303,0],a7
lbicbt	movx	a1,a2		;we use point 2, we might want point 1
	sll	16,a2
	clr	a3
	movy	a1,a3
	movi	[-706,0],a0
	move	a7,a1
	jruc	lgoal_bounce_corner_end_inside

r_bounce_inside
	callr	goal_score_check_right
	clr	a3
	movy	a1,a3		;a3 = point 2 z
	movx	a1,a2
	sll	16,a2		;a2 = point 2 x
	cmpi	[730,0],a2
	jrhi	rbi_crw			;check intersection on left wall
	cmpi	[688,0],a2
	jrlo	rbi_clw			;check intersection on right wall
	cmpi	[339,0],a3
	jrhi	rbi_ct			;check top curve
	jruc	rbi_cb			;check bottom curve
rbi_crw	movi	730,a2
	callr	get_z_from_x_midpoint
	cmpi	[376,0],a2
	jrhi	rbi_ct		;intersection is on top curve
	cmpi	[303,0],a2
	jrlo	rbi_cb		;intersection is on bottom curve
	movi	XD1800,a2
	jruc	rgoal_bounce_wall_inside
rbi_clw	movi	688,a2
	callr	get_z_from_x_midpoint
	cmpi	[392,0],a2
	jrhi	rbi_ct		;intersection is on top curve
	cmpi	[287,0],a2
	jrlo	rbi_cb		;intersection is on bottom curve
	clr	a14
	move	a14,@outlaw_puck2,W
	rets			;puck is exiting at opening, ok
rbi_ct	movi	[376,0],a7
	jruc	rbicbt
rbi_cb	movi	[303,0],a7
rbicbt	movx	a1,a2		;we use point 2, we might want point 1
	sll	16,a2
	clr	a3
	movy	a1,a3
	movi	[706,0],a0
	move	a7,a1
	jruc	rgoal_bounce_corner_end_inside

l_bounce_outside
	calla	puck_goal_sound1		;save vels for sound check later
	clr	a14
	move	a14,@goal_pass,W
	move	a14,@goal_pcount1,W
	move	a14,@goal_pcount2,W
	clr	a3
	movy	a0,a3		;a3 = point 1 z
	movx	a0,a2
	sll	16,a2		;a2 = point 1 x
	cmpi	[-730,0],a2
	jrlo	lbo_clw			;check intersection on left wall
	cmpi	[-688,0],a2
	jrhi	lbo_crw			;check intersection on right wall
	cmpi	[339,0],a3
	jrhi	lbo_ct			;check top curve
	jruc	lbo_cb			;check bottom curve
lbo_clw	movi	-730,a2
	callr	get_z_from_x_midpoint
	cmpi	[376,0],a2
	jrhi	lbo_ct		;intersection is on top curve
	cmpi	[303,0],a2
	jrlo	lbo_cb		;intersection is on bottom curve
	movi	XD1800,a2
	jruc	goal_bounce_wall_outside
lbo_crw	movi	-688,a2
	callr	get_z_from_x_midpoint
	cmpi	[392,0],a2
	jrhi	lbo_ct		;intersection is on top curve
	cmpi	[287,0],a2
	jrlo	lbo_cb		;intersection is on bottom curve
	move	@PUCK_CONTROL,a0,W
	jrz	lb4_9i
	GBLOCK	a0,a14
	move	*a14(POF_MODE),a14,W
	cmpi	PM_ONETIME,a14
	jrnz	lbo_999
lb4_9i	move	@GAME_STATE,a14,W
	cmpi	INAMODE,a14
	jrz	kom1
	cmpi	INPLAY,a14
	jrnz	lbo_999
kom1	movk	1,a14
	neg	a14
	move	a14,@goal_pass,W	;puck going through opening, score
lbo_999	rets			;no goal, period over
lbo_ct	movi	[376,0],a3
	jruc	lbocbt
lbo_cb	movi	[303,0],a3
lbocbt	movi	[-706,0],a2
	jruc	rbo_secure_bounce

r_bounce_outside
	calla	puck_goal_sound1		;save vels for sound check later
	clr	a14
	move	a14,@goal_pass,W
	move	a14,@goal_pcount1,W
	move	a14,@goal_pcount2,W
	clr	a3
	movy	a0,a3		;a3 = point 1 z
	movx	a0,a2
	sll	16,a2		;a2 = point 1 x
	cmpi	[730,0],a2
	jrhi	rbo_crw			;check intersection on left wall
	cmpi	[688,0],a2
	jrlo	rbo_clw			;check intersection on right wall
	cmpi	[339,0],a3
	jrhi	rbo_ct			;check top curve
	jruc	rbo_cb			;check bottom curve
rbo_crw	movi	730,a2
	callr	get_z_from_x_midpoint
	cmpi	[376,0],a2
	jrhi	rbo_ct		;intersection is on top curve
	cmpi	[303,0],a2
	jrlo	rbo_cb		;intersection is on bottom curve
	clr	a2
	jruc	goal_bounce_wall_outside
rbo_clw	movi	688,a2
	callr	get_z_from_x_midpoint
	cmpi	[392,0],a2
	jrhi	rbo_ct		;intersection is on top curve
	cmpi	[287,0],a2
	jrlo	rbo_cb		;intersection is on bottom curve
	move	@PUCK_CONTROL,a0,W
	jrz	rb4_9i
	GBLOCK	a0,a14
	move	*a14(POF_MODE),a14,W
	cmpi	PM_ONETIME,a14
	jrnz	rbo_999
rb4_9i	move	@GAME_STATE,a14,W
	cmpi	INAMODE,a14
	jrz	kom2
	cmpi	INPLAY,a14
	jrnz	rbo_999
kom2	movk	1,a14
	move	a14,@goal_pass,W	;puck going through opening, score
rbo_999	rets			;no goal, period over
rbo_ct	movi	[376,0],a3
	jruc	rbocbt
rbo_cb	movi	[303,0],a3
rbocbt	movi	[706,0],a2

rbo_secure_bounce
	mmtm	sp,a0
	clr	a1
	movy	a0,a1
	sll	16,a0
	callr	goal_bounce_corner_end_outside
	mmfm	sp,a1
	jrc	lboc9
	movx	a1,a0
	sll	16,a0
	srl	16,a1
	sll	16,a1
	callr	goal_bounce_corner_end_outside
	jrc	lboc9
;here we have failed a bounce we should make, put the puck outside the net and try again next collision
	jruc	put_puck_outside_net
lboc9	rets

goal_bounce_corner_end_outside
	move	*a8(OYPOS),a14,W
	jrn	gbce0
	calla	find_dir_to_point
	move	a0,a2
	jruc	gbounce_puck_corner
gbce0	calla	find_dir_to_point
	move	a0,a2
	callr	gbounce_puck_corner
	jrnc	gbce3
gbce2	move	*a8(ODT_VEL),a1,L
	cmpi	[2,0000h],a1
	jrls	gbce1
	movi	[2,0000h],a1
	move	*a8(ODT_DIR),a0,L
	calla	set_obj_to_polar
gbce1	setc
gbce3	rets

lgoal_bounce_corner_end_inside
	callr	lrgt1
	callr	safe_to_score
	jrnc	lb87
	calla	score_right_team
lb87	rets
rgoal_bounce_corner_end_inside
	callr	lrgt1
	callr	safe_to_score
	jrnc	rb87
	calla	score_left_team
rb87	rets

safe_to_score		;a safety check on previous 'no goals' (a kludge)
	move	@PUCK_MODE,a14,W
	cmpi	PUM_SCORE,a14
	jrhs	sats99
	move	@GAME_STATE,a14,W
	cmpi	INAMODE,a14
	jrz	sats1
	cmpi	INPLAY,a14,W
	jrnz	sats99
sats1	setc
	rets
sats99	clrc
	rets

lrgt1	callr	gbce0
	jruc	secure_puck_inside_goal
lgoal_bounce_wall_inside
	callr	lgbi1
	jruc	secure_puck_inside_goal
rgoal_bounce_wall_inside
	callr	rgbi1
secure_puck_inside_goal
	rets

goal_bounce_wall_outside
	move	*a8(OYPOS),a14,W
	jrn	gbw0
	jruc	gbounce_puck
lgbi1	move	@PUCK_MODE,a14,W
	cmpi	PUM_SCORE,a14
	jrhs	gbw1
	move	@GAME_STATE,a14,W
	cmpi	INAMODE,a14
	jrz	kom3
	cmpi	INPLAY,a14
	jrnz	gbw1
kom3
	.if	BILL & 0
	.else
	calla	score_right_team	;safety, in case we miss
	.endif
	jruc	gbw1
rgbi1	move	@PUCK_MODE,a14,W
	cmpi	PUM_SCORE,a14
	jrhs	gbw1
	move	@GAME_STATE,a14,W
	cmpi	INAMODE,a14
	jrz	kom4
	cmpi	INPLAY,a14
	jrnz	gbw1
kom4
	.if	BILL & 0
	.else
	calla	score_left_team		;safety, in case we miss
	.endif
gbw1	movk	1,a14		;only 1 needed for check (sign not used)
	move	a14,@outlaw_puck2,W
gbw0	callr	gbounce_puck
	jruc	gbce2

goal_score_check_left
	callr	gsc1
	jrnc	gscl9
	.if	BILL & 0
	JRUC	gscl9
	.else
	jauc	score_right_team
	.endif
goal_score_check_right
	callr	gsc1
	jrnc	gscl9
	.if	BILL & 0
	JRUC	gscl9
	.else
	jauc	score_left_team
	.endif
gsc1	move	@PUCK_CONTROL,a14,W
	jrz	gscac
	GBLOCK	a14,a14
	move	*a14(POF_MODE),a14,W
	cmpi	PM_ONETIME,a14
	jrnz	gscab
gscac	move	@goal_pass,a14,W
	jrz	gscab
	setc
	rets
gscab	clrc
gscl9	rets

**************************************************************************
*								         *
* get_in_out								 *
* 	input  a8 = object						 *
* 	output a0 = zx of point 1					 *
* 	       a1 = zx of point 2					 *
* 	       a4 = 00 - is outside, will be outside			 *
* 	            01 - is inside, will be outside			 *
* 	            10 - is outside, will be inside			 *
* 	            11 - is inside, will be inside			 *
*								         *
**************************************************************************
get_in_out
	CLR	A4
	move	*a8(OYVAL),a2,L
	CMPI	-02D0000H,A2
	JRLT	gio5
;	move	*a8(OYVAL),a2,L
;	move	*a8(OYVEL),a14,L
;	ADD	A14,A2
;	CMPI	-02D0000H,A2
;	JRGT

	move	*a8(OXVAL),a2,L
	addi	[0,08000h],a2
	sra	16,a2
;	move	*a8(OXPOS),a2,W		;half
	move	*a8(OZPOS),a14,W
	sll	16,a14
	movy	a14,a2
	move	a2,a0
;	clr	a4
	callr	are_we_inside_goal
	jrnc	gio2
	move	*a8(OXVAL),a3,L
	addi	[0,08000h],a3
	sra	16,a3
;	move	*a8(OXPOS),a3,W		;half
	jrn	gioll
	move	@outlaw_puck,a3,W
	jrp	gio_o1			;return 10, outlaw goal
	jruc	gio3
gioll	move	@outlaw_puck,a3,W
	jrn	gio_o1			;return 10, outlaw goal
gio3	movk	1,a4
gio2	move	*a8(OXVAL),a2,L
	move	*a8(OXVEL),a14,L
	add	a14,a2
	move	*a8(OZVAL),a3,L
	move	*a8(OZVEL),a14,L
	add	a3,a14
	addi	[0,08000h],a2		;half
	srl	16,a2
	movy	a14,a2
	move	a2,a1
	callr	are_we_inside_goal
	jrnc	gio4
	addk	2,a4
	rets
gio4	move	a4,a4
	jrnz	gio5
	move	@outlaw_puck2,a3,W
	jrz	gio5
	movk	01b,a4	;make bounce inside on outlaw2
gio5	rets
gio_o1	movk	10b,a4
	move	*a8(OXVAL),a1,L
	move	*a8(OXVEL),a14,L
	add	a14,a1
	addi	[0,08000h],a1		;half
	move	*a8(OZVAL),a3,L
	move	*a8(OZVEL),a14,L
	add	a3,a14
	srl	16,a1
	movy	a14,a1
	rets

**************************************************************************
*								         *
* get_z_from_x_midpoint							 *
* 	input	a0 = z:x of first point					 *
* 		a1 = z:x of second point				 *
* 		a2 = x between a0 and a1				 *
* 	output	a2 = z:x of line intersecting a0-a1 and x = a2		 *
*								         *
**************************************************************************
get_z_from_x_midpoint
	mmtm	sp,a0,a1,a3,a4
	move	a0,a3
	move	a2,a14
	move	a1,a4
	sll	16,a3
	sll	16,a4
	sll	16,a2
	sub	a3,a4	;pt2 - pt 1
	sub	a3,a2	;xn - pt 1
	sra	16,a2
	clr	a3
	divs	a4,a2	;a2 = (x - pt1) / (pt2 - pt1)
	srl	16,a0
	sll	16,a0
	srl	16,a1
	sll	16,a1
	sub	a0,a1
	mpys	a1,a2
	sll	16,a2
	add	a0,a2
	movx	a14,a2
	mmfm	sp,a0,a1,a3,a4
	rets

**************************************************************************
*								         *
* get_x_from_z_midpoint							 *
* 	input	a0 = z:x of first point					 *
* 		a1 = z:x of second point				 *
* 		a2 = x between a0 and a1				 *
* 	output	a2 = z:x of line intersecting a0-a1 and x = a2		 *
*								         *
**************************************************************************
get_x_from_z_midpoint
	mmtm	sp,a0,a1,a3,a4
	move	a0,a3
	move	a1,a4
	srl	16,a3
	sll	16,a3
	srl	16,a4
	sll	16,a4
	sll	16,a2
	move	a2,a14
	sub	a3,a4	;pt2 - pt 1
	sub	a3,a2	;zn - pt 1
	sra	16,a2
	clr	a3
	divs	a4,a2	;a2 = (x - pt1) / (pt2 - pt1)
	sll	16,a0
	sll	16,a1
	sub	a0,a1
	mpys	a1,a2
	sll	16,a2
	add	a0,a2
	srl	16,a2
	movy	a14,a2
	mmfm	sp,a0,a1,a3,a4
	rets

are_we_inside_goal	;a2 = z:x pos
	mmtm	sp,a0,a1,a2,a3,a4
	clr	a3
	movy	a2,a3
	abs	a3
	sll	16,a2
;	move	a2,a2
;	jrp	awig_nx
	abs	a2		;a2 = x, a3 = z
;	inc	a2		;shift 1 to right for truncation error	;half?
awig_nx	cmpi	[730,0],a2
	jrhi	awig_outside
	cmpi	[688,0],a2
	jrlo	awig_outside
	cmpi	[400,0],a3
	jrhi	awig_outside
	cmpi	[279,0],a3
	jrlo	awig_outside
	cmpi	[376,0],a3
	jrhi	awg_tt		;test top
	cmpi	[303,0],a3
	jrhs	awig_inside
awg_tb	movi	[303,0],a1
	jruc	awg_ttb
awg_tt	movi	[376,0],a1
awg_ttb	movi	[706,0],a0
	calla	find_dsquared_to_point_whole
	cmpi	576,a4		;24 * 24
	jrls	awig_inside
awig_outside
	clrc
	mmfm	sp,a0,a1,a2,a3,a4
	rets
awig_inside
	setc
	mmfm	sp,a0,a1,a2,a3,a4
	rets

r_vertical_wall
	move	*a8(OZPOS),a1,W
	sll	16,a1
	move	*a8(OXVAL),a0,L
	addi	[0,08000h],a0
	sra	16,a0
;	move	*a8(OXPOS),a0,W		;half
	jrn	rvwl
	cmpi	796,a0
	jrle	rvw_x
	movi	796,a0
	movy	a1,a0
	movi	XD1800,a2
	jruc	r_stick_or_nostick_bounce
rvwl	cmpi	-796,a0
	jrge	rvw_x
	movi	-796,a0
	movy	a1,a0
	clr	a2
	jruc	r_stick_or_nostick_bounce
rvw_x	rets

r_corner_check
	movi	[1,0],a4
	move	*a8(OXVAL),a0,L
	addi	[0,08000h],a0
	sra	16,a0
;	move	*a8(OXPOS),a0,W		;half
	jrn	rcc_l
	move	*a8(OZPOS),a0,W
	cmpi	340,a0
	jrgt	rcc_ur
rcc_lr	move	*a8(OXVAL),a2,L
	move	*a8(OZVAL),a3,L
	movi	[798-radius,0],a0
	movi	[radius,0],a1
	jruc	rcc_fc
rcc_ur	move	*a8(OXVAL),a2,L
	move	*a8(OZVAL),a3,L
	movi	[798-radius,0],a0
	movi	[679-radius,0],a1
	jruc	rcc_fc
rcc_l	move	*a8(OZPOS),a0,W
	cmpi	340,a0
	jrgt	rcc_ul
rcc_ll	move	*a8(OXVAL),a2,L
	move	*a8(OZVAL),a3,L
	movi	[-798+radius,0],a0
	movi	[radius,0],a1
	jruc	rcc_fc
rcc_ul	move	*a8(OXVAL),a2,L
	move	*a8(OZVAL),a3,L
	movi	[-798+radius,0],a0
	movi	[679-radius,0],a1
rcc_fc	move	a0,a4
	move	a1,a5
	calla	find_dsquared_to_point_whole_a1
	cmpi	(radius-4)*(radius-4),a1		;is it closer than radius-4
	jrlo	rcc_nfd
	move	a5,a1
	calla	find_dir_to_point
	movi	[radius-4,0],a1
	move	a0,a2
	calla	polar_to_rect
	sub	a0,a4
	sub	a1,a5
	move	a4,*a8(OXVAL),L
	move	a5,*a8(OZVAL),L
	jruc	bounce_puck_corner
rcc_nfd	rets

**************************************************************************
*								         *
* rink_check_table							 *
* 	table in format .long	bottom_left,upper_right,routine		 *
*								         *
**************************************************************************
rink_check_table
	.long	[245-30,-784-25],[430+30,-635+20],r_lgoal_check
	.long	[245-30,635-20],[430+30,784+25],r_rgoal_check
	.long	[10,-798+radius],[669,798-radius],r_no_coll
	.long	[-8000,-798+radius],[8000,798-radius],r_horizontal_wall
	.long	[72,-682],[608,682],r_no_coll
	.long	[radius,-788],[679-radius,788],r_no_coll
	.long	[radius,-9000],[679-radius,9000],r_vertical_wall
	.long	[-8000,-9000],[8000,9000],r_corner_check
	.long	0,0,0					;end of table

put_point_in_rink_rot_23
	mmtm	sp,a0,a1
	move	a3,a0
	move	a2,a1
	callr	put_point_in_rink
	move	a0,a3
	move	a1,a2
	mmfm	sp,a0,a1
	rets
put_point_in_rink_23
	mmtm	sp,a0,a1
	move	a2,a0
	move	a3,a1
	callr	put_point_in_rink
	move	a0,a2
	move	a1,a3
	mmfm	sp,a0,a1
	rets

put_point_in_rink_rot		;rotate 90 degrees
	SWAP	a0,a1
	callr	put_point_in_rink
	SWAP	a0,a1
	rets

put_point_in_rink
	cmpi	[-798+radius,0],a0
	jrlt	pplft
	cmpi	[798-radius,0],a0
	jrgt	pprgt
	cmpi	[5,0],a1
	jrge	ppir1
	movi	[5,0],a1
ppir1	cmpi	[674,0],a1
	jrle	ppir2
	movi	[674,0],a1
ppir2	rets
pplft	cmpi	[radius,0],a1
	jrle	ppll
	cmpi	[679-radius,0],a1
	jrge	ppul
	cmpi	[-793,0],a0
	jrge	ppir3
	movi	[-793,0],a0
ppir3	rets
pprgt	cmpi	[radius,0],a1
	jrle	pplr
	cmpi	[679-radius,0],a1
	jrge	ppur
	cmpi	[793,0],a0
	jrle	ppir4
	movi	[793,0],a0
ppir4	rets
ppll	mmtm	sp,a2,a3,a4
	movi	-798+radius,a2
	movi	radius,a3
	jruc	pplrul
ppul	mmtm	sp,a2,a3,a4
	movi	-798+radius,a2
	movi	679-radius,a3
	jruc	pplrul
pplr	mmtm	sp,a2,a3,a4
	movi	798-radius,a2
	movi	radius,a3
	jruc	pplrul
ppur	mmtm	sp,a2,a3,a4
	movi	798-radius,a2
	movi	679-radius,a3
pplrul	mmtm	sp,a0,a1
	sll	16,a2
	sll	16,a3
	calla	find_dsquared_to_point_whole
	cmpi	(radius-5)*(radius-5),a4
	jrls	ppx1
	mmfm	sp,a0,a1
	calla	find_dir_to_point
	movi	[radius-5,0],a1
	calla	polar_to_rect
	add	a2,a0
	add	a3,a1
	mmfm	sp,a2,a3,a4
	rets
ppx1	mmfm	sp,a0,a1
	mmfm	sp,a2,a3,a4
	rets

put_puck_outside_netp		;called when player
	mmtm	sp,a0,a1,a2,a3,a4,a5,a8
	move	@PUCK_OBJECT,a8,L
	move	*a8(OXVAL),a0,L
	move	*a8(OZVAL),a1,L
	callr	put_point_outside_netp
	move	a0,*a8(OXVAL),L
	move	a1,*a8(OZVAL),L
	mmfm	sp,a0,a1,a2,a3,a4,a5,a8
	rets

put_puck_outside_net
	mmtm	sp,a0,a1,a2,a3,a4,a5,a8
	move	@PUCK_OBJECT,a8,L
	move	*a8(OXVAL),a0,L
	move	*a8(OZVAL),a1,L
	callr	put_point_outside_net
	move	a0,*a8(OXVAL),L
	move	a1,*a8(OZVAL),L
	mmfm	sp,a0,a1,a2,a3,a4,a5,a8
	rets

put_point_outside_netp
put_point_outside_net
	move	a0,a2
	sra	16,a2
	movy	a1,a2
	callr	are_we_inside_goal
	jrnc	ppon_1
pponsb	PUSH	a0
	move	a1,a5
	abs	a0
	move	a0,a4
	move	a1,a2
	move	a4,a1
	subi	[734,0],a4
	subi	[684,0],a1
	abs	a4
	abs	a1
	move	a2,a3
	subi	[283,0],a2
	subi	[398,0],a3
	abs	a2
	abs	a3
	calla	mina03
	addi	pponl,a14
	move	*a14,a14,L
	jump	a14
pponl	.long	ppxh
	.long	ppxl
	.long	ppzl
	.long	ppzh
ppxh	movi	[734,0],a0
	PULLQ	a14
	move	a14,a14
	jrp	ppxh1
	neg	a0
ppxh1	move	a5,a1
	setc
ppon_1	rets
ppxl	movi	[684,0],a0
	PULLQ	a14
	move	a14,a14
	jrp	ppxl1
	neg	a0
ppxl1	move	a5,a1
	setc
	rets
ppzl	PULLQ	a0
	movi	[283,0],a1
	setc
	rets
ppzh	PULLQ	a0
	movi	[398,0],a1
	setc
	rets

debug_track_puck
	move	@GAME_STATE,a0,W
	cmpi	INGAME,a0
	jrz	dtp3
	cmpi	INPLAY,a0
	jrnz	dtp9
dtp3	move	@track_puck_pointer,a0,L
	cmpi	track_puck_data,a0
	jrhs	dtp1
	movi	track_puck_data,a0
dtp1	cmpi	track_puck_pointer,a0
	jrlo	dtp2
	movi	track_puck_data,a0
dtp2	move	@PUCK_OBJECT,a1,L
	move	*a1(OXVAL),a14,L
	addi	[0,08000h],a14
	sra	16,a14
;	move	*a1(OXPOS),a14,W	;half
	move	a14,*a0+,W
	move	*a1(OZPOS),a14,W
	move	a14,*a0+,W
	move	*a1(OYPOS),a14,W
	move	a14,*a0+,W
	move	@PUCK_CONTROL,a14,W
	jrz	dt_noc
	move	a14,*a0+,W
	GBLOCK	a14,a14
	move	*a14(POF_MODE),a2,W
	move	a2,*a0+,W
	move	*a14(POF_OBJECT),a14,L
	move	*a14(ANIMFRM),a14,L
	move	a14,*a0+,L
	jruc	de_ceo
dt_noc	move	a14,*a0+,W		;puck_control = 0
	move	a14,*a0+,W		;mode = 0
	move	a14,*a0+,L		;script address = 0
de_ceo	move	*a1(OXVEL),a14,L
	move	a14,*a0+,L
	move	*a1(OZVEL),a14,L
	move	a14,*a0+,L
	move	*a1(OYVEL),a14,L
	move	a14,*a0+,L
	move	*a1(ODT_DIR),a14,L
	move	a14,*a0+,L
	move	*a1(ODT_VEL),a14,L
	move	a14,*a0+,L
	move	@outlaw_puck,a14,W
	move	a14,*a0+,W
	move	@outlaw_puck2,a14,W
	move	a14,*a0+,W
	move	@bounce_save_temp,a14,L
	move	a14,*a0+,L
	move	@goal_pass,a14,W
	move	a14,*a0+,W
	move	@CPULEFT,a14,W
	move	a14,*a0+,W
	move	@PLAYER_1_BLOCK+POF_OBJECT,a2,L
	callr	dpt123
	move	@PLAYER_2_BLOCK+POF_OBJECT,a2,L
	callr	dpt123
	move	@PLAYER_4_BLOCK+POF_OBJECT,a2,L
	callr	dpt123
	move	@PLAYER_5_BLOCK+POF_OBJECT,a2,L
	callr	dpt123
	move	@PLAYER_6_BLOCK+POF_OBJECT,a2,L
	callr	dpt123
	move	@PLAYER_8_BLOCK+POF_OBJECT,a2,L
	callr	dpt123
	move	@period,a2,W
	sll	12,a2
	move	@minutes,a14,W
	sll	8,a14
	or	a14,a2
	move	@tenseconds,a14,W
	sll	4,a14
	or	a14,a2
	move	@seconds,a14,W
	or	a14,a2
	move	a2,*a0+,W
	move	a0,@track_puck_pointer,L
dtp9	rets

dpt123	move	*a2(ANIMSCR),a14,L
	move	a14,*a0+,L
	move	*a2(ANIMFRM),a14,L
	move	a14,*a0+,L
	rets
