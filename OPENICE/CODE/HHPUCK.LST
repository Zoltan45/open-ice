TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .MLIB   "HHMACS.LIB"
       2                            .FILE   "HHPUCK.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    
       7                    *
       8                    *GET THE SYSTEM STUFF
       9                    *
      10                            .INCLUDE        "HH.INC"
      11                            .INCLUDE        "HHSTRING.H"
      12                            .INCLUDE        "IMGTBL.GLO"
      13                            .include        "hhpuck.e"
      14                            .INCLUDE        "HHPUCK.TBL"
      15                            .include        "hhd.g"
      16                            .include        "hhmisc.g"
      17                            .include        "hhproc.g"
      18                            .include        "hhutil.g"
      19                            .include        "hhcontrl.g"
      20                            .include        "hhplayer.g"
      21                            .include        "hhmath.g"
      22                            .include        "hhc.g"
      23                            .include        "hha.g"
      24                            .include        "hhpall.g"
      25                            .include        "hhscore.g"
      26                            .include        "hhram.g"
      27                            .include        "hhshow.g"
      28                            .include        "hhgscr2.g"
      29                            .include        "hhgame.g"
      30                            .include        "hhspeech.g"
      31                    ;       .include        "hhtimer.g"
      32                            .ref    tenseconds
      33                            .ref    minutes
      34                            .ref    seconds
      35                            .include        "hhgctrl.g"
      36                            .include        "hhcontr2.g"
      37                    ;       .include        "hhscr_fn.g"
      38                            .ref    start_anim_if_not
      39                            .ref    a_delete_obj
      40                    ;       .include        "hhscr_sh.g"
      41                            .ref    set_immediate_onetime_script
      42                            .include        "hhtext.g"
      43                            .include        "hhcmos.g"
      44                            .include        "hhpup.g"
      45                    
      46                    ; end of include files
      47                    
      48 00000000                   .bss    PUCK_OBJECT,32          ;object of puck
      49 00000020                   .bss    PUCK_SHADOW,32          ;object of puck shadow
      50 00000040                   .bss    PUCK_CONTROL,16         ;player controlling puck (0=no player)
      51 00000050                   .bss    PUCK_CONTROL_START,32   ;time when puck control last changed
      52 00000070                   .bss    PUCK_LAST_CONTROL,16    ;player who last controlled puck (for passing, shooting)
      53 00000080                   .bss    PUCK_INTENDED,16        ;player puck is intended for
      54 00000090                   .bss    NO_PUCK_SLOW,16
      55 000000a0                   .bss    PUCK_OPEN_CONTROL_TIME,16 ;time til last person to touch puck can touch it again
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    2

      56 000000b0                   .bss    PUCK_OPEN_LAST_TIME,16  ;time til we kill all last puck data and puck mode (>= puck_open
      57 000000c0                   .bss    PUCK_MODE,16            ;only valid if puck_control = 0
      58 000000d0                   .bss    PUCK_MODE_2,16          ;only valid if puck_control = 0
      59 000000e0                   .bss    PUCK_MODE_2_DIR,16      ;clockwise or counterclockwise puck_mode_2
      60 000000f0                   .bss    PUCK_M2_TIME,16         ;time at current state (1,2) of PUCK_MODE_2 (if on ground)
      61 00000100                   .bss    outlaw_puck,16          ;-1 = puck is outlawed from left goal, 1 = puck is outlawed from
      62 00000110                   .bss    outlaw_puck2,16         ;-1 = puck is stuck in left goal, 1 = puck is stuck in right goa
      63 00000120                   .bss    trigger_puck_sound,16
      64 00000130                   .bss    puck_owner_data,8*8
      65 00000170                   .bss    puck_owner_pointer,32
      66 00000190                   .bss    not_free_receiver,16    ;receiver is not free to move ok (clear after knock down, or oth
      67 000001a0                   .bss    bounce_save_temp,32
      68 000001c0                   .bss    goal_pass,16            ;goal is about to pass through -1=left goal +1=right goal (so go
      69 000001d0                   .bss    goal_pcount1,16
      70 000001e0                   .bss    goal_pcount2,16
      71 000001f0                   .bss    track_puck_data,(16*48)*2000
      72 001771f0                   .bss    track_puck_pointer,32
      73 00177210                   .bss    bhit_dest_time,32               ;ok to bounce off board and be intended (is time of inte
      74 00177230                   .bss    PUCK_NEWDIR_TIME,32     ;the puck last changed direction at this time
      75 00177250                   .bss    killtrails,16
      76 00177260                   .bss    show_puck_on_fire,16    ;actually show puck on fire
      77 00177270                   .bss    puck_control_blink,16
      78                    
      79 00177280                   .BSS    SHOT_ATTEMPTS,16        ;SHOOTER'S ATTEMPTS SINCE LAST GOAL
      80 00177290                   .BSS    SHOTIRQ,32              ;IRQ TIME OF SHOT
      81 001772b0                   .BSS    GOALIE_MISS,16          ;GOALIE WILL GIVE UP THE GOAL
      82 001772c0                   .BSS    FIVE_HOLE,16            ;FIVE HOLE SCORE
      83                    
      84 00000000                   .TEXT
      85 00000000                   .EVEN
      86                    
      87                    **************************************************************************
      88                    *                                                                        *
      89                    * puck_watch                                                             *
      90                    *       this is the process that watches the puck, and when a player     *
      91                    *       does not control it, watches for player interaction and rink     *
      92                    *       collisions                                                       *
      93                    *        maybe make this an irq event                                    *
      94                    *                                                                        *
      95                    **************************************************************************
      96 00000000           puck_watch
      97 00000000     0d5f  pw_0    calla   set_puck_control_indicator
         00000010 00000000! 
      98 00000030     05a0          move    @PUCK_CONTROL,a0,W
         00000040 00000040- 
      99 00000060     ca12          jrz     pw_free                 ;puck is free
     100 00000070                   GBLOCK  a0,a6
     101 000000c0     07a8          move    @PUCK_OBJECT,a8,L
         000000d0 00000000- 
     102 000000f0     b4ce          move    *a6(POF_MODE),a14,W
         00000100     0210  
     103 00000110     0b4e          cmpi    PM_ONETIME,a14
         00000120     fff2  
     104 00000130     ca00          jrz     puck_rink_check         ;if we have control, but are onetimeing, still check rink
         00000140     0f05  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    3

     105 00000150     0d3f          callr   puck_shadow_off
         00000160     14c3  
     106 00000170     c000          jruc    set_puck_script
         00000180     0fc1  
     107                    
     108 00000190     05a4  pw_free move    @PUCK_OPEN_LAST_TIME,a4,W
         000001a0 000000b0- 
     109 000001c0     ca0e          jrz     pw_f3
     110 000001d0     1424          dec     a4
     111 000001e0     0584          move    a4,@PUCK_OPEN_LAST_TIME,W
         000001f0 000000b0- 
     112 00000210     cb09          jrnz    pw_f3
     113 00000220     5684          clr     a4
     114 00000230     0584          move    a4,@PUCK_INTENDED,W
         00000240 00000080- 
     115 00000260     0584          move    a4,@PUCK_LAST_CONTROL,W
         00000270 00000070- 
     116 00000290     0d3f          callr   set_safe_puck_mode_a4
         000002a0     0ed5  
     117 000002b0     05a4  pw_f3   move    @PUCK_OPEN_CONTROL_TIME,a4,W
         000002c0 000000a0- 
     118 000002e0     ca04          jrz     pwf33
     119 000002f0     1424          dec     a4
     120 00000300     0584          move    a4,@PUCK_OPEN_CONTROL_TIME,W
         00000310 000000a0- 
     121 00000330     0d3f  pwf33   callr   puck_rink_check
         00000340     0ee5  
     122 00000350     05a4          move    @NO_PUCK_SLOW,a4,W
         00000360 00000090- 
     123 00000380     ca05          jrz     pwf_1
     124 00000390     1424          dec     a4
     125 000003a0     0584          move    a4,@NO_PUCK_SLOW,W
         000003b0 00000090- 
     126 000003d0     c008          jruc    pwf_2
     127 000003e0     07a8  pwf_1   move    @PUCK_OBJECT,a8,L
         000003f0 00000000- 
     128 00000410     b704          move    *a8(OYVAL),a4,L
         00000420     0160  
     129 00000430     ce02          jrn     pwf_2
     130 00000440     0d3f          callr   slow_puck_down
         00000450     0e47  
     131 00000460     c000  pwf_2   jruc    puck_player_check
         00000470     061b  
     132                    
     133                    **************************************************************************
     134                    *                                                                        *
     135                    * PUCK_GOALIE_CHECK - CHECK FOR GOALIE COLLISION WITH PUCK               *
     136                    *                                                                        *
     137                    * PASS:                                                                  *
     138                    * A3 = GOALIE NUMBER                                                     *
     139                    * A4 = DISTANCE FROM GOALIE'S PUCK POINT                                 *
     140                    * A6 = PLAYER BLOCK                                                      *
     141                    * A8 = OBJECT                                                            *
     142                    * RETURN:                                                                *
     143                    * NUTIN'                                                                 *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    4

     144                    *                                                                        *
     145                    **************************************************************************
     146                    
     147              0032  INTERCEPT_DIST_PERCENT  EQU     50              ;INTERCEPT DISTANCE FROM GOALIE
     148              0019  SPEED_PERCENT           EQU     25              ;PUCK SPEED
     149              005f  REBOUND_PERCENT         EQU     95              ;NUMBER OF REBOUNDS
     150              0026  SHOOTER_PERCENT         EQU     38      ;easier ;SHOOTER
     151                    
     152              005a  MISS_PERCENT_MODIFIER   EQU     90 ;95,90,80,75 ;LARGER INCREASES SCORING
     153              000a  MAX_SCORE_DIFF          EQU     10              ;MAX SCORE DIFFERENCE
     154              0001  MIN_SCORE_DIFF          EQU     1               ;MIN SCORE DIFFERENCE
     155                    
     156              0005  MAX_SHOT_ATTEMPT        EQU     5
     157                    
     158              005c  MAX_INTERCEPT_DIST      EQU     92 ;05CH        
     159                    
     160 00000480           SHOT_ATTEMPT_TABLE
     161                    ;       .WORD   0,5,25,50,100
     162 00000480     0000          .WORD   0,5,10,20,500
     163                    
     164 000004d0           shot_attempt_drone_table
     165 000004d0     0000          .WORD   0,5,10,20,100
     166                    
     167                    
     168 00000520           SCORE_DIFF_TABLES
     169 00000520 00000660'         .LONG   POINT_1_TABLE,POINT_2_TABLE,POINT_3_TABLE,POINT_4_TABLE
     170 000005a0 000007a0'         .LONG   POINT_5_TABLE,POINT_6_TABLE,POINT_7_TABLE,POINT_8_TABLE
     171 00000620 000008e0'         .LONG   POINT_9_TABLE,POINT_10_TABLE
     172                    
     173                    ;POINT_n_TABLE
     174                    ;       .WORD   GREATER THAN 2 MINS, 1 MIN, 30 SECS, 10 SECS, 0 SECS
     175                    
     176                    
     177                    ;MODIFIER VALUES FOR MISS_PERCENT_MODIFIER:
     178                    ;
     179                    ; ADDED IF SHOOTING ON WINNING TEAM
     180                    ; SUBTRACTED TWICE IF SHOOTING ON LOSING TEAM (once, MDP) (easier)
     181                    
     182 00000660           POINT_1_TABLE
     183 00000660     0000          .WORD    0, 0, 0, 0, 0
     184 000006b0           POINT_2_TABLE
     185 000006b0     0000          .WORD    0, 0, 0, 0, 0
     186 00000700           POINT_3_TABLE
     187 00000700     0000          .WORD    0, 0, 0, 0, 0
     188 00000750           POINT_4_TABLE
     189 00000750     0001          .WORD    1, 1, 1, 1, 1
     190 000007a0           POINT_5_TABLE
     191 000007a0     0002          .WORD    2, 2, 2, 2, 2
     192 000007f0           POINT_6_TABLE
     193 000007f0     0005          .WORD    5, 5, 5, 5, 5
     194 00000840           POINT_7_TABLE
     195 00000840     0007          .WORD    7, 7, 7, 7, 7
     196 00000890           POINT_8_TABLE
     197 00000890     000a          .WORD   10,10,10,10,10
     198 000008e0           POINT_9_TABLE
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    5

     199 000008e0     000a          .WORD   10,10,10,10,10
     200 00000930           POINT_10_TABLE
     201 00000930     000a          .WORD   10,10,10,10,10
     202                    
     203                    ;POINT_1_TABLE
     204                    ;       .WORD    0, 0, 0, 1, 2
     205                    ;POINT_2_TABLE
     206                    ;       .WORD    0, 0, 1, 2, 5
     207                    ;POINT_3_TABLE
     208                    ;       .WORD    0, 1, 2, 5, 7
     209                    ;POINT_4_TABLE
     210                    ;       .WORD    1, 2, 5, 7,10
     211                    ;POINT_5_TABLE
     212                    ;       .WORD    2, 5, 7,10,10
     213                    ;POINT_6_TABLE
     214                    ;       .WORD    5, 7,10,10,10
     215                    ;POINT_7_TABLE
     216                    ;       .WORD    7,10,10,10,10
     217                    ;POINT_8_TABLE
     218                    ;       .WORD   10,10,10,10,10
     219                    ;POINT_9_TABLE
     220                    ;       .WORD   10,10,10,10,15
     221                    ;POINT_10_TABLE
     222                    ;       .WORD   10,10,10,15,15
     223                    
     224                    **************************************************************************
     225                    *                                                                        *
     226                    * NUMBER OF REBOUNDS                                                     *
     227                    *                                                                        *
     228                    **************************************************************************
     229                    
     230 00000980           TSAVE_MOD_TABLE
     231                            ;       0   1   2   3   4   5   6   7   8   9   10
     232                    ;       .WORD   0,102,205,307,410,512,614,717,819,922,1024
     233                    
     234                    ;       .WORD   0, 12, 25, 37, 50, 62, 75, 87,100,112,125
     235                    ;       .WORD   0, 40, 80, 90,120,150,180,210,240,270,300
     236 00000980     0000          .WORD   0,128,256,512,1024,1024,1024,1024,1024,1024,1024
     237                    
     238 00000a30           tsave_mod_drone_table
     239                            ;       0   1   2   3   4   5   6   7   8   9   10
     240 00000a30     0000          .word   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
     241                    
     242                    **************************************************************************
     243                    *                                                                        *
     244                    * HIGH WORD OF SPEED                                                     *
     245                    *                                                                        *
     246                    **************************************************************************
     247                    
     248 00000ae0           SPEED_MOD_TABLE
     249                            ;        14   15   16   17   18   19   20   21   22   23   24
     250 00000ae0     0039          .WORD    57, 114, 170, 228, 284, 341, 398, 455, 512, 569, 626
     251                            ;        25   26   27   28   29   30   31   32   33   34   35
     252 00000b90     02ab          .WORD   683, 740, 796, 853, 910, 967,1024,1025,1026,1027,1028
     253                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    6

     254                    
     255 00000c40           PUCK_GOALIE_CHECK0
     256 00000c40     05a0          MOVE    @PUCK_CONTROL,A0,W
         00000c50 00000040- 
     257                    ;       JRNZ    PGC_DONE                        ;BR=SOMEBODY HAS CONTROL
     258                    ;       JRNZ    PGC_RESET                       ;BR=SOMEBODY HAS CONTROL
     259 00000c70     ca0a          JRZ     PGC0_CHECK_PUCK_MODE            ;BR=NOBODY HAS CONTROL
     260                    
     261 00000c80                   GBLOCK  A0,A0
     262 00000cc0     b40e          MOVE    *A0(POF_MODE),A14,W
         00000cd0     0210  
     263 00000ce0     15ae          SUBK    PM_ONETIME,A14
     264 00000cf0     cb00          JRNZ    PGC_RESET                       ;BR=NOT THE ONE TIMER CASE
         00000d00     0362  
     265 00000d10     c00b          JRUC    PGC0_GO
     266 00000d20           PGC0_CHECK_PUCK_MODE
     267 00000d20     05ae          MOVE    @PUCK_MODE,A14,W
         00000d30 000000c0- 
     268 00000d50     0b4e          CMPI    PUM_SCORE,A14
         00000d60     ff9c  
     269 00000d70     ca00          JREQ    PGC_DONE
         00000d80     036a  
     270 00000d90     0b4e          CMPI    PUM_FACEOFF,A14
         00000da0     ff9b  
     271 00000db0     ca00          JREQ    PGC_DONE
         00000dc0     0366  
     272 00000dd0           PGC0_GO
     273                    
     274                    ;       MOVE    @PUCK_NEWDIR_TIME,A14,L
     275                    ;       MOVE    *A8(ODT_GCOMPTIME),A1,L
     276                    ;       CMP     A1,A14
     277                    ;       JREQ
     278                    ;       JRUC    PGC_CHECK_SAVETIME
     279                    
     280                    
     281                    ;       JRZ     PGC0_CHECK_SIDE                 ;BR=NOBODY HAS CONTROL
     282                    ;
     283                    ;       GBLOCK  a0,a5
     284                    ;       MOVE    *A5(POF_MODE),A14,W
     285                    ;       CMPI    PM_ONETIME,A14
     286                    ;       JRNE    PGC_DONE                        ;BR=NOT THE ONE TIMER CASE
     287                    ;PGC0_CHECK_SIDE
     288                    
     289 00000dd0     b50e          MOVE    *A8(ODT_GFLAGS),A14,W
         00000de0     0630  
     290 00000df0     1f8e          BTST    B_MISSSAVE,A14
     291 00000e00     cb00          JRNZ    PGC_CHECK_MISS                  ;BR=MISSIN' PUCK
         00000e10     0323  
     292                    
     293 00000e20     57ce          CLR     A14
     294 00000e30     058e          MOVE    A14,@GOALIE_MISS,W              ;DON'T GIVE UP ANYTHING YET!
         00000e40 001772b0- 
     295                    
     296 00000e60     aec3          MOVB    *A6(POF_NUMBER),A3
         00000e70     0000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    7

     297                    
     298 00000e80     07a9          MOVE    @PUCK_OBJECT,A9,L
         00000e90 00000000- 
     299 00000eb0     b724          MOVE    *A9(OXVAL),A4,L
         00000ec0     0140  
     300                    
     301 00000ed0     4e63          MOVE    A3,B3
     302 00000ee0     1493          SUBK    4,B3
     303 00000ef0     cb0b          JRNZ    PGC0_CHECK_RIGHT                ;BR=RIGHT GOALIE
     304                    
     305 00000f00     0b64          CMPI    -019B0000H,A4
         00000f10 019affff  
     306 00000f30     c500          JRGE    PGC_RESET                       ;BR=IN FRONT OF BLUELINE+EXTRA
         00000f40     033e  
     307 00000f50     0b64          CMPI    LEFT_GOALLINE_X,A4
         00000f60 02afffff  
     308 00000f80     c600          JRLE    PGC_RESET                       ;BR=BEHIND LEFT GOALLINE
         00000f90     0339  
     309 00000fa0     c00a          JRUC    PUCK_GOALIE_CHECK
     310                    
     311 00000fb0           PGC0_CHECK_RIGHT
     312 00000fb0     0b64          CMPI    019B0000H,A4
         00000fc0 fe64ffff  
     313 00000fe0     c600          JRLE    PGC_RESET                       ;BR=IN FRONT OF BLUELINE+EXTRA
         00000ff0     0333  
     314 00001000     0b64          CMPI    RGHT_GOALLINE_X,A4
         00001010 fd4fffff  
     315 00001030     c500          JRGE    PGC_RESET                       ;BR=BEHIND RIGHT GOALLINE
         00001040     032e  
     316                    
     317 00001050           PUCK_GOALIE_CHECK
     318                    ;       MOVE    @PUCK_INTENDED,A5,W
     319                    ;       CMP     A3,A5
     320                    ;       JREQ    PGC_DONE                        ;BR=INTENDED FOR GOALIE
     321 00001050     aece          MOVB    *A6(POF_IGNORE_PUCK),A14
         00001060     0598  
     322 00001070     cb00          JRNZ    PGC_DONE                        ;BR=IGNORE PUCK
         00001080     033a  
     323 00001090     05a0          MOVE    @PUCK_OPEN_CONTROL_TIME,A0,W
         000010a0 000000a0- 
     324 000010c0     ca06          JRZ     PGC_OPEN                        ;BR=DON'T CARE ABOUT LAST CONTRL
     325 000010d0     05a0          MOVE    @PUCK_LAST_CONTROL,A0,W
         000010e0 00000070- 
     326 00001100     4803          CMP     A0,A3
     327 00001110     ca00          JREQ    PGC_DONE                        ;BR=GOALIE CONTROLLED PUCK LAST
         00001120     0330  
     328 00001130           PGC_OPEN
     329 00001130     b4ce          MOVE    *A6(POF_MODE),A14,W             ;CHECK INTERRUPTABLE SEQUENCES
         00001140     0210  
     330                    ;       CMPI    PM_GHUGPOST,B0
     331                    ;       JREQ    PGC_GO
     332                    ;       CMPI    PM_GSIDESHUFF,B0
     333                    ;       JREQ    PGC_GO
     334 00001150     0b4e          CMPI    PM_GSTAND,A14
         00001160     ffff  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    8

     335 00001170     ca13          JREQ    PGC_GO
     336 00001180     0b4e          CMPI    PM_GSKATE,A14
         00001190     fffe  
     337 000011a0     ca10          JREQ    PGC_GO
     338 000011b0     0b4e          CMPI    PM_GPASS,A14
         000011c0     fffd  
     339 000011d0     ca0d          JREQ    PGC_GO
     340 000011e0     0b4e          CMPI    PM_GSKID,A14
         000011f0     fffb  
     341 00001200     ca0a          JREQ    PGC_GO
     342 00001210     0b4e          CMPI    PM_GDEFLECT,A14
         00001220     fff4  
     343 00001230     ca07          JREQ    PGC_GO
     344 00001240     0b4e          CMPI    PM_GCHECKED,A14
         00001250     ffeb  
     345 00001260     ca04          JREQ    PGC_GO
     346 00001270     0b4e          CMPI    PM_GCROSSCHECK,A14
         00001280     fff9  
     347 00001290     cb00          JRNE    PGC_DONE                        ;BR=DON'T INTERRUPT SEQUENCE
         000012a0     0318  
     348 000012b0           PGC_GO
     349 000012b0     b720          MOVE    *A9(ODT_VEL),A0,L
         000012c0     04d0  
     350 000012d0     ca00          JRZ     PGC_RESET                       ;BR=STOPPED
         000012e0     0304  
     351                    
     352 000012f0     b72e          MOVE    *A9(OYVAL),A14,L
         00001300     0160  
     353 00001310     0b6e          CMPI    MAX_GAIN_POSSY,A14
         00001320 0003ffff  
     354 00001340     c405          JRLT    PGC_NOSLOW                      ;BR=TOO HIGH IN THE AIR
     355                    
     356                    ;       CMPI    GSLOW_PUCK-040000H,A0
     357 00001350     0b60          CMPI    GSLOW_PUCK,A0
         00001360 ffefffff  
     358 00001380     c600          JRLE    PGC_RESET                       ;BR=MOVING SLOW ENOUGH TO FETCH
         00001390     02f9  
     359                    ;       JRGT    PGC_NOSLOW
     360                    ;
     361                    ;       MOVE    *A6(POF_D_PUCK),A14,W
     362                    ;       CMPI    080H,A14
     363                    ;       JRLT    PGC_NOSLOW                      ;BR=TOO CLOSE, TRY TO SAVE
     364                    ;
     365                    ;       JRUC    PGC_RESET
     366 000013a0           PGC_NOSLOW
     367                    
     368 000013a0     aec0          MOVB    *A6(POF_DIRECTION),A0           ;GET GOALIE'S FACING DIRECTION
         000013b0     0390  
     369                    ;       DEC     A0
     370                    ;       SLL     5,A0
     371                    ;       ADDI    FIX_GOALIE_DIR_TABLE,A0
     372                    ;       MOVE    B3,A14
     373                    ;       SLL     2,A14
     374                    ;       ADD     A14,A0
     375                    ;       MOVB    *A0,A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    9

     376                    
     377 000013c0     4e00          MOVE    A0,B0
     378 000013d0     4e04          MOVE    A0,B4
     379                    
     380 000013e0     4c1e          MOVE    B0,B14
     381 000013f0     0b90          ANDI    3,B0
         00001400 fffffffc  
     382 00001420     1470          SUBK    3,B0                            ;DIRECTION 3 OR 7 FLAG
     383 00001430     ca0e          JRZ     PGC_CHECK_X                     ;BR=DIRECTION 3 OR 7
     384                    
     385 00001440     b721          MOVE    *A9(OZVEL),A1,L
         00001450     00e0  
     386 00001460     ca0b          JRZ     PGC_CHECK_X                     ;BR=NOT MOVIN' IN Z
     387                    
     388 00001470     0b9e          ANDI    4,B14
         00001480 fffffffb  
     389 000014a0     ca04          JRZ     PGC_CHECK_ZVEL_2AND8            ;BR=DIRECTION 2 AND 8 CHECK
     390                    
     391 000014b0     4c21          MOVE    A1,A1
     392 000014c0     c100          JRP     PGC_RESET                       ;BR=GOIN' WRONG WAY
         000014d0     02e5  
     393 000014e0     c003          JRUC    PGC_CHECK_X
     394 000014f0           PGC_CHECK_ZVEL_2AND8
     395 000014f0     4c21          MOVE    A1,A1
     396 00001500     ce00          JRN     PGC_RESET                       ;BR=GOIN' WRONG WAY
         00001510     02e1  
     397 00001520           PGC_CHECK_X
     398                    
     399                    ;       CLR     A10                             ;FLAG NO ANGLE 3(7) DATA
     400 00001520     57ce          CLR     A14                             ;FLAG NO ANGLE 3(7) DATA
     401                    ;       MOVE    A14,*A13(PGDIMPACT),L
     402 00001530     b3cd          MOVE    A14,*A13(PGXIMPACT),L
         00001540     0120  
     403                    
     404 00001550     56b5          CLR     B5                              ;DEFAULT PUCK ZDEST OUTSIDE GOAL
     405 00001560     b721          MOVE    *A9(OXVEL),A1,L                 ;PUCK
         00001570     0100  
     406                    ;       MOVE    *A9(OXVAL),A4,L                 ;PUCK X POSITION IN A4
     407 00001580     b702          MOVE    *A8(OXVAL),A2,L                 ;GOALIE
         00001590     0140  
     408                    
     409 000015a0     576b          CLR     A11                             ;FLAG CALCULATE Z INTERCEPT
     410                    
     411 000015b0     4c73          MOVE    B3,B3
     412 000015c0     cb0e          JRNZ    PGC_CHECK_RIGHT_GOAL            ;BR=RIGHT GOALIE
     413                    
     414 000015d0     09e0          MOVI    LEFT_GOALLINE_X,A0
         000015e0 fd500000  
     415 00001600     4c21          MOVE    A1,A1
     416 00001610     ca04          JRZ     PGC_LEFT_CHECK_3OR7             ;BR=NO PUCK X MOTION
     417 00001620     cf00          JRNN    PGC_RESET                       ;BR=PUCK HEADING AWAY (RIGHT)
         00001630     02cf  
     418                    
     419 00001640     4844          CMP     A2,A4
     420 00001650     c512          JRGE    PGC_CHECK_GOAL                  ;BR=PUCK X IN FRONT OF GOALIE X
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   10

     421 00001660           PGC_LEFT_CHECK_3OR7
     422 00001660     4c10          MOVE    B0,B0
     423 00001670     ca00          JRZ     PGC_RESET                       ;BR=DIRECTION 3 OR 7
         00001680     02ca  
     424 00001690     182b          MOVK    1,A11                           ;FLAG CALCULATE X INTERCEPT
     425 000016a0     c00d          JRUC    PGC_CHECK_GOAL
     426                    
     427 000016b0           PGC_CHECK_RIGHT_GOAL
     428 000016b0     09e0          MOVI    RGHT_GOALLINE_X,A0
         000016c0 02b00000  
     429 000016e0     4c21          MOVE    A1,A1
     430 000016f0     ca04          JRZ     PGC_RIGHT_CHECK_3OR7            ;BR=PUCK NO X MOTION
     431 00001700     ce00          JRN     PGC_RESET                       ;BR=PUCK HEADING AWAY (LEFT)
         00001710     02c1  
     432                    
     433 00001720     4844          CMP     A2,A4
     434 00001730     c604          JRLE    PGC_CHECK_GOAL                  ;BR=PUCK X IN FRONT OF GOALIE X
     435 00001740           PGC_RIGHT_CHECK_3OR7
     436 00001740     4c10          MOVE    B0,B0
     437 00001750     ca00          JRZ     PGC_RESET                       ;BR=DIRECTION 3 OR 7
         00001760     02bc  
     438 00001770     182b          MOVK    1,A11                           ;FLAG CALCULATE X INTERCEPT
     439                    ;       JRUC    PGC_CHECK_GOAL
     440                    
     441 00001780           PGC_CHECK_GOAL
     442 00001780     4480          SUB     A4,A0
     443 00001790     0d5f          CALLA   SAFEDIV
         000017a0 00000000! 
     444 000017c0     cc0a          JRV     PGC_CALC_GOALIE_INTERCEPT       ;BR=OVERFLOW!
     445                            .if     DEBUG
     446                            LOCKON  N
     447                            .endif
     448                    ;       JRN     PGC_CALC_GOALIE_INTERCEPT       ;BR=TOO MUCH TIME
     449                    
     450 000017d0     b720          MOVE    *A9(OZVEL),A0,L
         000017e0     00e0  
     451 000017f0     0d5f          CALLA   SAFEMULT
         00001800 00000000! 
     452 00001820     c904          JRNC    PGC_CALC_GOALIE_INTERCEPT       ;BR=WAY OUT THERE!
     453 00001830     b72e          MOVE    *A9(OZVAL),A14,L
         00001840     0180  
     454 00001850     41c1          ADD     A14,A1                          ;Z @ GOAL LINE X
     455 00001860     4e25          MOVE    A1,B5                           ;PUCK Z DEST
     456                    
     457 00001870           PGC_CALC_GOALIE_INTERCEPT
     458 00001870     4d6b          MOVE    A11,A11
     459 00001880     cb66          JRNZ    PGC_CALC_GOALIE_INTERCEPTZ      ;BR=CALCULATE X INTERCEPT
     460                    
     461                    ;       MOVE    B0,B14
     462                    ;       ANDI    3,B0
     463                    ;       SUBK    3,B0                            ;DIRECTION 3 OR 7 FLAG
     464                    ;
     465                    ;       MOVE    A2,A0                           ;GOALIE X
     466                    ;       ABS     A0
     467                    ;       MOVE    A4,A1                           ;PUCK X
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   11

     468                    ;       ABS     A1
     469                    ;
     470                    ;       CMP     A0,A1
     471                    ;       JRLE    PGC_CALC_GO                     ;BR=PUCK X IN FRONT OF GOALIE X
     472                    ;
     473                    ;       MOVE    B0,B0
     474                    ;       JRZ     PGC_RESET                       ;BR=DIRECTION 3 OR 7
     475                    ;
     476                    ;       MOVE    *A8(OZVAL),A0,L
     477                    ;       MOVE    *A9(OZVAL),A1,L
     478                    ;
     479                    ;       ANDI    4,B14
     480                    ;       JRZ     PGC_CALC_CHECK_2AND8            ;BR=DIRECTION 2 AND 8 CHECK
     481                    ;
     482                    ;       CMP     A0,A1                           ;DIRECTION 4 AND 6 CHECK
     483                    ;       JRGE    PGC_CALC_GOALIE_INTERCEPTZ      ;BR=SOLVE FOR Z
     484                    ;       JRUC    PGC_RESET                       ;BR=PUCK BEHIND GOALIE
     485                    ;
     486                    ;PGC_CALC_CHECK_2AND8
     487                    ;       CMP     A0,A1                           ;DIRECTION 2 AND 8 CHECK
     488                    ;       JRLE    PGC_CALC_GOALIE_INTERCEPTZ      ;BR=SOLVE FOR Z
     489                    ;       JRUC    PGC_RESET                       ;BR=PUCK BEHIND GOALIE
     490                    ;
     491                    ;PGC_CALC_GO
     492                    
     493                    ;       MOVE    *A8(OXVAL),A0,L
     494 00001890     4c40          MOVE    A2,A0
     495 000018a0     4c0b          MOVE    A0,A11                          ;X IMPACT POSITION
     496 000018b0     4e09          MOVE    A0,B9
     497                    ;       MOVE    *A9(OXVAL),A4,L
     498 000018c0     4e8a          MOVE    A4,B10
     499 000018d0     4480          SUB     A4,A0
     500                    ;       GETST   A14
     501 000018e0     b721          MOVE    *A9(OXVEL),A1,L
         000018f0     0100  
     502                    ;       GETST   A4
     503                    ;       XOR     A4,A14
     504                    ;       BTST    31,A14
     505                    ;       JRNZ    PGC_RESET                       ;BR=DIFFERENT SIGNS
     506                    
     507                    ;       MOVE    *A9(OZVAL),A14,L
     508                    ;       CMPI    TOP_CREASE_Z,A14
     509                    ;       JRGT    PGC_CALC_CHECK_Z
     510                    ;       CMPI    BOT_CREASE_Z,A14
     511                    ;       JRGE    PGC_CALC_TIME
     512                    ;PGC_CALC_CHECK_Z
     513                    ;       MOVE    *A8(OZVAL),A4,L
     514                    ;       SUB     A14,A4
     515                    ;       GETST   A4
     516                    ;       MOVE    *A9(OZVEL),A5,L
     517                    ;       GETST   A5
     518                    ;       XOR     A5,A4
     519                    ;       BTST    31,A4
     520                    ;
     521                    ;       LOCKON  NZ
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   12

     522                    ;
     523                    ;       JRNZ    PGC_RESET                       ;BR=DIFFERENT SIGNS
     524                    ;PGC_CALC_TIME
     525                    
     526 00001900     0d5f          CALLA   SAFEDIV
         00001910 00000000! 
     527 00001930     cc00          JRV     PGC_RESET                       ;BR=OVERFLOW!
         00001940     029e  
     528                            .if     DEBUG
     529                            LOCKON  N
     530                            .endif
     531 00001950     4c24          MOVE    A1,A4
     532                    ;       SRA     16,A4                           ;A4 = TIME WITH NO FRICTION
     533                    
     534 00001960     b720          MOVE    *A9(OZVEL),A0,L
         00001970     00e0  
     535 00001980     0d5f          CALLA   SAFEMULT
         00001990 00000000! 
     536 000019b0     c900          JRNC    PGC_RESET                       ;BR=OVERFLOW!
         000019c0     0296  
     537 000019d0     4c25          MOVE    A1,A5
     538 000019e0     b721          MOVE    *A9(OZVAL),A1,L
         000019f0     0180  
     539 00001a00     4025          ADD     A1,A5                           ;A5 = Z @ GOALIE'S X
     540                    
     541 00001a10     4ea7          MOVE    A5,B7                           ;Z IMPACT POSITION
     542 00001a20     b702          MOVE    *A8(OZVAL),A2,L
         00001a30     0180  
     543 00001a40     4445          SUB     A2,A5
     544                    
     545 00001a50     4c10          MOVE    B0,B0
     546 00001a60     ca00          JRZ     PGC_DIST_CHECK_3OR7             ;EITHER 3 OR 7 DIRECTION
         00001a70     00c3  
     547 00001a80     4c11          MOVE    B0,B1
     548                    
     549 00001a90     4f3e          MOVE    B9,A14                          ;SAVE ANGLE 3(7) IMPACT POINT
     550 00001aa0     b3cd          MOVE    A14,*A13(PGXIMPACT),L
         00001ab0     0120  
     551 00001ac0     4efe          MOVE    B7,A14
     552 00001ad0     b3cd          MOVE    A14,*A13(PGZIMPACT),L
         00001ae0     0140  
     553 00001af0     b28d          MOVE    A4,*A13(PGTIMPACT),L
         00001b00     0100  
     554 00001b10     b2ad          MOVE    A5,*A13(PGDIMPACT),L
         00001b20     0160  
     555                    
     556                    ;       MOVE    B9,B8                           ;SAVE Z IMPACT POINT
     557                    ;       MOVE    B7,B6                           ;SAVE X IMPACT POINT
     558                    ;       MOVE    A4,*A13(PGTIMPACT),L            ;SAVE TIME
     559                    ;       MOVE    A5,A10                          ;SAVE DISTANCE
     560                    
     561 00001b30     4441          SUB     A2,A1                           ;PZ RELATIVE TO GZ
     562 00001b40     44a1          SUB     A5,A1
     563 00001b50     4c23          MOVE    A1,A3                           ;(PZ - Z INTERCEPT)
     564                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   13

     565 00001b60     4f50          MOVE    B10,A0
     566 00001b70     4560          SUB     A11,A0                          ;PX RELATIVE TO GX
     567 00001b80     4ca1          MOVE    A5,A1
     568                    
     569 00001b90     1031          INC     B1
     570 00001ba0     ca02          JRZ     PGC_2OR6                        ;BR=DIRECTION 2 OR 6
     571                    
     572 00001bb0     03a1          NEG     A1                              ;-(Z INTERCEPT)
     573 00001bc0     03a3          NEG     A3                              ;-(PZ - Z INTERCEPT)
     574 00001bd0           PGC_2OR6
     575 00001bd0     0d5f          CALLA   SAFEMULT                        ;PX*(Z INTERCEPT)
         00001be0 00000000! 
     576 00001c00     c900          JRNC    PGC_RESET                       ;BR=OVERFLOW!
         00001c10     0271  
     577 00001c20     4460          SUB     A3,A0                           ;PX - (PZ - Z INTERCEPT)
     578 00001c30                   SWAP    A0,A1
     579 00001c60     0d5f          CALLA   SAFEDIV                         ;SOLVED FOR X
         00001c70 00000000! 
     580 00001c90     cc00          JRV     PGC_RESET
         00001ca0     0268  
     581                    
     582 00001cb0     402b          ADD     A1,A11                          ;X IMPACT POSITION
     583                    
     584 00001cc0     4d6e          MOVE    A11,A14
     585 00001cd0     038e          ABS     A14
     586 00001ce0     0b6e          CMPI    RGHT_GOALLINE_X,A14
         00001cf0 fd4fffff  
     587                    ;       JRLT    PGC_INFRONT
     588 00001d10     c500          JRGE    PGC_DIST_CHECK_3OR7
         00001d20     0098  
     589                    ;;PGC_FORCEDIR
     590                    ;       MOVK    3,B4
     591                    ;       MOVE    B3,B3
     592                    ;       JRZ     PGC_DIST_CHECK                  ;BR=ON THE LEFT
     593                    ;       MOVK    7,B4
     594                    ;       JRUC    PGC_DIST_CHECK
     595                    ;PGC_INFRONT
     596                    
     597 00001d30     4c31          MOVE    B1,B1
     598 00001d40     ca01          JRZ     PGC_2OR6_OK                     ;BR=DIRECTION 2 OR 6
     599 00001d50     03a1          NEG     A1
     600 00001d60           PGC_2OR6_OK
     601 00001d60     4022          ADD     A1,A2                           ;Z IMPACT POSITION
     602                    
     603 00001d70     4e47          MOVE    A2,B7                           ;SET NEW IMPACT POSITIONS
     604 00001d80     4f69          MOVE    A11,B9
     605                    
     606 00001d90     09e0          MOVI    016A0AH,A0
         00001da0 00016a0a  
     607 00001dc0     0d5f          CALLA   SAFEMULT
         00001dd0 00000000! 
     608 00001df0     c900          JRNC    PGC_RESET                       ;BR=TOO DAMN BIG!
         00001e00     0252  
     609                    
     610 00001e10     4c25          MOVE    A1,A5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   14

     611                    
     612 00001e20     4d60          MOVE    A11,A0
     613 00001e30     b72e          MOVE    *A9(OXVAL),A14,L
         00001e40     0140  
     614 00001e50     45c0          SUB     A14,A0
     615 00001e60     b721          MOVE    *A9(OXVEL),A1,L
         00001e70     0100  
     616 00001e80     0d5f          CALLA   SAFEDIV
         00001e90 00000000! 
     617 00001eb0     cc00          JRV     PGC_RESET                       ;BR=OVERFLOW!
         00001ec0     0246  
     618                    ;       SRA     16,A1
     619 00001ed0     4c24          MOVE    A1,A4
     620 00001ee0     c05b          JRUC    PGC_DIST_CHECK
     621                    
     622 00001ef0           PGC_CALC_GOALIE_INTERCEPTZ
     623                    
     624                            .if     DEBUG
     625                            MOVE    B0,B0                           ;TEST FOR DIRECTION 3 AND 7
     626                            LOCKON  Z                               ;
     627                            .endif
     628                    
     629 00001ef0     b700          MOVE    *A8(OZVAL),A0,L
         00001f00     0180  
     630 00001f10     4c0b          MOVE    A0,A11                          ;Z IMPACT POSITION
     631 00001f20     b72e          MOVE    *A9(OZVAL),A14,L
         00001f30     0180  
     632 00001f40     4fca          MOVE    A14,B10
     633 00001f50     45c0          SUB     A14,A0
     634 00001f60     018e          GETST   A14
     635 00001f70     b721          MOVE    *A9(OZVEL),A1,L
         00001f80     00e0  
     636 00001f90     ca00          JRZ     PGC_RESET                       ;BR=NOT MOVING IN Z
         00001fa0     0238  
     637 00001fb0     0184          GETST   A4
     638 00001fc0     568e          XOR     A4,A14
     639 00001fd0     1c0e          BTST    31,A14
     640 00001fe0     cb00          JRNZ    PGC_RESET                       ;BR=DIFFERENT SIGNS
         00001ff0     0233  
     641                    
     642 00002000     0d5f          CALLA   SAFEDIV
         00002010 00000000! 
     643 00002030     cc00          JRV     PGC_RESET
         00002040     022e  
     644                            .if     DEBUG
     645                            LOCKON  N
     646                            .endif
     647 00002050     4c24          MOVE    A1,A4
     648                    ;       SRA     16,A4                           ;A4 = TIME WITH NO FRICTION
     649                    
     650 00002060     b720          MOVE    *A9(OXVEL),A0,L
         00002070     0100  
     651 00002080     0d5f          CALLA   SAFEMULT
         00002090 00000000! 
     652 000020b0     c900          JRNC    PGC_RESET
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   15

         000020c0     0226  
     653 000020d0     4c25          MOVE    A1,A5
     654 000020e0     b721          MOVE    *A9(OXVAL),A1,L
         000020f0     0140  
     655 00002100     4025          ADD     A1,A5                           ;A5 = X @ GOALIE'S Z
     656                    
     657 00002110     b702          MOVE    *A8(OXVAL),A2,L
         00002120     0140  
     658 00002130     4445          SUB     A2,A5                           ;GOALIE X POSITION IN A2
     659                    
     660 00002140     4c11          MOVE    B0,B1
     661                    
     662 00002150     4441          SUB     A2,A1                           ;PX RELATIVE TO GX
     663 00002160     44a1          SUB     A5,A1
     664 00002170     4c23          MOVE    A1,A3                           ;(PX - X INTERCEPT)
     665                    
     666 00002180     4f50          MOVE    B10,A0
     667 00002190     4560          SUB     A11,A0                          ;PZ RELATIVE TO GZ
     668 000021a0     4ca1          MOVE    A5,A1
     669                    
     670 000021b0     1031          INC     B1
     671 000021c0     ca02          JRZ     PGC_2OR6Z                       ;BR=DIRECTION 2 OR 6
     672                    
     673 000021d0     03a1          NEG     A1                              ;-(X INTERCEPT)
     674 000021e0     03a3          NEG     A3                              ;-(PX - X INTERCEPT)
     675 000021f0           PGC_2OR6Z
     676 000021f0     0d5f          CALLA   SAFEMULT                        ;PZ*(X INTERCEPT)
         00002200 00000000! 
     677 00002220     c900          JRNC    PGC_RESET                       ;BR=WAY OUT THERE!
         00002230     020f  
     678 00002240     4460          SUB     A3,A0                           ;PZ - (PX - X INTERCEPT)
     679 00002250                   SWAP    A0,A1
     680 00002280     0d5f          CALLA   SAFEDIV                         ;SOLVED FOR Z
         00002290 00000000! 
     681 000022b0     cc00          JRV     PGC_RESET
         000022c0     0206  
     682                    
     683 000022d0     402b          ADD     A1,A11                          ;Z IMPACT POSITION
     684                    
     685 000022e0     4c2e          MOVE    A1,A14                          ;DON'T TRASH Z SIGN!
     686                    
     687 000022f0     4c31          MOVE    B1,B1
     688 00002300     ca01          JRZ     PGC_2OR6_OKZ                    ;BR=DIRECTION 2 OR 6
     689 00002310     03ae          NEG     A14
     690 00002320           PGC_2OR6_OKZ
     691 00002320     41c2          ADD     A14,A2                          ;X IMPACT POSITION
     692                    
     693                    ;       MOVE    A2,A14
     694                    ;       ABS     A14
     695                    ;       CMPI    RGHT_GOALLINE_X,A14
     696                    ;       JRGE    PGC_FORCEDIR
     697                    
     698 00002330     4f67          MOVE    A11,B7                          ;SET NEW IMPACT POSITIONS
     699 00002340     4e49          MOVE    A2,B9
     700                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   16

     701 00002350     09e0          MOVI    016A0AH,A0
         00002360 00016a0a  
     702 00002380     0d5f          CALLA   SAFEMULT
         00002390 00000000! 
     703 000023b0     c900          JRNC    PGC_RESET                       ;BR=TOO DAMN BIG!
         000023c0     01f6  
     704                    
     705 000023d0     4c25          MOVE    A1,A5
     706                    
     707 000023e0     4d60          MOVE    A11,A0
     708 000023f0     b72e          MOVE    *A9(OZVAL),A14,L
         00002400     0180  
     709 00002410     45c0          SUB     A14,A0
     710 00002420     b721          MOVE    *A9(OZVEL),A1,L
         00002430     00e0  
     711 00002440     0d5f          CALLA   SAFEDIV
         00002450 00000000! 
     712 00002470     cc00          JRV     PGC_RESET
         00002480     01ea  
     713                    ;       SRA     16,A1
     714 00002490     4c24          MOVE    A1,A4
     715                    
     716 000024a0           PGC_DIST_CHECK
     717 000024a0     0b75          CMPI    TOP_GOALPOST_Z+[4,0],B5
         000024b0 fe72ffff  
     718 000024d0     c712          JRGT    PGC_DIST_CHECK_3OR7_0           ;BR=ABOVE GOAL
     719 000024e0     0b75          CMPI    BOT_GOALPOST_Z-[4,0],B5
         000024f0 fee5ffff  
     720 00002510     c40e          JRLT    PGC_DIST_CHECK_3OR7_0           ;BR=BELOW GOAL
     721                    
     722 00002520     2a04          SRA     16,A4                           ;A4 = TIME WITH NO FRICTION
     723 00002530     1424          DEC     A4
     724 00002540     cf01          JRNN    PGC_TIME_OKAY
     725 00002550     5684          CLR     A4
     726 00002560           PGC_TIME_OKAY
     727                    
     728 00002560     4ca5          MOVE    A5,A5
     729 00002570     0180          GETST   A0
     730 00002580     0385          ABS     A5
     731 00002590     0b25          ADDI    08000H,A5
         000025a0 00008000  
     732 000025c0     2a05          SRA     16,A5                           ;DISTANCE FROM GOALIE AND Z SIDE
     733                    
     734                    ;       SRA     16,A5                           ;DISTANCE FROM GOALIE AND Z SIDE
     735                    ;       MOVE    A5,A14
     736                    ;       ABS     A14
     737                    ;       CMPI    MAX_INTERCEPT_DIST,A14          ;05CH, 058H, 048H
     738                    
     739 000025d0     0b45          CMPI    MAX_INTERCEPT_DIST,A5           ;05CH, 058H, 048H
         000025e0     ffa3  
     740 000025f0     c62d          JRLE    PGC_SAVETIME
     741                    
     742 00002600           PGC_DIST_CHECK_3OR7_0
     743                    ;       MOVE    *A13(PGDIMPACT),A5,L
     744 00002600     b7ae          MOVE    *A13(PGXIMPACT),A14,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   17

         00002610     0120  
     745                    ;       MOVE    A10,A5                          ;RESTORE DISTANCE
     746 00002620     ca1c          JRZ     PGC_TMOVE                       ;BR=NO DIRECTION 3(7) IMPACT
     747                    
     748                    ;       MOVE    B8,B9                           ;RESTORE Z IMPACT POINT
     749                    ;       MOVE    B6,B7                           ;RESTORE X IMPACT POINT
     750                    ;       MOVE    *A13(PGTIMPACT),A4,L            ;RESTORE TIME
     751                    
     752 00002630     b7a5          MOVE    *A13(PGDIMPACT),A5,L
         00002640     0160  
     753                    
     754                    ;       MOVE    *A13(PGXIMPACT),A14,L
     755 00002650     4fc9          MOVE    A14,B9
     756 00002660     b7ae          MOVE    *A13(PGZIMPACT),A14,L
         00002670     0140  
     757 00002680     4fc7          MOVE    A14,B7
     758 00002690     b7a4          MOVE    *A13(PGTIMPACT),A4,L
         000026a0     0100  
     759                    
     760 000026b0           PGC_DIST_CHECK_3OR7
     761                    
     762 000026b0     4ca5          MOVE    A5,A5
     763 000026c0     0180          GETST   A0
     764 000026d0     0385          ABS     A5
     765 000026e0     0b25          ADDI    08000H,A5
         000026f0 00008000  
     766 00002710     2a05          SRA     16,A5                           ;DISTANCE FROM GOALIE AND Z SIDE
     767                    
     768                    ;       SRA     16,A5                           ;DISTANCE FROM GOALIE AND Z SIDE
     769                    ;       MOVE    A5,A14
     770                    ;       ABS     A14
     771                    ;       CMPI    MAX_INTERCEPT_DIST,A14          ;05CH, 058H, 048H
     772                    
     773 00002720     0b45          CMPI    MAX_INTERCEPT_DIST,A5           ;05CH, 058H, 048H
         00002730     ffa3  
     774 00002740     c70a          JRGT    PGC_CHECK_GOALPOSTS
     775                    
     776 00002750     2a04          SRA     16,A4                           ;A4 = TIME WITH NO FRICTION
     777 00002760     1424          DEC     A4
     778 00002770     cf01          JRNN    PGC_SET_3OR7_DIR
     779 00002780     5684          CLR     A4
     780                    
     781 00002790           PGC_SET_3OR7_DIR
     782 00002790     5610          CLR     B0                              ;FLAG DIRECTION 3 OR 7
     783 000027a0     1874          MOVK    3,B4
     784 000027b0     4c73          MOVE    B3,B3
     785 000027c0     ca10          JRZ     PGC_SAVETIME                    ;BR=ON THE LEFT
     786 000027d0     18f4          MOVK    7,B4
     787 000027e0     c00e          JRUC    PGC_SAVETIME
     788                    
     789 000027f0           PGC_CHECK_GOALPOSTS
     790                    ;       CMPI    TOP_GOALPOST_Z,B5
     791                    ;       JRGT    PGC_RESET                       ;BR=ABOVE GOAL
     792                    ;       CMPI    BOT_GOALPOST_Z,B5
     793                    ;       JRLT    PGC_RESET                       ;BR=BELOW GOAL
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   18

     794                    
     795                    ;       .if     DEBUG
     796                    ;       .BSS    LONGDIST,16
     797                    ;       MOVE    @LONGDIST,A0,W
     798                    ;       CMP     A0,A14
     799                    ;       JRLE    PGC_NONEWDIST
     800                    ;       MOVE    A14,@LONGDIST,W
     801                    ;PGC_NONEWDIST
     802                    ;       .endif
     803                    
     804                    ;       .if     DEBUG
     805                    ;       MOVE    A14,A0
     806                    ;       LOCKUP
     807                    ;       .endif
     808                    
     809 000027f0           PGC_TMOVE
     810 000027f0     b50e          MOVE    *A8(ODT_GFLAGS),A14,W
         00002800     0630  
     811 00002810     0b8e          ANDNI   M_FREEZE,A14
         00002820 00000001  
     812 00002840     0bae          ORI     M_TMOVE,A14
         00002850 00000002  
     813 00002870     b1c8          MOVE    A14,*A8(ODT_GFLAGS),W
         00002880     0630  
     814                    
     815 00002890     57ce          CLR     A14
     816 000028a0     b1c8          MOVE    A14,*A8(ODT_GSAVETIME),W
         000028b0     0640  
     817 000028c0     0960          RETS
     818                    
     819 000028d0           PGC_SAVETIME
     820                    
     821 000028d0     1c00          BTST    31,A0
     822 000028e0     ca01          JRZ     PGC_DIST_FIXED                  ;BR=DISTANCE WASN'T NEGATIVE
     823 000028f0     03a5          NEG     A5
     824 00002900           PGC_DIST_FIXED
     825                    
     826                    **************************************************************************
     827                    *                                                                        *
     828                    * A PUCK VELOCITY CHECK IS ALSO REQUIRED!                                *
     829                    *                                                                        *
     830                    **************************************************************************
     831                    
     832                    ;       CMPI    5,A4
     833                    ;       JRGT    PGC_GET_SAVETIME
     834                    ;;      JRGT    PGC_RESET                       ;BR=TOO SOON, MOVE TO PUCK
     835                    ;
     836                    ;       SUBK    01CH,A14
     837                    ;       JRP     PGC_GET_SAVETIME
     838                    ;
     839                    ;       MOVE    *A9(OYVAL),A14,L
     840                    ;       CMPI    MAX_GAIN_POSSY,A14
     841                    ;       JRLT    PGC_GET_SAVETIME                ;BR=TOO HIGH IN THE AIR
     842                    ;
     843                    ;       MOVE    *A9(ODT_VEL),A14,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   19

     844                    ;;      CMPI    GSLOW_PUCK-080000H,A14
     845                    ;       CMPI    GSLOW_PUCK,A14
     846                    ;;      JRLE    PGC_RESET
     847                    ;       JRGT    PGC_GET_SAVETIME
     848                    ;       JRUC    PGC_RESET
     849                    ;PGC_GET_SAVETIME
     850                    
     851 00002900     b50e          MOVE    *A8(ODT_GSAVETIME),A14,W
         00002910     0640  
     852 00002920     cb00          JRNZ    PGC_CHECK_SAVETIME
         00002930     0181  
     853                    
     854 00002940     4ec6          MOVE    A6,B6
     855 00002950     4f08          MOVE    A8,B8
     856                    
     857 00002960     07a3          MOVE    @WAVEIRQS,A3,L
         00002970 00000000! 
     858 00002990     4083          ADD     A4,A3
     859 000029a0     0d5f          CALLA   get_puck_y_data_for_t
         000029b0 0000cb00' 
     860 000029d0     4c42          MOVE    A2,A2
     861 000029e0     cf03          JRNN    PGC_SHIFT_Y                     ;BR=ON DA GROUND
     862 000029f0     0d02          SUBI    08000H,A2
         00002a00 ffff7fff  
     863 00002a20           PGC_SHIFT_Y
     864 00002a20     2a02          SRA     16,A2
     865                    
     866 00002a30     09eb          MOVI    STAND_SAVE_TABLE,A11
         00002a40 00004440' 
     867 00002a60           PGC_Y_ZONE_LUPE
     868 00002a60     956e          MOVE    *A11+,A14,W
     869 00002a70     c100          JRP     PGC_RESET                       ;BR=TOO HIGH!
         00002a80     018a  
     870 00002a90     9567          MOVE    *A11+,A7,W
     871 00002aa0     484e          CMP     A2,A14
     872 00002ab0     c602          JRLE    PGC_X_ZONE_LUPE
     873 00002ac0     40eb          ADD     A7,A11
     874 00002ad0     c0f8          JRUC    PGC_Y_ZONE_LUPE
     875 00002ae0           PGC_X_ZONE_LUPE
     876 00002ae0     956e          MOVE    *A11+,A14,W
     877 00002af0     48ae          CMP     A5,A14
     878 00002b00     c503          JRGE    PGC_ZONE_FOUND
     879 00002b10     0b0b          ADDI    010H+010H+020H-010H,A11
         00002b20     0030  
     880 00002b30     c0fa          JRUC    PGC_X_ZONE_LUPE
     881 00002b40           PGC_ZONE_FOUND
     882                    
     883 00002b40     9567          MOVE    *A11+,A7,W                      ;TIME
     884                    ;       MOVE    *A11(0),*A8(ODT_GSAVE),L        ;SAVE
     885 00002b50     876b          MOVE    *A11,A11,L
     886 00002b60     cac8          JRZ     PGC_TMOVE                       ;BR=GO GET THAT FUCKIN' PUCK!
     887                    
     888 00002b70     574a          CLR     A10                             ;TURN OFF SAVE FLAG
     889                    
     890 00002b80     1fcb          BTST    1,A11
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   20

     891                            .if     SHOT_DATA
     892                            JRNZ    PGC_SAVE_MESS                   ;BR=SAVE!
     893                            .else
     894 00002b90     cb00          JRNZ    PGC_SAVE                        ;BR=SAVE!
         00002ba0     00fe  
     895                            .endif
     896                    
     897                    **************************************************************************
     898                    *                                                                        *
     899                    * DETERMINE SAVE OR MISS                                                 *
     900                    *                                                                        *
     901                    **************************************************************************
     902                    
     903                    ;       JRUC    PGC_MISS
     904                    
     905 00002bb0     05ae          MOVE    @SUPER_GOALIE,A14,W
         00002bc0 00000000! 
     906 00002be0     cb00          JRNZ    PGC_SAVE                        ;BR=SUPER GOALIE MOTHERFUCKER!  
         00002bf0     00f9  
     907                    
     908 00002c00     05ae          MOVE    @PUCK_MODE,A14,W
         00002c10 000000c0- 
     909 00002c30     0b4e          CMPI    PUM_ENDPER,A14
         00002c40     ff9a  
     910                            .if     SHOT_DATA
     911                            JREQ    PGC_SAVE_MESS                   ;BR=ALWAYS SAVE AT END OF PERIOD
     912                            .else
     913 00002c50     ca00          JREQ    PGC_SAVE                        ;BR=ALWAYS SAVE AT END OF PERIOD
         00002c60     00f2  
     914                            .endif
     915                    
     916 00002c70     5663          CLR     A3
     917                    
     918 00002c80     4ca1          MOVE    A5,A1
     919 00002c90     0381          ABS     A1
     920                    
     921                            .if     SHOT_DATA
     922                    ;       MOVE    A1,@RAMTEMP1,W                  ;INTERCEPT DISTANCE
     923                            .endif
     924                    
     925 00002ca0     0be1          SUBI    011H,A1
         00002cb0     ffee  
     926 00002cc0     ce0e          JRN     PGC_SPEED_MODIFIER              ;BR=NOT FAR ENOUGH AWAY
     927 00002cd0     0b41          CMPI    MAX_INTERCEPT_DIST-011H,A1
         00002ce0     ffb4  
     928 00002cf0     c401          JRLT    PGC_DIST_GO                     ;BR=UNDER MAXIMUM DISTANCE
     929                    ;       MOVI    MAX_INTERCEPT_DIST-011H+1,A1
     930 00002d00     1021          INC     A1
     931 00002d10           PGC_DIST_GO
     932 00002d10     09ce          MOVI    1024/(MAX_INTERCEPT_DIST-011H+1),A14
         00002d20     000d  
     933 00002d30     5fc1          MPYU    A14,A1
     934 00002d40     09ce          MOVI    INTERCEPT_DIST_PERCENT,A14
         00002d50     0032  
     935 00002d60     5fc1          MPYU    A14,A1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   21

     936 00002d70     09ce          MOVI    100,A14
         00002d80     0064  
     937 00002d90     5bc1          DIVU    A14,A1
     938 00002da0     4023          ADD     A1,A3
     939                    
     940 00002db0           PGC_SPEED_MODIFIER
     941                            .if     SHOT_DATA
     942                            MOVE    A3,@RAMTEMP1,W                  ;INTERCEPT DISTANCE
     943                            .endif
     944                    
     945 00002db0     b521          MOVE    *A9(ODT_VEL+010H),A1,W
         00002dc0     04e0  
     946                    
     947                    ;       .if     SHOT_DATA
     948                    ;       MOVE    A1,@RAMTEMP1+010H,W             ;SPEED
     949                    ;       .endif
     950                    
     951 00002dd0     0b41          CMPI    ROUGH_PUCK_MAX >> 16,A1
         00002de0     ffdc  
     952 00002df0     c603          JRLE    PGC_GET_SPEED_MODIFIER          ;BR=UNDER MAXIMUM SPEED
     953 00002e00     09c1          MOVI    1029,A1                         ;MAXIMUM SPEED MODIFIER
         00002e10     0405  
     954 00002e20     c007          JRUC    PGC_PERCENTAGE_SPEED_MODIFIER
     955                    
     956 00002e30           PGC_GET_SPEED_MODIFIER
     957 00002e30     15c1          SUBK    0EH,A1
     958                            .if     SHOT_DATA
     959                            JRN     PGC_SAVE_MESS                   ;BR=UNDER MINIMUM SPEED
     960                            .else
     961 00002e40     ce00          JRN     PGC_SAVE                        ;BR=UNDER MINIMUM SPEED
         00002e50     00d3  
     962                            .endif
     963 00002e60     2481          SLL     4,A1
     964 00002e70     0b21          ADDI    SPEED_MOD_TABLE,A1
         00002e80 00000ae0' 
     965 00002ea0           PGC_PERCENTAGE_SPEED_MODIFIER
     966 00002ea0     8421          MOVE    *A1,A1,W
     967 00002eb0     09ce          MOVI    SPEED_PERCENT,A14
         00002ec0     0019  
     968 00002ed0     5fc1          MPYU    A14,A1
     969 00002ee0     09ce          MOVI    100,A14
         00002ef0     0064  
     970 00002f00     5bc1          DIVU    A14,A1
     971 00002f10     4023          ADD     A1,A3
     972                    
     973                            .if     SHOT_DATA
     974                            MOVE    A1,@RAMTEMP1+010H,W             ;SPEED
     975                            CLR     A14
     976                            .endif
     977                    
     978 00002f20     b501          MOVE    *A8(ODT_GTSAVES),A1,W
         00002f30     06d0  
     979 00002f40     ca29          JRZ     PGC_SHOOTER_MODIFIER            ;BR=NO REBOUNDS
     980 00002f50     0b41          CMPI    10,A1
         00002f60     fff5  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   22

     981 00002f70     c601          JRLE    PGC_GET_REBOUND_MODIFIER        ;BR=UNDER MAXIMUM REBOUNDS
     982 00002f80     1941          MOVK    10,A1
     983                    
     984 00002f90           PGC_GET_REBOUND_MODIFIER
     985 00002f90     2481          SLL     4,A1
     986 00002fa0     098f          mmtm    sp,a2
         00002fb0     2000  
     987 00002fc0     aec2          movb    *a6(POF_NUMBER),a2
         00002fd0     0000  
     988 00002fe0     4c4e          move    a2,a14
     989 00002ff0     2fae          srl     3,a14
     990 00003000     242e          sll     1,a14
     991 00003010     0bce          xori    2,a14
         00003020 00000002  
     992 00003040     03ae          neg     a14
     993 00003050     05a2          move    @PLAYER_BITS,a2
         00003060 00000000! 
     994 00003080     67c2          srl     a14,a2
     995 00003090     0b82          andi    011b,a2
         000030a0 fffffffc  
     996 000030c0     09af          mmfm    sp,a2
         000030d0     0004  
     997 000030e0     cb04          jrnz    stih
     998 000030f0     0b21          addi    tsave_mod_drone_table,a1
         00003100 00000a30' 
     999 00003120     c003          jruc    stind
    1000 00003130     0b21  stih    ADDI    TSAVE_MOD_TABLE,A1
         00003140 00000980' 
    1001 00003160     8421  stind   MOVE    *A1,A1,W
    1002 00003170     09ce          MOVI    REBOUND_PERCENT,A14
         00003180     005f  
    1003 00003190     5fc1          MPYU    A14,A1
    1004 000031a0     09ce          MOVI    100,A14
         000031b0     0064  
    1005 000031c0     5bc1          DIVU    A14,A1
    1006 000031d0     4023          ADD     A1,A3
    1007                    
    1008                            .if     SHOT_DATA
    1009                            MOVE    A1,A14
    1010                            .endif
    1011                    
    1012 000031e0           PGC_SHOOTER_MODIFIER
    1013                            .if     SHOT_DATA
    1014                            MOVE    A14,@RAMTEMP2,W                 ;REBOUNDS
    1015                            .endif
    1016                    
    1017 000031e0     05a1          MOVE    @global_shot_percentage,A1,W
         000031f0 00000000! 
    1018                            .if     SHOT_DATA
    1019                            JRZ     PGC_SAVE_MESS                   ;BR=NO CHANCE IN HELL SHOT
    1020                            .else
    1021 00003210     ca00          JRZ     PGC_SAVE                        ;BR=NO CHANCE IN HELL SHOT
         00003220     0096  
    1022                            .endif
    1023 00003230     09ce          MOVI    SHOOTER_PERCENT,A14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   23

         00003240     0026  
    1024 00003250     5fc1          MPYU    A14,A1
    1025 00003260     09ce          MOVI    100,A14
         00003270     0064  
    1026 00003280     5bc1          DIVU    A14,A1
    1027 00003290     4023          ADD     A1,A3
    1028                    
    1029 000032a0           PGC_COMP_ASS
    1030                            .if     SHOT_DATA
    1031                            MOVE    A1,@RAMTEMP2+010H,W             ;SHOOTER
    1032                            .endif
    1033                    
    1034                    **************************************************************************
    1035                    *                                                                        *
    1036                    * ADD DUMMY PLAYER CHECK AND HAVE MISS WEIGH HEAVILY ON PUCK'S SPEED!    *
    1037                    *                                                                        *
    1038                    **************************************************************************
    1039                    
    1040 000032a0     09c2          MOVI    MISS_PERCENT_MODIFIER,A2        ;DEFAULT MISS CHANCE PERCENT
         000032b0     005a  
    1041                    
    1042 000032c0     05ae          MOVE    @COMP_ASS_OFF,A14,W
         000032d0 00000000! 
    1043 000032f0     cb4d          JRNZ    PGC_CHECK_ATTEMPTS              ;BR=COMPUTER ASSISTANCE OFF
    1044                    
    1045 00003300     05a0          MOVE    @team1_score,A0,W
         00003310 00000000! 
    1046 00003330     05a1          MOVE    @team2_score,A1,W
         00003340 00000000! 
    1047 00003360     4401          SUB     A0,A1
    1048 00003370     4c20          MOVE    A1,A0
    1049 00003380     0380          ABS     A0
    1050 00003390     0b40          CMPI    MAX_SCORE_DIFF,A0
         000033a0     fff5  
    1051 000033b0     c601          JRLE    PGC_CA_CHECK_MIN                ;BR=UNDER MAXIMUM DIFFERENCE
    1052 000033c0     1940          MOVK    MAX_SCORE_DIFF,A0
    1053 000033d0           PGC_CA_CHECK_MIN
    1054 000033d0     0b40          CMPI    MIN_SCORE_DIFF,A0
         000033e0     fffe  
    1055 000033f0     c43d          JRLT    PGC_CHECK_ATTEMPTS              ;BR=USE DEFAULT PERCENTAGE
    1056                    
    1057 00003400     57ce          CLR     A14
    1058 00003410     05be          MOVE    @minutes,B14,W
         00003420 00000000! 
    1059 00003440     0b5e          CMPI    2,B14
         00003450     fffd  
    1060 00003460     c510          JRGE    PGC_CA_GET_TABLE                ;BR=MORE THAN 2 MINUTES LEFT
    1061 00003470     102e          INC     A14
    1062 00003480     0b5e          CMPI    1,B14
         00003490     fffe  
    1063 000034a0     c50c          JRGE    PGC_CA_GET_TABLE                ;BR=MORE THAN 1 MINUTE LEFT
    1064                    
    1065 000034b0     05be          MOVE    @tenseconds,B14,W
         000034c0 00000000! 
    1066 000034e0     102e          INC     A14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   24

    1067 000034f0     0b5e          CMPI    3,B14
         00003500     fffc  
    1068 00003510     c505          JRGE    PGC_CA_GET_TABLE                ;BR=MORE THAN 30 SECONDS LEFT
    1069 00003520     102e          INC     A14
    1070 00003530     0b5e          CMPI    1,B14
         00003540     fffe  
    1071 00003550     c501          JRGE    PGC_CA_GET_TABLE                ;BR=MORE THAN 10 SECONDS LEFT
    1072 00003560     102e          INC     A14
    1073 00003570           PGC_CA_GET_TABLE
    1074 00003570     24a0          SLL     5,A0
    1075 00003580     0b20          ADDI    SCORE_DIFF_TABLES-020H,A0
         00003590 00000500' 
    1076 000035b0     8600          MOVE    *A0,A0,L                        ;GET TABLE
    1077 000035c0     ca20          JRZ     PGC_CHECK_ATTEMPTS              ;BR=NO TABLE
    1078                    
    1079 000035d0     248e          SLL     4,A14
    1080 000035e0     41c0          ADD     A14,A0
    1081 000035f0     840e          MOVE    *A0,A14,W                       ;GET ENTRY
    1082                    
    1083 00003600     aede          MOVB    *B6(POF_NUMBER),B14
         00003610     0000  
    1084 00003620     4dda          MOVE    B14,B10
    1085 00003630     2fba          SRL     3,B10
    1086 00003640     243a          SLL     1,B10                           ;SHIFT VALUE
    1087 00003650     0bda          XORI    2,B10                           ;TOGGLE OTHER TEAM
         00003660 00000002  
    1088 00003680     03ba          NEG     B10                             ;RIGHT SHIFT VALUE
    1089 00003690     05b2          MOVE    @PLAYER_BITS,B2,W
         000036a0 00000000! 
    1090 000036c0     6752          SRL     B10,B2
    1091 000036d0     0b92          ANDI    011B,B2
         000036e0 fffffffc  
    1092 00003700     ca0c          JRZ     PGC_CHECK_ATTEMPTS              ;BR=ALL DRONE TEAM
    1093                    
    1094 00003710     4c21          MOVE    A1,A1
    1095 00003720     cf05          JRNN    PGC_CA_CHECK_RIGHT              ;BR=RIGHT TEAM LEADING
    1096                    ;       MOVB    *B6(POF_NUMBER),B14             ;LEFT TEAM LEADING
    1097 00003730     149e          SUBK    4,B14
    1098 00003740     ca07          JRZ     PGC_CA_ADD_MODIFIER             ;BR=SHOT ON LEFT GOALIE,INCREASE
    1099 00003750     242e          SLL     1,A14
    1100 00003760     03ae          NEG     A14                             ;SHOT ON RIGHT GOALIE, REDUCE
    1101 00003770     c004          JRUC    PGC_CA_ADD_MODIFIER
    1102                    
    1103 00003780           PGC_CA_CHECK_RIGHT
    1104                    ;       MOVB    *B6(POF_NUMBER),B14             ;RIGHT TEAM LEADING
    1105 00003780     151e          SUBK    8,B14
    1106 00003790     ca02          JRZ     PGC_CA_ADD_MODIFIER             ;BR=SHOT ON RGHT GOALIE,INCREASE
    1107 000037a0     242e          SLL     1,A14
    1108 000037b0     03ae          NEG     A14                             ;SHOT ON LEFT GOALIE, REDUCE
    1109                    
    1110 000037c0           PGC_CA_ADD_MODIFIER
    1111 000037c0     41c2          ADD     A14,A2
    1112 000037d0           PGC_CHECK_ATTEMPTS
    1113 000037d0     07a0          MOVE    @SHOTIRQ,A0,L
         000037e0 00177290- 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   25

    1114 00003800     07a1          MOVE    @PUCK_NEWDIR_TIME,A1,L
         00003810 00177230- 
    1115 00003830     4801          CMP     A0,A1
    1116 00003840     cb27          JRNE    PGC_PERCENTAGE                  ;BR=PUCK WAS TOUCHED
    1117                    
    1118 00003850     05ae          MOVE    @SHOT_ATTEMPTS,A14,W
         00003860 00177280- 
    1119 00003880     0b4e          CMPI    MAX_SHOT_ATTEMPT,A14
         00003890     fffa  
    1120 000038a0     c601          JRLE    PGC_GET_ATTEMPT_THINGY          ;BR=UNDER MAXIMUM ATTEMPTS
    1121 000038b0     18ae          MOVK    MAX_SHOT_ATTEMPT,A14            ;SET TO MAXIMUM
    1122 000038c0           PGC_GET_ATTEMPT_THINGY
    1123 000038c0     142e          DEC     A14
    1124 000038d0     248e          SLL     4,A14
    1125                    
    1126 000038e0     098f          mmtm    sp,a1,a2
         000038f0     6000  
    1127 00003900     aec2          movb    *a6(POF_NUMBER),a2
         00003910     0000  
    1128 00003920     4c41          move    a2,a1
    1129 00003930     2fa1          srl     3,a1
    1130 00003940     2421          sll     1,a1
    1131 00003950     0bc1          xori    2,a1
         00003960 00000002  
    1132 00003980     03a1          neg     a1
    1133 00003990     05a2          move    @PLAYER_BITS,a2
         000039a0 00000000! 
    1134 000039c0     6622          srl     a1,a2
    1135 000039d0     0b82          andi    011b,a2
         000039e0 fffffffc  
    1136 00003a00     09af          mmfm    sp,a1,a2
         00003a10     0006  
    1137 00003a20     cb04          jrnz    sgah
    1138 00003a30     0b2e          addi    shot_attempt_drone_table,a14
         00003a40 000004d0' 
    1139 00003a60     c003          jruc    sgac
    1140 00003a70     0b2e  sgah    ADDI    SHOT_ATTEMPT_TABLE,A14
         00003a80 00000480' 
    1141 00003aa0     85ce  sgac    MOVE    *A14,A14,W
    1142 00003ab0     41c2          ADD     A14,A2
    1143 00003ac0           PGC_PERCENTAGE
    1144                            .if     SHOT_DATA
    1145                            MOVE    A3,@RAMTEMP3,W                  ;TOTAL
    1146                            .endif
    1147                    
    1148 00003ac0     5e43          MPYU    A2,A3                           ;MODIFY MISS CHANCE
    1149 00003ad0     09ce          MOVI    100,A14
         00003ae0     0064  
    1150 00003af0     5bc3          DIVU    A14,A3
    1151                    
    1152 00003b00     09c0          MOVI    1024,A0                         ;100% SAVE CHANCE
         00003b10     0400  
    1153 00003b20     4460          SUB     A3,A0                           ;MINUS MISS CHANCE
    1154                    
    1155                            .if     SHOT_DATA
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   26

    1156                            MOVE    A0,@RAMTEMP3+010H,W
    1157                            .endif
    1158                    
    1159 00003b30     4c00          MOVE    A0,A0
    1160 00003b40     ce06          JRN     PGC_MISS                        ;BR=MISS!
    1161 00003b50     0d5f          CALLA   RANDPER
         00003b60 00000000! 
    1162 00003b80     c902          JRNC    PGC_MISS                        ;BR=MISS!
    1163                    
    1164                    ;       move    @GAME_STATE,a0,W
    1165                    ;       cmpi    INAMODE,a0
    1166                    ;       jrz     nad1
    1167                    ;       move    @PUCK_MODE,a0,W
    1168                    ;       cmpi    PUM_FACEOFF,a0
    1169                    ;       jrhs    nad1
    1170                    ;       MOVI    AUD_GOALIE_SAVES,A0
    1171                    ;       CALLA   AUD1
    1172                    ;nad1
    1173                            .if     SHOT_DATA
    1174                            JRUC    PGC_SAVE_NOMESS
    1175                    PGC_SAVE_MESS
    1176                            MMTM    SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
    1177                            MMTM    SP,B0,B1,B3,B4,B5,B6
    1178                            CALLA   CLRTEXT
    1179                            MOVI    SAVE_MESS,A8
    1180                            JSRP    LM_PRINTF
    1181                            MMFM    SP,B0,B1,B3,B4,B5,B6
    1182                            MMFM    SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
    1183                            MOVK    1,A10                           ;SAVE!
    1184                            JRUC    PGC_DETERMINED_NOMESS
    1185                    PGC_SAVE_NOMESS
    1186                            .endif
    1187 00003b90           PGC_SAVE
    1188 00003b90     182a          MOVK    1,A10                           ;SAVE!
    1189 00003ba0     0300          JRUC    PGC_DETERMINED
    1190                    
    1191 00003bb0           PGC_MISS
    1192                    ;       move    @GAME_STATE,a0,W
    1193                    ;       cmpi    INAMODE,a0
    1194                    ;       jrz     nads
    1195                    ;       move    @PUCK_MODE,a0,W
    1196                    ;       cmpi    PUM_FACEOFF,a0
    1197                    ;       jrhs    nads
    1198                    ;       MOVI    AUD_GOALIE_MISSES,A0
    1199                    ;       CALLA   AUD1
    1200                    ;nads
    1201                    
    1202                    **************************************************************************
    1203                    *                                                                        *
    1204                    * DETERMINED                                                             *
    1205                    *                                                                        *
    1206                    **************************************************************************
    1207 00003bb0           PGC_DETERMINED
    1208                            .if     SHOT_DATA
    1209                            MMTM    SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   27

    1210                            MMTM    SP,B0,B1,B3,B4,B5,B6
    1211                            CALLA   CLRTEXT
    1212                            MOVI    CHANCE_MESS,A8
    1213                            JSRP    LM_PRINTF
    1214                            MMFM    SP,B0,B1,B3,B4,B5,B6
    1215                            MMFM    SP,A0,A4,A5,A6,A7,A8,A9,A10,A11
    1216                    PGC_DETERMINED_NOMESS
    1217                            .endif
    1218                    
    1219 00003bb0     1feb          BTST    0,A11
    1220 00003bc0     ca03          JRZ     PGC_SET_GSAVE
    1221 00003bd0     2f8b          SRL     4,A11
    1222 00003be0     248b          SLL     4,A11
    1223 00003bf0     016b          JUMP    A11                             ;SAVE ROUTINE
    1224 00003c00           PGC_SET_GSAVE
    1225 00003c00     2f8b          SRL     4,A11
    1226 00003c10     248b          SLL     4,A11
    1227 00003c20     b368          MOVE    A11,*A8(ODT_GSAVE),L            ;SAVE
         00003c30     0650  
    1228 00003c40           PGC_SET_IMPACT
    1229 00003c40     b2f8          MOVE    B7,*B8(ODT_GZIMPACT),L          ;SAVE IMPACT POINT
         00003c50     0670  
    1230 00003c60     b338          MOVE    B9,*B8(ODT_GXIMPACT),L
         00003c70     0690  
    1231                    
    1232 00003c80     57ce          CLR     A14
    1233 00003c90     b3c8          MOVE    A14,*A8(ODT_VEL),L
         00003ca0     04d0  
    1234 00003cb0     b3c8          MOVE    A14,*A8(OXVEL),L
         00003cc0     0100  
    1235 00003cd0     b3c8          MOVE    A14,*A8(OZVEL),L
         00003ce0     00e0  
    1236                    
    1237 00003cf0     4ca1          MOVE    A5,A1
    1238                    
    1239 00003d00     b505          MOVE    *A8(ODT_GFLAGS),A5,W
         00003d10     0630  
    1240 00003d20     0b85          ANDNI   M_TMOVE|M_SAVEMADE|M_MISSSAVE|M_GLOVESIDE,A5
         00003d30 0000002e  
    1241 00003d50     0ba5          ORI     M_FREEZE|M_PUCKCHECK,A5
         00003d60 00000041  
    1242                    
    1243 00003d80     4c21          MOVE    A1,A1
    1244 00003d90     cf03          JRNN    PGC_DOIT                        ;BR=PUCK ON BLOCKER SIDE
    1245 00003da0     0ba5          ORI     M_GLOVESIDE,A5                  ;PUCK ON GLOVE SIDE
         00003db0 00000020  
    1246 00003dd0           PGC_DOIT
    1247 00003dd0     4d4a          MOVE    A10,A10
    1248 00003de0     cb32          JRNZ    PGC_SET_SAVE                    ;BR=DON'T MISS
    1249                    
    1250 00003df0     182e          MOVK    1,A14
    1251 00003e00     058e          MOVE    A14,@GOALIE_MISS,W              ;GIVE IT UP!
         00003e10 001772b0- 
    1252                    
    1253 00003e30     0b85          ANDNI   M_PUCKCHECK,A5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   28

         00003e40 00000040  
    1254 00003e60     1105          ADDK    M_MISSSAVE,A5
    1255 00003e70     b0a8          MOVE    A5,*A8(ODT_GFLAGS),W
         00003e80     0630  
    1256                    
    1257 00003e90     b70e          MOVE    *A8(ODT_GSAVE),A14,L            ;SAVE
         00003ea0     0650  
    1258 00003eb0     2f8e          SRL     4,A14
    1259 00003ec0     248e          SLL     4,A14
    1260                    
    1261 00003ed0     0b6e          CMPI    SET_GKO_SCRIPT,A14
         00003ee0 ffffffff! 
    1262 00003f00     cb06          JRNE    PGC_CHECK_BUTT_MISS             ;BR=NOT KO MISS
    1263 00003f10     1484          SUBK    4,A4
    1264 00003f20     c10f          JRP     PGC_SET_MISS                    ;BR=TIME OKAY
    1265 00003f30     1824          MOVK    1,A4                            ;NO TIME TO LOSE
    1266 00003f40     b088          MOVE    A4,*A8(ODT_GSAVETIME),W
         00003f50     0640  
    1267 00003f60     c022          JRUC    PGC_START_ANIM
    1268                    
    1269 00003f70           PGC_CHECK_BUTT_MISS
    1270 00003f70     0b6e          CMPI    SET_GFULLBUTT_SCRIPT,A14
         00003f80 ffffffff! 
    1271 00003fa0     cb06          JRNE    PGC_NORM_MISS                   ;BR=NOT EARLY BUTTERFLY
    1272 00003fb0     1464          SUBK    3,A4                            ;MAKE BUTTERFLY EARLY
    1273 00003fc0     c105          JRP     PGC_SET_MISS                    ;BR=TIME OKAY
    1274 00003fd0     1824          MOVK    1,A4                            ;NO TIME TO LOSE
    1275 00003fe0     b088          MOVE    A4,*A8(ODT_GSAVETIME),W
         00003ff0     0640  
    1276 00004000     c018          JRUC    PGC_START_ANIM
    1277                    
    1278 00004010           PGC_NORM_MISS
    1279 00004010     1024          INC     A4                              ;MAKE A LITTLE MORE LATE
    1280 00004020           PGC_SET_MISS
    1281 00004020     b088          MOVE    A4,*A8(ODT_GSAVETIME),W
         00004030     0640  
    1282 00004040     c03e          JRUC    PGC_DONE
    1283                    
    1284 00004050           PGC_CHECK_MISS
    1285 00004050     b4ce          MOVE    *A6(POF_MODE),A14,W
         00004060     0210  
    1286 00004070     0b4e          CMPI    PM_GSAVE,A14
         00004080     fff3  
    1287 00004090     ca39          JREQ    PGC_DONE                        ;BR=ALREADY SAVIN'
    1288                    
    1289 000040a0     b507          MOVE    *A8(ODT_GSAVETIME),A7,W         ;ALSO MISS TIMER
         000040b0     0640  
    1290 000040c0     1427          DEC     A7
    1291 000040d0     ca0b          JRZ     PGC_START_ANIM                  ;BR=ANIMATE!
    1292 000040e0     b0e8          MOVE    A7,*A8(ODT_GSAVETIME),W
         000040f0     0640  
    1293 00004100     c032          JRUC    PGC_DONE
    1294                    
    1295 00004110           PGC_SET_SAVE
    1296 00004110     b0a8          MOVE    A5,*A8(ODT_GFLAGS),W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   29

         00004120     0630  
    1297 00004130     b0e8          MOVE    A7,*A8(ODT_GSAVETIME),W
         00004140     0640  
    1298                    
    1299 00004150           PGC_CHECK_SAVETIME
    1300 00004150     b507          MOVE    *A8(ODT_GSAVETIME),A7,W
         00004160     0640  
    1301 00004170     44e4          SUB     A7,A4
    1302 00004180     c12a          JRP     PGC_DONE                        ;BR=DON'T SAVE ON THIS TICK
    1303 00004190           PGC_START_ANIM
    1304 00004190     07ae          MOVE    @WAVEIRQS,A14,L                 ;TIME OF ANIMATION START
         000041a0 00000000! 
    1305 000041c0     b3c8          MOVE    A14,*A8(ODT_GCOMPTIME),L
         000041d0     0720  
    1306                    
    1307                    ;       MOVK    30,A0
    1308                    ;       MOVK    10,A1
    1309                    ;       CALLA   RANGERND
    1310                    ;       MOVB    A0,*A8(ANIMLOOP)                ;MISS HOLD TIME
    1311                    
    1312 000041e0     57ce          CLR     A14
    1313 000041f0     adc6          MOVB    A14,*A6(POF_BDIRECTION)
         00004200     03d0  
    1314                    
    1315 00004210     198e          MOVK    PM_GSAVE,A14
    1316 00004220     b1c6          MOVE    A14,*A6(POF_MODE),W
         00004230     0210  
    1317 00004240     0d5f          CALLA   take_player_control
         00004250 00000000! 
    1318                    
    1319                    ;       MOVE    *A6(POF_FLAGS),A14,W
    1320                    ;       ORI     M_PF_TRAILS,A14
    1321                    ;       MOVE    A14,*A6(POF_FLAGS),W
    1322                    
    1323                    
    1324 00004270     b700          MOVE    *A8(ODT_GSAVE),A0,L
         00004280     0650  
    1325 00004290     4c0e          MOVE    A0,A14
    1326 000042a0     278e          SLL     28,A14
    1327 000042b0     2c8e          SRL     28,A14
    1328                    ;       JRZ     PGC_SAVE_FIX_N_JUMP             ;BR=NO SAVE DIRECTION
    1329 000042c0     ca05          JRZ     PGC_SAVE_JUMP                   ;BR=NO SAVE DIRECTION
    1330 000042d0     adc6          MOVB    A14,*A6(POF_DIRECTION)
         000042e0     0390  
    1331 000042f0     57c0          XOR     A14,A0
    1332 00004300     b208          MOVE    A0,*A8(ODT_GSAVE),L
         00004310     0650  
    1333                    ;       JRUC    PGC_SAVE_JUMP
    1334                    ;PGC_SAVE_FIX_N_JUMP
    1335                    ;       CALLA   FIX_GOALIE_DIR
    1336 00004320           PGC_SAVE_JUMP
    1337 00004320     0160          JUMP    A0
    1338                    
    1339 00004330           PGC_RESET
    1340 00004330     b50e          MOVE    *A8(ODT_GFLAGS),A14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   30

         00004340     0630  
    1341 00004350     4dc1          MOVE    A14,A1
    1342 00004360     0b8e          ANDI    M_FREEZE|M_TMOVE,A14
         00004370 fffffffc  
    1343 00004390     ca09          JRZ     PGC_DONE
    1344 000043a0     57c1          XOR     A14,A1
    1345 000043b0     0ba1          ORI     M_PUCKCHECK,A1
         000043c0 00000040  
    1346 000043e0     b028          MOVE    A1,*A8(ODT_GFLAGS),W
         000043f0     0630  
    1347                    
    1348 00004400     57ce          CLR     A14
    1349 00004410     b1c8          MOVE    A14,*A8(ODT_GSAVETIME),W
         00004420     0640  
    1350 00004430           PGC_DONE
    1351 00004430     0960          RETS
    1352                    
    1353                            .if     SHOT_DATA
    1354                    CHANCE_MESS
    1355                            .if     BILL & 1
    1356                    
    1357                            MESS_MAC RD5FONT,2,85,160,COLOR_PBLACK,STRRNRMO,OID_TEXT
    1358                            .STRING "%d\n%d\n%d\n%d\n%d\n%d",0
    1359                            .LONG   RAMTEMP1
    1360                            .LONG   RAMTEMP1+010H
    1361                            .LONG   RAMTEMP2
    1362                            .LONG   RAMTEMP2+010H
    1363                            .LONG   RAMTEMP3
    1364                            .LONG   RAMTEMP3+010H
    1365                            .EVEN
    1366                    
    1367                            .else
    1368                    
    1369                            MESS_MAC RD5FONT,2,85,240,COLOR_PBLACK,STRRNRMO,OID_TEXT
    1370                            .STRING "%d",0
    1371                            .LONG   RAMTEMP3+010H
    1372                            .EVEN
    1373                    
    1374                            .endif
    1375                    
    1376                    SAVE_MESS
    1377                            MESS_MAC RD5FONT,2,85,240,COLOR_PBLACK,STRRNRMO,OID_TEXT
    1378                            .STRING "SAVE",0
    1379                            .EVEN
    1380                    
    1381                            .endif
    1382                    
    1383                    **************************************************************************
    1384                    *                                                                        *
    1385                    * SAVE TABLES                                                            *
    1386                    *                                                                        *
    1387                    **************************************************************************
    1388                    
    1389                    ;       .word   YOFFSET LIMIT
    1390                    ;       WWL     DISTANCE LIMIT AND SIDE, TIME, SAVE
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   31

    1391                    
    1392              0040  ST_ENTRY_SIZE   EQU     010H+010H+020H
    1393                    
    1394 00004440           STAND_SAVE_TABLE
    1395 00004440     0000          .word   0,ST_ENTRY_SIZE*7
    1396 00004460                   WWL     -049H,7,PGC_GRPADST+1
    1397                    ;       WWL     -011H,7,PGC_GRPADST+1
    1398 000044a0                   WWL     -011H,3,PGC_GGSKATE+1
    1399 000044e0                   WWL     -006H,6,PGC_FULLBUTT+1
    1400 00004520                   WWL      005H,3,PGC_STICK+1     ;2+1
    1401 00004560                   WWL      010H,6,PGC_FULLBUTT+1
    1402 000045a0                   WWL      048H,3,PGC_GSSKATE+1
    1403                    ;       WWL      048H,7,PGC_GLPADST+1
    1404 000045e0                   WWL      07FH,7,PGC_GLPADST+1
    1405                    
    1406 00004620     fff0          .word   -010H,ST_ENTRY_SIZE*5
    1407 00004640                   WWL     -049H,7,PGC_GRPADST+1
    1408                    ;       WWL     -011H,7,PGC_GRPADST+1
    1409 00004680                   WWL     -011H,3,PGC_GGSKATE+1
    1410 000046c0                   WWL      010H,6,PGC_FULLBUTT+1
    1411 00004700                   WWL      048H,3,PGC_GSSKATE+1
    1412                    ;       WWL      048H,7,PGC_GLPADST+1
    1413 00004740                   WWL      07FH,7,PGC_GLPADST+1
    1414                    
    1415 00004780     ffdf          .word   -021H,ST_ENTRY_SIZE*5
    1416 000047a0                   WWL     -049H,0,0
    1417 000047e0                   WWL     -011H,3,PGC_GGLOVE_MID+1
    1418 00004820                   WWL      010H,3,PGC_GBODY+1
    1419 00004860                   WWL      048H,3,PGC_GBLOCKER_MID+1
    1420 000048a0                   WWL      07FH,0,0
    1421                    
    1422 000048e0     ff81          .word   -07FH,ST_ENTRY_SIZE*5
    1423 00004900                   WWL     -049H,0,0
    1424 00004940                   WWL     -011H,6,PGC_GGLOVE+1
    1425 00004980                   WWL      010H,3,PGC_GHGLOVE+1
    1426 000049c0                   WWL      048H,6,PGC_GBLOCKER+1
    1427 00004a00                   WWL      07FH,0,0
    1428                    
    1429 00004a40     0001          .word   1
    1430                    
    1431                    **************************************************************************
    1432                    *                                                                        *
    1433                    * REGISTERS FOR PGC FUNCTIONS:                                           *
    1434                    *                                                                        *
    1435                    * A4  = TIME TIL INTERCEPT (MAKE NON-POSITIVE FOR SAVE ON THIS TICK)     *
    1436                    * A5  = INTERCEPT DISTANCE FROM GOALIE (NEGATIVE IF GLOVE SIDE)          *
    1437                    * A6  = PLAYER BLOCK                                                     *
    1438                    * A7  = TICKS TIL IMPACT FRAME IN SAVE ANIMATION                         *
    1439                    * A8  = GOALIE OBJECT                                                    *
    1440                    * A9  = PUCK OBJECT                                                      *
    1441                    * A10 = SAVE IF = 1, MISS IF = 0                                         *
    1442                    *                                                                        *
    1443                    * A0, A1, A2, A3, A11, A14 FREE                                          *
    1444                    *                                                                        *
    1445                    * B0  = NOT DIRECTION 3 OR 7 FLAG                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   32

    1446                    * B1  = ONLY VALID IF B0 IS NON-ZERO                                     *
    1447                    *       DIRECTION 4 OR 8 FLAG (ZERO IF DIRECTION 2 OR 6)                 *
    1448                    * B3  = RIGHT GOALIE FLAG (ZERO IF LEFT GOALIE)                          *
    1449                    * B4  = SAVE DIRECTION                                                   *
    1450                    * B5  = PUCK Z DESTINATION @ GOALLINE                                    *
    1451                    * B6  = PLAYER BLOCK                                                     *
    1452                    * B7  = Z IMPACT POINT                                                   *
    1453                    * B8  = GOALIE OBJECT                                                    *
    1454                    * B9  = X IMPACT POINT                                                   *
    1455                    *                                                                        *
    1456                    * B2, B10, B14 FREE                                                      *
    1457                    *                                                                        *
    1458                    **************************************************************************
    1459                    
    1460                    **************************************************************************
    1461                    *                                                                        *
    1462                    * PGC_GBODY                                                              *
    1463                    *                                                                        *
    1464                    **************************************************************************
    1465                    
    1466 00004a50           PGC_GBODY
    1467 00004a50     09eb          MOVI    SET_GBODY_SCRIPT,A11
         00004a60 00000000! 
    1468 00004a80     c003          JRUC    PGC_GHG_GO
    1469                    
    1470                    **************************************************************************
    1471                    *                                                                        *
    1472                    * PGC_GHGLOVE                                                            *
    1473                    *                                                                        *
    1474                    **************************************************************************
    1475                    
    1476 00004a90           PGC_GHGLOVE
    1477 00004a90     09eb          MOVI    SET_GHGLOVE_SCRIPT,A11
         00004aa0 00000000! 
    1478 00004ac0           PGC_GHG_GO
    1479 00004ac0     4d4a          MOVE    A10,A10
    1480 00004ad0     cb16          JRNZ    PGC_CHG_CHECK_BOUNCE            ;SAVE!
    1481                    
    1482 00004ae0     aec1          movb    *a6(POF_NUMBER),a1
         00004af0     0000  
    1483 00004b00     1421          dec     a1
    1484 00004b10     2fc1          srl     2,a1
    1485 00004b20     1421          dec     a1
    1486 00004b30     0381          abs     a1
    1487 00004b40     0d5f          calla   get_potential_scorer
         00004b50 00000000! 
    1488 00004b70     4c00          move    a0,a0
    1489 00004b80     ca11          jrz     PGC_GHG_CHECK_KO                ;BR=NONE
    1490 00004b90                   GBLOCK  a0,a0
    1491 00004bd0     b400          move    *a0(POF_HOT_VALUE),a0,W
         00004be0     0b70  
    1492 00004bf0     0b40          cmpi    18,a0
         00004c00     ffed  
    1493 00004c10     c408          jrlt    PGC_GHG_CHECK_KO                ;BR=ON FIRE DON'T KO
    1494 00004c20           PGC_GHG_NO_KO
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   33

    1495 00004c20     182a          MOVK    1,A10                           ;DON'T SLIDE INTO GOAL
    1496 00004c30     c020          JRUC    PGC_GHG_SET 
    1497                    
    1498                    ;PGC_CHG_G_CHECK
    1499                    ;       MOVE    A10,A10
    1500                    ;;      JRNZ    PGC_GHG_SET                     ;SAVE!
    1501                    ;       JRZ     PGC_GHG_CHECK_KO                ;MISS!
    1502                    
    1503 00004c40           PGC_CHG_CHECK_BOUNCE
    1504 00004c40     09c0          MOVI    511,A0
         00004c50     01ff  
    1505 00004c60     0d5f          CALLA   RANDPER
         00004c70 00000000! 
    1506 00004c90     c91a          JRNC    PGC_GHG_SET                     ;BR=SAVE!
    1507                    
    1508                    ;       CLR     A10                             ;MISS!
    1509                    
    1510 00004ca0           PGC_GHG_CHECK_KO              
    1511                    
    1512 00004ca0     b72e          MOVE    *A9(ODT_VEL),A14,L
         00004cb0     04d0  
    1513 00004cc0     0b6e          CMPI    [24,0],A14
         00004cd0 ffe7ffff  
    1514 00004cf0     c4f2          JRLT    PGC_GHG_NO_KO                   ;BR=NOT FAST ENOUGH                     
    1515                    
    1516 00004d00     b702          MOVE    *A8(OXVAL),A2,L
         00004d10     0140  
    1517 00004d20     0382          ABS     A2
    1518                    
    1519 00004d30     4c10          MOVE    B0,B0
    1520 00004d40     cb05          JRNZ    PGC_GHG_2OR8                    ;BR=NOT DIRECTION 3
    1521                    
    1522 00004d50     0b62          CMPI    029E0000H,A2
         00004d60 fd61ffff  
    1523 00004d80     c407          JRLT    PGC_GHG_KO                      ;BR=WITHIN X LIMIT
    1524 00004d90     c00a          JRUC    PGC_GHG_SET 
    1525                                            
    1526 00004da0           PGC_GHG_2OR8
    1527 00004da0     1fb4          BTST    2,B4
    1528 00004db0     cb04          JRNZ    PGC_GHG_KO                      ;BR=DIRECTION 4 OR 6
    1529                    
    1530 00004dc0     0b62          CMPI    027E0000H,A2
         00004dd0 fd81ffff  
    1531 00004df0     c704          JRGT    PGC_GHG_SET                     ;BR=BEYOND X LIMIT FOR DIR 2(8)
    1532                                            
    1533 00004e00           PGC_GHG_KO
    1534 00004e00     1827          MOVK    1,A7
    1535 00004e10     09eb          MOVI    SET_GKO_SCRIPT,A11
         00004e20 00000000! 
    1536                    
    1537 00004e40           PGC_GHG_SET
    1538                    ;       MOVK    1,A10                           ;DON'T MISS                                     
    1539 00004e40     b368          MOVE    A11,*A8(ODT_GSAVE),L            ;SAVE
         00004e50     0650  
    1540 00004e60     c000          JRUC    PGC_SET_IMPACT
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   34

         00004e70     fedc  
    1541                    
    1542                    **************************************************************************
    1543                    *                                                                        *
    1544                    * PGC_GGLOVE                                                             *
    1545                    *                                                                        *
    1546                    **************************************************************************
    1547                    
    1548 00004e80           PGC_GGLOVE_MID
    1549 00004e80     1841          MOVK    2,A1
    1550 00004e90     1822          MOVK    3-2,A2
    1551 00004ea0     c002          JRUC    PGC_GGL_GO
    1552 00004eb0           PGC_GGLOVE
    1553 00004eb0     5621          CLR     A1
    1554 00004ec0     1822          MOVK    1,A2
    1555 00004ed0           PGC_GGL_GO
    1556 00004ed0     09eb          MOVI    SET_GGLOVE_SCRIPT,A11
         00004ee0 00000000! 
    1557                    
    1558 00004f00     4c8e          MOVE    A4,A14
    1559 00004f10     44ee          SUB     A7,A14
    1560 00004f20     442e          SUB     A1,A14
    1561 00004f30     c105          JRP     PGC_GGL_CHECK_QUICK             ;BR=GOT ENOUGH TIME
    1562                    
    1563 00004f40     1827          MOVK    1,A7
    1564 00004f50     09eb          MOVI    SET_GGHOP_SCRIPT,A11
         00004f60 00000000! 
    1565 00004f80     c00f          JRUC    PGC_GGL
    1566                    
    1567 00004f90           PGC_GGL_CHECK_QUICK
    1568 00004f90     4d4a          MOVE    A10,A10
    1569 00004fa0     ca02          JRZ     PGC_GGL_QUICKER                 ;BR=MISS ON QUICKER SAVE
    1570                    
    1571 00004fb0     444e          SUB     A2,A14
    1572 00004fc0     c10b          JRP     PGC_GGL                         ;BR=GOT ENOUGH TIME
    1573 00004fd0           PGC_GGL_QUICKER
    1574 00004fd0     4cee          MOVE    A7,A14
    1575 00004fe0     1827          MOVK    1,A7
    1576 00004ff0     09eb          MOVI    SET_GQGLOVE_SCRIPT,A11          ;QUICKER
         00005000 00000000! 
    1577 00005020     0b4e          CMPI    3,A14
         00005030     fffc  
    1578 00005040     ca03          JREQ    PGC_GGL                         ;BR=LOW GLOVE
    1579 00005050     09eb          MOVI    SET_GQHGLOVE_SCRIPT,A11         ;QUICKER, HIGH GLOVE
         00005060 00000000! 
    1580 00005080           PGC_GGL
    1581 00005080     b368          MOVE    A11,*A8(ODT_GSAVE),L            ;SAVE
         00005090     0650  
    1582 000050a0     c000          JRUC    PGC_SET_IMPACT
         000050b0     feb8  
    1583                    
    1584                    **************************************************************************
    1585                    *                                                                        *
    1586                    * PGC_GBLOCKER                                                           *
    1587                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   35

    1588                    **************************************************************************
    1589                    
    1590 000050c0           PGC_GBLOCKER_MID
    1591 000050c0     1841          MOVK    2,A1
    1592 000050d0     1822          MOVK    3-2,A2
    1593 000050e0     c002          JRUC    PGC_GBL_GO
    1594 000050f0           PGC_GBLOCKER
    1595 000050f0     5621          CLR     A1
    1596 00005100     1822          MOVK    1,A2
    1597 00005110           PGC_GBL_GO
    1598 00005110     09eb          MOVI    SET_GBLOCKER_SCRIPT,A11
         00005120 00000000! 
    1599                    
    1600 00005140     4c8e          MOVE    A4,A14
    1601 00005150     44ee          SUB     A7,A14
    1602 00005160     442e          SUB     A1,A14
    1603 00005170     c105          JRP     PGC_GBL_CHECK_QUICK             ;BR=GOT ENOUGH TIME
    1604                    
    1605 00005180     1827          MOVK    1,A7
    1606 00005190     09eb          MOVI    SET_GBHOP_SCRIPT,A11
         000051a0 00000000! 
    1607 000051c0     c00f          JRUC    PGC_GBL
    1608                    
    1609 000051d0           PGC_GBL_CHECK_QUICK
    1610 000051d0     4d4a          MOVE    A10,A10
    1611 000051e0     ca02          JRZ     PGC_GBL_QUICKER                 ;BR=MISS ON QUICKER SAVE
    1612                    
    1613 000051f0     444e          SUB     A2,A14
    1614 00005200     c10b          JRP     PGC_GBL                         ;BR=GOT ENOUGH TIME
    1615 00005210           PGC_GBL_QUICKER
    1616 00005210     4cee          MOVE    A7,A14
    1617 00005220     1827          MOVK    1,A7
    1618 00005230     09eb          MOVI    SET_GQBLOCKER_SCRIPT,A11        ;QUICKER
         00005240 00000000! 
    1619 00005260     0b4e          CMPI    3,A14
         00005270     fffc  
    1620 00005280     ca03          JREQ    PGC_GBL                         ;BR=LOW BLOCKER
    1621 00005290     09eb          MOVI    SET_GQHBLOCKER_SCRIPT,A11       ;QUICKER, HIGH BLOCKER
         000052a0 00000000! 
    1622 000052c0           PGC_GBL
    1623 000052c0     b368          MOVE    A11,*A8(ODT_GSAVE),L            ;SAVE
         000052d0     0650  
    1624 000052e0     c000          JRUC    PGC_SET_IMPACT
         000052f0     fe94  
    1625                    
    1626                    **************************************************************************
    1627                    *                                                                        *
    1628                    * PGC_GGSKATE                                                            *
    1629                    *                                                                        *
    1630                    **************************************************************************
    1631                    
    1632 00005300           PGC_GGSKATE
    1633 00005300     09fa          MOVI    PGC_GRPADST,B10                 ;PAD STACK ROUTINE
         00005310 00005e40' 
    1634 00005330     09eb          MOVI    SET_GGSKATE_SCRIPT,A11          ;SAVE
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   36

         00005340 00000000! 
    1635 00005360     09f2          MOVI    SET_GQGSKATE_SCRIPT,B2          ;QUICKER SAVE
         00005370 00000000! 
    1636 00005390     c009          JRUC    PGC_GSKATE
    1637                    
    1638                    **************************************************************************
    1639                    *                                                                        *
    1640                    * PGC_GSSKATE                                                            *
    1641                    *                                                                        *
    1642                    **************************************************************************
    1643                    
    1644 000053a0           PGC_GSSKATE
    1645 000053a0     09fa          MOVI    PGC_GLPADST,B10                 ;PAD STACK ROUTINE
         000053b0 00005960' 
    1646 000053d0     09eb          MOVI    SET_GSSKATE_SCRIPT,A11          ;SAVE
         000053e0 00000000! 
    1647 00005400     09f2          MOVI    SET_GQSSKATE_SCRIPT,B2          ;QUICKER SAVE
         00005410 00000000! 
    1648 00005430           PGC_GSKATE
    1649                    ;       CMPI    TOP_GOALPOST_Z,B5
    1650                    ;       JRGT    PGC_GSS_CHECK_QUICK             ;BR=ABOVE GOAL
    1651                    ;       CMPI    BOT_GOALPOST_Z,B5
    1652                    ;       JRLT    PGC_GSS_CHECK_QUICK             ;BR=BELOW GOAL
    1653                    ;
    1654                    ;       CMPI    TOP_GOALPOST_Z+0BH,B5
    1655                    ;       JRGT    PGC_RESET                       ;BR=ABOVE GOAL
    1656                    ;       CMPI    BOT_GOALPOST_Z-0BH,B5
    1657                    ;       JRLT    PGC_RESET                       ;BR=BELOW GOAL
    1658                    
    1659 00005430     4d4a          MOVE    A10,A10
    1660 00005440     ca4b          JRZ     PGC_GSS_QUICKER                 ;BR=MISS ON QUICKER SAVE
    1661                    
    1662 00005450     b700          MOVE    *A8(OXVAL),A0,L
         00005460     0140  
    1663 00005470     b701          MOVE    *A8(OZVAL),A1,L
         00005480     0180  
    1664                    
    1665 00005490     09e2          MOVI    LEFT_GOALLINE_X,A2
         000054a0 fd500000  
    1666                    
    1667 000054c0     4c73          MOVE    B3,B3
    1668 000054d0     ca01          JRZ     PGC_GSS_ANGLE                   ;BR=ON THE LEFT
    1669 000054e0     03a2          NEG     A2                              ;RIGHT GOALLINE X
    1670 000054f0           PGC_GSS_ANGLE
    1671 000054f0     09e3          MOVI    CENTER_Z,A3
         00005500 01538000  
    1672 00005520     0d5f          CALLA   find_dir_to_point
         00005530 00000000! 
    1673 00005550     4c01          MOVE    A0,A1
    1674                    
    1675 00005560     aec0          MOVB    *A6(POF_DIRECTION),A0
         00005570     0390  
    1676 00005580     0d5f          CALLA   dir_to_degrees                  ;GET GOALIE FACING ANGLE
         00005590 00000000! 
    1677                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   37

    1678 000055b0     aece          MOVB    *A6(POF_NUMBER),A14
         000055c0     0000  
    1679 000055d0     148e          SUBK    4,A14
    1680 000055e0     cb22          JRNZ    PGC_GSS_DIFF                    ;BR=ON THE LEFT SIDE
    1681 000055f0                   THETA_H A0
    1682 00005700                   THETA_H A1
    1683 00005810           PGC_GSS_DIFF
    1684 00005810     4401          SUB     A0,A1
    1685 00005820     0381          ABS     A1
    1686                    
    1687 00005830     0b61          CMPI    XD0250,A1
         00005840 ffe6ffff  
    1688 00005860     c504          JRGE    PGC_GSS_PAD_STACK               ;BR=ANGLE DIFF TOO MUCH
    1689                    
    1690 00005870     0d5f          CALLA   IS_A8_IN_GOALR
         00005880 00000000! 
    1691 000058a0     c901          JRNC    PGC_GSS_CHECK_QUICK             ;BR=SKATE SAVE
    1692 000058b0           PGC_GSS_PAD_STACK
    1693 000058b0     017a          JUMP    B10                             ;DO PAD STACK
    1694                    
    1695 000058c0           PGC_GSS_CHECK_QUICK
    1696 000058c0     4c8e          MOVE    A4,A14
    1697 000058d0     44ee          SUB     A7,A14
    1698 000058e0     14ae          SUBK    5,A14
    1699 000058f0     c102          JRP     PGC_GSS_SET                     ;BR=GOT ENOUGH TIME
    1700 00005900           PGC_GSS_QUICKER
    1701 00005900     1827          MOVK    1,A7
    1702 00005910     4e5b          MOVE    B2,A11
    1703 00005920           PGC_GSS_SET
    1704 00005920     b368          MOVE    A11,*A8(ODT_GSAVE),L            ;SAVE
         00005930     0650  
    1705 00005940     c000          JRUC    PGC_SET_IMPACT
         00005950     fe2e  
    1706                    
    1707                    **************************************************************************
    1708                    *                                                                        *
    1709                    * PGC_GLPADST                                                            *
    1710                    *                                                                        *
    1711                    **************************************************************************
    1712                    
    1713 00005960           PGC_GLPADST
    1714                    ;       CMPI    TOP_GOALPOST_Z,B5
    1715                    ;       JRGT    PGC_RESET                       ;BR=ABOVE GOAL
    1716                    ;       CMPI    BOT_GOALPOST_Z,B5
    1717                    ;       JRLT    PGC_RESET                       ;BR=BELOW GOAL
    1718                    
    1719                    ;       MOVK    3,A7
    1720                    ;       MOVI    SET_GBSPLIT_SCRIPT,B14
    1721                    ;       JRUC    PGC_GLP_SAVE
    1722                    
    1723 00005960     09fe          MOVI    SET_GLPADST_SCRIPT,B14
         00005970 00000000! 
    1724                    
    1725 00005990     4c8e          MOVE    A4,A14
    1726 000059a0     44ee          SUB     A7,A14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   38

    1727 000059b0     c113          JRP     PGC_GLP                         ;BR=GOT ENOUGH TIME
    1728                    
    1729 000059c0     b52e          MOVE    *A9(OYPOS),A14,W
         000059d0     0170  
    1730 000059e0     0b6e          CMPI    -080000H,A14
         000059f0 0007ffff  
    1731 00005a10     c609          JRLE    PGC_QUICKIE                     ;BR=TOO HIGH FOR THE SPLIT
    1732                    
    1733 00005a20     4c8e          MOVE    A4,A14
    1734 00005a30     148e          SUBK    4,A14
    1735 00005a40     ca06          JRZ     PGC_QUICKIE                     ;BR=QUICKIE
    1736 00005a50     ce05          JRN     PGC_QUICKIE                     ;BR=QUICKIE
    1737                    
    1738                    ;       MOVE    B0,B0
    1739                    ;       JRZ     PGC_QUICKIE
    1740                    
    1741 00005a60     1867          MOVK    3,A7
    1742 00005a70     09fe          MOVI    SET_GBSPLIT_SCRIPT,B14
         00005a80 00000000! 
    1743 00005aa0     c032          JRUC    PGC_GLP_SAVE
    1744 00005ab0           PGC_QUICKIE
    1745 00005ab0     5684          CLR     A4
    1746 00005ac0     09fe          MOVI    SET_GQLPADST_SCRIPT,B14         ;QUICKER
         00005ad0 00000000! 
    1747 00005af0           PGC_GLP
    1748 00005af0     4c10          MOVE    B0,B0
    1749 00005b00     ca2c          JRZ     PGC_GLP_SAVE                    ;BR=DIRECTION 3 OR 7
    1750                    
    1751 00005b10     b700          MOVE    *A8(OXVAL),A0,L
         00005b20     0140  
    1752 00005b30     0380          ABS     A0
    1753 00005b40     b721          MOVE    *A9(OXVAL),A1,L
         00005b50     0140  
    1754 00005b60     0381          ABS     A1
    1755 00005b70     4801          CMP     A0,A1
    1756 00005b80     c724          JRGT    PGC_GLP_SAVE                    ;BR=PUCK BEHIND GOALIE X-PLANE
    1757                    
    1758 00005b90     b700          MOVE    *A8(OZVAL),A0,L
         00005ba0     0180  
    1759 00005bb0     0b60          CMPI    TOP_GOALPOST_Z,A0
         00005bc0 fe76ffff  
    1760 00005be0     c71e          JRGT    PGC_GLP_SAVE                    ;BR=ABOVE GOAL
    1761 00005bf0     0b60          CMPI    BOT_GOALPOST_Z,A0
         00005c00 fee1ffff  
    1762 00005c20     c41a          JRLT    PGC_GLP_SAVE                    ;BR=BELOW GOAL
    1763                    
    1764                    ;       CALLA   IS_A8_IN_GOALR
    1765                    ;       JRNC    PGC_GLP_SAVE                    ;BR=NORMAL PAD STACK
    1766                    
    1767                    ;       MOVE    *A13(PGDIMPACT),A14,L
    1768 00005c30     b7ae          MOVE    *A13(PGXIMPACT),A14,L
         00005c40     0120  
    1769 00005c50     ca17          JRZ     PGC_GLP_SAVE                    ;BR=NO ANGLE 3(7) DATA
    1770                    
    1771                    ;       MOVE    *A13(PGXIMPACT),A14,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   39

    1772 00005c60     4fc9          MOVE    A14,B9
    1773 00005c70     b7ae          MOVE    *A13(PGZIMPACT),A14,L
         00005c80     0140  
    1774 00005c90     4fc7          MOVE    A14,B7
    1775                    
    1776 00005ca0     1874          MOVK    3,B4
    1777 00005cb0     4c73          MOVE    B3,B3
    1778 00005cc0     ca01          JRZ     PGC_GLP_SET_SAVE                ;BR=ON THE LEFT
    1779 00005cd0     18f4          MOVK    7,B4
    1780 00005ce0           PGC_GLP_SET_SAVE
    1781 00005ce0     41d4          ADD     B14,B4
    1782 00005cf0     b298          MOVE    B4,*B8(ODT_GSAVE),L             ;SAVE
         00005d00     0650  
    1783                    
    1784 00005d10     4c84          MOVE    A4,A4
    1785 00005d20     ca06          JRZ     PGC_GLP_TIME_OKAY
    1786 00005d30     b7a4          MOVE    *A13(PGTIMPACT),A4,L
         00005d40     0100  
    1787 00005d50     2a04          SRA     16,A4                           ;A4 = TIME WITH NO FRICTION
    1788 00005d60     1424          DEC     A4
    1789 00005d70     cf01          JRNN    PGC_GLP_TIME_OKAY
    1790 00005d80     5684          CLR     A4
    1791 00005d90           PGC_GLP_TIME_OKAY
    1792 00005d90     09fe          MOVI    0100000H,B14
         00005da0 00100000  
    1793 00005dc0     c071          JRUC    PGC_ROTATE
    1794                    
    1795 00005dd0           PGC_GLP_SAVE
    1796 00005dd0     41d4          ADD     B14,B4
    1797 00005de0     b298          MOVE    B4,*B8(ODT_GSAVE),L             ;SAVE
         00005df0     0650  
    1798                    
    1799 00005e00     09fe          MOVI    0100000H,B14
         00005e10 00100000  
    1800 00005e30     c06a          JRUC    PGC_ROTATE
    1801                    
    1802                    **************************************************************************
    1803                    *                                                                        *
    1804                    * PGC_GRPADST                                                            *
    1805                    *                                                                        *
    1806                    **************************************************************************
    1807                    
    1808 00005e40           PGC_GRPADST
    1809                    ;       CMPI    TOP_GOALPOST_Z,B5
    1810                    ;       JRGT    PGC_RESET                       ;BR=ABOVE GOAL
    1811                    ;       CMPI    BOT_GOALPOST_Z,B5
    1812                    ;       JRLT    PGC_RESET                       ;BR=BELOW GOAL
    1813                    
    1814                    ;       MOVK    3,A7
    1815                    ;       MOVI    SET_GGSPLIT_SCRIPT,B14
    1816                    ;       JRUC    PGC_GLP_SAVE
    1817                    
    1818 00005e40     09fe          MOVI    SET_GRPADST_SCRIPT,B14
         00005e50 00000000! 
    1819                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   40

    1820 00005e70     4c8e          MOVE    A4,A14
    1821 00005e80     44ee          SUB     A7,A14
    1822 00005e90     c1c5          JRP     PGC_GLP                         ;BR=GOT ENOUGH TIME
    1823                    
    1824 00005ea0     b52e          MOVE    *A9(OYPOS),A14,W
         00005eb0     0170  
    1825 00005ec0     0b6e          CMPI    -080000H,A14
         00005ed0 0007ffff  
    1826 00005ef0     c609          JRLE    PGC_GRP_QUICKIE                 ;BR=TOO HIGH FOR THE SPLIT
    1827                    
    1828 00005f00     4c8e          MOVE    A4,A14
    1829 00005f10     148e          SUBK    4,A14
    1830 00005f20     ca06          JRZ     PGC_GRP_QUICKIE                 ;BR=QUICKIE
    1831 00005f30     ce05          JRN     PGC_GRP_QUICKIE                 ;BR=QUICKIE
    1832                    
    1833                    ;       MOVE    B0,B0
    1834                    ;       JRZ     PGC_GRP_QUICKIE
    1835                    
    1836 00005f40     1867          MOVK    3,A7
    1837 00005f50     09fe          MOVI    SET_GGSPLIT_SCRIPT,B14
         00005f60 00000000! 
    1838 00005f80     c0e4          JRUC    PGC_GLP_SAVE
    1839 00005f90           PGC_GRP_QUICKIE
    1840 00005f90     5684          CLR     A4
    1841 00005fa0     09fe          MOVI    SET_GQRPADST_SCRIPT,B14         ;QUICKER
         00005fb0 00000000! 
    1842 00005fd0     c0b1          JRUC    PGC_GLP
    1843                    
    1844                    
    1845                    **************************************************************************
    1846                    *                                                                        *
    1847                    * PGC_STICK                                                              *
    1848                    *                                                                        *
    1849                    **************************************************************************
    1850                    
    1851 00005fe0           PGC_STICK
    1852 00005fe0     4d4a          MOVE    A10,A10
    1853 00005ff0     ca14          JRZ     PGC_S_BUTT                      ;BR=MISS ON BUTTERFLY
    1854                    
    1855 00006000     09fe          MOVI    0160000H,B14
         00006010 00160000  
    1856 00006030     09ee          MOVI    SET_GSTICK_SCRIPT,A14
         00006040 00000000! 
    1857 00006060     b3c8          MOVE    A14,*A8(ODT_GSAVE),L            ;STICK SAVE
         00006070     0650  
    1858                    
    1859 00006080     b72e          MOVE    *A9(ODT_VEL),A14,L
         00006090     04d0  
    1860 000060a0     0b6e          CMPI    GSLOW_PUCK,A14
         000060b0 ffefffff  
    1861 000060d0     c617          JRLE    PGC_S_GO                        ;BR=MOVING SLOW ENOUGH
    1862                    
    1863 000060e0     09c0          MOVI    748,A0
         000060f0     02ec  
    1864 00006100     0d5f          CALLA   RANDPER
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   41

         00006110 00000000! 
    1865 00006130     c811          JRC     PGC_S_GO                        ;BR=USE STICK SAVE
    1866                    
    1867 00006140           PGC_S_BUTT
    1868 00006140     09fe          MOVI    0200000H,B14                    ;2(8) OFFSET
         00006150 00200000  
    1869 00006170     09ee          MOVI    SET_GFULLBUTT_SCRIPT,A14
         00006180 00000000! 
    1870 000061a0     b3c8          MOVE    A14,*A8(ODT_GSAVE),L            ;BUTTERFLY STICK SAVE
         000061b0     0650  
    1871 000061c0     aece          MOVB    *A6(POF_DIRECTION),A14          ;GET GOALIE DIRECTION
         000061d0     0390  
    1872 000061e0     144e          SUBK    2,A14
    1873 000061f0     ca05          JRZ     PGC_S_GO                        ;BR=DIRECTION 2
    1874 00006200     14ce          SUBK    6,A14
    1875 00006210     ca03          JRZ     PGC_S_GO                        ;BR=DIRECTION 8
    1876 00006220     09fe          MOVI    0300000H,B14
         00006230 00300000  
    1877 00006250           PGC_S_GO
    1878 00006250     4c73          MOVE    B3,B3
    1879 00006260     ca27          JRZ     PGC_ROTATE                      ;BR=ON THE LEFT
    1880 00006270     03be          NEG     B14                             ;ON THE RIGHT
    1881 00006280     0bd1          XORI    010B,B1
         00006290 00000002  
    1882 000062b0     c022          JRUC    PGC_ROTATE
    1883                    
    1884                    
    1885                    **************************************************************************
    1886                    *                                                                        *
    1887                    * PGC_FULLBUTT                                                           *
    1888                    *                                                                        *
    1889                    **************************************************************************
    1890                    
    1891 000062c0           PGC_FULLBUTT
    1892 000062c0     09ee          MOVI    SET_GFULLBUTT_SCRIPT,A14
         000062d0 00000000! 
    1893 000062f0     b3c8          MOVE    A14,*A8(ODT_GSAVE),L            ;SAVE
         00006300     0650  
    1894                    
    1895 00006310     4d4a          MOVE    A10,A10
    1896 00006320     cb08          JRNZ    PGC_FB_GO                       ;BR=SAVE!
    1897 00006330     4cae          MOVE    A5,A14
    1898 00006340     038e          ABS     A14
    1899 00006350     154e          SUBK    10,A14
    1900 00006360     c104          JRP     PGC_FB_GO                       ;BR=NO FIVE HOLE
    1901 00006370     182e          MOVK    1,A14
    1902 00006380     058e          MOVE    A14,@FIVE_HOLE,W                ;THROUGH THE FIVE HOLE
         00006390 001772c0- 
    1903                    
    1904 000063b0           PGC_FB_GO
    1905 000063b0     09fe          MOVI    0200000H,B14
         000063c0 00200000  
    1906 000063e0     4c73          MOVE    B3,B3
    1907 000063f0     ca04          JRZ     PGC_CHECK_TRAPEZOID             ;BR=ON THE LEFT
    1908 00006400     03be          NEG     B14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   42

    1909 00006410     0bd1          XORI    010B,B1
         00006420 00000002  
    1910 00006440           PGC_CHECK_TRAPEZOID
    1911                    ;       MOVE    B0,B0
    1912                    ;       JRNZ    PGC_ROTATE_FUDGE                ;BR=NOT DIRECTION 3 OR 7
    1913                    
    1914 00006440     4cae          MOVE    A5,A14
    1915 00006450     038e          ABS     A14
    1916 00006460     148e          SUBK    4,A14
    1917                    ;       JRZ     PGC_ROTATE                      ;BR=ON THE TOP PART
    1918                    ;       JRN     PGC_ROTATE                      ;BR=ON THE TOP PART
    1919                    
    1920 00006470     4fc5          MOVE    A14,B5
    1921 00006480     1595          SUBK    12,B5
    1922 00006490     0395          ABS     B5
    1923 000064a0     5dd5          MPYS    B14,B5
    1924 000064b0     199e          MOVK    12,B14
    1925 000064c0     59d5          DIVS    B14,B5
    1926 000064d0     4cbe          MOVE    B5,B14
    1927                    
    1928 000064e0           PGC_ROTATE
    1929 000064e0     4c10          MOVE    B0,B0
    1930 000064f0     cb03          JRNZ    PGC_ROTATE_FUDGE                ;BR=NOT DIRECTION 3 OR 7
    1931                    
    1932 00006500     41d9          ADD     B14,B9
    1933 00006510     c000          JRUC    PGC_SET_IMPACT
         00006520     fd71  
    1934                    
    1935 00006530           PGC_ROTATE_FUDGE
    1936 00006530     4fd1          MOVE    B14,A1
    1937 00006540     09e0          MOVI    0B505H,A0
         00006550 0000b505  
    1938 00006570     0d5f          CALLA   MULT
         00006580 00000000! 
    1939 000065a0     4e2e          MOVE    A1,B14
    1940 000065b0     41d9          ADD     B14,B9                          ;OFFSET X
    1941 000065c0     039e          ABS     B14
    1942                    
    1943 000065d0     1fd1          BTST    1,B1
    1944 000065e0     ca01          JRZ     PGC_OFFZ_BUTTFLY                ;BR=DIRECTION 2 OR 8
    1945 000065f0     03be          NEG     B14
    1946 00006600           PGC_OFFZ_BUTTFLY
    1947 00006600     45d7          SUB     B14,B7
    1948 00006610     c000          JRUC    PGC_SET_IMPACT
         00006620     fd61  
    1949                    
    1950                    
    1951                    **************************************************************************
    1952                    *                                                                        *
    1953                    * puck_player_check                                                      *
    1954                    *                                                                        *
    1955                    **************************************************************************
    1956                    
    1957 00006630           puck_player_check
    1958 00006630     05a0          move    @PUCK_MODE,a0,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   43

         00006640 000000c0- 
    1959 00006660     0b40          cmpi    99,a0                   ;are we in just scored goal mode?
         00006670     ff9c  
    1960 00006680     c907          jrhs    papc_9                  ;br= yes, noone can touch it
    1961 00006690     0d3f          callr   check_puck_intended_player
         000066a0     0006  
    1962 000066b0     05a0          move    @PUCK_CONTROL,a0,W
         000066c0 00000040- 
    1963 000066e0     cb01          jrnz    papc_9
    1964 000066f0     c022          jruc    check_puck_any_player
    1965 00006700     0960  papc_9  rets
    1966                    
    1967 00006710           check_puck_intended_player
    1968 00006710     05a0          move    @PUCK_INTENDED,a0,W
         00006720 00000080- 
    1969 00006740     ca00          jrz     cpip_9
         00006750     00be  
    1970 00006760                   GBLOCK  a0,a6
    1971 000067b0     aece          movb    *a6(POF_IGNORE_PUCK),a14
         000067c0     0598  
    1972 000067d0     cb00          jrnz    cpip_9
         000067e0     00b5  
    1973 000067f0     0d3f          callr   find_quick_player_to_puck
         00006800     027c  
    1974 00006810     4ce7          move    a7,a7
    1975 00006820     cb0a          jrnz    cpiy1           ;if we were the closer point, no need to check puck point in net
    1976 00006830     098f          mmtm    sp,a2
         00006840     2000  
    1977 00006850     4e12          move    b0,a2
    1978 00006860     0d5f          calla   are_we_inside_goal
         00006870 000187a0' 
    1979 00006890     09af          mmfm    sp,a2
         000068a0     0004  
    1980 000068b0     c901          jrnc    cpiy1
    1981 000068c0     0960          rets                    ;our point was inside goal, no control
    1982 000068d0     b6ce  cpiy1   move    *a6(POF_S_HAND),a14,L
         000068e0     01a0  
    1983 000068f0     b7ce          move    *a14(PS_HN_INT_CONTROL),a14,L
         00006900     0000  
    1984 00006910     c04f          jruc    puck_control_in
    1985                    
    1986 00006920           check_puck_any_player
    1987 00006920     0d3f          callr   find_closest_player_to_puck
         00006930     01e5  
    1988 00006940     4c63          move    a3,a3
    1989 00006950     ce00          jrn     cpip_9
         00006960     009d  
    1990 00006970                   GBLOCK  a3,a6
    1991                    
    1992 000069c0     b4ce          MOVE    *A6(POF_FLAGS),A14,W
         000069d0     0200  
    1993 000069e0     1fae          BTST    B_PF_GOALIE,A14
    1994 000069f0     ca17          JRZ     CPAP_PLAYER                     ;BR=NOT A GOALIE
    1995                    
    1996 00006a00     b6ce          MOVE    *A6(POF_OBJECT),A14,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   44

         00006a10     0280  
    1997 00006a20     b5ce          MOVE    *A14(ODT_GFLAGS),A14,W
         00006a30     0630  
    1998 00006a40     1f2e          BTST    B_PUCKCHECK,A14
    1999 00006a50     ca00          JRZ     cpip_9                          ;BR=IGNORE THE PUCK
         00006a60     008d  
    2000                    
    2001 00006a70     05ae          MOVE    @PUCK_LAST_CONTROL,A14,W
         00006a80 00000070- 
    2002 00006aa0     486e          CMP     A3,A14
    2003 00006ab0     cb15          JRNE    cpapao                          ;BR=NOT DA GOALIE
    2004                    
    2005 00006ac0     05ae          MOVE    @PUCK_MODE,A14,W
         00006ad0 000000c0- 
    2006 00006af0     0b4e          CMPI    PUM_PASS,A14
         00006b00     fff5  
    2007 00006b10     ca00          JREQ    cpip_9                          ;BR=JUST PASSED PUCK
         00006b20     0081  
    2008 00006b30     0b4e          CMPI    PUM_TPASS,A14
         00006b40     fff4  
    2009 00006b50     ca7e          JREQ    cpip_9                          ;BR=JUST TURBO PASSED PUCK
    2010 00006b60     c00a          JRUC    cpapao
    2011                    
    2012 00006b70           CPAP_PLAYER
    2013 00006b70     07a0          move    @PUCK_CONTROL_START,a0,L
         00006b80 00000050- 
    2014 00006ba0     07ae          move    @WAVEIRQS,a14,L
         00006bb0 00000000! 
    2015 00006bd0     440e          sub     a0,a14
    2016 00006be0     0b4e          cmpi    8,a14
         00006bf0     fff7  
    2017 00006c00     c273          jrls    cpip_9
    2018 00006c10           cpapao
    2019                    ;       GBLOCK  a3,a6
    2020 00006c10     05a5          move    @PUCK_INTENDED,a5,W
         00006c20 00000080- 
    2021 00006c40     4865          cmp     a3,a5
    2022 00006c50     ca6e          jrz     cpip_9
    2023 00006c60     aece          movb    *a6(POF_IGNORE_PUCK),a14
         00006c70     0598  
    2024 00006c80     cb6b          jrnz    cpip_9
    2025 00006c90     05a0          move    @PUCK_OPEN_CONTROL_TIME,a0,W
         00006ca0 000000a0- 
    2026 00006cc0     ca05          jrz     cpapaok                 ;if control time is 0, we don't care about last control
    2027 00006cd0     05a0          move    @PUCK_LAST_CONTROL,a0,W
         00006ce0 00000070- 
    2028 00006d00     4803          cmp     a0,a3
    2029 00006d10     ca62          jrz     cpip_9
    2030 00006d20     4c60  cpapaok move    a3,a0           ;player to a0
    2031 00006d30     b6c7          move    *a6(POF_S_HAND),a7,L
         00006d40     01a0  
    2032 00006d50     b6e7          move    *a7(PS_HN_OFF_CONTROL),a7,L
         00006d60     0020  
    2033 00006d70     0d5f          calla   get_offense_mode
         00006d80 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   45

    2034 00006da0     4c21          move    a1,a1
    2035 00006db0     ca04          jrz     cpap_3
    2036 00006dc0     b6c7          move    *a6(POF_S_HAND),a7,L
         00006dd0     01a0  
    2037 00006de0     b6e7          move    *a7(PS_HN_DEF_CONTROL),a7,L
         00006df0     0040  
    2038 00006e00     4cee  cpap_3  move    a7,a14
    2039 00006e10           puck_control_in
    2040 00006e10     07a8          move    @PUCK_OBJECT,a8,L
         00006e20 00000000- 
    2041 00006e40     b4c0          move    *a6(POF_MODE),a0,W
         00006e50     0210  
    2042 00006e60     0b40          cmpi    PM_ONETIME,a0
         00006e70     fff2  
    2043 00006e80     cb05          jrnz    ca141
    2044 00006e90     b4c0          move    *a6(POF_FLAGS),a0,W
         00006ea0     0200  
    2045 00006eb0     1e40          btst    B_PF_OTD,a0
    2046 00006ec0     cb10          jrnz    cpip_ignore
    2047                    ;       cmpi    300,a4
    2048                    ;       jrhi    ca141
    2049 00006ed0     c035          jruc    cpip_control            ;if we are onetiming, we control always (unless we just had it)
    2050 00006ee0     092e  ca141   call    a14
    2051 00006ef0     24a0          sll     5,a0
    2052 00006f00     0b20          addi    cpip_l,a0
         00006f10 00006f50' 
    2053 00006f30     8600          move    *a0,a0,L
    2054 00006f40     0160          jump    a0
    2055 00006f50 00006fd0' cpip_l  .long   cpip_ignore
    2056 00006f70 00006fe0'         .long   cpip_missed
    2057 00006f90 00007010'         .long   cpip_rebound
    2058 00006fb0 00007230'         .long   cpip_control
    2059                    
    2060 00006fd0           cpip_ignore
    2061 00006fd0     0960          rets
    2062 00006fe0           cpip_missed
    2063 00006fe0     ac46          movb    a2,*a6(POF_IGNORE_PUCK)
         00006ff0     0598  
    2064 00007000     0960          rets
    2065 00007010           cpip_rebound
    2066 00007010     b4ce          move    *a6(POF_FLAGS),a14,W
         00007020     0200  
    2067 00007030     1fee          btst    B_PF_HUMAN,a14
    2068 00007040     cb06          jrnz    cpr_a
    2069 00007050     09c0          movi    500,a0                  ;50% chance of deflection for drone
         00007060     01f4  
    2070 00007070     0d5f          calla   RANDPER
         00007080 00000000! 
    2071 000070a0     c9f3          jrnc    cpip_missed
    2072 000070b0     0d5f  cpr_a   calla   spx_intercept_bounce
         000070c0 00000000! 
    2073 000070e0     ac46          movb    a2,*a6(POF_IGNORE_PUCK)
         000070f0     0598  
    2074 00007100     5600          clr     a0
    2075 00007110     0580          move    a0,@PUCK_INTENDED,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   46

         00007120 00000080- 
    2076 00007140     0580          move    a0,@PUCK_LAST_CONTROL,W
         00007150 00000070- 
    2077 00007170     0780          move    a0,@bhit_dest_time,L
         00007180 00177210- 
    2078 000071a0     0d3f          callr   record_puck_a6          ;we deflect it, record us in owner record
         000071b0     001c  
    2079 000071c0     07c0          move    @WAVEIRQS,@PUCK_NEWDIR_TIME,L
         000071d0 00000000! 
         000071f0 00177230- 
    2080 00007210     c000          jruc    put_puck_in_other_direction
         00007220     05ae  
    2081 00007230           cpip_control
    2082 00007230           GET_PUCK_CONTROL
    2083 00007230     aec0          movb    *a6(POF_NUMBER),a0
         00007240     0000  
    2084 00007250     0580          move    a0,@PUCK_CONTROL,W
         00007260 00000040- 
    2085 00007280     09c0          movi    150,a0
         00007290     0096  
    2086 000072a0     b006          move    a0,*a6(POF_ARROW_TIME),W
         000072b0     0560  
    2087 000072c0     5600          clr     a0
    2088 000072d0     0580          move    a0,@PUCK_INTENDED,W
         000072e0 00000080- 
    2089 00007300     0580          move    a0,@PUCK_LAST_CONTROL,W
         00007310 00000070- 
    2090 00007330     c053          jruc    new_puck_control                ;new player has control
    2091 00007340     0960  cpip_9  rets
    2092                    
    2093 00007350           record_puck_a0
    2094 00007350     098f          mmtm    sp,a0,a1
         00007360     c000  
    2095 00007370     c039          jruc    rpo_1
    2096 00007380           record_puck_a6
    2097 00007380     098f          mmtm    sp,a0,a1
         00007390     c000  
    2098 000073a0     0d3f          callr   kill_all_trails
         000073b0     0956  
    2099 000073c0     aec0          movb    *a6(POF_NUMBER),a0
         000073d0     0000  
    2100 000073e0     0b40          cmpi    4,a0
         000073f0     fffb  
    2101 00007400     ca03          jrz     rpa6g
    2102 00007410     0b40          cmpi    8,a0
         00007420     fff7  
    2103 00007430     cb2d          jrnz    rpo_1
    2104 00007440     5621  rpa6g   clr     a1
    2105 00007450     0781          move    a1,@PUCK_CONTROL_START,L        ;after goalie deflects it, it is anyones puck
         00007460 00000050- 
    2106 00007480     0581          move    a1,@PUCK_OPEN_CONTROL_TIME,W
         00007490 000000a0- 
    2107 000074b0     0581          move    a1,@PUCK_OPEN_LAST_TIME,W
         000074c0 000000b0- 
    2108 000074e0     0d5f          calla   set_safe_puck_mode_a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   47

         000074f0 0000efc0' 
    2109 00007510     c01f          jruc    rpo_1
    2110                    
    2111                    **************************************************************************
    2112                    *                                                                        *
    2113                    * LAST_PUCK_OWNER - RETURN THE LAST PLAYER (GOALIE) TO TOUCH THE PUCK    *
    2114                    *                                                                        *
    2115                    * PASS:                                                                  *
    2116                    * NUTIN'                                                                 *
    2117                    * RETURN:                                                                *
    2118                    * A0 = PLAYER NUMBER                                                     *
    2119                    *                                                                        *
    2120                    **************************************************************************
    2121                    
    2122 00007520           LAST_PUCK_OWNER
    2123 00007520     07ae          MOVE    @puck_owner_pointer,A14,L
         00007530 00000170- 
    2124 00007550     150e          SUBK    8,A14
    2125 00007560     0b6e          CMPI    puck_owner_data,A14
         00007570 fffffecf- 
    2126 00007590     c903          JRHS    LPO_GET                                 ;BR=Q WRAPS
    2127 000075a0     09ee          MOVI    puck_owner_pointer-8,A14
         000075b0 00000168- 
    2128 000075d0           LPO_GET
    2129 000075d0     8fc0          MOVB    *A14,A0
    2130 000075e0     0960          RETS
    2131                    
    2132 000075f0           last_puck_owner_a14
    2133 000075f0     07ae          move    @puck_owner_pointer,a14,L
         00007600 00000170- 
    2134 00007620     150e          subk    8,a14
    2135 00007630     0b6e          cmpi    puck_owner_data,a14
         00007640 fffffecf- 
    2136 00007660     c903          jrhs    lpg_csc
    2137 00007670     09ee          movi    puck_owner_pointer-8,a14
         00007680 00000168- 
    2138 000076a0     8fce  lpg_csc movb    *a14,a14
    2139 000076b0     0960          rets
    2140                    
    2141 000076c0           record_puck_owner
    2142 000076c0     098f          mmtm    sp,a0,a1
         000076d0     c000  
    2143 000076e0     05a0          move    @PUCK_CONTROL,a0,W
         000076f0 00000040- 
    2144 00007710           rpo_1   ;cmpi   4,a0
    2145                            ;jrz    rpo2
    2146                            ;cmpi   8,a0
    2147                            ;jrnz   rpo3
    2148 00007710           rpo2    ;clr    a1
    2149                            ;movb   a1,@PLAYER_1_BLOCK+POF_IGNORE_PUCK
    2150                            ;movb   a1,@PLAYER_2_BLOCK+POF_IGNORE_PUCK
    2151                            ;movb   a1,@PLAYER_5_BLOCK+POF_IGNORE_PUCK
    2152                            ;movb   a1,@PLAYER_6_BLOCK+POF_IGNORE_PUCK
    2153                            ;move   a1,@PUCK_OPEN_CONTROL_TIME,W
    2154 00007710     57ce  rpo3    clr     a14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   48

    2155 00007720     058e          move    a14,@global_shot_percentage,W
         00007730 00000000! 
    2156 00007750     07a1          move    @puck_owner_pointer,a1,L
         00007760 00000170- 
    2157 00007780     8c01          movb    a0,*a1
    2158 00007790     1101          addk    8,a1
    2159 000077a0     0b61          cmpi    puck_owner_pointer,a1
         000077b0 fffffe8f- 
    2160 000077d0     c803          jrlo    npcppa
    2161 000077e0     09e1          movi    puck_owner_data,a1
         000077f0 00000130- 
    2162 00007810     0781  npcppa  move    a1,@puck_owner_pointer,L
         00007820 00000170- 
    2163 00007840     09af          mmfm    sp,a0,a1
         00007850     0003  
    2164 00007860     0960          rets
    2165                    
    2166 00007870           new_puck_control                ;new player has control
    2167 00007870     098f          mmtm    sp,a0
         00007880     8000  
    2168                    
    2169                    ;       clr     a0
    2170                    ;       clr     a1
    2171                    ;       clr     a2
    2172                    ;       .ref    do_flash
    2173                    ;       calla   do_flash
    2174                    
    2175 00007890     07c0          move    @WAVEIRQS,@PUCK_NEWDIR_TIME,L
         000078a0 00000000! 
         000078c0 00177230- 
    2176 000078e0     07a0          MOVE    @PUCK_OBJECT,A0,L       ;IS THERE A BETTER PLACE FOR THIS?
         000078f0 00000000- 
    2177 00007910     b40e          MOVE    *A0(ODT_PFLAGS),A14,W
         00007920     0590  
    2178 00007930     0b8e          ANDNI   M_INFRONT|M_INBACK,A14  ;RESET FLAGS
         00007940 00000003  
    2179 00007960     b1c0          MOVE    A14,*A0(ODT_PFLAGS),W
         00007970     0590  
    2180                    
    2181 00007980     5600          clr     a0
    2182 00007990     0580          move    a0,@goal_pass,W         ;mark no goal pending
         000079a0 000001c0- 
    2183 000079c0     0580          move    a0,@goal_pcount1,W
         000079d0 000001d0- 
    2184 000079f0     0580          move    a0,@goal_pcount2,W
         00007a00 000001e0- 
    2185 00007a20     0780          move    a0,@bhit_dest_time,L
         00007a30 00177210- 
    2186                    
    2187                    ;       callr   LAST_PUCK_OWNER
    2188                    ;       move    @PUCK_CONTROL,a14,W
    2189                    ;       jrz     snpcr
    2190                    ;       dec     a0
    2191                    ;       dec     a14
    2192                    ;       srl     2,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   49

    2193                    ;       srl     2,a14
    2194                    ;       cmp     a0,a14
    2195                    ;       jrz     snpcr                   ; don't clear out our slow timer, we are hogging the puck with o
    2196 00007a50     5600          clr     a0
    2197 00007a60     0780          move    a0,@global_control_slow,L
         00007a70 00000000! 
    2198 00007a90     07c0  snpcr   move    @WAVEIRQS,@PUCK_CONTROL_START,L
         00007aa0 00000000! 
         00007ac0 00000050- 
    2199 00007ae0     05a0          move    @PUCK_CONTROL,a0,W
         00007af0 00000040- 
    2200 00007b10     09af          mmfm    sp,a0
         00007b20     0001  
    2201 00007b30     ca6a          jrz     nobody
    2202 00007b40     0d3f          callr   record_puck_owner
         00007b50     ffb6  
    2203 00007b60     09c0          movi    60,a0
         00007b70     003c  
    2204 00007b80     0580          move    a0,@puck_control_blink,W        ;blink players arrow for 1/3 second
         00007b90 00177270- 
    2205 00007bb0     5600          clr     a0
    2206 00007bc0     0580          move    a0,@PUCK_MODE_2,W
         00007bd0 000000d0- 
    2207 00007bf0     0580          move    a0,@PUCK_MODE_2_DIR,W
         00007c00 000000e0- 
    2208 00007c20     0580          move    a0,@outlaw_puck2,W
         00007c30 00000110- 
    2209 00007c50     05a0          move    @PUCK_CONTROL,a0,W
         00007c60 00000040- 
    2210 00007c80     05ae          move    @hot_player,a14,W
         00007c90 00000000! 
    2211 00007cb0     480e          cmp     a0,a14
    2212 00007cc0     cb02          jrnz    nof
    2213 00007cd0     182e          movk    1,a14
    2214 00007ce0     c001          jruc    nof2
    2215 00007cf0     57ce  nof     clr     a14
    2216 00007d00     058e  nof2    move    a14,@show_puck_on_fire,W
         00007d10 00177260- 
    2217 00007d30     0d5f          calla   clear_all_signals
         00007d40 00000000! 
    2218 00007d60     0d5f          calla   fix_all_signals
         00007d70 00000000! 
    2219 00007d90                   GBLOCK  a0,a6
    2220 00007de0     5621          clr     a1
    2221 00007df0     b026          move    a1,*a6(POF_SAFETY_WARNING),W
         00007e00     0a60  
    2222 00007e10     b226          move    a1,*a6(POF_DSP_TIME),L
         00007e20     0bb0  
    2223 00007e30     b026          move    a1,*a6(POF_DSP_TYPE),W
         00007e40     0bd0  
    2224 00007e50     b4c1          move    *a6(POF_BUTTONS),a1,W
         00007e60     0380  
    2225 00007e70     1fe1          btst    0,a1                    ;is shoot button in
    2226 00007e80     ca32          jrz     npc_9                   ;br=no
    2227 00007e90     09e3          movi    onetime_ok_mlist,a3
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   50

         00007ea0 000086d0' 
    2228 00007ec0     0d5f          calla   check_mode_ok
         00007ed0 00000000! 
    2229 00007ef0     c92b          jrnc    npc_9
    2230                    
    2231 00007f00     b4ce          move    *a6(POF_FLAGS),a14,W
         00007f10     0200  
    2232 00007f20     1fce          btst    B_PF_CONTROL,a14
    2233 00007f30     ca27          jrz     npc_9
    2234 00007f40     1e4e          btst    B_PF_OTD,a14
    2235 00007f50     cb25          jrnz    npc_9
    2236                    
    2237 00007f60     05a3          move    @PUCK_MODE,a3           ;we now allow one timers from any mode
         00007f70 000000c0- 
    2238 00007f90     0b43          cmpi    PUM_PASS,a3
         00007fa0     fff5  
    2239 00007fb0     ca03          jrz     npct
    2240 00007fc0     0b43          cmpi    PUM_TPASS,a3
         00007fd0     fff4  
    2241 00007fe0     cb1c          jrnz    npc_9
    2242 00007ff0     19c1  npct    movk    PUM_ONETIME,a1
    2243 00008000     0d3f          callr   set_safe_puck_mode_a1
         00008010     06fa  
    2244 00008020     b6c8          move    *a6(POF_OBJECT),a8,L
         00008030     0280  
    2245                    
    2246 00008040     0d5f          calla   take_player_control
         00008050 00000000! 
    2247 00008070     19a0          movk    PM_ONETIME,a0
    2248 00008080     b006          move    a0,*a6(POF_MODE),W
         00008090     0210  
    2249 000080a0     aec0          movb    *a6(POF_NUMBER),a0
         000080b0     0000  
    2250 000080c0     0d5f          calla   get_quick_shot_point
         000080d0 00000000! 
    2251 000080f0     b702          move    *a8(OXVAL),a2,L
         00008100     0140  
    2252 00008110     b703          move    *a8(OZVAL),a3,L
         00008120     0180  
    2253 00008130     0d5f          calla   find_dir_to_point_18
         00008140 00000000! 
    2254 00008160     ac06          movb    a0,*a6(POF_DIRECTION)
         00008170     0390  
    2255 00008180     c080          jauc    set_immediate_onetime_script
         00008190 00000000! 
    2256                    
    2257 000081b0     5600  npc_9   clr     a0
    2258 000081c0     c000          jruc    set_safe_puck_mode_a0
         000081d0     06ee  
    2259 000081e0     098f  nobody  mmtm    sp,a14
         000081f0     0002  
    2260 00008200     0d3f          callr   puck_release_check      ;we are releasing a puck, make sure it's out of a goal
         00008210     004f  
    2261 00008220     0d5f          calla   clear_all_signals
         00008230 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   51

    2262 00008250     0d3f          callr   set_puck_outlaw
         00008260     0029  
    2263 00008270     0d3f          callr   insure_puck_to_ice
         00008280     0003  
    2264 00008290     09af          mmfm    sp,a14
         000082a0     4000  
    2265 000082b0     0960          rets
    2266                    
    2267 000082c0           insure_puck_to_ice
    2268 000082c0     098f          mmtm    sp,a0,a1,a7             ;we use a process
         000082d0     c100  
    2269 000082e0                   CREATE  PID_PUCK_INSURE,ipti    ;so any changes we make after call
    2270 00008360     09af          mmfm    sp,a0,a1,a7             ;are checked as well
         00008370     0083  
    2271 00008380     0960          rets
    2272 00008390     05ae  ipti    move    @PUCK_CONTROL,a14,W
         000083a0 00000040- 
    2273 000083c0     cb10          jrnz    ipt_9                   ;somebody has us
    2274 000083d0     07a8          move    @PUCK_OBJECT,a8,L
         000083e0 00000000- 
    2275 00008400     b50e          move    *a8(OYACCEL),a14,W
         00008410     02f0  
    2276 00008420     ce08          jrn     ipt_ab                  ;puck is accelerating up?
    2277 00008430     c109          jrp     ipt_9                   ;puck is accelerating down, is ok
    2278 00008440     b70e          move    *a8(OYVEL),a14,L
         00008450     0120  
    2279 00008460     ce04          jrn     ipt_ab                  ;puck is traveling up, without a downward acc.
    2280 00008470     c105          jrp     ipt_9                   ;puck is traveling down, is ok
    2281 00008480     b70e          move    *a8(OYVAL),a14,L
         00008490     0160  
    2282 000084a0     ca02          jrz     ipt_9                   ;puck is on ice, ok
    2283 000084b0     0d3f  ipt_ab  callr   give_puck_gravity       ;puck is anywhere else, give it gravity and assume the best
         000084c0     0783  
    2284 000084d0     c080  ipt_9   jauc    SUCIDE
         000084e0 00000000! 
    2285                    
    2286 00008500           set_puck_outlaw
    2287 00008500     098f          mmtm    sp,a0,a9
         00008510     8040  
    2288 00008520     07a9          move    @PUCK_OBJECT,a9,L
         00008530 00000000- 
    2289 00008550     b720          move    *a9(OXVAL),a0,L
         00008560     0140  
    2290 00008570     0b20          addi    [0,08000h],a0
         00008580 00008000  
    2291 000085a0     2a00          sra     16,a0
    2292                    ;       move    *a9(OXPOS),a0,W         ;half
    2293 000085b0     0b40          cmpi    -688,a0
         000085c0     02af  
    2294 000085d0     c40c          jrlt    pol
    2295 000085e0     0b40          cmpi    688,a0
         000085f0     fd4f  
    2296 00008600     c707          jrgt    por
    2297 00008610     5600          clr     a0
    2298 00008620     0580  pox     move    a0,@outlaw_puck,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   52

         00008630 00000100- 
    2299 00008650     09af          mmfm    sp,a0,a9
         00008660     0201  
    2300 00008670     0960          rets
    2301 00008680     1820  por     movk    1,a0
    2302 00008690     c0f8          jruc    pox
    2303 000086a0     09c0  pol     movi    -1,a0
         000086b0     ffff  
    2304 000086c0     c0f5          jruc    pox
    2305                    
    2306 000086d0           onetime_ok_mlist
    2307 000086d0     0000          .word   0,1,4,-1
    2308                    
    2309 00008710           puck_release_check
    2310 00008710     0960          rets
    2311                    
    2312                    **************************************************************************
    2313                    *                                                                        *
    2314                    * find_closest_player_to_puck_r                                          *
    2315                    *                                                                        *
    2316                    * PASS:                                                                  *
    2317                    * NUTIN'                                                                 *
    2318                    *                                                                        *
    2319                    * RETURN:                                                                *
    2320                    * A3 = PLAYER NUMBER (NEGATIVE IF NOBODY)                                *
    2321                    * A4 = DISTANCE                                                          *
    2322                    *                                                                        *
    2323                    **************************************************************************
    2324                    
    2325 00008720           find_closest_player_to_puck_r
    2326 00008720     098f          MMTM    SP,A0,A1,A2,A5,A6,A7,A8,A9,A10,A11
         00008730     e7f0  
    2327 00008740     0d3f          CALLR   find_closest_player_to_puck
         00008750     0003  
    2328 00008760     09af          MMFM    SP,A0,A1,A2,A5,A6,A7,A8,A9,A10,A11
         00008770     0fe7  
    2329 00008780     0960          RETS
    2330                    
    2331 00008790           find_closest_player_to_puck
    2332 00008790     09e4          movi    [32767,0],a4
         000087a0 7fff0000  
    2333 000087c0     07a9          move    @PUCK_OBJECT,a9,L
         000087d0 00000000- 
    2334 000087f0     b52a          move    *a9(OYPOS),a10,W
         00008800     0170  
    2335 00008810     03aa          neg     a10
    2336 00008820     5663          clr     a3
    2337 00008830     1423          dec     a3              ;a3 if negative, then we found noone
    2338 00008840     05ab          move    @WAVEIRQS,a11,W
         00008850 00000000! 
    2339 00008870     2beb          sra     1,a11
    2340 00008880     c804          jrc     fcp_0
    2341 00008890     09eb          movi    FCPLST1,a11
         000088a0 00008b60' 
    2342 000088c0     c003          jruc    fcp_1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   53

    2343 000088d0     09eb  fcp_0   movi    FCPLST2,a11
         000088e0 00008bd0' 
    2344 00008900     9560  fcp_1   move    *a11+,a0,W
    2345 00008910     ca22          jrz     fcpxx
    2346 00008920     098f          mmtm    sp,a0,a3,a4
         00008930     9800  
    2347 00008940     0d3f          callr   find_quick_player_to_puck_adj
         00008950     0067  
    2348 00008960     09af          mmfm    sp,a0,a3,a4
         00008970     0019  
    2349 00008980     b50e          move    *a8(ODT_FHEIGHT),a14,W
         00008990     0610  
    2350 000089a0     cb02          jrnz    fcpoi
    2351 000089b0     b50e          move    *a8(OSIZEY),a14,W
         000089c0     0270  
    2352 000089d0     49ca  fcpoi   cmp     a14,a10
    2353 000089e0     c914          jrhs    fcp_2
    2354 000089f0     aece          movb    *a6(POF_IGNORE_PUCK),a14
         00008a00     0598  
    2355 00008a10     cb11          jrnz    fcp_2
    2356 00008a20     4881          cmp     a4,a1
    2357 00008a30     c90f          jrhs    fcp_2
    2358 00008a40     4c25          move    a1,a5           ;we have a close player, check if moving toward or away
    2359 00008a50     b4ce          MOVE    *A6(POF_FLAGS),A14
         00008a60     0200  
    2360 00008a70     1fae          BTST    B_PF_GOALIE,A14
    2361 00008a80     cb08          JRNZ    FCP_NEWMIN                      ;BR=DON'T CHECK THIS FOR GOALIE
    2362 00008a90     098f          mmtm    sp,a0,a3,a4,a5
         00008aa0     9c00  
    2363 00008ab0     0d3f          callr   find_quick_to_next_puck_adj
         00008ac0     0017  
    2364 00008ad0     09af          mmfm    sp,a0,a3,a4,a5
         00008ae0     0039  
    2365 00008af0     48a1          cmp     a5,a1
    2366 00008b00     c302          jrhi    fcp_2           ;br= puck is moving away from player, it doesn't count
    2367 00008b10           FCP_NEWMIN
    2368 00008b10     4c03          move    a0,a3           ;player is in a3
    2369 00008b20     4ca4          move    a5,a4           ;new min distance in a4
    2370 00008b30     c0dc  fcp_2   jruc    fcp_1
    2371 00008b40     4c81  fcpxx   move    a4,a1
    2372 00008b50     0960          rets
    2373                    
    2374 00008b60     0008  FCPLST1 .word   8,6,5,4,2,1,0
    2375 00008bd0     0004  FCPLST2 .word   4,1,2,8,5,6,0
    2376                    
    2377                    
    2378                    **************************************************************************
    2379                    *                                                                        *
    2380                    * FIND_D_PCENTER_TO_PUCK - FIND DISTANCE FROM CENTER OF PLAYER TO PUCK   *
    2381                    *                                                                        *
    2382                    * PASS:                                                                  *
    2383                    * A6 = PLAYER DATA BLOCK                                                 *
    2384                    *                                                                        *
    2385                    * RETURN:                                                                *
    2386                    * A1 = DISTANCE                                                          *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   54

    2387                    *                                                                        *
    2388                    **************************************************************************
    2389                    
    2390                    ;FIND_D_PCENTER_TO_PUCK
    2391                    ;       MOVE    *A6(POF_OBJECT),A8,L
    2392                    ;       MOVE    *A8(OXVAL),A0,L
    2393                    ;       MOVE    *A8(OZVAL),A1,L
    2394                    ;       move    @PUCK_OBJECT,a9,L
    2395                    ;       move    *a9(OXVAL),a2,L
    2396                    ;       move    *a9(OZVAL),a3,L
    2397                    ;fdp1   move    a0,a5
    2398                    ;       sub     a2,a5
    2399                    ;       abs     a5
    2400                    ;       move    a1,a4
    2401                    ;       sub     a3,a4
    2402                    ;       abs     a4
    2403                    ;       add     a4,a5
    2404                    ;       cmpi    [300,0],a5
    2405                    ;       jrgt    fdp_8           ;too far to bother with
    2406                    ;       calla   find_dis_to_point_whole
    2407                    ;       move    a4,a1
    2408                    ;       rets
    2409                    ;fdp_8  movi    [32767,0],a4
    2410                    ;       move    a4,a1           ;needed in a1 and a4
    2411                    ;       rets
    2412                    
    2413 00008c40           find_quick_to_next_puck_adj             ;adj for drone
    2414 00008c40           find_quick_to_next_puck         ;takes a6, a7, a8
    2415 00008c40     07a9          move    @PUCK_OBJECT,a9,L
         00008c50 00000000- 
    2416 00008c70     b722          move    *a9(OXVAL),a2,L
         00008c80     0140  
    2417 00008c90     b723          move    *a9(OZVAL),a3,L
         00008ca0     0180  
    2418 00008cb0     b72e          move    *a9(OXVEL),a14,L
         00008cc0     0100  
    2419 00008cd0     41c2          add     a14,a2
    2420 00008ce0     b72e          move    *a9(OZVEL),a14,L
         00008cf0     00e0  
    2421 00008d00     41c3          add     a14,a3
    2422 00008d10     b700          move    *a8(OXVAL),a0,L
         00008d20     0140  
    2423 00008d30     b701          move    *a8(OZVAL),a1,L
         00008d40     0180  
    2424 00008d50     4ce7          move    a7,a7
    2425 00008d60     cb0c          jrnz    fqtnp1
    2426 00008d70     0d5f          calla   get_players_puck_point_o
         00008d80 00000000! 
    2427                    
    2428 00008da0     4c02          move    a0,a2
    2429 00008db0     2a02          sra     16,a2
    2430 00008dc0     ee22          movy    a1,a2
    2431 00008dd0     0d5f          calla   are_we_inside_goal
         00008de0 000187a0' 
    2432 00008e00     c817          jrc     fqtp8                   ;use regular point only if puck point inside goal
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   55

    2433 00008e10     b722          move    *a9(OXVAL),a2,L
         00008e20     0140  
    2434                    
    2435 00008e30     b70e  fqtnp1  move    *a8(OXVEL),a14,L
         00008e40     0100  
    2436 00008e50     41c0          add     a14,a0
    2437 00008e60     b70e          move    *a8(OZVEL),a14,L
         00008e70     00e0  
    2438 00008e80     41c1          add     a14,a1
    2439 00008e90     0b20          addi    [0,08000h],a0           ;half
         00008ea0 00008000  
    2440 00008ec0     2a00          sra     16,a0
    2441 00008ed0     2a01          sra     16,a1
    2442 00008ee0     0b22          addi    [0,08000h],a2           ;half
         00008ef0 00008000  
    2443 00008f10     2a02          sra     16,a2
    2444 00008f20     2a03          sra     16,a3
    2445 00008f30     0d5f          calla   find_dist_quick
         00008f40 00000000! 
    2446 00008f60     4c81          move    a4,a1
    2447 00008f70     0960          rets
    2448 00008f80     09e4  fqtp8   movi    [30000,0],a4
         00008f90 75300000  
    2449 00008fb0     4c81          move    a4,a1
    2450 00008fc0     0960          rets
    2451                    
    2452 00008fd0           find_quick_player_to_puck_adj           ;adjust for drone
    2453 00008fd0           find_quick_player_to_puck       ;takes a0
    2454 00008fd0                   GBLOCK  a0,a6
    2455 00009020     b6c8          move    *a6(POF_OBJECT),a8,L
         00009030     0280  
    2456 00009040     07a9          move    @PUCK_OBJECT,a9,L
         00009050 00000000- 
    2457 00009070     b722          move    *a9(OXVAL),a2,L
         00009080     0140  
    2458 00009090     0b22          addi    [0,08000h],a2
         000090a0 00008000  
    2459 000090c0     2a02          sra     16,a2
    2460 000090d0     b523          move    *a9(OZPOS),a3,W
         000090e0     0190  
    2461 000090f0     0d5f          calla   get_players_puck_point_o
         00009100 00000000! 
    2462 00009120     0b20          addi    [0,08000h],a0           ;half
         00009130 00008000  
    2463 00009150     2a00          sra     16,a0
    2464 00009160     4c0e          move    a0,a14
    2465 00009170     ee2e          movy    a1,a14
    2466 00009180     4fc0          move    a14,b0          ;return b0 for check of xy goal later
    2467 00009190     2a01          sra     16,a1
    2468 000091a0     0d5f          calla   find_dist_quick
         000091b0 00000000! 
    2469 000091d0     b4c1          move    *a6(POF_D_PUCK),a1,W
         000091e0     0680  
    2470 000091f0     56e7          clr     a7
    2471 00009200     4824          cmp     a1,a4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   56

    2472 00009210     c202          jrls    fqp1
    2473 00009220     4c24          move    a1,a4
    2474 00009230     1027          inc     a7
    2475 00009240     4c81  fqp1    move    a4,a1
    2476 00009250     0960          rets
    2477                    
    2478                    
    2479                    **************************************************************************
    2480                    *                                                                        *
    2481                    * create_puck: create puck object and insert on list                     *
    2482                    *              zero's velocities and position                            *
    2483                    *              returns a8 = PUCK_OBJECT = puck object                    *
    2484                    *                                                                        *
    2485                    **************************************************************************
    2486 00009260           create_puck
    2487 00009260     0d5f          calla   create_puck_control_indicator
         00009270 00000000! 
    2488 00009290     09f0          movi    puck_init,b0
         000092a0 0000a190' 
    2489 000092c0     0d5f          calla   EASYMAKE
         000092d0 00000000! 
    2490 000092f0     0d3f          CALLR   FIX_PUCK_SCALE
         00009300     00dd  
    2491 00009310     0d5f          CALLA   CLR_ODATA
         00009320 00000000! 
    2492 00009340     4c08          move    a0,a8
    2493 00009350     0788          move    a8,@PUCK_OBJECT,L
         00009360 00000000- 
    2494 00009380     09f0          movi    puck_shadow_init,b0
         00009390 0000a250' 
    2495 000093b0     0d5f          calla   EASYMAKE
         000093c0 00000000! 
    2496 000093e0     0d3f          CALLR   FIX_PUCK_SCALE
         000093f0     00ce  
    2497 00009400     0780          move    a0,@PUCK_SHADOW,L
         00009410 00000020- 
    2498                    
    2499 00009430                   CREATE  PID_IND,PUCK_PAL_PROC
    2500                    
    2501 000094b0     0960          rets
    2502                    ;       move    @PUCK_OBJECT,a8,L
    2503                    ;       jruc    reset_puck_position
    2504                    
    2505                    **************************************************************************
    2506                    *                                                                        *
    2507                    * PUCK_PAL_PROC                                                          *
    2508                    *                                                                        *
    2509                    **************************************************************************
    2510                    
    2511 000094c0           PUCK_PAL_PROC
    2512 000094c0     07a8          MOVE    @PUCK_OBJECT,A8,L
         000094d0 00000000- 
    2513                    
    2514 000094f0     09e0          MOVI    PCKSCRN2P,A0
         00009500 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   57

    2515 00009520     0d5f          CALLA   GETFPAL
         00009530 00000000! 
    2516 00009550     09e0          MOVI    PCKSCRYx,A0
         00009560 000098c0' 
    2517 00009580     0d5f          CALLA   GETFPAL
         00009590 00000000! 
    2518 000095b0     09e0          MOVI    PCKSCRYz,A0
         000095c0 00009cd0' 
    2519 000095e0     0d5f          CALLA   GETFPAL
         000095f0 00000000! 
    2520                    
    2521 00009610           PPP_LUPE
    2522 00009610     09e0          MOVI    PCKSCRYx,A0
         00009620 000098c0' 
    2523 00009640     18e9          MOVK    7,A9
    2524                    
    2525                    ;       MOVE    @PUCK_MODE,A1,W
    2526                    ;       CMPI    PUM_ENDPER,A1
    2527                    ;       JREQ    PPP_NORM
    2528                    
    2529 00009650     05ae          MOVE    @PUCK_CONTROL,A14,W
         00009660 00000040- 
    2530 00009680     cb08          JRNZ    PPP_FLASH
    2531                    ;       MOVE    A1,A1
    2532 00009690     05ae          MOVE    @PUCK_MODE,A14,W
         000096a0 000000c0- 
    2533 000096c0     cb04          JRNZ    PPP_FLASH                       ;BR=PUCK NOT "OPEN"
    2534                    
    2535 000096d0     09e0          MOVI    PCKSCRYz,A0
         000096e0 00009cd0' 
    2536 00009700     19e9          MOVK    15,A9
    2537 00009710           PPP_FLASH
    2538 00009710     0d5f          CALLA   CHANGE_PAL
         00009720 00000000! 
    2539                    
    2540 00009740                   SLEEPR  A9
    2541                    
    2542 00009780     09e0          MOVI    PCKSCRN2P,A0
         00009790 00000000! 
    2543 000097b0     0d5f          CALLA   CHANGE_PAL
         000097c0 00000000! 
    2544                    
    2545 000097e0     05ae          MOVE    @PUCK_CONTROL,A14,W
         000097f0 00000040- 
    2546 00009810     cb05          JRNZ    PPP_NORM
    2547 00009820     05ae          MOVE    @PUCK_MODE,A14,W
         00009830 000000c0- 
    2548 00009850     cb01          JRNZ    PPP_NORM                        ;BR=PUCK NOT "OPEN"
    2549                    
    2550 00009860     1b29          MOVK    25,A9
    2551 00009870           PPP_NORM
    2552 00009870                   SLEEPR  A9
    2553                    
    2554 000098b0     c0d5          JRUC    PPP_LUPE
    2555                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   58

    2556 000098c0           PCKSCRYx:
    2557 000098c0     0040     .word   64 
    2558 000098d0     7c1f     .word   07c1fh,07f40h,07ee0h,07ea0h,07ee0h,07ee0h,07ea0h,07f00h
    2559 00009950     7f20     .word   07f20h,07e80h,07ec0h,07e40h,07dc0h,07e60h,07da0h,0316bh
    2560 000099d0     7741     .word   07741h,05dc0h,0294ah,03ce5h,06661h,02929h,02ce6h,05e20h
    2561 00009a50     59a2     .word   059a2h,05941h,020e7h,028a5h,05140h,02462h,02c00h,018a5h
    2562 00009ad0     1c62     .word   01c62h,02020h,01063h,00842h,00000h,00000h,00000h,04296h
    2563 00009b50     4276     .word   04276h,03e53h,03a33h,03612h,031f1h,02dd0h,02dcfh,031aeh
    2564 00009bd0     29af     .word   029afh,025afh,0298dh,0256ch,0214bh,0212ah,01d2ah,02109h
    2565 00009c50     1d09     .word   01d09h,018e8h,014e8h,01cc7h,01085h,00c84h,00442h,00422h
    2566                    
    2567                    ;PCKSCRYz:
    2568                    ;   .word   64 
    2569                    ;   .word   07c1fh,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h
    2570                    ;   .word   07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07ec0h,07c00h
    2571                    ;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2572                    ;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2573                    ;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2574                    ;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2575                    ;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2576                    ;   .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2577                    
    2578 00009cd0           PCKSCRYz:
    2579 00009cd0     0040     .word   64 
    2580 00009ce0     7c1f     .word   07c1fh,07fe0h,07fe0h,07fe0h,07fe0h,07fe0h,07fe0h,07fe0h
    2581 00009d60     7fa0     .word   07fa0h,07fa0h,07f80h,07f60h,07f20h,07f00h,07ee0h,07ec0h
    2582 00009de0     7d20     .word   07d20h,07d20h,07d20h,07d20h,07d20h,07d20h,07ca0h,07ca0h
    2583 00009e60     7c00     .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2584 00009ee0     7c00     .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2585 00009f60     7c80     .word   07c80h,07c60h,07c40h,07c20h,07c00h,07c00h,07c00h,07c00h
    2586 00009fe0     7c00     .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2587 0000a060     7c00     .word   07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h,07c00h
    2588                    
    2589                    ;PCKSCRNYC:
    2590                    ;   .word   64 
    2591                    ;   .word   07c1fh,07fc3h,07f60h,07f20h,07f60h,07f60h,07f20h,07f80h
    2592                    ;   .word   07fa0h,07f00h,07f40h,07ec0h,07e40h,072e0h,07e20h,0316bh
    2593                    ;   .word   07741h,05dc0h,0294ah,03ce5h,06661h,02929h,02ce6h,05e20h
    2594                    ;   .word   059a2h,05941h,020e7h,028a5h,05140h,02462h,02c00h,018a5h
    2595                    ;   .word   01c62h,02020h,01063h,00842h,00000h,00000h,00000h,04296h
    2596                    ;   .word   04276h,03e53h,03a33h,03612h,031f1h,02dd0h,02dcfh,031aeh
    2597                    ;   .word   029afh,025afh,0298dh,0256ch,0214bh,0212ah,01d2ah,02109h
    2598                    ;   .word   01d09h,018e8h,014e8h,01cc7h,01085h,00c84h,00442h,00422h
    2599                    ;
    2600                    ;PCKSCRNYA:
    2601                    ;   .word   64 
    2602                    ;   .word   07c1fh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2603                    ;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2604                    ;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2605                    ;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2606                    ;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2607                    ;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2608                    ;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2609                    ;   .word   07febh,07febh,07febh,07febh,07febh,07febh,07febh,07febh
    2610                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   59

    2611                    **************************************************************************
    2612                    *                                                                        *
    2613                    * FIX_PUCK_SCALE - SET SCALE FOR NORMAL OR BIG MODE                      *
    2614                    *                                                                        *
    2615                    **************************************************************************
    2616                    
    2617 0000a0e0           FIX_PUCK_SCALE
    2618 0000a0e0     09e1          MOVI    SCALE_1TO1,A1
         0000a0f0 01000100  
    2619 0000a110     05ae          MOVE    @BIG_PUCK,A14,W
         0000a120 00000000! 
    2620 0000a140     ca01          JRZ     FPS_SET                                 ;BR=NORMAL PUCK
    2621 0000a150     2fe1          SRL     1,A1                                    ;BIG PUCK
    2622 0000a160           FPS_SET
    2623 0000a160     b228          MOVE    A1,*A8(OSCALE),L
         0000a170     02a0  
    2624 0000a180     0960          RETS
    2625                    
    2626 0000a190           puck_init
    2627                    ;       .long   puck2a
    2628 0000a190 00000240"         .long   puck104
    2629 0000a1b0     8002          .word   DMAWNZ,M_NOSCALE
    2630 0000a1d0     0910          .word   OM_OID|OM_POS|OM_INSERT
    2631 0000a1e0     0200          .word   OID_PUCK
    2632 0000a1f0 00000000          .long   [0,0],[0,0],[339,08000h]                ;x,y,z
    2633                    
    2634 0000a250           puck_shadow_init
    2635 0000a250 00001b90"         .long   pckshado
    2636 0000a270     8002          .word   DMAWNZ,M_NOSCALE
    2637 0000a290     0900          .word   OM_OID|OM_INSERT
    2638 0000a2a0     0202          .word   OID_PUCK_SHADOW
    2639                    
    2640 0000a2b0           puck_trail_init
    2641 0000a2b0 00001b90"         .long   pckshado
    2642 0000a2d0     8002          .word   DMAWNZ,M_NOSCALE
    2643 0000a2f0     0100          .word   OM_OID,OID_PUCK_TRAIL
    2644 0000a310           puck_fire_init
    2645 0000a310 00001c20"         .long   SMBRST01
    2646 0000a330     8002          .word   DMAWNZ,M_NOSCALE
    2647 0000a350     0100          .word   OM_OID,OID_PUCK_TRAIL
    2648                    
    2649 0000a370           reset_puck_position
    2650 0000a370     0d3f          callr   turn_puck_off
         0000a380     004b  
    2651 0000a390     57ce          clr     a14
    2652 0000a3a0     b1c8          move    a14,*a8(OYACCEL),W
         0000a3b0     02f0  
    2653 0000a3c0     b3c8          move    a14,*a8(OYVEL),L
         0000a3d0     0120  
    2654 0000a3e0     b3c8          move    a14,*a8(OYVAL),L
         0000a3f0     0160  
    2655 0000a400     b3c8          move    a14,*a8(OXVEL),L
         0000a410     0100  
    2656 0000a420     b008          move    a0,*a8(OXPOS),W
         0000a430     0150  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   60

    2657 0000a440     b1c8          move    a14,*a8(OXPOS+010h),W
         0000a450     0160  
    2658 0000a460     b028          move    a1,*a8(OZPOS),W
         0000a470     0190  
    2659 0000a480     b1c8          move    a14,*a8(OZPOS+010h),W
         0000a490     01a0  
    2660 0000a4a0     b3c8          move    a14,*a8(ODT_VEL),L
         0000a4b0     04d0  
    2661 0000a4c0     b3c8          move    a14,*a8(ODT_DIR),L
         0000a4d0     04b0  
    2662 0000a4e0     058e          move    a14,@PUCK_CONTROL,W
         0000a4f0 00000040- 
    2663 0000a510     058e          move    a14,@PUCK_LAST_CONTROL,W
         0000a520 00000070- 
    2664 0000a540     058e          move    a14,@NO_PUCK_SLOW,W
         0000a550 00000090- 
    2665 0000a570     058e          move    a14,@PUCK_OPEN_CONTROL_TIME,W
         0000a580 000000a0- 
    2666 0000a5a0     058e          move    a14,@PUCK_OPEN_LAST_TIME,W
         0000a5b0 000000b0- 
    2667 0000a5d0     058e          move    a14,@PUCK_MODE_2,W
         0000a5e0 000000d0- 
    2668 0000a600     058e          move    a14,@PUCK_M2_TIME,W
         0000a610 000000f0- 
    2669 0000a630     078e          move    a14,@puck_owner_data,L
         0000a640 00000130- 
    2670 0000a660     078e          move    a14,@puck_owner_data+32,L
         0000a670 00000150- 
    2671 0000a690     058e          move    a14,@outlaw_puck2,W
         0000a6a0 00000110- 
    2672 0000a6c0     058e          move    a14,@has_scored,W
         0000a6d0 00000000! 
    2673 0000a6f0     058e          move    a14,@goalpost_holding,W
         0000a700 00000000! 
    2674 0000a720     09ee          movi    puck_owner_data,a14
         0000a730 00000130- 
    2675 0000a750     078e          move    a14,@puck_owner_pointer,L
         0000a760 00000170- 
    2676 0000a780     0960          rets
    2677                    
    2678 0000a790           turn_puck_on
    2679 0000a790     07a8          move    @PUCK_OBJECT,a8,L
         0000a7a0 00000000- 
    2680 0000a7c0     b50e          move    *a8(OCTRL),a14,W
         0000a7d0     01f0  
    2681 0000a7e0     0bae          ori     DMAWNZ,a14
         0000a7f0 00008002  
    2682 0000a810     b1c8          move    a14,*a8(OCTRL),W
         0000a820     01f0  
    2683 0000a830     0960          rets
    2684                    
    2685 0000a840           turn_puck_off
    2686 0000a840     07a8          move    @PUCK_SHADOW,a8,L
         0000a850 00000020- 
    2687 0000a870     09ee          movi    DMAGO,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   61

         0000a880 00008000  
    2688 0000a8a0     b1c8          move    a14,*a8(OCTRL),W
         0000a8b0     01f0  
    2689 0000a8c0     07a8          move    @PUCK_OBJECT,a8,L
         0000a8d0 00000000- 
    2690 0000a8f0     b1c8          move    a14,*a8(OCTRL),W
         0000a900     01f0  
    2691 0000a910     0960          rets
    2692                    **************************************************************************
    2693                    *                                                                        *
    2694                    * NOTE: all puck angles are in the range 0 - 2pi                         *
    2695                    *                                                                        *
    2696                    **************************************************************************
    2697                    
    2698                    **************************************************************************
    2699                    *                                                                        *
    2700                    * send_puck_to_player                                                    *
    2701                    *       input   a0 = player number to send to                            *
    2702                    *               a6 = our block                                           *
    2703                    *               a7 = velocity to send to puck                            *
    2704                    *        unused a10= maximum velocity given to puck (from player block)  *
    2705                    *               b6 = routine to modify angle (error)                     *
    2706                    *        we iterate three times through a formula to get direction       *
    2707                    *        based on how destination player is moving                       *
    2708                    *        to come up with a reasonably close approximation of             *
    2709                    *        where we want to send the puck to. then we adjust our speed     *
    2710                    *        to get where we want to go anyway                               *
    2711                    *       output  a10 = distance to player                                 *
    2712                    *                                                                        *
    2713                    **************************************************************************
    2714 0000a920           send_puck_to_player_part1
    2715 0000a920                   GBLOCK  a0,a14
    2716 0000a970     b5ca          move    *a14(POF_MODE),a10,W
         0000a980     0210  
    2717 0000a990     0596          move    b6,@not_free_receiver,W         ;we know b6 is not 0
         0000a9a0 00000190- 
    2718 0000a9c0     0d5f          calla   get_players_destination_point
         0000a9d0 00000000! 
    2719 0000a9f0     4e01          move    a0,b1
    2720 0000aa00     4c2b          move    a1,a11
    2721 0000aa10     07a9          move    @PUCK_OBJECT,a9,L
         0000aa20 00000000- 
    2722 0000aa40     b722          move    *a9(OXVAL),a2,L
         0000aa50     0140  
    2723 0000aa60     b249          move    a2,*a9(ODT_XSTRT),L
         0000aa70     05a0  
    2724 0000aa80     b723          move    *a9(OZVAL),a3,L
         0000aa90     0180  
    2725 0000aaa0     b269          move    a3,*a9(ODT_ZSTRT),L
         0000aab0     05c0  
    2726 0000aac0     1870          movk    3,b0
    2727 0000aad0     0b4a          cmpi    PM_SHAKE,a10
         0000aae0     fff8  
    2728 0000aaf0     cb02          jrnz    l1loi
    2729 0000ab00     09ca          movi    PM_FALL,a10             ;for only one check later
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   62

         0000ab10     000a  
    2730 0000ab20     0d3f  l1loi   callr   find_time_to_get_to_point
         0000ab30     0244  
    2731 0000ab40     4e30          move    b1,a0
    2732 0000ab50     4d61          move    a11,a1
    2733 0000ab60     0b4a          cmpi    PM_FALL,a10
         0000ab70     fff5  
    2734 0000ab80     ca08          jrz     l1loi2
    2735 0000ab90     b705          move    *a8(ODT_REALXVEL),a5,L  ;once we send puck to a player, he will stop the double speed bi
         0000aba0     04f0  
    2736 0000abb0     5c85          mpys    a4,a5
    2737 0000abc0     40a0          add     a5,a0
    2738 0000abd0     b705          move    *a8(OZVEL),a5,L
         0000abe0     00e0  
    2739 0000abf0     5c85          mpys    a4,a5
    2740 0000ac00     40a1          add     a5,a1
    2741 0000ac10     0d3f  l1loi2  callr   put_point_in_rink
         0000ac20     0ebd  
    2742 0000ac30     3e50          dsjs    b0,l1loi
    2743 0000ac40     2e02          srl     16,a2
    2744 0000ac50     ee62          movy    a3,a2           ;puck position
    2745 0000ac60     b209          move    a0,*a9(ODT_XDEST),L             ;x destination of pass
         0000ac70     0550  
    2746 0000ac80     2e00          srl     16,a0
    2747 0000ac90     4c03          move    a0,a3
    2748 0000aca0     b229          move    a1,*a9(ODT_ZDEST),L             ;z destination of pass
         0000acb0     0570  
    2749 0000acc0     ee23          movy    a1,a3
    2750 0000acd0     0d5f          calla   SLINEVEL
         0000ace0 00000000! 
    2751 0000ad00     4c20          move    a1,a0
    2752 0000ad10     4c41          move    a2,a1
    2753 0000ad20     4d28          move    a9,a8
    2754 0000ad30     4c02          move    a0,a2
    2755 0000ad40     4c23          move    a1,a3
    2756 0000ad50     0960          rets
    2757                    
    2758                    **************************************************************************
    2759                    *                                                                        *
    2760                    * send_puck_to_player_part2                                              *
    2761                    *       input   a0 = intended receiver                                   *
    2762                    *               a2 = x velocity to give to puck                          *
    2763                    *               a3 = z velocity to give to puck                          *
    2764                    *               a4 = distance puck will travel                           *
    2765                    *               a10= unknown, but keep unaltered                         *
    2766                    *               b6 = routine to call to change angle                     *
    2767                    *                                                                        *
    2768                    **************************************************************************
    2769 0000ad60           send_puck_to_player_part2
    2770 0000ad60     0584          move    a4,@NO_PUCK_SLOW,W      ;full distance to the player uninhibited
         0000ad70 00000090- 
    2771 0000ad90     4c87          move    a4,a7
    2772 0000ada0     13c7          addk    30,a7                   ;1/2 second after we were supposed to catch it
    2773 0000adb0     0587          move    a7,@PUCK_OPEN_CONTROL_TIME,W    ;make it anybody's puck
         0000adc0 000000a0- 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   63

    2774 0000ade0     0587          move    a7,@PUCK_OPEN_LAST_TIME,W       ;make it anybody's puck
         0000adf0 000000b0- 
    2775 0000ae10     4c40          move    a2,a0
    2776 0000ae20     4c61          move    a3,a1
    2777 0000ae30     0d5f          calla   rect_to_polar
         0000ae40 00000000! 
    2778 0000ae60     0936          call    b6
    2779 0000ae70     c080          jauc    set_obj_to_polar
         0000ae80 00000000! 
    2780                    
    2781 0000aea0           send_puck_to_player
    2782 0000aea0     0d3f          callr   send_puck_to_player_part1
         0000aeb0     ffa6  
    2783 0000aec0     c0e9          jruc    send_puck_to_player_part2
    2784                    
    2785                    ;       GBLOCK  a0,a14
    2786                    ;       move    *a14(POF_MODE),a10,W
    2787                    ;       move    b6,@not_free_receiver,W         ;we know b6 is not 0
    2788                    ;       calla   get_players_destination_point
    2789                    ;       move    a0,b1
    2790                    ;       move    a1,a11
    2791                    ;       move    @PUCK_OBJECT,a9,L
    2792                    ;       move    *a9(OXVAL),a2,L
    2793                    ;       move    a2,*a9(ODT_XSTRT),L
    2794                    ;       move    *a9(OZVAL),a3,L
    2795                    ;       move    a3,*a9(ODT_ZSTRT),L
    2796                    ;       movk    3,b0
    2797                    ;       cmpi    PM_SHAKE,a10
    2798                    ;       jrnz    lloi
    2799                    ;       movi    PM_FALL,a10             ;for only one check later
    2800                    ;lloi   callr   find_time_to_get_to_point
    2801                    ;       move    b1,a0
    2802                    ;       move    a11,a1
    2803                    ;       cmpi    PM_FALL,a10
    2804                    ;       jrz     lloi2
    2805                    ;       move    *a8(ODT_REALXVEL),a5,L  ;once we send puck to a player, he will stop the double speed bi
    2806                    ;       mpys    a4,a5
    2807                    ;       add     a5,a0
    2808                    ;       move    *a8(OZVEL),a5,L
    2809                    ;       mpys    a4,a5
    2810                    ;       add     a5,a1
    2811                    ;lloi2  callr   put_point_in_rink
    2812                    ;       dsjs    b0,lloi
    2813                    ;       move    a4,@NO_PUCK_SLOW,W      ;full distance to the player uninhibited
    2814                    ;       move    a4,a7
    2815                    ;       addk    30,a7                   ;1/2 second after we were supposed to catch it
    2816                    ;       move    a7,@PUCK_OPEN_CONTROL_TIME,W    ;make it anybody's puck
    2817                    ;       move    a7,@PUCK_OPEN_LAST_TIME,W       ;make it anybody's puck
    2818                    ;       srl     16,a2
    2819                    ;       movy    a3,a2           ;puck position
    2820                    ;       move    a0,*a9(ODT_XDEST),L             ;x destination of pass
    2821                    ;       srl     16,a0
    2822                    ;       move    a0,a3
    2823                    ;       move    a1,*a9(ODT_ZDEST),L             ;z destination of pass
    2824                    ;       movy    a1,a3
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   64

    2825                    ;       calla   SLINEVEL
    2826                    ;       move    a1,a0
    2827                    ;       move    a2,a1
    2828                    ;       move    a9,a8
    2829                    ;       calla   rect_to_polar
    2830                    ;       call    b6              ;modify angle
    2831                    ;       calla   set_obj_to_polar
    2832                    ;       jauc    puck_slide_sound
    2833                    
    2834 0000aed0           send_puck_to_player_boards
    2835 0000aed0     4c04          move    a0,a4
    2836 0000aee0     2484          sll     4,a4
    2837 0000aef0     0b04          addi    POF_D_1P-16,a4
         0000af00     05f0  
    2838 0000af10     40c4          add     a6,a4
    2839 0000af20     56a5          clr     a5
    2840 0000af30     5ae4          divu    a7,a4
    2841 0000af40     2e04          srl     16,a4           ;a4 is our time estimate
    2842 0000af50                   GBLOCK  a0,a11
    2843 0000afa0     b76b          move    *a11(POF_OBJECT),a11,L
         0000afb0     0280  
    2844 0000afc0     b765          move    *a11(ODT_REALXVEL),a5,L
         0000afd0     04f0  
    2845 0000afe0     b769          move    *a11(OZVEL),a9,L
         0000aff0     00e0  
    2846 0000b000     5c85          mpys    a4,a5
    2847 0000b010     5c89          mpys    a4,a9
    2848 0000b020     098f          mmtm    sp,a0,a1
         0000b030     c000  
    2849 0000b040     0d5f          calla   get_players_destination_point
         0000b050 00000000! 
    2850 0000b070     4c0e          move    a0,a14                  ;rough x preditiction
    2851 0000b080     4c2b          move    a1,a11                  ;rough z preditiction
    2852 0000b090     09af          mmfm    sp,a0,a1
         0000b0a0     0003  
    2853 0000b0b0     07a9          move    @PUCK_OBJECT,a9,L
         0000b0c0 00000000- 
    2854 0000b0e0     b723          move    *a9(OXVAL),a3,L
         0000b0f0     0140  
    2855 0000b100     b269          move    a3,*a9(ODT_XSTRT),L
         0000b110     05a0  
    2856 0000b120     bb29          move    *a9(OZVAL),*a9(ODT_ZSTRT),L
         0000b130     0180  
         0000b140     05c0  
    2857 0000b150     0b63          cmpi    LEFT_GOALLINE_X+[20,0],a3
         0000b160 029bffff  
    2858 0000b180     c704          jrgt    spbbcr
    2859 0000b190     0b6e          cmpi    LEFT_GOALLINE_X+[20,0],a14
         0000b1a0 029bffff  
    2860 0000b1c0     c616          jrle    send_puck_to_player_ll
    2861 0000b1d0     0b63  spbbcr  cmpi    RGHT_GOALLINE_X-[20,0],a3
         0000b1e0 fd63ffff  
    2862 0000b200     c404          jrlt    spbbud
    2863 0000b210     0b6e          cmpi    RGHT_GOALLINE_X-[20,0],a14
         0000b220 fd63ffff  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   65

    2864 0000b240     c50a          jrge    send_puck_to_player_rr
    2865 0000b250     0b6b  spbbud  cmpi    CENTER_Z,a11
         0000b260 feac7fff  
    2866 0000b280     c702          jrgt    send_puck_to_player_tt
    2867 0000b290           send_puck_to_player_bb
    2868 0000b290     575a          clr     b10
    2869 0000b2a0     c037          jruc    spbrdx
    2870 0000b2b0           send_puck_to_player_tt
    2871 0000b2b0     09fa          movi    TOP_SIDEBOARD_Z,b10
         0000b2c0 02a70000  
    2872 0000b2e0     c033          jruc    spbrdx
    2873 0000b2f0           send_puck_to_player_rr
    2874 0000b2f0     09fa          movi    RGHT_ENDBOARD_X,b10
         0000b300 031e0000  
    2875 0000b320     c004          jruc    splrdx
    2876 0000b330           send_puck_to_player_ll
    2877 0000b330     09fa          movi    LEFT_ENDBOARD_X,b10
         0000b340 fce20000  
    2878 0000b360     0300          jruc    splrdx
    2879                    
    2880 0000b370     0d5f  splrdx  calla   get_players_destination_point   ;a0 = x, a1 = z, a8 = player
         0000b380 00000000! 
    2881 0000b3a0                   SWAP    a0,a1
    2882 0000b3d0     07a9          move    @PUCK_OBJECT,a9,L
         0000b3e0 00000000- 
    2883 0000b400     b722          move    *a9(OZVAL),a2,L
         0000b410     0180  
    2884 0000b420     b723          move    *a9(OXVAL),a3,L
         0000b430     0140  
    2885 0000b440     0d5f          calla   put_point_in_rink_rot_23
         0000b450 00019610' 
    2886 0000b470     b704          move    *a8(OZVEL),a4,L
         0000b480     00e0  
    2887 0000b490     b705          move    *a8(ODT_REALXVEL),a5,L
         0000b4a0     04f0  
    2888 0000b4b0     0d3f          callr   spbsb1b
         0000b4c0     004e  
    2889 0000b4d0     b209          move    a0,*a9(ODT_ZDEST),L             ;x destination of pass
         0000b4e0     0570  
    2890 0000b4f0     b229          move    a1,*a9(ODT_XDEST),L             ;z destination of pass
         0000b500     0550  
    2891 0000b510     0d3f          callr   spbsub2
         0000b520     00a1  
    2892 0000b530                   SWAP    a0,a1
    2893 0000b560                   SWAP    a2,a3
    2894 0000b590     0d5f          calla   find_dir_to_point
         0000b5a0 00000000! 
    2895 0000b5c0     4ce1          move    a7,a1
    2896 0000b5d0     4d28          move    a9,a8
    2897 0000b5e0     0d5f          calla   set_obj_to_polar
         0000b5f0 00000000! 
    2898 0000b610     0960          rets
    2899                    
    2900 0000b620     0d5f  spbrdx  calla   get_players_destination_point   ;a0 = x, a1 = z, a8 = player
         0000b630 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   66

    2901 0000b650     07a9          move    @PUCK_OBJECT,a9,L
         0000b660 00000000- 
    2902 0000b680     b722          move    *a9(OXVAL),a2,L
         0000b690     0140  
    2903 0000b6a0     b723          move    *a9(OZVAL),a3,L
         0000b6b0     0180  
    2904 0000b6c0     0d5f          calla   put_point_in_rink_23
         0000b6d0 000196c0' 
    2905 0000b6f0     b704          move    *a8(ODT_REALXVEL),a4,L
         0000b700     04f0  
    2906 0000b710     b705          move    *a8(OZVEL),a5,L
         0000b720     00e0  
    2907 0000b730     0d3f          callr   spbsub1
         0000b740     000f  
    2908 0000b750     b209          move    a0,*a9(ODT_XDEST),L             ;x destination of pass
         0000b760     0550  
    2909 0000b770     b229          move    a1,*a9(ODT_ZDEST),L             ;z destination of pass
         0000b780     0570  
    2910 0000b790     0d3f          callr   spbsub2
         0000b7a0     0079  
    2911 0000b7b0     0d5f          calla   find_dir_to_point
         0000b7c0 00000000! 
    2912 0000b7e0     4ce1          move    a7,a1
    2913 0000b7f0     4d28          move    a9,a8
    2914 0000b800     0d5f          calla   set_obj_to_polar
         0000b810 00000000! 
    2915 0000b830     0960          rets
    2916                    
    2917 0000b840     4e01  spbsub1 move    a0,b1                           ;b1 = destination x
    2918 0000b850     4e22          move    a1,b2                           ;b2 = destination z
    2919 0000b860     4e45          move    a2,b5                   ;puck x
    2920 0000b870     4e67          move    a3,b7                   ;puck z
    2921 0000b880     4e88          move    a4,b8
    2922 0000b890     4ea9          move    a5,b9
    2923 0000b8a0     0596          move    b6,@not_free_receiver,W         ;we know b6 is not 0
         0000b8b0 00000190- 
    2924 0000b8d0     1890          movk    4,b0            ;loop 4
    2925 0000b8e0     0d3f  sptbb_1 callr   bbnsub1
         0000b8f0     0022  
    2926 0000b900     0d3f          callr   put_point_in_rink
         0000b910     0dee  
    2927 0000b920     3cb0          dsjs    b0,sptbb_1
    2928 0000b930     07ae          move    @WAVEIRQS,a14,L
         0000b940 00000000! 
    2929 0000b960     408e          add     a4,a14                  ;time of destination
    2930 0000b970     078e          move    a14,@bhit_dest_time,L
         0000b980 00177210- 
    2931 0000b9a0     0960          rets
    2932                    
    2933 0000b9b0     4e01  spbsb1b move    a0,b1
    2934 0000b9c0     4e22          move    a1,b2
    2935 0000b9d0     4e45          move    a2,b5
    2936 0000b9e0     4e67          move    a3,b7
    2937 0000b9f0     4e88          move    a4,b8
    2938 0000ba00     4ea9          move    a5,b9
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   67

    2939 0000ba10     0596          move    b6,@not_free_receiver,W         ;we know b6 is not 0
         0000ba20 00000190- 
    2940 0000ba40     1890          movk    4,b0            ;loop 4
    2941 0000ba50     0d3f  sptll_1 callr   bbnsub1
         0000ba60     000b  
    2942 0000ba70     0d3f          callr   put_point_in_rink_rot
         0000ba80     0dce  
    2943 0000ba90     3cb0          dsjs    b0,sptll_1
    2944 0000baa0     07ae          move    @WAVEIRQS,a14,L
         0000bab0 00000000! 
    2945 0000bad0     408e          add     a4,a14                  ;time of destination
    2946 0000bae0     078e          move    a14,@bhit_dest_time,L
         0000baf0 00177210- 
    2947 0000bb10     0960          rets
    2948                    
    2949 0000bb20     098f  bbnsub1 mmtm    sp,a7
         0000bb30     0100  
    2950 0000bb40     4e03          move    a0,b3
    2951 0000bb50     4e24          move    a1,b4
    2952 0000bb60     4f5e          move    b10,a14
    2953 0000bb70     45c1          sub     a14,a1
    2954 0000bb80     03a1          neg     a1
    2955 0000bb90     4ef3          move    b7,a3
    2956 0000bba0     45c3          sub     a14,a3
    2957 0000bbb0     03a3          neg     a3
    2958 0000bbc0     4061          add     a3,a1
    2959 0000bbd0     4c60          move    a3,a0
    2960 0000bbe0     4c21          move    a1,a1
    2961 0000bbf0     ca03          jrz     rb1_0           ;if a1 = 0, then return a zero (just stick us at our position)
    2962 0000bc00     0d5f          calla   DIV             ;a1 = a0/a1
         0000bc10 00000000! 
    2963 0000bc30     4e70  rb1_0   move    b3,a0           ;b3 = saved x
    2964 0000bc40     4eb2          move    b5,a2
    2965 0000bc50     4440          sub     a2,a0           ;a0 = x delta
    2966 0000bc60     0d5f          calla   MULT            ;a1 = a0*a1
         0000bc70 00000000! 
    2967 0000bc90     4041          add     a2,a1           ;a1 = our board x position
    2968 0000bca0     4c20          move    a1,a0
    2969                    
    2970 0000bcb0     4f51          move    b10,a1          ;a0,a1 = xy of board point  - a2,a3 = xy of puck
    2971 0000bcc0     4ef3          move    b7,a3
    2972                    
    2973 0000bcd0     0d3f          callr   find_time_to_get_to_point       ;a4 = time to board
         0000bce0     0129  
    2974 0000bcf0     4c85          move    a4,a5
    2975 0000bd00     098f          mmtm    sp,a0,a1        ;save our board point
         0000bd10     c000  
    2976 0000bd20     0d5f          calla   find_dir_to_point       ;a0 = angle from wall
         0000bd30 00000000! 
    2977 0000bd50     098f          mmtm    sp,a3
         0000bd60     1000  
    2978 0000bd70     4c03          move    a0,a3
    2979 0000bd80     0d3f          callr   compute_velocity_change
         0000bd90     021d  
    2980 0000bda0     09af          mmfm    sp,a3
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   68

         0000bdb0     0008  
    2981 0000bdc0     4c80          move    a4,a0           ;velocity change
    2982 0000bdd0     4ce1          move    a7,a1           ;velocity
    2983 0000bde0     0d5f          calla   MULT            ;a1 = a0*a1 = new velocity
         0000bdf0 00000000! 
    2984 0000be10     4c27          move    a1,a7
    2985 0000be20     09af          mmfm    sp,a2,a3        ;get our board point
         0000be30     000c  
    2986 0000be40     4e70          move    b3,a0
    2987 0000be50     4e91          move    b4,a1           ;get our destination point
    2988 0000be60     0d3f          callr   find_time_to_get_to_point
         0000be70     0110  
    2989 0000be80     4e30          move    b1,a0
    2990 0000be90     4e51          move    b2,a1           ;get our destination point
    2991 0000bea0     40a4          add     a5,a4           ;a4 is our total time
    2992 0000beb0     4f15          move    b8,a5           ;regular speed
    2993 0000bec0     5c85          mpys    a4,a5
    2994 0000bed0     40a0          add     a5,a0
    2995 0000bee0     4f35          move    b9,a5
    2996 0000bef0     5c85          mpys    a4,a5
    2997 0000bf00     40a1          add     a5,a1
    2998 0000bf10     09af          mmfm    sp,a7
         0000bf20     0080  
    2999 0000bf30     0960          rets
    3000                    
    3001 0000bf40     098f  spbsub2 mmtm    sp,a7
         0000bf50     0100  
    3002 0000bf60     0584          move    a4,@NO_PUCK_SLOW,W
         0000bf70 00000090- 
    3003 0000bf90     13c4          addk    30,a4
    3004 0000bfa0     0584          move    a4,@PUCK_OPEN_CONTROL_TIME,W
         0000bfb0 000000a0- 
    3005 0000bfd0     0584          move    a4,@PUCK_OPEN_LAST_TIME,W
         0000bfe0 000000b0- 
    3006 0000c000     4c04          move    a0,a4           ;save x
    3007 0000c010     4ef3          move    b7,a3
    3008 0000c020     4f5e          move    b10,a14
    3009 0000c030     45c1          sub     a14,a1
    3010 0000c040     03a1          neg     a1
    3011 0000c050     45c3          sub     a14,a3
    3012 0000c060     03a3          neg     a3
    3013 0000c070     4061          add     a3,a1
    3014 0000c080     4c60          move    a3,a0
    3015 0000c090     4c21          move    a1,a1
    3016 0000c0a0     ca03          jrz     ra1_0           ;if a1 = 0, then return a zero (just stick us at our position)
    3017 0000c0b0     0d5f          calla   DIV             ;a1 = a0/a1
         0000c0c0 00000000! 
    3018 0000c0e0     4c80  ra1_0   move    a4,a0           ;a4 = saved x
    3019 0000c0f0     4eb2          move    b5,a2
    3020 0000c100     4440          sub     a2,a0           ;a0 = x delta
    3021 0000c110     0d5f          calla   MULT            ;a1 = a0*a1
         0000c120 00000000! 
    3022 0000c140     4041          add     a2,a1           ;a1 = our board x position
    3023 0000c150     4c20          move    a1,a0
    3024 0000c160     4f51          move    b10,a1          ;a0,a1 = xy of board point  - a2,a3 = xy of puck
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   69

    3025 0000c170     4ef3          move    b7,a3
    3026 0000c180     09af          mmfm    sp,a7
         0000c190     0080  
    3027 0000c1a0     0960          rets
    3028                    
    3029                    **************************************************************************
    3030                    *                                                                        *
    3031                    * send_puck_to_point_xyz                                                 *
    3032                    *       send puck to point x,z (with y velocity                          *
    3033                    *       gives puck up velocity and gravity if necessary                  *
    3034                    *      input    a0 = x                                                   *
    3035                    *               a1 = z                                                   *
    3036                    *               a2 = y                                                   *
    3037                    *               a7 = velocity to give to puck                            *
    3038                    *               a10= maximum velocity given to puck (from player block)  *
    3039                    *               b6 = routine to modify angle (error)                     *
    3040                    *                                                                        *
    3041                    **************************************************************************
    3042 0000c1b0           send_puck_to_point_xyz_v        ;take a8 velocity/2 and direction into account
    3043 0000c1b0     4e42          move    a2,b2
    3044 0000c1c0     07a9          move    @PUCK_OBJECT,a9,L
         0000c1d0 00000000- 
    3045 0000c1f0     b722          move    *a9(OXVAL),a2,L
         0000c200     0140  
    3046 0000c210     b723          move    *a9(OZVAL),a3,L
         0000c220     0180  
    3047 0000c230     0d5f          calla   find_dirdis_to_point
         0000c240 00000000! 
    3048 0000c260     4e21          move    a1,b1
    3049 0000c270     098f          mmtm    sp,a0
         0000c280     8000  
    3050 0000c290     b702          move    *a8(ODT_DIR),a2,L
         0000c2a0     04b0  
    3051 0000c2b0     4440          sub     a2,a0
    3052 0000c2c0     0d5f          calla   GETCOS
         0000c2d0 00000000! 
    3053 0000c2f0     4c00          move    a0,a0
    3054 0000c300     ce0e          jrn     sptp55
    3055 0000c310     b701          move    *a8(ODT_VEL),a1,L
         0000c320     04d0  
    3056 0000c330     0b61          cmpi    [9,0],a1
         0000c340 fff6ffff  
    3057 0000c360     c203          jrls    spvu
    3058 0000c370     09e1          movi    [9,0],a1
         0000c380 00090000  
    3059 0000c3a0     2be1  spvu    sra     1,a1
    3060 0000c3b0     0d5f          calla   MULT
         0000c3c0 00000000! 
    3061 0000c3e0     4027          add     a1,a7
    3062 0000c3f0     09af  sptp55  mmfm    sp,a0
         0000c400     0001  
    3063 0000c410     c00f          jruc    sptp1
    3064                    
    3065 0000c420           send_puck_to_point_xyz_asamev   ;take current velocity of puck into account
    3066                    ;       move    @PUCK_OBJECT,a9,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   70

    3067                    ;       move    *a9(ODT_VEL),a7,L
    3068                    ;       move    a7,a3
    3069                    ;       sra     1,a7                    ;3/4 vel
    3070                    ;       sra     2,a3
    3071                    ;       add     a3,a7
    3072                    ;       MOVE    A2,B2                   ;SAVE Y DESTINATION
    3073                    ;       jruc    stpxa
    3074                    
    3075 0000c420     4cee          move    a7,a14
    3076 0000c430     2bce          sra     2,a14
    3077 0000c440     45c7          sub     a14,a7
    3078                            ;
    3079 0000c450           send_puck_to_point_xyz
    3080 0000c450     4e42          move    a2,b2
    3081 0000c460     07a9          move    @PUCK_OBJECT,a9,L
         0000c470 00000000- 
    3082 0000c490     b722  stpxa   move    *a9(OXVAL),a2,L
         0000c4a0     0140  
    3083 0000c4b0     b723          move    *a9(OZVAL),a3,L
         0000c4c0     0180  
    3084 0000c4d0     0d5f          calla   find_dirdis_to_point
         0000c4e0 00000000! 
    3085 0000c500     4e21          move    a1,b1
    3086 0000c510     4ce1  sptp1   move    a7,a1
    3087 0000c520     4d28          move    a9,a8
    3088 0000c530     4e23          move    a1,b3
    3089 0000c540     4e52          MOVE    B2,A2                   ;RESTORE Y DESTINATION
    3090                    
    3091                            .if     BILL & 1
    3092                            .else
    3093 0000c550     0936          call    b6                      ;call routine to modify direction
    3094                            .endif
    3095                    
    3096 0000c560     4e23          move    a1,b3           ;save velocity
    3097 0000c570     0d5f          calla   set_obj_to_polar
         0000c580 00000000! 
    3098 0000c5a0     4c52          move    b2,b2           ;test y position
    3099 0000c5b0     cf0e          jrnn    sptp9
    3100 0000c5c0     0d3f          callr   give_puck_shot_gravity
         0000c5d0     0377  
    3101 0000c5e0     4e33          move    b1,a3           ;distance
    3102 0000c5f0     4e71          move    b3,a1           ;velocity
    3103 0000c600     4e52          move    b2,a2           ;yp position
    3104 0000c610     0d5f          calla   get_correct_y_velocity
         0000c620 00000000! 
    3105 0000c640     03aa          neg     a10
    3106 0000c650     4943          cmp     a10,a3
    3107 0000c660     c501          jrge    sptp6
    3108 0000c670     4d43          move    a10,a3
    3109 0000c680     b268  sptp6   move    a3,*a8(OYVEL),L
         0000c690     0120  
    3110 0000c6a0     c080  sptp9   jauc    puck_slide_sound
         0000c6b0 00000000! 
    3111                    
    3112                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   71

    3113                    *                                                                        *
    3114                    * get_puck_time_for_x                                                    *
    3115                    *       input   a0 = x position to return data on                        *
    3116                    *       output  a0 = x position (as input)                               *
    3117                    *               a3 = WAVEIRQS (given current velocity) for x = a0        *
    3118                    *               c  = puck is ok                                          *
    3119                    *               nc = puck has passed our given x (time is negative)      *
    3120                    *                                                                        *
    3121                    **************************************************************************
    3122 0000c6d0           get_puck_time_for_x     ;takes a0, returns a3,c
    3123 0000c6d0     098f          mmtm    sp,a0,a1,a8
         0000c6e0     c080  
    3124 0000c6f0     07a8          move    @PUCK_OBJECT,a8,L
         0000c700 00000000- 
    3125 0000c720     b70e          move    *a8(OXVAL),a14,L
         0000c730     0140  
    3126 0000c740     45c0          sub     a14,a0
    3127 0000c750     b701          move    *a8(OXVEL),a1,L
         0000c760     0100  
    3128 0000c770     cb02          jrnz    gtpx1
    3129 0000c780     09c1          movi    [0,01000h],a1
         0000c790     1000  
    3130 0000c7a0           gtpx1
    3131 0000c7a0     0d5f          calla   DIV                     ;a1 = time
         0000c7b0 00000000! 
    3132 0000c7d0     4c23          move    a1,a3
    3133 0000c7e0     2a03          sra     16,a3
    3134 0000c7f0     07a0          move    @WAVEIRQS,a0,L
         0000c800 00000000! 
    3135 0000c820     4003          add     a0,a3
    3136 0000c830     0320          clrc
    3137 0000c840     4c21          move    a1,a1
    3138 0000c850     ce01          jrn     sptx1
    3139 0000c860     0de0          setc
    3140 0000c870     09af  sptx1   mmfm    sp,a0,a1,a8
         0000c880     0103  
    3141 0000c890     0960          rets
    3142                    
    3143                    **************************************************************************
    3144                    *                                                                        *
    3145                    * get_puck_data_for_x                                                    *
    3146                    *       input   a0 = x position to return data on                        *
    3147                    *       output  a0 = x position (as input)                               *
    3148                    *               a1 = z position for x = a0                               *
    3149                    *               a3 = WAVEIRQS (given current velocity) for x = a0        *
    3150                    *               c  = puck is ok                                          *
    3151                    *               nc = puck has passed our given x (time is negative)      *
    3152                    *                                                                        *
    3153                    **************************************************************************
    3154 0000c8a0           get_puck_data_for_x     ;takes a0, returns a1,a3,c
    3155 0000c8a0     098f          mmtm    sp,a0,a4,a8
         0000c8b0     8880  
    3156 0000c8c0     07a8          move    @PUCK_OBJECT,a8,L
         0000c8d0 00000000- 
    3157 0000c8f0     b70e          move    *a8(OXVAL),a14,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   72

         0000c900     0140  
    3158 0000c910     45c0          sub     a14,a0
    3159 0000c920     b701          move    *a8(OXVEL),a1,L
         0000c930     0100  
    3160 0000c940     cb02          jrnz    gtpx2
    3161 0000c950     09c1          movi    [0,01000h],a1
         0000c960     1000  
    3162 0000c970           gtpx2
    3163                    
    3164 0000c970     0d5f          calla   DIV                     ;a1 = time
         0000c980 00000000! 
    3165 0000c9a0     4c24          move    a1,a4                   ;so we can check for negative time later
    3166 0000c9b0     4c23          move    a1,a3
    3167 0000c9c0     2a03          sra     16,a3
    3168 0000c9d0     07a0          move    @WAVEIRQS,a0,L
         0000c9e0 00000000! 
    3169 0000ca00     4003          add     a0,a3
    3170 0000ca10     b700          move    *a8(OZVEL),a0,L
         0000ca20     00e0  
    3171 0000ca30     0d5f          calla   MULT
         0000ca40 00000000! 
    3172 0000ca60     b700          move    *a8(OZVAL),a0,L
         0000ca70     0180  
    3173 0000ca80     4001          add     a0,a1                   ;a1 = z at x = goal
    3174 0000ca90     0320          clrc
    3175 0000caa0     4c84          move    a4,a4
    3176 0000cab0     ce01          jrn     gpd1
    3177 0000cac0     0de0          setc
    3178 0000cad0     09af  gpd1    mmfm    sp,a0,a4,a8
         0000cae0     0111  
    3179 0000caf0     0960          rets
    3180                    
    3181                    **************************************************************************
    3182                    *                                                                        *
    3183                    * get_puck_y_data_for_t                                                  *
    3184                    *       input   a3 = WAVEIRQS of point desired                           *
    3185                    *       output  a2 = y position at time a3                               *
    3186                    *                                                                        *
    3187                    **************************************************************************
    3188 0000cb00           get_puck_y_data_for_t   ;take a3, return a2
    3189 0000cb00     098f          mmtm    sp,a1,a8
         0000cb10     4080  
    3190 0000cb20     07a8          move    @PUCK_OBJECT,a8,L
         0000cb30 00000000- 
    3191 0000cb50     07a2          move    @WAVEIRQS,a2,L
         0000cb60 00000000! 
    3192 0000cb80     4443          sub     a2,a3                   ;a3 is our time (whole number)
    3193 0000cb90     4c61          move    a3,a1
    3194 0000cba0     5c61          mpys    a3,a1                   ;a1 is our time squared
    3195 0000cbb0     b502          move    *a8(OYACCEL),a2,W
         0000cbc0     02f0  
    3196 0000cbd0     5c41          mpys    a2,a1
    3197 0000cbe0     2be1          sra     1,a1                    ;a1 = 1/2at^2
    3198 0000cbf0     b702          move    *a8(OYVEL),a2,L
         0000cc00     0120  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   73

    3199 0000cc10     5c43          mpys    a2,a3                   ;a3 = Vt
    3200 0000cc20     b702          move    *a8(OYVAL),a2,L
         0000cc30     0160  
    3201 0000cc40     4062          add     a3,a2
    3202 0000cc50     4022          add     a1,a2
    3203 0000cc60     ce01          jrn     gpyd1
    3204 0000cc70     5642          clr     a2
    3205 0000cc80     09af  gpyd1   mmfm    sp,a1,a8
         0000cc90     0102  
    3206 0000cca0     0960          rets
    3207                    
    3208                    **************************************************************************
    3209                    *                                                                        *
    3210                    * SEND_PUCK_POLAR - MODIFY PUCK VECTOR WITH POLAR PARAMETERS             *
    3211                    *                                                                        *
    3212                    * PASS:                                                                  *
    3213                    * A0 = ANGLE                                                             *
    3214                    * A1 = SPEED                                                             *
    3215                    * A8 = OBJECT                                                            *
    3216                    * RETURN:                                                                *
    3217                    * NUTIN'                                                                 *
    3218                    *                                                                        *
    3219                    **************************************************************************
    3220                    
    3221 0000ccb0           SEND_PUCK_POLAR
    3222 0000ccb0     0d5f          CALLA   set_obj_to_polar
         0000ccc0 00000000! 
    3223                    ;       CALLR   give_puck_gravity
    3224 0000cce0     c080          JAUC    puck_slide_sound
         0000ccf0 00000000! 
    3225                    
    3226                    **************************************************************************
    3227                    *                                                                        *
    3228                    * put_puck_in_other_direction                                            *
    3229                    *       for when someone contacts puck, but does not control it          *
    3230                    *       it will bounce in somewhat the opposite direction from           *
    3231                    *       the way it is heading                                            *
    3232                    *       input   a8 = puck object                                         *
    3233                    *               a1 = speed to bounce puck away at                        *
    3234                    *       trashes b1,a0,a1                                                 *
    3235                    *                                                                        *
    3236                    **************************************************************************
    3237 0000cd10           put_puck_in_other_direction
    3238 0000cd10     4e21          move    a1,b1
    3239 0000cd20     b700          move    *a8(ODT_DIR),a0,L
         0000cd30     04b0  
    3240 0000cd40     0b20          addi    XD1800,a0
         0000cd50 00b40000  
    3241 0000cd70     4c01          move    a0,a1
    3242 0000cd80     0b21          addi    XD0250,a1
         0000cd90 00190000  
    3243 0000cdb0     0d00          subi    XD0250,a0
         0000cdc0 ffe6ffff  
    3244 0000cde0     0d5f          calla   RANGERND
         0000cdf0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   74

    3245 0000ce10     4e31          move    b1,a1
    3246 0000ce20     0d5f          calla   set_obj_to_polar
         0000ce30 00000000! 
    3247 0000ce50     b700          move    *a8(OYVEL),a0,L
         0000ce60     0120  
    3248 0000ce70     4c01          move    a0,a1
    3249 0000ce80     0b20          addi    [1,08000h],a0
         0000ce90 00018000  
    3250 0000ceb0     0d01          subi    [1,08000h],a1
         0000cec0 fffe7fff  
    3251 0000cee0     0d5f          calla   RANGERND
         0000cef0 00000000! 
    3252 0000cf10     b208          move    a0,*a8(OYVEL),L
         0000cf20     0120  
    3253 0000cf30     0d3f          callr   give_puck_gravity
         0000cf40     02db  
    3254 0000cf50     c080          jauc    puck_slide_sound
         0000cf60 00000000! 
    3255                    
    3256                    **************************************************************************
    3257                    *                                                                        *
    3258                    * find_time_to_get_to_point                                              *
    3259                    *       input   a0 = point 2 x                                           *
    3260                    *               a1 = point 2 z                                           *
    3261                    *               a2 = point 1 x                                           *
    3262                    *               a3 = point 1 z                                           *
    3263                    *               a7 = velocity of puck                                    *
    3264                    *       output  a4 = time to get there                                   *
    3265                    *               a10 = distance to point                                  *
    3266                    *                                                                        *
    3267                    **************************************************************************
    3268 0000cf80           find_time_to_get_to_point
    3269 0000cf80     0d5f  fttgp1  calla   find_dis_to_point_whole
         0000cf90 00000000! 
    3270 0000cfb0     4c8a          move    a4,a10
    3271 0000cfc0     4cae          MOVE    A5,A14                          ;SAVE A5
    3272 0000cfd0     56a5          clr     a5
    3273 0000cfe0     5ae4          divu    a7,a4
    3274 0000cff0     2e04          srl     16,a4
    3275 0000d000     4dc5          MOVE    A14,A5                          ;RESTORE A5
    3276 0000d010     0960          rets
    3277                    
    3278 0000d020           find_time_to_get_to_point_okb   ;handle bounce
    3279 0000d020     07a4          move    @bhit_dest_time,a4,L
         0000d030 00177210- 
    3280 0000d050     caf2          jrz     fttgp1
    3281 0000d060     07ae          move    @WAVEIRQS,a14,L
         0000d070 00000000! 
    3282 0000d090     45c4          sub     a14,a4
    3283 0000d0a0     0be4          subi    2,a4
         0000d0b0     fffd  
    3284 0000d0c0     0960          rets
    3285                    
    3286                    **************************************************************************
    3287                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   75

    3288                    * bounce_puck                                                            *
    3289                    * bounce_puck_corner                                                     *
    3290                    *       bounces puck off of a wall at angle a2                           *
    3291                    * input a2= angle to bounce puck off                                     *
    3292                    *       a8= puck object                                                  *
    3293                    *  in puck object ODATA= puck angle, ODATA+020H= puck velocity           *
    3294                    * trashes a bunch of registers                                           *
    3295                    *                                                                        *
    3296                    **************************************************************************
    3297 0000d0d0           gbounce_puck_corner
    3298 0000d0d0     4d06          move    a8,a6                           ;set a6 to non-zero
    3299 0000d0e0     c001          jruc    gbp1
    3300 0000d0f0           gbounce_puck
    3301 0000d0f0     56c6          clr     a6
    3302 0000d100     098f  gbp1    mmtm    sp,a9
         0000d110     0040  
    3303 0000d120     57ce          clr     a14
    3304 0000d130     058e          move    a14,@global_shot_percentage,W
         0000d140 00000000! 
    3305 0000d160     07c0          move    @WAVEIRQS,@PUCK_NEWDIR_TIME,L
         0000d170 00000000! 
         0000d190 00177230- 
    3306 0000d1b0     b701          move    *a8(ODT_DIR),a1,L                       ;get angle
         0000d1c0     04b0  
    3307 0000d1d0     0d3f          callr   compute_bounce_angle
         0000d1e0     0137  
    3308 0000d1f0     c90c          jrnc    bpa9                            ;br= no collision, done
    3309 0000d200     4c65          move    a3,a5                           ;save for sign bit for later
    3310 0000d210     0383          abs     a3                              ;make it 0-90 degrees
    3311 0000d220     0d03          subi    XD0900,a3
         0000d230 ffa5ffff  
    3312 0000d250     03a3          neg     a3                              ;now it is delta from parallel to surface
    3313 0000d260     0d3f          callr   bp21x
         0000d270     0007  
    3314 0000d280     0d5f          calla   puck_goal_sound2        ;read vels, and see if post
         0000d290 00000000! 
    3315 0000d2b0     0de0          setc
    3316 0000d2c0     09af  bpa9    mmfm    sp,a9
         0000d2d0     0200  
    3317 0000d2e0     0960          rets
    3318                    
    3319 0000d2f0     098f  bp21x   mmtm    sp,a9
         0000d300     0040  
    3320 0000d310     c058          jruc    bp21
    3321                    
    3322 0000d320           bounce_puck_corner
    3323 0000d320     4d06          move    a8,a6                           ;set a6 to non-zero
    3324 0000d330     c001          jruc    bp1
    3325 0000d340           bounce_puck
    3326 0000d340     56c6          clr     a6
    3327 0000d350     57ce  bp1     clr     a14
    3328 0000d360     058e          move    a14,@global_shot_percentage,W
         0000d370 00000000! 
    3329 0000d390     098f          mmtm    sp,a9
         0000d3a0     0040  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   76

    3330 0000d3b0     07c0          move    @WAVEIRQS,@PUCK_NEWDIR_TIME,L
         0000d3c0 00000000! 
         0000d3e0 00177230- 
    3331 0000d400     0d3f          callr   set_puck_outlaw
         0000d410     fb0e  
    3332 0000d420     b701          move    *a8(ODT_DIR),a1,L                       ;get angle
         0000d430     04b0  
    3333 0000d440     0d3f          callr   compute_bounce_angle
         0000d450     0110  
    3334 0000d460     c900          jrnc    bp9                             ;br= no collision, done
         0000d470     00ac  
    3335 0000d480     05a5          move    @PUCK_MODE,a5,W
         0000d490 000000c0- 
    3336 0000d4b0     0b45          cmpi    PUM_SHOT,a5
         0000d4c0     fff3  
    3337 0000d4d0     ca06          jrz     pdmis
    3338 0000d4e0     0b45          cmpi    PUM_SSHOT,a5
         0000d4f0     fff2  
    3339 0000d500     ca03          jrz     pdmis
    3340 0000d510     0b45          cmpi    PUM_ONETIME,a5
         0000d520     fff1  
    3341 0000d530     cb0f          jrnz    pdng
    3342 0000d540           pdmis
    3343 0000d540     0b62          cmpi    XD0900,a2
         0000d550 ffa5ffff  
    3344 0000d570     ca0b          jrz     pdng
    3345 0000d580     0b62          cmpi    XD2700,a2
         0000d590 fef1ffff  
    3346 0000d5b0     ca07          jrz     pdng
    3347 0000d5c0     0d5f          calla   spx_missed_shot
         0000d5d0 00000000! 
    3348 0000d5f0     56a5          clr     a5
    3349 0000d600     0d5f          calla   set_safe_puck_mode_a5
         0000d610 0000f040' 
    3350 0000d630     05a5  pdng    move    @PUCK_OPEN_CONTROL_TIME,a5,W
         0000d640 000000a0- 
    3351 0000d660     cf04          jrnn    pdng1
    3352 0000d670     1825          movk    1,a5
    3353 0000d680     0585          move    a5,@PUCK_OPEN_CONTROL_TIME,W
         0000d690 000000a0- 
    3354 0000d6b0     05a5  pdng1   move    @PUCK_OPEN_LAST_TIME,a5,W
         0000d6c0 000000b0- 
    3355 0000d6e0     cf04          jrnn    pdng2
    3356 0000d6f0     1825          movk    1,a5
    3357 0000d700     0585          move    a5,@PUCK_OPEN_LAST_TIME,W
         0000d710 000000b0- 
    3358 0000d730     4c65  pdng2   move    a3,a5                           ;save for sign bit for later
    3359 0000d740     0383          abs     a3                              ;make it 0-90 degrees
    3360 0000d750     0d03          subi    XD0900,a3
         0000d760 ffa5ffff  
    3361 0000d780     03a3          neg     a3                              ;now it is delta from parallel to surface
    3362 0000d790     4cc6          move    a6,a6
    3363 0000d7a0     ca04          jrz     bp_19
    3364 0000d7b0     0d5f          calla   puck_board_corner_sound
         0000d7c0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   77

    3365 0000d7e0     c00b          jruc    bp21
    3366 0000d7f0     07ae  bp_19   move    @bhit_dest_time,a14,L
         0000d800 00177210- 
    3367 0000d820     ca04          jrz     bp2121
    3368 0000d830     0d5f          calla   pass_off_boards_sound
         0000d840 00000000! 
    3369 0000d860     c003          jruc    bp21
    3370 0000d870     0d5f  bp2121  calla   puck_board_sound
         0000d880 00000000! 
    3371 0000d8a0     4c69  bp21    move    a3,a9                           ;save it for use later
    3372 0000d8b0     0d3f          callr   compute_velocity_change
         0000d8c0     006a  
    3373 0000d8d0     0d3f          callr   compute_angle_change
         0000d8e0     0096  
    3374 0000d8f0     5c60          mpys    a3,a0                           ;multiply angle change by angle
    3375 0000d900     2600          sll     16,a0
    3376 0000d910     2e01          srl     16,a1
    3377 0000d920     ec20          movx    a1,a0
    3378 0000d930     0d00          subi    XD0900,a0                       ;change it back to angle from normal
         0000d940 ffa5ffff  
    3379 0000d960     4ca5          move    a5,a5                           ;check sign of original angle
    3380 0000d970     ce01          jrn     bp2                             ;br= original was negative so minus is ok
    3381 0000d980     03a0          neg     a0                              ;correct if original was positive
    3382 0000d990     4040  bp2     add     a2,a0                           ;add it to normal to surface
    3383 0000d9a0                   THETA_N a0
    3384 0000da80     b208          move    a0,*a8(ODT_DIR),L                       ;store in angle
         0000da90     04b0  
    3385 0000daa0     4c02          move    a0,a2                           ;save for polar to rect conversion
    3386 0000dab0     b702          move    *a8(ODT_VEL),a2,L                       ;get velocity
         0000dac0     04d0  
    3387 0000dad0     4c45          move    a2,a5
    3388 0000dae0     5c82          mpys    a4,a2                           ;multiply velocity change by velocity
    3389 0000daf0     2602          sll     16,a2
    3390 0000db00     2e03          srl     16,a3
    3391 0000db10     ec62          movx    a3,a2
    3392 0000db20     4445          sub     a2,a5                   ;a5 is how much we lost
    3393 0000db30     b248          move    a2,*a8(ODT_VEL),L                       ;store in velocity
         0000db40     04d0  
    3394 0000db50     b50e          move    *a8(OYPOS),a14,W                ;get y of puck
         0000db60     0170  
    3395 0000db70     cf17          jrnn    xx1                             ;br= puck on ground
    3396 0000db80     0389          abs     a9                              ;make difference absolute
    3397 0000db90     0b69          cmpi    XD0150,a9                       ;if angle to wall is < 15 degrees
         0000dba0 fff0ffff  
    3398 0000dbc0     c212          jrls    xx1                             ;then we don't add a random amount.
    3399 0000dbd0     07ae          move    @bhit_dest_time,a14,L
         0000dbe0 00177210- 
    3400 0000dc00     cb0e          jrnz    xx1                     ;we are on bounce pass
    3401 0000dc10     4c01          move    a0,a1                   ;puck in air, give it
    3402 0000dc20     09ee          movi    XD0150,a14              ;+/- 15 degrees
         0000dc30 000f0000  
    3403 0000dc50     45c0          sub     a14,a0
    3404 0000dc60     41c1          add     a14,a1
    3405 0000dc70     0d5f          calla   RANGERND
         0000dc80 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   78

    3406 0000dca0     4c00          move    a0,a0
    3407 0000dcb0     cf03          jrnn    xx1
    3408 0000dcc0     0b20          addi    XD3600,a0
         0000dcd0 01680000  
    3409 0000dcf0     4c41  xx1     move    a2,a1                           ;now move vel to correct reg for ptor
    3410 0000dd00     0d3f          callr   kill_all_trails
         0000dd10     02c0  
    3411 0000dd20     0d5f          calla   polar_to_rect
         0000dd30 00000000! 
    3412 0000dd50     b208          move    a0,*a8(OXVEL),L
         0000dd60     0100  
    3413 0000dd70     b228          move    a1,*a8(OZVEL),L
         0000dd80     00e0  
    3414 0000dd90     b700          move    *a8(OYVEL),a0,L
         0000dda0     0120  
    3415 0000ddb0     cb18          jrnz    bp9
    3416 0000ddc0     5621          clr     a1
    3417 0000ddd0     03a5          neg     a5
    3418 0000dde0     2bc5          sra     2,a5
    3419 0000ddf0     05a0          move    @PUCK_MODE_2,a0,W
         0000de00 000000d0- 
    3420 0000de20     ca02          jrz     bp81                    ;if flat on ground normal
    3421 0000de30     4ca1          move    a5,a1
    3422 0000de40     2be5          sra     1,a5                    ;if puck is rolling or flopping, usually bring it up higher
    3423 0000de50     57ce  bp81    clr     a14
    3424 0000de60     078e          move    a14,@bhit_dest_time,L
         0000de70 00177210- 
    3425 0000de90     4ca0          move    a5,a0
    3426 0000dea0     0d5f          calla   RANGERND
         0000deb0 00000000! 
    3427 0000ded0     0b40          cmpi    -4000h,a0
         0000dee0     3fff  
    3428 0000def0     c504          jrge    bp9
    3429 0000df00     b208          move    a0,*a8(OYVEL),L
         0000df10     0120  
    3430 0000df20     0d3f          callr   give_puck_gravity
         0000df30     01dc  
    3431 0000df40     09af  bp9     mmfm    sp,a9
         0000df50     0200  
    3432 0000df60     0960          rets
    3433                    
    3434 0000df70           compute_velocity_change
    3435 0000df70     07ae          move    @bhit_dest_time,a14,L           ;are we bounce pass?
         0000df80 00177210- 
    3436 0000dfa0     cb14          jrnz    cvc_b                           ;we are bounce pass
    3437 0000dfb0     4c60          move    a3,a0                           ;get angle to correct reg
    3438 0000dfc0     0d5f          calla   GETCOS                          ;velocity change is
         0000dfd0 00000000! 
    3439 0000dff0     0380          abs     a0
    3440 0000e000     2be0          sra     1,a0                            ; ((cos(angle))/2 + .5)^2
    3441 0000e010     b501          move    *a8(OYPOS),a1,W         ;check if puck is in air
         0000e020     0170  
    3442 0000e030     cf02          jrnn    cvc_1                   ;br= puck on ground
    3443 0000e040     0be0          subi    [0,00800h],a0           ;if puck in air, make it + 15/32 instead of 1/2
         0000e050     f7ff  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   79

    3444 0000e060     0b20  cvc_1   addi    [0,08000h],a0
         0000e070 00008000  
    3445 0000e090     4c01          move    a0,a1
    3446 0000e0a0     0d5f          calla   SQUARE
         0000e0b0 00000000! 
    3447 0000e0d0     4c24          move    a1,a4
    3448 0000e0e0     0960          rets
    3449 0000e0f0     4c60  cvc_b   move    a3,a0                           ;get angle to correct reg
    3450 0000e100     0d5f          calla   GETCOS                          ;velocity change is
         0000e110 00000000! 
    3451 0000e130     0380          abs     a0
    3452 0000e140     2be0          sra     1,a0                            ; ((cos(angle))/2 + .5)^2
    3453 0000e150     0b20          addi    [0,08000h],a0
         0000e160 00008000  
    3454 0000e180     4c01          move    a0,a1
    3455 0000e190     0d5f          calla   SQUARE
         0000e1a0 00000000! 
    3456 0000e1c0     0b61          cmpi    [0,0a000h],a1
         0000e1d0 ffff5fff  
    3457 0000e1f0     c903          jrhs    cvcb2
    3458 0000e200     09e1          movi    [0,0a000h],a1
         0000e210 0000a000  
    3459 0000e230     4c24  cvcb2   move    a1,a4
    3460 0000e240     0960          rets
    3461                    
    3462 0000e250           compute_angle_change
    3463 0000e250     07a1          move    @bhit_dest_time,a1,L
         0000e260 00177210- 
    3464 0000e280     cb28          jrnz    cac_p           ;perfect bounce on bounce pass
    3465 0000e290     4cc6          move    a6,a6
    3466 0000e2a0     cb0e          jrnz    cac_c                           ;br=puck in corner
    3467 0000e2b0     0b63          cmpi    XD0400,a3
         0000e2c0 ffd7ffff  
    3468 0000e2e0     c417          jrlt    caclo
    3469 0000e2f0     4c60          move    a3,a0
    3470 0000e300     0d5f          calla   GETSIN                          ;for angles > 40
         0000e310 00000000! 
    3471 0000e330     4c01          move    a0,a1                           ; amount sin^2
    3472 0000e340     0d5f          calla   SQUARE
         0000e350 00000000! 
    3473 0000e370     4c20          move    a1,a0
    3474 0000e380     0960          rets
    3475 0000e390     0b63  cac_c   cmpi    XD0570,a3
         0000e3a0 ffc6ffff  
    3476 0000e3c0     c409          jrlt    caclo
    3477 0000e3d0     4c60          move    a3,a0
    3478 0000e3e0     0d5f          calla   GETCOS                          ;for angles > 57
         0000e3f0 00000000! 
    3479 0000e410     03a0          neg     a0                              ; amount is 1-cos
    3480 0000e420     0b20          addi    [1,0],a0
         0000e430 00010000  
    3481 0000e450     0960          rets
    3482 0000e460     4c60  caclo   move    a3,a0
    3483 0000e470     0d5f          calla   GETSIN
         0000e480 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   80

    3484 0000e4a0     4c01          move    a0,a1
    3485 0000e4b0     0d5f          calla   SQUARE_ROOT                     ;for angles < 57 (or 40)
         0000e4c0 00000000! 
    3486 0000e4e0     2be1          sra     1,a1                            ; amount (sin^.5)/2
    3487 0000e4f0     4c20          move    a1,a0
    3488 0000e500     0960          rets
    3489 0000e510     09e1  cac_p   movi    [1,0],a1
         0000e520 00010000  
    3490 0000e540     4c20          move    a1,a0
    3491 0000e550     0960          rets
    3492                    
    3493                    **************************************************************************
    3494                    *                                                                        *
    3495                    * compute_bounce_angle: computes the angle of reflection of the puck     *
    3496                    *                        bouncing off of a surface                       *
    3497                    *       input:  a1 = puck angle                                          *
    3498                    *               a2 = normal to surface                                   *
    3499                    *       output: CC = no collision                                        *
    3500                    *                 a3 = garbage                                           *
    3501                    *               CS = collision                                           *
    3502                    *                 a3 = amount to add to a2 to get reflection angle       *
    3503                    *                                                                        *
    3504                    **************************************************************************
    3505 0000e560           compute_bounce_angle
    3506 0000e560     0782          move    a2,@bounce_save_temp,L
         0000e570 000001a0- 
    3507 0000e590                   THETA_N a1
    3508 0000e670     4c43          move    a2,a3
    3509 0000e680     4423          sub     a1,a3
    3510 0000e690     0b23          addi    XD1800,a3
         0000e6a0 00b40000  
    3511 0000e6c0                   THETA_N a3
    3512 0000e7a0     0b63          cmpi    XD0900,a3
         0000e7b0 ffa5ffff  
    3513 0000e7d0     c407          jrlt    cba_ok
    3514 0000e7e0     0b63          cmpi    XD2700,a3
         0000e7f0 fef1ffff  
    3515 0000e810     c605          jrle    cba_nok
    3516 0000e820     0d03          subi    XD3600,a3
         0000e830 fe97ffff  
    3517 0000e850     0de0  cba_ok  setc
    3518 0000e860     0960          rets
    3519 0000e870     0320  cba_nok clrc
    3520 0000e880     0960          rets
    3521                    
    3522 0000e890           slow_object_down
    3523 0000e890     09e2          movi    spd2_friction,a2
         0000e8a0 0000edc0' 
    3524 0000e8c0     c006          jruc    spd11
    3525 0000e8d0           slow_puck_down
    3526 0000e8d0     07a8          move    @PUCK_OBJECT,a8,L
         0000e8e0 00000000- 
    3527 0000e900     09e2          movi    spd_friction,a2
         0000e910 0000ebc0' 
    3528 0000e930     b700  spd11   move    *a8(ODT_VEL),a0,L               ;velocity
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   81

         0000e940     04d0  
    3529 0000e950     6a01          lmo     a0,a1
    3530 0000e960     2481          sll     4,a1
    3531 0000e970     4041          add     a2,a1
    3532 0000e980     8422          move    *a1,a2,W
    3533 0000e990     ca19          jrz     spd_stop
    3534 0000e9a0     2602          sll     16,a2
    3535 0000e9b0     2e02          srl     16,a2
    3536 0000e9c0     5c40          mpys    a2,a0
    3537 0000e9d0     2600          sll     16,a0
    3538 0000e9e0     2e01          srl     16,a1
    3539 0000e9f0     ec20          movx    a1,a0
    3540 0000ea00     b208          move    a0,*a8(ODT_VEL),L
         0000ea10     04d0  
    3541 0000ea20     b700          move    *a8(OXVEL),a0,L         ;velocity
         0000ea30     0100  
    3542 0000ea40     5c40          mpys    a2,a0
    3543 0000ea50     2600          sll     16,a0
    3544 0000ea60     2e01          srl     16,a1
    3545 0000ea70     ec20          movx    a1,a0
    3546 0000ea80     b208          move    a0,*a8(OXVEL),L
         0000ea90     0100  
    3547 0000eaa0     b700          move    *a8(OZVEL),a0,L         ;velocity
         0000eab0     00e0  
    3548 0000eac0     5c40          mpys    a2,a0
    3549 0000ead0     2600          sll     16,a0
    3550 0000eae0     2e01          srl     16,a1
    3551 0000eaf0     ec20          movx    a1,a0
    3552 0000eb00     b208          move    a0,*a8(OZVEL),L
         0000eb10     00e0  
    3553 0000eb20     0960          rets
    3554                    
    3555 0000eb30           spd_stop
    3556 0000eb30     5621          clr     a1
    3557 0000eb40     0581          move    a1,@PUCK_MODE_2,W
         0000eb50 000000d0- 
    3558 0000eb70     0d3f          callr   set_safe_puck_mode_a1
         0000eb80     0043  
    3559 0000eb90     c080          jauc    set_obj_to_polar
         0000eba0 00000000! 
    3560                    
    3561 0000ebc0           spd_friction
    3562 0000ebc0     0000          .word   0               ;lmo = 31       80000000-ffffffff, 0
    3563 0000ebd0     ff80          .word   0ff80h          ;lmo = 30       40000000-7fffffff
    3564 0000ebe0     ff80          .word   0ff80h          ;lmo = 29       20000000-3fffffff
    3565 0000ebf0     ff74          .word   0ff74h          ;lmo = 28       10000000-1fffffff
    3566 0000ec00     ff70          .word   0ff70h          ;lmo = 27       08000000-0fffffff
    3567 0000ec10     ff6c          .word   0ff6ch          ;lmo = 26       04000000-07ffffff
    3568 0000ec20     ff60          .word   0ff60h          ;lmo = 25       02000000-03ffffff
    3569 0000ec30     ff50          .word   0ff50h          ;lmo = 24       01000000-01ffffff
    3570 0000ec40     ff28          .word   0ff28h          ;lmo = 23       00800000-00ffffff
    3571 0000ec50     ff10          .word   0ff10h          ;lmo = 22       00400000-007fffff
    3572 0000ec60     fef8          .word   0fef8h          ;lmo = 21       00200000-003fffff
    3573 0000ec70     fee0          .word   0fee0h          ;lmo = 20       00100000-001fffff
    3574 0000ec80     fe70          .word   0fe70h          ;lmo = 19       00080000-000fffff
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   82

    3575 0000ec90     fe00          .word   0fe00h          ;lmo = 18       00040000-0007ffff
    3576 0000eca0     fce0          .word   0fce0h          ;lmo = 17       00020000-0003ffff
    3577 0000ecb0     fa78          .word   0fa78h          ;lmo = 16       00010000-0001ffff
    3578 0000ecc0     fa68          .word   0fa68h          ;lmo = 15       00008000-0000ffff
    3579 0000ecd0     fa68          .word   0fa68h          ;lmo = 14       00004000-00007fff
    3580 0000ece0     0000          .word   0               ;lmo = 13       00002000-00003fff
    3581 0000ecf0     0000          .word   0               ;lmo = 12       00001000-00001fff
    3582 0000ed00     0000          .word   0               ;lmo = 11       00000800-00000fff
    3583 0000ed10     0000          .word   0               ;lmo = 10       00000400-000007ff
    3584 0000ed20     0000          .word   0               ;lmo = 9        00000200-000003ff
    3585 0000ed30     0000          .word   0               ;lmo = 8        00000100-000001ff
    3586 0000ed40     0000          .word   0               ;lmo = 7        00000080-000000ff
    3587 0000ed50     0000          .word   0               ;lmo = 6        00000040-0000007f
    3588 0000ed60     0000          .word   0               ;lmo = 5        00000020-0000003f
    3589 0000ed70     0000          .word   0               ;lmo = 4        00000010-0000001f
    3590 0000ed80     0000          .word   0               ;lmo = 3        00000008-0000000f
    3591 0000ed90     0000          .word   0               ;lmo = 2        00000004-00000007
    3592 0000eda0     0000          .word   0               ;lmo = 1        00000002-00000003
    3593 0000edb0     0000          .word   0               ;lmo = 0        00000000-00000001
    3594                    
    3595 0000edc0           spd2_friction
    3596 0000edc0     0000          .word   0               ;lmo = 31       80000000-ffffffff, 0
    3597 0000edd0     ff74          .word   0ff74h          ;lmo = 30       40000000-7fffffff
    3598 0000ede0     ff70          .word   0ff70h          ;lmo = 29       20000000-3fffffff
    3599 0000edf0     ff6c          .word   0ff6ch          ;lmo = 28       10000000-1fffffff
    3600 0000ee00     ff60          .word   0ff60h          ;lmo = 27       08000000-0fffffff
    3601 0000ee10     ff50          .word   0ff50h          ;lmo = 26       04000000-07ffffff
    3602 0000ee20     ff28          .word   0ff28h          ;lmo = 25       02000000-03ffffff
    3603 0000ee30     ff10          .word   0ff10h          ;lmo = 24       01000000-01ffffff
    3604 0000ee40     fef8          .word   0fef8h          ;lmo = 23       00800000-00ffffff
    3605 0000ee50     fee0          .word   0fee0h          ;lmo = 22       00400000-007fffff
    3606 0000ee60     fe70          .word   0fe70h          ;lmo = 21       00200000-003fffff
    3607 0000ee70     fce0          .word   0fce0h          ;lmo = 20       00100000-001fffff
    3608 0000ee80     fa78          .word   0fa78h          ;lmo = 19       00080000-000fffff
    3609 0000ee90     fa68          .word   0fa68h          ;lmo = 18       00040000-0007ffff
    3610 0000eea0     fa58          .word   0fa58h          ;lmo = 17       00020000-0003ffff
    3611 0000eeb0     fa48          .word   0fa48h          ;lmo = 16       00010000-0001ffff
    3612 0000eec0     0000          .word   0               ;lmo = 15       00008000-0000ffff
    3613 0000eed0     0000          .word   0               ;lmo = 14       00004000-00007fff
    3614 0000eee0     0000          .word   0               ;lmo = 13       00002000-00003fff
    3615 0000eef0     0000          .word   0               ;lmo = 12       00001000-00001fff
    3616 0000ef00     0000          .word   0               ;lmo = 11       00000800-00000fff
    3617 0000ef10     0000          .word   0               ;lmo = 10       00000400-000007ff
    3618 0000ef20     0000          .word   0               ;lmo = 9        00000200-000003ff
    3619 0000ef30     0000          .word   0               ;lmo = 8        00000100-000001ff
    3620 0000ef40     0000          .word   0               ;lmo = 7        00000080-000000ff
    3621 0000ef50     0000          .word   0               ;lmo = 6        00000040-0000007f
    3622 0000ef60     0000          .word   0               ;lmo = 5        00000020-0000003f
    3623 0000ef70     0000          .word   0               ;lmo = 4        00000010-0000001f
    3624 0000ef80     0000          .word   0               ;lmo = 3        00000008-0000000f
    3625 0000ef90     0000          .word   0               ;lmo = 2        00000004-00000007
    3626 0000efa0     0000          .word   0               ;lmo = 1        00000002-00000003
    3627 0000efb0     0000          .word   0               ;lmo = 0        00000000-00000001
    3628                    
    3629 0000efc0           set_safe_puck_mode_a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   83

    3630 0000efc0     098f          mmtm    sp,a0,a14
         0000efd0     8002  
    3631 0000efe0     4c20          move    a1,a0
    3632 0000eff0     c00e          jruc    sspm1
    3633 0000f000           set_safe_puck_mode_a4
    3634 0000f000     098f          mmtm    sp,a0,a14
         0000f010     8002  
    3635 0000f020     4c80          move    a4,a0
    3636 0000f030     c00a          jruc    sspm1
    3637 0000f040           set_safe_puck_mode_a5
    3638 0000f040     098f          mmtm    sp,a0,a14
         0000f050     8002  
    3639 0000f060     4ca0          move    a5,a0
    3640 0000f070     c006          jruc    sspm1
    3641 0000f080           set_safe_puck_mode_a14
    3642 0000f080     098f          mmtm    sp,a0,a14
         0000f090     8002  
    3643 0000f0a0     4dc0          move    a14,a0
    3644 0000f0b0     c002          jruc    sspm1
    3645 0000f0c0           set_safe_puck_mode_a0
    3646 0000f0c0     098f          mmtm    sp,a0,a14
         0000f0d0     8002  
    3647 0000f0e0     05ae  sspm1   move    @PUCK_MODE,a14,W
         0000f0f0 000000c0- 
    3648 0000f110     0b4e          cmpi    PUM_SCORE,a14
         0000f120     ff9c  
    3649 0000f130     c903          jrhs    sspm9
    3650 0000f140     0580          move    a0,@PUCK_MODE,W
         0000f150 000000c0- 
    3651 0000f170     09af  sspm9   mmfm    sp,a0,a14
         0000f180     4001  
    3652 0000f190     0960          rets
    3653                    
    3654                    **************************************************************************
    3655                    *                                                                        *
    3656                    * puck_rink_check                                                        *
    3657                    *       this is a mechanism for checking puck collisions with            *
    3658                    *       the physical properties of the rink. (ie walls and goal areas)   *
    3659                    *       it runs through a table of check values, forking into the        *
    3660                    *       corresponding routine for further analysis.  This is to speed    *
    3661                    *       up the majority of checks, where no collision occurs             *
    3662                    *                                                                        *
    3663                    **************************************************************************
    3664 0000f1a0           puck_rink_check
    3665 0000f1a0     07a8          move    @PUCK_OBJECT,a8,L
         0000f1b0 00000000- 
    3666 0000f1d0     b70e          move    *a8(OYVAL),a14,L                ;no get pos
         0000f1e0     0160  
    3667 0000f1f0     ca08          jrz     prcx1
    3668 0000f200     ce09          jrn     prc22                   ;br= we are above ground, don't worry
    3669 0000f210     b700          move    *a8(OYVEL),a0,L
         0000f220     0120  
    3670 0000f230     ca06          jrz     prc22                   ;br= we are not going down yet, don't worry
    3671 0000f240     ce05          jrn     prc22                   ;br= we are going up, don't worry about it
    3672 0000f250     0d3f          callr   puck_hits_ground
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   84

         0000f260     005b  
    3673 0000f270     c002          jruc    prc22
    3674 0000f280     0d3f  prcx1   callr   puck_on_ground
         0000f290     0045  
    3675 0000f2a0           prc22
    3676 0000f2a0     b70e          move    *a8(OYVAL),a14,L
         0000f2b0     0160  
    3677 0000f2c0     ca04          jrz     pc224
    3678 0000f2d0     ce03          jrn     pc224
    3679 0000f2e0     57ce          clr     a14
    3680 0000f2f0     b3c8          move    a14,*a8(OYVAL),L
         0000f300     0160  
    3681 0000f310           pc224
    3682                    
    3683 0000f310     0d3f          callr   set_puck_script         ;also sets puck palette
         0000f320     00a7  
    3684 0000f330     0d3f          callr   set_puck_shadow
         0000f340     05a2  
    3685 0000f350     05ae          move    @trigger_puck_sound,a14,W
         0000f360 00000120- 
    3686 0000f380     ca07          jrz     prc_ns
    3687 0000f390     57ce          clr     a14
    3688 0000f3a0     058e          move    a14,@trigger_puck_sound,W
         0000f3b0 00000120- 
    3689 0000f3d0     0d5f          calla   puck_slide_sound
         0000f3e0 00000000! 
    3690 0000f400     b700  prc_ns  move    *a8(OXVAL),a0,L
         0000f410     0140  
    3691 0000f420     0b20          addi    [0,08000h],a0
         0000f430 00008000  
    3692 0000f450     2a00          sra     16,a0
    3693                    ;prc_ns move    *a8(OXPOS),a0,W         ;half
    3694 0000f460     b501          move    *a8(OZPOS),a1,W
         0000f470     0190  
    3695 0000f480     2601          sll     16,a1
    3696 0000f490     ee20          movy    a1,a0                   ;a0 = [z,x] of puck
    3697 0000f4a0     09e6          movi    rink_check_table,a6
         0000f4b0 000192b0' 
    3698 0000f4d0     09ee          movi    [1,1],a14
         0000f4e0 00010001  
    3699 0000f500     09a6  prc_1   mmfm    a6,a1,a2,a3             ;a3 = lowerleft, a2 = upperright, a1 = address
         0000f510     000e  
    3700 0000f520     41c2          add     a14,a2                  ;sub 1 pixel over so we check like xge, yge
    3701 0000f530     4c63          move    a3,a3
    3702 0000f540     ca07          jrz     prc_err                 ;we hit end of table, something is wrong
    3703 0000f550     e460          cmpxy   a3,a0
    3704 0000f560     c2f9          jryle   prc_1                   ;br= outside lower
    3705 0000f570     c4f8          jrxle   prc_1                   ;br= outside left
    3706 0000f580     e440          cmpxy   a2,a0
    3707 0000f590     c3f6          jrygt   prc_1                   ;br= outside top
    3708 0000f5a0     c5f5          jrxgt   prc_1                   ;br= outside right
    3709 0000f5b0     0161          jump    a1                      ;go to address for further checks
    3710                    
    3711 0000f5c0           prc_err LOCKUP                  ;we hit end of table without match
    3712 0000f5f0     5600          clr     a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   85

    3713 0000f600     b208          move    a0,*a8(OXVEL),L
         0000f610     0100  
    3714 0000f620     b208          move    a0,*a8(OXVAL),L
         0000f630     0140  
    3715 0000f640     b208          move    a0,*a8(OZVEL),L
         0000f650     00e0  
    3716 0000f660     b208          move    a0,*a8(OZVAL),L
         0000f670     0180  
    3717 0000f680     b008          move    a0,*a8(OYACCEL),W
         0000f690     02f0  
    3718 0000f6a0     b208          move    a0,*a8(OYVEL),L
         0000f6b0     0120  
    3719 0000f6c0     b208          move    a0,*a8(OYVAL),L
         0000f6d0     0160  
    3720 0000f6e0     0960          rets
    3721                    
    3722 0000f6f0           puck_on_ground
    3723 0000f6f0     05a0          move    @PUCK_MODE_2,a0,W
         0000f700 000000d0- 
    3724 0000f720     ca0e          jrz     pog_9
    3725 0000f730     05ae          move    @PUCK_M2_TIME,a14,W
         0000f740 000000f0- 
    3726 0000f760     102e          inc     a14
    3727 0000f770     058e          move    a14,@PUCK_M2_TIME,W
         0000f780 000000f0- 
    3728 0000f7a0     0b4e          cmpi    80,a14
         0000f7b0     ffaf  
    3729 0000f7c0     c204          jrls    pog_9
    3730 0000f7d0     57ce          clr     a14
    3731 0000f7e0     058e          move    a14,@PUCK_MODE_2,W
         0000f7f0 000000d0- 
    3732 0000f810     0960  pog_9   rets
    3733                    
    3734 0000f820           puck_hits_ground
    3735 0000f820     b701          move    *a8(OYVEL),a1,L
         0000f830     0120  
    3736 0000f840     0d5f          calla   puck_drop_sound
         0000f850 00000000! 
    3737 0000f870     0b61          cmpi    [1,0],a1
         0000f880 fffeffff  
    3738 0000f8a0     c232          jrls    phg1
    3739                    
    3740                            .if     BILL
    3741                            JRUC    phg2                    ;MOST EXTREME RESULT ALWAYS!
    3742                            .endif
    3743                    
    3744 0000f8b0     0d5f          calla   RANDOM
         0000f8c0 00000000! 
    3745 0000f8e0     27c0          sll     30,a0
    3746 0000f8f0     2ce0          srl     25,a0
    3747 0000f900     0b20          addi    phglist,a0
         0000f910 0000f950' 
    3748 0000f930     8600          move    *a0,a0,L
    3749 0000f940     0160          jump    a0
    3750 0000f950 0000fbd0' phglist .long   phg1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   86

    3751 0000f970 0000f9d0'         .long   phg2
    3752 0000f990 0000fa90'         .long   phg3
    3753 0000f9b0 0000fb80'         .long   phg4
    3754 0000f9d0     0b61  phg2    cmpi    [3,0],a1        ;4
         0000f9e0 fffcffff  
    3755 0000fa00     c403          jrlt    phg2t
    3756 0000fa10     09e1          movi    [3,0],a1        ;4
         0000fa20 00030000  
    3757 0000fa40     2be1  phg2t   sra     1,a1
    3758 0000fa50     03a1          neg     a1
    3759 0000fa60     b228          move    a1,*a8(OYVEL),L
         0000fa70     0120  
    3760 0000fa80     0960          rets
    3761 0000fa90     0b61  phg3    cmpi    [3,0],a1        ;4
         0000faa0 fffcffff  
    3762 0000fac0     c403          jrlt    phg3t
    3763 0000fad0     09e1          movi    [3,0],a1        ;4
         0000fae0 00030000  
    3764 0000fb00     4c2e  phg3t   move    a1,a14
    3765 0000fb10     2bc1          sra     2,a1
    3766 0000fb20     2bae          sra     3,a14
    3767 0000fb30     41c1          add     a14,a1
    3768 0000fb40     03a1          neg     a1
    3769 0000fb50     b228          move    a1,*a8(OYVEL),L
         0000fb60     0120  
    3770 0000fb70     0960          rets
    3771 0000fb80     2bc1  phg4    sra     2,a1
    3772 0000fb90     03a1          neg     a1
    3773 0000fba0     b228          move    a1,*a8(OYVEL),L
         0000fbb0     0120  
    3774 0000fbc0     0960          rets
    3775 0000fbd0     0b61  phg1    cmpi    [3,0],a1
         0000fbe0 fffcffff  
    3776 0000fc00     c9dc          jrhs    phg2                    ;if it is really fast, it must bounce
    3777 0000fc10     1820          movk    1,a0
    3778 0000fc20     0580          move    a0,@PUCK_MODE_2
         0000fc30 000000d0- 
    3779 0000fc50     5600          clr     a0
    3780 0000fc60     0580          move    a0,@PUCK_M2_TIME,W
         0000fc70 000000f0- 
    3781 0000fc90     b008          move    a0,*a8(OYACCEL),W       ;clear out all y
         0000fca0     02f0  
    3782 0000fcb0     b208          move    a0,*a8(OYVEL),L
         0000fcc0     0120  
    3783 0000fcd0     b208          move    a0,*a8(OYVAL),L
         0000fce0     0160  
    3784 0000fcf0     0960          rets
    3785                    
    3786 0000fd00           give_puck_gravity       ;a8 = puck
    3787 0000fd00     09ce          movi    NORM_GRAVITY,a14        ;if we change this, change y position routines to match
         0000fd10     3000  
    3788 0000fd20     b1c8          move    a14,*a8(OYACCEL),W
         0000fd30     02f0  
    3789 0000fd40     0960          rets
    3790                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   87

    3791 0000fd50           give_puck_shot_gravity  ;a8 = puck
    3792 0000fd50     09ce          movi    SHOT_GRAVITY,a14        ;if we change this, change y position routines to match
         0000fd60     2a00  
    3793 0000fd70     b1c8          move    a14,*a8(OYACCEL),W
         0000fd80     02f0  
    3794 0000fd90     0960          rets
    3795                    
    3796 0000fda0           set_puck_script
    3797 0000fda0     07a7          move    @PUCK_OBJECT,a7,L
         0000fdb0 00000000- 
    3798 0000fdd0     05ae          move    @show_puck_on_fire,a14,W
         0000fde0 00177260- 
    3799 0000fe00     cb78          jrnz    sps_fire
    3800 0000fe10     b4ee          move    *a7(ODT_VEL+010h),a14,W
         0000fe20     04e0  
    3801 0000fe30     0b4e          cmpi    18,a14
         0000fe40     ffed  
    3802 0000fe50     c824          jrlo    spse1
    3803 0000fe60     5600          clr     a0
    3804 0000fe70     0580          move    a0,@killtrails,W
         0000fe80 00177250- 
    3805 0000fea0     09f0          movi    puck_trail_init,b0
         0000feb0 0000a2b0' 
    3806 0000fed0     0d5f          calla   EASYMAKE
         0000fee0 00000000! 
    3807 0000ff00     ca19          jrz     spse1
    3808 0000ff10     0d3f          CALLR   FIX_PUCK_SCALE
         0000ff20     fa1b  
    3809 0000ff30     bae8          move    *a7(OXVAL),*a8(OXVAL),L
         0000ff40     0140  
         0000ff50     0140  
    3810 0000ff60     bae8          move    *a7(OYVAL),*a8(OYVAL),L
         0000ff70     0160  
         0000ff80     0160  
    3811 0000ff90     b6ee          move    *a7(OZVAL),a14,L
         0000ffa0     0180  
    3812 0000ffb0     0b0e          addi    200,a14
         0000ffc0     00c8  
    3813 0000ffd0     b3c8          move    a14,*a8(OZVAL),L
         0000ffe0     0180  
    3814 0000fff0     0d3f          callr   cpvelp
         00010000     014e  
    3815 00010010     09e1          movi    puck_trail_script,a1
         00010020 00010a90' 
    3816 00010040     0d5f          calla   INSERT_OBJ
         00010050 00000000! 
    3817 00010070     0d5f          calla   STRT_ANIM
         00010080 00000000! 
    3818 000100a0     4ce8  spse1   move    a7,a8
    3819                    
    3820 000100b0     5600          clr     a0
    3821 000100c0     05a1          move    @PUCK_CONTROL,a1,W
         000100d0 00000040- 
    3822 000100f0     cb41          jrnz    sps8
    3823 00010100     05ae          move    @PUCK_MODE,a14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   88

         00010110 000000c0- 
    3824 00010130     0b4e          cmpi    PUM_FACEOFF,a14
         00010140     ff9b  
    3825 00010150     ca3b          jrz     sps8
    3826 00010160     1820          movk    1,a0
    3827 00010170     b501          move    *a8(OYPOS),a1,W
         00010180     0170  
    3828 00010190     cb0b          jrnz    sps81
    3829 000101a0     05a0          move    @PUCK_MODE_2,a0,W
         000101b0 000000d0- 
    3830 000101d0     ca01          jrz     spse2w
    3831 000101e0     1820          movk    1,a0            ;on ice 0 or 1
    3832 000101f0     24a0  spse2w  sll     5,a0
    3833 00010200     0b20          addi    spssl,a0
         00010210 00010530' 
    3834 00010230     8600          move    *a0,a0,L
    3835 00010240     0160          jump    a0
    3836 00010250     5621  sps81   clr     a1
    3837 00010260     05a0          move    @PUCK_MODE_2_DIR,a0,W
         00010270 000000e0- 
    3838 00010290     cb07          jrnz    sps82a
    3839 000102a0     1840          movk    2,a0
    3840 000102b0     0d5f          calla   RANDU
         000102c0 00000000! 
    3841 000102e0     0580          move    a0,@PUCK_MODE_2_DIR,W
         000102f0 000000e0- 
    3842 00010310     0b40  sps82a  cmpi    1,a0
         00010320     fffe  
    3843 00010330     ca01          jrz     sps82b
    3844 00010340     1981          movk    12,a1
    3845 00010350           sps82b
    3846 00010350     05a0  sps82   move    @PUCK_MODE_2,a0,W
         00010360 000000d0- 
    3847 00010380     cb0e          jrnz    sps83
    3848 00010390     b4ee          move    *a7(ODT_VEL+010h),a14,W
         000103a0     04e0  
    3849 000103b0     0b4e          cmpi    20,a14
         000103c0     ffeb  
    3850 000103d0     c202          jrls    sps8xa
    3851 000103e0     1840          movk    2,a0
    3852 000103f0     c004          jruc    sps8xb
    3853 00010400     1980  sps8xa  movk    12,a0
    3854 00010410     0d5f          calla   RANDU
         00010420 00000000! 
    3855 00010440     0580  sps8xb  move    a0,@PUCK_MODE_2,W
         00010450 000000d0- 
    3856 00010470     4001  sps83   add     a0,a1
    3857                    
    3858                    ;
    3859                    ; here here here
    3860                    ;
    3861                    
    3862                    
    3863 00010480     2761          sll     27,a1
    3864 00010490     2d41          srl     22,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   89

    3865                    ;       sll     5,a1
    3866                    
    3867 000104a0     0b21          addi    big_puck_scr_list-32,a1
         000104b0 00011d70' 
    3868 000104d0     8621          move    *a1,a1,L
    3869 000104e0     c080          jauc    start_anim_if_not
         000104f0 00000000! 
    3870 00010510     c000  sps8    jruc    set_flat_puck_script
         00010520     0150  
    3871                    
    3872 00010530 00011a30' spssl   .long   set_flat_puck_script
    3873 00010550 00011b30'         .long   set_flop_puck_script
    3874 00010570 00011ad0'         .long   set_roll_puck_script
    3875                    
    3876 00010590           sps_fire
    3877 00010590     05ae          move    @WAVEIRQS,a14,W
         000105a0 00000000! 
    3878                    ;       move    a14,a2
    3879                    ;       sll     31,a14
    3880                    ;       srl     31,a14
    3881 000105c0     1fee          BTST    0,A14
    3882 000105d0     cb31          jrnz    spxe1
    3883 000105e0     09f0          movi    puck_fire_init,b0
         000105f0 0000a310' 
    3884 00010610     0d5f          calla   EASYMAKE
         00010620 00000000! 
    3885 00010640     ca2a          jrz     spxe1
    3886                    
    3887 00010650     0d3f          CALLR   FIX_PUCK_SCALE
         00010660     f9a7  
    3888                    
    3889 00010670     1840          MOVK    2,A0                            ;RANDOM FIRE H-FLIP
    3890 00010680     0d5f          CALLA   RAND0
         00010690 00000000! 
    3891 000106b0     2480          SLL     4,A0
    3892 000106c0     b50e          MOVE    *A8(OCTRL),A14,W
         000106d0     01f0  
    3893 000106e0     540e          OR      A0,A14
    3894 000106f0     b1c8          MOVE    A14,*A8(OCTRL),W
         00010700     01f0  
    3895                    
    3896 00010710     b6ee          move    *a7(OXVAL),a14,L
         00010720     0140  
    3897                    ;       sll     30,a2                           ;THIS IS ALWAYS ZERO.
    3898                    ;       srl     15,a2
    3899                    ;       add     a2,a14
    3900                    
    3901 00010730     09e0          MOVI    020000H,A0
         00010740 00020000  
    3902 00010760     05a1          MOVE    @BIG_PUCK,A1,W
         00010770 00000000! 
    3903 00010790     ca01          JRZ     SPS_F_OFFSET_X                  ;BR=NORMAL PUCK
    3904 000107a0     03a0          NEG     A0                              ;BIG PUCK
    3905 000107b0           SPS_F_OFFSET_X
    3906 000107b0     440e          SUB     A0,A14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   90

    3907                    
    3908 000107c0     b3c8          move    a14,*a8(OXVAL),L
         000107d0     0140  
    3909 000107e0     bae8          move    *a7(OYVAL),*a8(OYVAL),L
         000107f0     0160  
         00010800     0160  
    3910 00010810     bae8          move    *a7(OZVAL),*a8(OZVAL),L
         00010820     0180  
         00010830     0180  
    3911 00010840     0d3f          callr   cvelxp
         00010850     00df  
    3912 00010860     09e1          movi    puck_trail_fire_script,a1
         00010870 00010bf0' 
    3913 00010890     0d5f          calla   INSERT_OBJ
         000108a0 00000000! 
    3914 000108c0     0d5f          calla   STRT_ANIM
         000108d0 00000000! 
    3915 000108f0     4ce8  spxe1   move    a7,a8
    3916 00010900     c000          jruc    set_flat_puck_script
         00010910     0111  
    3917                    
    3918 00010920           kill_all_trails
    3919 00010920     098f          mmtm    sp,a0
         00010930     8000  
    3920 00010940     05a0          move    @show_puck_on_fire,a0,W
         00010950 00177260- 
    3921 00010970     cb09          jrnz    kat2
    3922 00010980     05a0          move    @killtrails,a0,W
         00010990 00177250- 
    3923 000109b0     cb0a          jrnz    kat1
    3924 000109c0     5600          clr     a0
    3925 000109d0     1420          dec     a0
    3926 000109e0     0580          move    a0,@killtrails,W
         000109f0 00177250- 
    3927 00010a10     09c0  kat2    movi    OID_PUCK_TRAIL,a0
         00010a20     0207  
    3928 00010a30     0d5f          calla   KILOBJ_ALL
         00010a40 00000000! 
    3929 00010a60     09af  kat1    mmfm    sp,a0
         00010a70     0001  
    3930 00010a80     0960          rets
    3931                    
    3932 00010a90           puck_trail_script
    3933 00010a90                   LWL     1,1|AFUNC,a_cpypv
    3934 00010ae0                   LWL     1,1|AFUNC,a_cpypv
    3935 00010b30                   LWL     1,1|AFUNC,a_cpypv
    3936 00010b80                   LWL     1,AFUNC|1,a_delete_obj
    3937 00010bd0 00000000          .long   0
    3938                    
    3939 00010bf0           puck_trail_fire_script
    3940 00010bf0                   LWL     SMBRST01,2|AFUNC,a_cpypf
    3941 00010c40                   LWL     SMBRST02,2|AFUNC,a_cpypf
    3942 00010c90                   LWL     SMBRST03,2|AFUNC,a_cpypf
    3943 00010ce0                   LWL     SMBRST04,2|AFUNC,a_cpypf
    3944 00010d30                   LWL     SMBRST05,2|AFUNC,a_cpypf
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   91

    3945 00010d80                   LWL     SMBRST06,2|AFUNC,a_cpypf
    3946 00010dd0                   LWL     SMBRST07,2|AFUNC,a_cpypf
    3947 00010e20                   LWL     SMBRST08,2|AFUNC,a_cpypf
    3948 00010e70                   LWL     SMBRST09,2|AFUNC,a_cpypf
    3949 00010ec0                   LWL     SMBRST10,2|AFUNC,a_cpypf
    3950 00010f10                   LWL     1,AFUNC|1,a_delete_obj
    3951 00010f60 00000000          .long   0
    3952                    
    3953 00010f80           SAVE_FIRE_INIT
    3954 00010f80 00001c20"         .long   SMBRST01
    3955 00010fa0     8002          .word   DMAWNZ,M_NOSCALE
    3956 00010fc0     0100          .word   OM_OID,OID_JUNK
    3957                    
    3958 00010fe0           SAVE_FIRE_ANIM
    3959 00010fe0                   LW      SMBRST01,2
    3960 00011010                   LW      SMBRST02,2
    3961 00011040                   LW      SMBRST03,2
    3962 00011070                   LW      SMBRST04,2
    3963 000110a0                   LW      SMBRST05,2
    3964 000110d0                   LW      SMBRST06,2
    3965 00011100                   LW      SMBRST07,2
    3966 00011130                   LW      SMBRST08,2
    3967 00011160                   LW      SMBRST09,2
    3968 00011190                   LW      SMBRST10,2
    3969 000111c0                   LWL     1,AFUNC|1,DELETE_OBJ
    3970                    
    3971 00011210           FIREBALL_INIT
    3972 00011210 00001c20"         .long   SMBRST01
    3973 00011230     8002          .word   DMAWNZ,0
    3974 00011250     0104          .word   OM_OID|OM_ANIM
    3975 00011260     07ff          .WORD   OID_JUNK
    3976 00011270 00011290'         .LONG   FIREBALL_ANIM
    3977                    
    3978 00011290           FIREBALL_ANIM
    3979 00011290                   LW      SMBRST01,2
    3980 000112c0                   LW      SMBRST02,2
    3981 000112f0                   LW      SMBRST03,2
    3982 00011320                   LW      SMBRST04,2
    3983 00011350                   LW      SMBRST05,2
    3984 00011380                   LW      SMBRST06,2
    3985 000113b0                   LW      SMBRST07,2
    3986 000113e0                   LW      SMBRST08,2
    3987 00011410                   LW      SMBRST09,2
    3988 00011440                   LW      SMBRST10,2
    3989 00011470                   LWL     1,AFUNC|1,DELETE_OBJ
    3990                    
    3991 000114c0           a_cpypv ;move   @killtrails,a0,W
    3992                            ;janz   DELETE_OBJ
    3993 000114c0     07a7          move    @PUCK_OBJECT,a7,L
         000114d0 00000000- 
    3994                            ;
    3995 000114f0     b6ee  cpvelp  move    *a7(OXVEL),a14,L
         00011500     0100  
    3996 00011510     0d3f          callr   axv
         00011520     0047  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   92

    3997 00011530     b3c8          move    a14,*a8(OXVEL),L
         00011540     0100  
    3998 00011550     b6ee          move    *a7(OZVEL),a14,L
         00011560     00e0  
    3999 00011570     0d3f          callr   axv
         00011580     0041  
    4000 00011590     b3c8          move    a14,*a8(OZVEL),L
         000115a0     00e0  
    4001 000115b0     b6ee          move    *a7(OYVEL),a14,L
         000115c0     0120  
    4002 000115d0     0d3f          callr   axv
         000115e0     003b  
    4003 000115f0     b3c8          move    a14,*a8(OYVEL),L
         00011600     0120  
    4004 00011610     0960          rets
    4005                    
    4006 00011620           a_cpypf ;move   @killtrails,a0,W
    4007                            ;janz   DELETE_OBJ
    4008 00011620     07a7          move    @PUCK_OBJECT,a7,L
         00011630 00000000- 
    4009                            ;
    4010 00011650     b6ee  cvelxp  move    *a7(OXVEL),a14,L
         00011660     0100  
    4011 00011670     0d3f          callr   axvf
         00011680     002a  
    4012 00011690     4dc0          MOVE    A14,A0
    4013 000116a0     0380          ABS     A0
    4014 000116b0     0b60          CMPI    [1,0],A0
         000116c0 fffeffff  
    4015 000116e0     c50a          JRGE    CPYPF_XVEL                              ;BR=X VELOCITY ENOUGH
    4016                    ;       MOVE    A14,A14
    4017                    ;       JRNZ    CPYPF_XVEL                              ;BR=NON-ZERO X VELOCITY
    4018 000116f0     09e0          MOVI    [1,0],A0
         00011700 00010000  
    4019 00011720     09e1          MOVI    [-1,0],A1
         00011730 ffff0000  
    4020 00011750     0d5f          CALLA   RANGRAND
         00011760 00000000! 
    4021 00011780     4c0e          MOVE    A0,A14                                  ;ADD RANDOM X VELOCITY
    4022 00011790           CPYPF_XVEL
    4023                    
    4024 00011790     b3c8          move    a14,*a8(OXVEL),L
         000117a0     0100  
    4025 000117b0     b6ee          move    *a7(OZVEL),a14,L
         000117c0     00e0  
    4026 000117d0     0d3f          callr   axvf
         000117e0     0014  
    4027 000117f0     0bee          subi    [0,4000h],a14
         00011800     bfff  
    4028 00011810     b3c8          move    a14,*a8(OZVEL),L
         00011820     00e0  
    4029 00011830     b6ee          move    *a7(OYVEL),a14,L
         00011840     0120  
    4030 00011850     0d3f          callr   axvf
         00011860     000c  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   93

    4031                    
    4032 00011870     09e0          MOVI    0F000H,A0
         00011880 0000f000  
    4033 000118a0     05a1          MOVE    @BIG_PUCK,A1,W
         000118b0 00000000! 
    4034 000118d0     ca01          JRZ     CPYPF_YVEL                              ;BR=NORMAL PUCK
    4035 000118e0     2420          SLL     1,A0                                    ;BIG PUCK
    4036 000118f0           CPYPF_YVEL
    4037 000118f0     440e          SUB     A0,A14
    4038                    
    4039                    ;       subi    [0,0f000h],a14
    4040 00011900     b3c8          move    a14,*a8(OYVEL),L
         00011910     0120  
    4041 00011920     0960          rets
    4042                    
    4043 00011930     4dc0  axvf    move    a14,a0
    4044 00011940     2bee          sra     1,a14           ;1/2
    4045 00011950     2bc0          sra     2,a0            ;
    4046 00011960     400e          add     a0,a14          ;+ 1/4 =  3/4
    4047 00011970     2bc0          sra     2,a0
    4048 00011980     400e          add     a0,a14          ;+ 1/16= 13/16
    4049 00011990     0960          rets
    4050                    
    4051 000119a0     4dc0  axv     move    a14,a0
    4052 000119b0     2bee          sra     1,a14           ;1/2
    4053 000119c0     2bc0          sra     2,a0            ;
    4054 000119d0     400e          add     a0,a14          ;+ 1/4 =  3/4
    4055 000119e0     2be0          sra     1,a0
    4056 000119f0     400e          add     a0,a14          ;+ 1/8 =  7/8
    4057 00011a00     2ba0          sra     3,a0
    4058 00011a10     400e          add     a0,a14          ;+ 1/64= 57/64
    4059 00011a20     0960          rets
    4060                    
    4061 00011a30           set_flat_puck_script
    4062 00011a30     5621          clr     a1
    4063 00011a40     0581          move    a1,@PUCK_MODE_2_DIR,W           ;enable any direction
         00011a50 000000e0- 
    4064 00011a70     09e1          movi    anim_flat_puck,a1
         00011a80 000121b0' 
    4065 00011aa0     c080          jauc    start_anim_if_not
         00011ab0 00000000! 
    4066 00011ad0           set_roll_puck_script
    4067 00011ad0     09e1          movi    anim_roll_puck,a1
         00011ae0 00012210' 
    4068 00011b00     c080          jauc    start_anim_if_not
         00011b10 00000000! 
    4069 00011b30           set_flop_puck_script
    4070 00011b30     05a0          move    @PUCK_MODE_2_DIR,a0,W
         00011b40 000000e0- 
    4071 00011b60     cb07          jrnz    sfps1
    4072 00011b70     1840          movk    2,a0
    4073 00011b80     0d5f          calla   RANDU
         00011b90 00000000! 
    4074 00011bb0     0580          move    a0,@PUCK_MODE_2_DIR,W
         00011bc0 000000e0- 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   94

    4075 00011be0     09e1  sfps1   movi    anim_flop_puck_c,a1
         00011bf0 00012270' 
    4076 00011c10     09e3          movi    anim_flopl_puck_c,a3
         00011c20 00012430' 
    4077 00011c40     0b40          cmpi    1,a0
         00011c50     fffe  
    4078 00011c60     ca06          jrz     sfps2
    4079 00011c70     09e1          movi    anim_flop_puck_cc,a1
         00011c80 000137f0' 
    4080 00011ca0     09e3          movi    anim_flopl_puck_cc,a3
         00011cb0 000139b0' 
    4081 00011cd0     05ae  sfps2   move    @PUCK_M2_TIME,a14,W
         00011ce0 000000f0- 
    4082 00011d00     0b4e          cmpi    40,a14
         00011d10     ffd7  
    4083 00011d20     c201          jrls    sfps3
    4084 00011d30     4c61          move    a3,a1
    4085 00011d40     c080  sfps3   jauc    start_anim_if_not
         00011d50 00000000! 
    4086                    
    4087 00011d70 00012270'         .long   anim_flop_puck_c
    4088 00011d90           big_puck_scr_list
    4089 00011d90 00012270'         .long   anim_flop_puck_c
    4090 00011db0 00012430'         .long   anim_flopl_puck_c
    4091 00011dd0 00012590'         .long   anim_flip_puck_c1
    4092 00011df0 00012770'         .long   anim_flip_puck_fc1
    4093 00011e10 00012950'         .long   anim_flip_puck_c2
    4094 00011e30 00012b30'         .long   anim_flip_puck_fc2
    4095 00011e50 00012d10'         .long   anim_flip_puck_c3
    4096 00011e70 00012ef0'         .long   anim_flip_puck_fc3
    4097 00011e90 000130d0'         .long   anim_flip_puck_c4
    4098 00011eb0 000132b0'         .long   anim_flip_puck_fc4
    4099 00011ed0 00013490'         .long   anim_flip_puck_c5
    4100 00011ef0 00013640'         .long   anim_flip_puck_fc5
    4101                    
    4102 00011f10 000137f0'         .long   anim_flop_puck_cc
    4103 00011f30 000139b0'         .long   anim_flopl_puck_cc
    4104 00011f50 00013b10'         .long   anim_flip_puck_cc1
    4105 00011f70 00013cf0'         .long   anim_flip_puck_fcc1
    4106 00011f90 00013ed0'         .long   anim_flip_puck_cc2
    4107 00011fb0 000140b0'         .long   anim_flip_puck_fcc2
    4108 00011fd0 00014290'         .long   anim_flip_puck_cc3
    4109 00011ff0 00014470'         .long   anim_flip_puck_fcc3
    4110 00012010 00014650'         .long   anim_flip_puck_cc4
    4111 00012030 00014830'         .long   anim_flip_puck_fcc4
    4112 00012050 00014a10'         .long   anim_flip_puck_cc5
    4113 00012070 00014bc0'         .long   anim_flip_puck_fcc5
    4114                    
    4115 00012090 00014bc0'         .long   anim_flip_puck_fcc5
    4116 000120b0 00014bc0'         .long   anim_flip_puck_fcc5
    4117 000120d0 00014bc0'         .long   anim_flip_puck_fcc5
    4118                    
    4119                    
    4120 000120f0 00014bc0'         .long   anim_flip_puck_fcc5
    4121 00012110 00014bc0'         .long   anim_flip_puck_fcc5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   95

    4122 00012130 00014bc0'         .long   anim_flip_puck_fcc5
    4123 00012150 00014bc0'         .long   anim_flip_puck_fcc5
    4124 00012170 00014bc0'         .long   anim_flip_puck_fcc5
    4125 00012190 00014bc0'         .long   anim_flip_puck_fcc5
    4126                    
    4127 000121b0           anim_flat_puck
    4128 000121b0                   LWW     PUCK2,120|AFLIP,0
    4129 000121f0 00000000          .long   0
    4130                    
    4131 00012210           anim_roll_puck
    4132 00012210                   LWW     PUCK2,25|AFLIP,0
    4133 00012250 00000000          .long   0
    4134                    
    4135 00012270           anim_flop_puck_c
    4136 00012270                   LWW     puck103,3|AFLIP,0
    4137 000122b0                   LW      puck207,3
    4138 000122e0                   LW      puck206,3
    4139 00012310                   LW      puck204,3
    4140 00012340                   LW      puck107,3
    4141 00012370                   LWW     puck204,3|AFLIP,M_FLIPH
    4142 000123b0                   LW      puck206,3
    4143 000123e0                   LW      puck207,3
    4144 00012410 00000000          .long   0
    4145                    
    4146 00012430           anim_flopl_puck_c
    4147 00012430                   LWW     puck601,3|AFLIP,0
    4148 00012470                   LW      puck602,3
    4149 000124a0                   LW      puck603,3
    4150 000124d0                   LW      puck604,3
    4151 00012500                   LWW     puck603,3|AFLIP,M_FLIPH
    4152 00012540                   LW      puck602,3
    4153 00012570 00000000          .long   0
    4154                    
    4155 00012590           anim_flip_puck_c1
    4156 00012590                   LWW     puck101,2|AFLIP,0
    4157 000125d0                   LW      puck102,1
    4158 00012600                   LW      puck103,2
    4159 00012630                   LW      puck104,1
    4160 00012660                   LW      puck105,2
    4161 00012690                   LW      puck106,1
    4162 000126c0                   LW      puck107,2
    4163 000126f0                   LW      puck108,1
    4164 00012720                   LW      puck109,2
    4165 00012750 00000000          .long   0
    4166                    
    4167 00012770           anim_flip_puck_fc1
    4168 00012770                   LWW     puck101,2|AFLIP,M_FLIPH
    4169 000127b0                   LW      puck102,1
    4170 000127e0                   LW      puck103,2
    4171 00012810                   LW      puck104,1
    4172 00012840                   LW      puck105,2
    4173 00012870                   LW      puck106,1
    4174 000128a0                   LW      puck107,2
    4175 000128d0                   LW      puck108,1
    4176 00012900                   LW      puck109,2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   96

    4177 00012930 00000000          .long   0
    4178                    
    4179 00012950           anim_flip_puck_c2
    4180 00012950                   LWW     puck201,2|AFLIP,0
    4181 00012990                   LW      puck202,1
    4182 000129c0                   LW      puck203,2
    4183 000129f0                   LW      puck204,1
    4184 00012a20                   LW      puck205,2
    4185 00012a50                   LW      puck206,1
    4186 00012a80                   LW      puck207,2
    4187 00012ab0                   LW      puck208,1
    4188 00012ae0                   LW      puck209,2
    4189 00012b10 00000000          .long   0
    4190                    
    4191 00012b30           anim_flip_puck_fc2
    4192 00012b30                   LWW     puck201,2|AFLIP,M_FLIPH
    4193 00012b70                   LW      puck202,1
    4194 00012ba0                   LW      puck203,2
    4195 00012bd0                   LW      puck204,1
    4196 00012c00                   LW      puck205,2
    4197 00012c30                   LW      puck206,1
    4198 00012c60                   LW      puck207,2
    4199 00012c90                   LW      puck208,1
    4200 00012cc0                   LW      puck209,2
    4201 00012cf0 00000000          .long   0
    4202                    
    4203 00012d10           anim_flip_puck_c3
    4204 00012d10                   LWW     puck301,2|AFLIP,0
    4205 00012d50                   LW      puck302,1
    4206 00012d80                   LW      puck303,2
    4207 00012db0                   LW      puck304,1
    4208 00012de0                   LW      puck305,2
    4209 00012e10                   LW      puck306,1
    4210 00012e40                   LW      puck307,2
    4211 00012e70                   LW      puck308,1
    4212 00012ea0                   LW      puck309,2
    4213 00012ed0 00000000          .long   0
    4214                    
    4215 00012ef0           anim_flip_puck_fc3
    4216 00012ef0                   LWW     puck301,2|AFLIP,M_FLIPH
    4217 00012f30                   LW      puck302,1
    4218 00012f60                   LW      puck303,2
    4219 00012f90                   LW      puck304,1
    4220 00012fc0                   LW      puck305,2
    4221 00012ff0                   LW      puck306,1
    4222 00013020                   LW      puck307,2
    4223 00013050                   LW      puck308,1
    4224 00013080                   LW      puck309,2
    4225 000130b0 00000000          .long   0
    4226                    
    4227 000130d0           anim_flip_puck_c4
    4228 000130d0                   LWW     puck401,2|AFLIP,0
    4229 00013110                   LW      puck402,1
    4230 00013140                   LW      puck403,2
    4231 00013170                   LW      puck404,1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   97

    4232 000131a0                   LW      puck405,2
    4233 000131d0                   LW      puck406,1
    4234 00013200                   LW      puck407,2
    4235 00013230                   LW      puck408,1
    4236 00013260                   LW      puck409,2
    4237 00013290 00000000          .long   0
    4238                    
    4239 000132b0           anim_flip_puck_fc4
    4240 000132b0                   LWW     puck401,2|AFLIP,M_FLIPH
    4241 000132f0                   LW      puck402,1
    4242 00013320                   LW      puck403,2
    4243 00013350                   LW      puck404,1
    4244 00013380                   LW      puck405,2
    4245 000133b0                   LW      puck406,1
    4246 000133e0                   LW      puck407,2
    4247 00013410                   LW      puck408,1
    4248 00013440                   LW      puck409,2
    4249 00013470 00000000          .long   0
    4250                    
    4251 00013490           anim_flip_puck_c5
    4252 00013490                   LWW     puck501,2|AFLIP,0
    4253 000134d0                   LW      puck502,1
    4254 00013500                   LW      puck503,2
    4255 00013530                   LW      puck504,1
    4256 00013560                   LW      puck505,2
    4257 00013590                   LW      puck506,1
    4258 000135c0                   LW      puck507,2
    4259 000135f0                   LW      puck508,1
    4260 00013620 00000000          .long   0
    4261                    
    4262 00013640           anim_flip_puck_fc5
    4263 00013640                   LWW     puck501,2|AFLIP,M_FLIPH
    4264 00013680                   LW      puck502,1
    4265 000136b0                   LW      puck503,2
    4266 000136e0                   LW      puck504,1
    4267 00013710                   LW      puck505,2
    4268 00013740                   LW      puck506,1
    4269 00013770                   LW      puck507,2
    4270 000137a0                   LW      puck508,1
    4271 000137d0 00000000          .long   0
    4272                    
    4273 000137f0           anim_flop_puck_cc
    4274 000137f0                   LWW     puck207,2|AFLIP,M_FLIPH
    4275 00013830                   LW      puck206,1
    4276 00013860                   LW      puck204,2
    4277 00013890                   LWW     puck107,1|AFLIP,0
    4278 000138d0                   LW      puck204,2
    4279 00013900                   LW      puck206,1
    4280 00013930                   LW      puck207,2
    4281 00013960                   LW      puck103,1
    4282 00013990 00000000          .long   0
    4283                    
    4284 000139b0           anim_flopl_puck_cc
    4285 000139b0                   LWW     puck602,3|AFLIP,M_FLIPH
    4286 000139f0                   LW      puck603,3
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   98

    4287 00013a20                   LWW     puck604,3|AFLIP,0
    4288 00013a60                   LW      puck603,3
    4289 00013a90                   LW      puck602,3
    4290 00013ac0                   LW      puck601,3
    4291 00013af0 00000000          .long   0
    4292                    
    4293 00013b10           anim_flip_puck_cc1
    4294 00013b10                   LWW     puck109,2|AFLIP,0
    4295 00013b50                   LW      puck108,1
    4296 00013b80                   LW      puck107,2
    4297 00013bb0                   LW      puck106,1
    4298 00013be0                   LW      puck105,2
    4299 00013c10                   LW      puck104,1
    4300 00013c40                   LW      puck103,2
    4301 00013c70                   LW      puck102,1
    4302 00013ca0                   LW      puck101,2
    4303 00013cd0 00000000          .long   0
    4304                    
    4305 00013cf0           anim_flip_puck_fcc1
    4306 00013cf0                   LWW     puck109,2|AFLIP,M_FLIPH
    4307 00013d30                   LW      puck108,1
    4308 00013d60                   LW      puck107,2
    4309 00013d90                   LW      puck106,1
    4310 00013dc0                   LW      puck105,2
    4311 00013df0                   LW      puck104,1
    4312 00013e20                   LW      puck103,2
    4313 00013e50                   LW      puck102,1
    4314 00013e80                   LW      puck101,2
    4315 00013eb0 00000000          .long   0
    4316                    
    4317 00013ed0           anim_flip_puck_cc2
    4318 00013ed0                   LWW     puck209,2|AFLIP,0
    4319 00013f10                   LW      puck208,1
    4320 00013f40                   LW      puck207,2
    4321 00013f70                   LW      puck206,1
    4322 00013fa0                   LW      puck205,2
    4323 00013fd0                   LW      puck204,1
    4324 00014000                   LW      puck203,2
    4325 00014030                   LW      puck202,1
    4326 00014060                   LW      puck201,2
    4327 00014090 00000000          .long   0
    4328                    
    4329 000140b0           anim_flip_puck_fcc2
    4330 000140b0                   LWW     puck209,2|AFLIP,M_FLIPH
    4331 000140f0                   LW      puck208,1
    4332 00014120                   LW      puck207,2
    4333 00014150                   LW      puck206,1
    4334 00014180                   LW      puck205,2
    4335 000141b0                   LW      puck204,1
    4336 000141e0                   LW      puck203,2
    4337 00014210                   LW      puck202,1
    4338 00014240                   LW      puck201,2
    4339 00014270 00000000          .long   0
    4340                    
    4341 00014290           anim_flip_puck_cc3
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   99

    4342 00014290                   LWW     puck309,2|AFLIP,0
    4343 000142d0                   LW      puck308,1
    4344 00014300                   LW      puck307,2
    4345 00014330                   LW      puck306,1
    4346 00014360                   LW      puck305,2
    4347 00014390                   LW      puck304,1
    4348 000143c0                   LW      puck303,2
    4349 000143f0                   LW      puck302,1
    4350 00014420                   LW      puck301,2
    4351 00014450 00000000          .long   0
    4352                    
    4353 00014470           anim_flip_puck_fcc3
    4354 00014470                   LWW     puck309,2|AFLIP,M_FLIPH
    4355 000144b0                   LW      puck308,1
    4356 000144e0                   LW      puck307,2
    4357 00014510                   LW      puck306,1
    4358 00014540                   LW      puck305,2
    4359 00014570                   LW      puck304,1
    4360 000145a0                   LW      puck303,2
    4361 000145d0                   LW      puck302,1
    4362 00014600                   LW      puck301,2
    4363 00014630 00000000          .long   0
    4364                    
    4365 00014650           anim_flip_puck_cc4
    4366 00014650                   LWW     puck409,2|AFLIP,0
    4367 00014690                   LW      puck408,1
    4368 000146c0                   LW      puck407,2
    4369 000146f0                   LW      puck406,1
    4370 00014720                   LW      puck405,2
    4371 00014750                   LW      puck404,1
    4372 00014780                   LW      puck403,2
    4373 000147b0                   LW      puck402,1
    4374 000147e0                   LW      puck401,2
    4375 00014810 00000000          .long   0
    4376                    
    4377 00014830           anim_flip_puck_fcc4
    4378 00014830                   LWW     puck409,2|AFLIP,M_FLIPH
    4379 00014870                   LW      puck408,1
    4380 000148a0                   LW      puck407,2
    4381 000148d0                   LW      puck406,1
    4382 00014900                   LW      puck405,2
    4383 00014930                   LW      puck404,1
    4384 00014960                   LW      puck403,2
    4385 00014990                   LW      puck402,1
    4386 000149c0                   LW      puck401,2
    4387 000149f0 00000000          .long   0
    4388                    
    4389 00014a10           anim_flip_puck_cc5
    4390 00014a10                   LWW     puck508,2|AFLIP,0
    4391 00014a50                   LW      puck507,1
    4392 00014a80                   LW      puck506,2
    4393 00014ab0                   LW      puck505,1
    4394 00014ae0                   LW      puck504,2
    4395 00014b10                   LW      puck503,1
    4396 00014b40                   LW      puck502,2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  100

    4397 00014b70                   LW      puck501,1
    4398 00014ba0 00000000          .long   0
    4399                    
    4400 00014bc0           anim_flip_puck_fcc5
    4401 00014bc0                   LWW     puck508,2|AFLIP,M_FLIPH
    4402 00014c00                   LW      puck507,1
    4403 00014c30                   LW      puck506,2
    4404 00014c60                   LW      puck505,1
    4405 00014c90                   LW      puck504,2
    4406 00014cc0                   LW      puck503,1
    4407 00014cf0                   LW      puck502,2
    4408 00014d20                   LW      puck501,1
    4409 00014d50 00000000          .long   0
    4410                    
    4411 00014d70           set_puck_shadow
    4412 00014d70     b700          move    *a8(OYVAL),a0,L
         00014d80     0160  
    4413 00014d90     ce13          jrn     puck_shadow_on
    4414 00014da0           puck_shadow_off
    4415 00014da0     07a0          move    @PUCK_SHADOW,a0,L
         00014db0 00000020- 
    4416 00014dd0     09ee          movi    DMAGO,a14
         00014de0 00008000  
    4417 00014e00     b1c0          move    a14,*a0(OCTRL),W
         00014e10     01f0  
    4418 00014e20     57ce          clr     a14
    4419 00014e30     b3c0          move    a14,*a0(OXVEL),L
         00014e40     0100  
    4420 00014e50     b3c0          move    a14,*a0(OZVEL),L
         00014e60     00e0  
    4421 00014e70     57ce          clr     a14
    4422 00014e80     b1c0          move    a14,*a0(OYACCEL),W
         00014e90     02f0  
    4423 00014ea0     b3c0          move    a14,*a0(OYVEL),L
         00014eb0     0120  
    4424 00014ec0     0960          rets
    4425 00014ed0           puck_shadow_on
    4426 00014ed0     07a0          move    @PUCK_SHADOW,a0,L
         00014ee0 00000020- 
    4427 00014f00     09ee          movi    DMAWNZ+01000h,a14
         00014f10 00009002  
    4428 00014f30     b1c0          move    a14,*a0(OCTRL),W
         00014f40     01f0  
    4429 00014f50     bb00          move    *a8(OXVAL),*a0(OXVAL),L
         00014f60     0140  
         00014f70     0140  
    4430 00014f80     b70e          move    *a8(OZVAL),a14,L
         00014f90     0180  
    4431 00014fa0     102e          inc     a14
    4432 00014fb0     b3c0          move    a14,*a0(OZVAL),L
         00014fc0     0180  
    4433 00014fd0     bb00          move    *a8(OXVEL),*a0(OXVEL),L
         00014fe0     0100  
         00014ff0     0100  
    4434 00015000     bb00          move    *a8(OZVEL),*a0(OZVEL),L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  101

         00015010     00e0  
         00015020     00e0  
    4435 00015030     57ce          clr     a14
    4436 00015040     b1c0          move    a14,*a0(OYACCEL),W
         00015050     02f0  
    4437 00015060     b3c0          move    a14,*a0(OYVEL),L
         00015070     0120  
    4438 00015080     b3c0          move    a14,*a0(OYVAL),L
         00015090     0160  
    4439 000150a0     0960          rets
    4440                    
    4441                    **************************************************************************
    4442                    *                                                                        *
    4443                    * r_stick_and_bounce                                                     *
    4444                    *       input   a8 = puck object                                         *
    4445                    *               a2 = angle to bounce off                                 *
    4446                    *               a0 = z:x of puck                                         *
    4447                    *                                                                        *
    4448                    **************************************************************************
    4449 000150b0           r_stick_or_nostick_bounce
    4450 000150b0     b70e          move    *a8(ODT_DIR),a14,L
         000150c0     04b0  
    4451 000150d0     444e          sub     a2,a14
    4452 000150e0     038e          abs     a14
    4453 000150f0                   THETA_N a14
    4454 000151d0     0b6e          cmpi    XD0800,a14
         000151e0 ffafffff  
    4455 00015200     c204          jrls    r_stick_and_bounce
    4456 00015210     0b6e          cmpi    (XD3600-XD0800),a14
         00015220 fee7ffff  
    4457 00015240     c80d          jrlo    r_nostick_and_bounce
    4458 00015250           r_stick_and_bounce
    4459 00015250     b701          move    *a8(ODT_DIR),a1,L
         00015260     04b0  
    4460 00015270     0d5f          calla   compute_bounce_angle
         00015280 0000e560' 
    4461 000152a0     c907          jrnc    r_nostick_and_bounce
    4462 000152b0     b50e          move    *a8(OFLAGS),a14,W       ;
         000152c0     0420  
    4463 000152d0     0bae          ori     M_FVELADD,a14           ; makes puck stick one veladd
         000152e0 00000004  
    4464 00015300     b1c8          move    a14,*a8(OFLAGS),W       ;
         00015310     0420  
    4465 00015320           r_nostick_and_bounce
    4466 00015320     b008          move    a0,*a8(OXPOS),W
         00015330     0150  
    4467 00015340     2a00          sra     16,a0
    4468 00015350     b008          move    a0,*a8(OZPOS),W
         00015360     0190  
    4469 00015370     c000          jruc    bounce_puck
         00015380     f7fb  
    4470                    
    4471 00015390           r_no_coll
    4472 00015390     5600          clr     a0
    4473 000153a0     0780          move    a0,@last_corner_vel,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  102

         000153b0 00000000! 
    4474 000153d0     0580          move    a0,@outlaw_puck2,W
         000153e0 00000110- 
    4475 00015400     0580          move    a0,@goal_pass,W         ;record no goal
         00015410 000001c0- 
    4476 00015430     0580          move    a0,@goal_pcount1,W
         00015440 000001d0- 
    4477 00015460     0580          move    a0,@goal_pcount2,W
         00015470 000001e0- 
    4478 00015490     0960          rets
    4479                    
    4480 000154a0           r_horizontal_wall
    4481 000154a0     b701          move    *a8(OXVAL),a1,L
         000154b0     0140  
    4482 000154c0     0b21          addi    [0,08000h],a1
         000154d0 00008000  
    4483 000154f0     2a01          sra     16,a1
    4484                    ;       move    *a8(OXPOS),a1,W         ;half
    4485 00015500     b500          move    *a8(OZPOS),a0,W
         00015510     0190  
    4486 00015520     0b40          cmpi    677,a0
         00015530     fd5a  
    4487 00015540     c608          jrle    rhw_b
    4488 00015550     09e0          movi    [677,0],a0
         00015560 02a50000  
    4489 00015580     ec20          movx    a1,a0
    4490 00015590     09e2          movi    XD2700,a2
         000155a0 010e0000  
    4491 000155c0     c0ae          jruc    r_stick_or_nostick_bounce
    4492 000155d0     0b40  rhw_b   cmpi    2,a0
         000155e0     fffd  
    4493 000155f0     c508          jrge    rhw_9
    4494 00015600     09e0          movi    [2,0],a0
         00015610 00020000  
    4495 00015630     ec20          movx    a1,a0
    4496 00015640     09e2          movi    XD0900,a2
         00015650 005a0000  
    4497 00015670     c0a3          jruc    r_stick_or_nostick_bounce
    4498 00015680     0960  rhw_9   rets
    4499                    
    4500 00015690 00b40000  pcr_tab .long   XD1800
    4501 000156b0 00000000          .long   0
    4502 000156d0 010e0000          .long   XD2700
    4503 000156f0 005a0000          .long   XD0900
    4504                    
    4505 00015710 00000000  pco_tab .long   0
    4506 00015730 00b40000          .long   XD1800
    4507 00015750 005a0000          .long   XD0900
    4508 00015770 010e0000          .long   XD2700
    4509                    
    4510                    **************************************************************************
    4511                    *                                                                        *
    4512                    * r_lgoal_check                                                          *
    4513                    * r_rgoal_check these routines check our point and our anticipated       *
    4514                    *             point for intersection with goal                           *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  103

    4515                    *                                                                        *
    4516                    **************************************************************************
    4517 00015790           r_lgoal_check
    4518 00015790     0d3f          callr   get_in_out
         000157a0     0278  
    4519 000157b0     24a4          sll     5,a4
    4520 000157c0     0b24          addi    rlj_tab,a4
         000157d0 00015810' 
    4521 000157f0     8684          move    *a4,a4,L
    4522 00015800     0164          jump    a4
    4523 00015810 00015e80' rlj_tab .long   l_safety_outside
    4524 00015830 00015f30'         .long   l_bounce_inside
    4525 00015850 000167d0'         .long   l_bounce_outside
    4526 00015870 00015990'         .long   l_safety_inside
    4527                    
    4528 00015890           r_rgoal_check
    4529 00015890     0d3f          callr   get_in_out
         000158a0     0268  
    4530 000158b0     24a4          sll     5,a4
    4531 000158c0     0b24          addi    rrj_tab,a4
         000158d0 00015910' 
    4532 000158f0     8684          move    *a4,a4,L
    4533 00015900     0164          jump    a4
    4534 00015910 00015e80' rrj_tab .long   r_safety_outside
    4535 00015930 00016370'         .long   r_bounce_inside
    4536 00015950 00016e00'         .long   r_bounce_outside
    4537 00015970 00015b80'         .long   r_safety_inside
    4538                    
    4539 00015990           l_safety_inside
    4540 00015990     0d3f          callr   goal_score_check_left
         000159a0     0237  
    4541                            ;extra step here that kinda negates all we know to be right
    4542 000159b0     05ae          move    @goal_pcount1,a14,W
         000159c0 000001d0- 
    4543 000159e0     102e          inc     a14
    4544 000159f0     058e          move    a14,@goal_pcount1,W
         00015a00 000001d0- 
    4545 00015a20     0b4e          cmpi    4,a14
         00015a30     fffb  
    4546 00015a40     cb31          jrnz    lrsi1
    4547                    
    4548 00015a50     05ae          move    @PUCK_MODE,a14,W
         00015a60 000000c0- 
    4549 00015a80     0b4e          cmpi    PUM_SCORE,a14
         00015a90     ff9c  
    4550 00015aa0     c90c          jrhs    lsi_o1
    4551 00015ab0     05ae          move    @GAME_STATE,a14,W
         00015ac0 00000000! 
    4552 00015ae0     0b4e          cmpi    INAMODE,a14
         00015af0     ffcf  
    4553 00015b00     ca03          jrz     lsi_o2
    4554 00015b10     0b4e          cmpi    INPLAY,a14
         00015b20     ffdf  
    4555 00015b30     cb03          jrnz    lsi_o1
    4556 00015b40           lsi_o2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  104

    4557                            .if     BILL & 0
    4558                            .else
    4559 00015b40     0d5f          calla   score_right_team                ;safety, in case we miss
         00015b50 00000000! 
    4560                            .endif
    4561 00015b70     c01e  lsi_o1  jruc    lrsi1
    4562 00015b80           r_safety_inside
    4563 00015b80     0d3f          callr   goal_score_check_right
         00015b90     021e  
    4564                            ;extra step here that kinda negates all we know to be right
    4565 00015ba0     05ae          move    @goal_pcount2,a14,W
         00015bb0 000001e0- 
    4566 00015bd0     102e          inc     a14
    4567 00015be0     058e          move    a14,@goal_pcount2,W
         00015bf0 000001e0- 
    4568 00015c10     0b4e          cmpi    4,a14
         00015c20     fffb  
    4569 00015c30     cb12          jrnz    lrsi1
    4570                    
    4571 00015c40     05ae          move    @PUCK_MODE,a14,W
         00015c50 000000c0- 
    4572 00015c70     0b4e          cmpi    PUM_SCORE,a14
         00015c80     ff9c  
    4573 00015c90     c90c          jrhs    rsi_o1
    4574 00015ca0     05ae          move    @GAME_STATE,a14,W
         00015cb0 00000000! 
    4575 00015cd0     0b4e          cmpi    INAMODE,a14
         00015ce0     ffcf  
    4576 00015cf0     ca03          jrz     rsi_o2
    4577 00015d00     0b4e          cmpi    INPLAY,a14
         00015d10     ffdf  
    4578 00015d20     cb03          jrnz    rsi_o1
    4579 00015d30           rsi_o2
    4580                            .if     BILL & 0
    4581                            .else
    4582 00015d30     0d5f          calla   score_left_team         ;safety, in case we miss
         00015d40 00000000! 
    4583                            .endif
    4584 00015d60           rsi_o1
    4585                    
    4586 00015d60     182e  lrsi1   movk    1,a14           ;only 1 needed for check (sign not used)
    4587 00015d70     058e          move    a14,@outlaw_puck2,W
         00015d80 00000110- 
    4588 00015da0     b500          move    *a8(OYPOS),a0,W
         00015db0     0170  
    4589 00015dc0     0380          abs     a0
    4590 00015dd0     0b40          cmpi    48,a0
         00015de0     ffcf  
    4591 00015df0     c207          jrls    rsi_9
    4592 00015e00     b700          move    *a8(OYVEL),a0,L
         00015e10     0120  
    4593 00015e20     c104          jrp     rsi_9
    4594 00015e30     2bc0          sra     2,a0
    4595 00015e40     0380          abs     a0
    4596 00015e50     b208          move    a0,*a8(OYVEL),L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  105

         00015e60     0120  
    4597 00015e70     0960  rsi_9   rets
    4598                    
    4599 00015e80           l_safety_outside                        ;puck is outside goal, do a safety check.
    4600 00015e80           r_safety_outside                        ;puck is outside goal, do a safety check.
    4601 00015e80     57ce          clr     a14
    4602 00015e90     058e          move    a14,@goal_pass,W
         00015ea0 000001c0- 
    4603 00015ec0     058e          move    a14,@goal_pcount1,W
         00015ed0 000001d0- 
    4604 00015ef0     058e          move    a14,@goal_pcount2,W
         00015f00 000001e0- 
    4605 00015f20     0960          rets
    4606                    
    4607 00015f30           l_bounce_inside
    4608 00015f30     0d3f          callr   goal_score_check_left
         00015f40     01dd  
    4609 00015f50     5663          clr     a3
    4610 00015f60     ee23          movy    a1,a3           ;a3 = point 2 z
    4611 00015f70     ec22          movx    a1,a2
    4612 00015f80     2602          sll     16,a2           ;a2 = point 2 x
    4613 00015f90     0b62          cmpi    [-730,0],a2
         00015fa0 02d9ffff  
    4614 00015fc0     c809          jrlo    lbi_clw                 ;check intersection on left wall
    4615 00015fd0     0b62          cmpi    [-688,0],a2
         00015fe0 02afffff  
    4616 00016000     c314          jrhi    lbi_crw                 ;check intersection on right wall
    4617 00016010     0b63          cmpi    [339,0],a3
         00016020 feacffff  
    4618 00016040     c321          jrhi    lbi_ct                  ;check top curve
    4619 00016050     c024          jruc    lbi_cb                  ;check bottom curve
    4620 00016060     09c2  lbi_clw movi    -730,a2
         00016070     fd26  
    4621 00016080     0d3f          callr   get_z_from_x_midpoint
         00016090     023d  
    4622 000160a0     0b62          cmpi    [376,0],a2
         000160b0 fe87ffff  
    4623 000160d0     c318          jrhi    lbi_ct          ;intersection is on top curve
    4624 000160e0     0b62          cmpi    [303,0],a2
         000160f0 fed0ffff  
    4625 00016110     c818          jrlo    lbi_cb          ;intersection is on bottom curve
    4626 00016120     5642          clr     a2
    4627 00016130     c000          jruc    lgoal_bounce_wall_inside
         00016140     0186  
    4628 00016150     09c2  lbi_crw movi    -688,a2
         00016160     fd50  
    4629 00016170     0d3f          callr   get_z_from_x_midpoint
         00016180     022e  
    4630 00016190     0b62          cmpi    [392,0],a2
         000161a0 fe77ffff  
    4631 000161c0     c309          jrhi    lbi_ct          ;intersection is on top curve
    4632 000161d0     0b62          cmpi    [287,0],a2
         000161e0 fee0ffff  
    4633 00016200     c809          jrlo    lbi_cb          ;intersection is on bottom curve
    4634 00016210     57ce          clr     a14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  106

    4635 00016220     058e          move    a14,@outlaw_puck2,W
         00016230 00000110- 
    4636 00016250     0960          rets                    ;puck is exiting at opening, ok
    4637 00016260     09e7  lbi_ct  movi    [376,0],a7
         00016270 01780000  
    4638 00016290     c003          jruc    lbicbt
    4639 000162a0     09e7  lbi_cb  movi    [303,0],a7
         000162b0 012f0000  
    4640 000162d0     ec22  lbicbt  movx    a1,a2           ;we use point 2, we might want point 1
    4641 000162e0     2602          sll     16,a2
    4642 000162f0     5663          clr     a3
    4643 00016300     ee23          movy    a1,a3
    4644 00016310     09e0          movi    [-706,0],a0
         00016320 fd3e0000  
    4645 00016340     4ce1          move    a7,a1
    4646 00016350     c000          jruc    lgoal_bounce_corner_end_inside
         00016360     013c  
    4647                    
    4648 00016370           r_bounce_inside
    4649 00016370     0d3f          callr   goal_score_check_right
         00016380     019f  
    4650 00016390     5663          clr     a3
    4651 000163a0     ee23          movy    a1,a3           ;a3 = point 2 z
    4652 000163b0     ec22          movx    a1,a2
    4653 000163c0     2602          sll     16,a2           ;a2 = point 2 x
    4654 000163d0     0b62          cmpi    [730,0],a2
         000163e0 fd25ffff  
    4655 00016400     c309          jrhi    rbi_crw                 ;check intersection on left wall
    4656 00016410     0b62          cmpi    [688,0],a2
         00016420 fd4fffff  
    4657 00016440     c816          jrlo    rbi_clw                 ;check intersection on right wall
    4658 00016450     0b63          cmpi    [339,0],a3
         00016460 feacffff  
    4659 00016480     c323          jrhi    rbi_ct                  ;check top curve
    4660 00016490     c026          jruc    rbi_cb                  ;check bottom curve
    4661 000164a0     09c2  rbi_crw movi    730,a2
         000164b0     02da  
    4662 000164c0     0d3f          callr   get_z_from_x_midpoint
         000164d0     01f9  
    4663 000164e0     0b62          cmpi    [376,0],a2
         000164f0 fe87ffff  
    4664 00016510     c31a          jrhi    rbi_ct          ;intersection is on top curve
    4665 00016520     0b62          cmpi    [303,0],a2
         00016530 fed0ffff  
    4666 00016550     c81a          jrlo    rbi_cb          ;intersection is on bottom curve
    4667 00016560     09e2          movi    XD1800,a2
         00016570 00b40000  
    4668 00016590     c000          jruc    rgoal_bounce_wall_inside
         000165a0     0143  
    4669 000165b0     09c2  rbi_clw movi    688,a2
         000165c0     02b0  
    4670 000165d0     0d3f          callr   get_z_from_x_midpoint
         000165e0     01e8  
    4671 000165f0     0b62          cmpi    [392,0],a2
         00016600 fe77ffff  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  107

    4672 00016620     c309          jrhi    rbi_ct          ;intersection is on top curve
    4673 00016630     0b62          cmpi    [287,0],a2
         00016640 fee0ffff  
    4674 00016660     c809          jrlo    rbi_cb          ;intersection is on bottom curve
    4675 00016670     57ce          clr     a14
    4676 00016680     058e          move    a14,@outlaw_puck2,W
         00016690 00000110- 
    4677 000166b0     0960          rets                    ;puck is exiting at opening, ok
    4678 000166c0     09e7  rbi_ct  movi    [376,0],a7
         000166d0 01780000  
    4679 000166f0     c003          jruc    rbicbt
    4680 00016700     09e7  rbi_cb  movi    [303,0],a7
         00016710 012f0000  
    4681 00016730     ec22  rbicbt  movx    a1,a2           ;we use point 2, we might want point 1
    4682 00016740     2602          sll     16,a2
    4683 00016750     5663          clr     a3
    4684 00016760     ee23          movy    a1,a3
    4685 00016770     09e0          movi    [706,0],a0
         00016780 02c20000  
    4686 000167a0     4ce1          move    a7,a1
    4687 000167b0     c000          jruc    rgoal_bounce_corner_end_inside
         000167c0     00ff  
    4688                    
    4689 000167d0           l_bounce_outside
    4690 000167d0     0d5f          calla   puck_goal_sound1                ;save vels for sound check later
         000167e0 00000000! 
    4691 00016800     57ce          clr     a14
    4692 00016810     058e          move    a14,@goal_pass,W
         00016820 000001c0- 
    4693 00016840     058e          move    a14,@goal_pcount1,W
         00016850 000001d0- 
    4694 00016870     058e          move    a14,@goal_pcount2,W
         00016880 000001e0- 
    4695 000168a0     5663          clr     a3
    4696 000168b0     ee03          movy    a0,a3           ;a3 = point 1 z
    4697 000168c0     ec02          movx    a0,a2
    4698 000168d0     2602          sll     16,a2           ;a2 = point 1 x
    4699 000168e0     0b62          cmpi    [-730,0],a2
         000168f0 02d9ffff  
    4700 00016910     c809          jrlo    lbo_clw                 ;check intersection on left wall
    4701 00016920     0b62          cmpi    [-688,0],a2
         00016930 02afffff  
    4702 00016950     c316          jrhi    lbo_crw                 ;check intersection on right wall
    4703 00016960     0b63          cmpi    [339,0],a3
         00016970 feacffff  
    4704 00016990     c33b          jrhi    lbo_ct                  ;check top curve
    4705 000169a0     c03e          jruc    lbo_cb                  ;check bottom curve
    4706 000169b0     09c2  lbo_clw movi    -730,a2
         000169c0     fd26  
    4707 000169d0     0d3f          callr   get_z_from_x_midpoint
         000169e0     01a8  
    4708 000169f0     0b62          cmpi    [376,0],a2
         00016a00 fe87ffff  
    4709 00016a20     c332          jrhi    lbo_ct          ;intersection is on top curve
    4710 00016a30     0b62          cmpi    [303,0],a2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  108

         00016a40 fed0ffff  
    4711 00016a60     c832          jrlo    lbo_cb          ;intersection is on bottom curve
    4712 00016a70     09e2          movi    XD1800,a2
         00016a80 00b40000  
    4713 00016aa0     c000          jruc    goal_bounce_wall_outside
         00016ab0     00f5  
    4714 00016ac0     09c2  lbo_crw movi    -688,a2
         00016ad0     fd50  
    4715 00016ae0     0d3f          callr   get_z_from_x_midpoint
         00016af0     0197  
    4716 00016b00     0b62          cmpi    [392,0],a2
         00016b10 fe77ffff  
    4717 00016b30     c321          jrhi    lbo_ct          ;intersection is on top curve
    4718 00016b40     0b62          cmpi    [287,0],a2
         00016b50 fee0ffff  
    4719 00016b70     c821          jrlo    lbo_cb          ;intersection is on bottom curve
    4720 00016b80     05a0          move    @PUCK_CONTROL,a0,W
         00016b90 00000040- 
    4721 00016bb0     ca0a          jrz     lb4_9i
    4722 00016bc0                   GBLOCK  a0,a14
    4723 00016c10     b5ce          move    *a14(POF_MODE),a14,W
         00016c20     0210  
    4724 00016c30     0b4e          cmpi    PM_ONETIME,a14
         00016c40     fff2  
    4725 00016c50     cb0e          jrnz    lbo_999
    4726 00016c60     05ae  lb4_9i  move    @GAME_STATE,a14,W
         00016c70 00000000! 
    4727 00016c90     0b4e          cmpi    INAMODE,a14
         00016ca0     ffcf  
    4728 00016cb0     ca03          jrz     kom1
    4729 00016cc0     0b4e          cmpi    INPLAY,a14
         00016cd0     ffdf  
    4730 00016ce0     cb05          jrnz    lbo_999
    4731 00016cf0     182e  kom1    movk    1,a14
    4732 00016d00     03ae          neg     a14
    4733 00016d10     058e          move    a14,@goal_pass,W        ;puck going through opening, score
         00016d20 000001c0- 
    4734 00016d40     0960  lbo_999 rets                    ;no goal, period over
    4735 00016d50     09e3  lbo_ct  movi    [376,0],a3
         00016d60 01780000  
    4736 00016d80     c003          jruc    lbocbt
    4737 00016d90     09e3  lbo_cb  movi    [303,0],a3
         00016da0 012f0000  
    4738 00016dc0     09e2  lbocbt  movi    [-706,0],a2
         00016dd0 fd3e0000  
    4739 00016df0     c05f          jruc    rbo_secure_bounce
    4740                    
    4741 00016e00           r_bounce_outside
    4742 00016e00     0d5f          calla   puck_goal_sound1                ;save vels for sound check later
         00016e10 00000000! 
    4743 00016e30     57ce          clr     a14
    4744 00016e40     058e          move    a14,@goal_pass,W
         00016e50 000001c0- 
    4745 00016e70     058e          move    a14,@goal_pcount1,W
         00016e80 000001d0- 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  109

    4746 00016ea0     058e          move    a14,@goal_pcount2,W
         00016eb0 000001e0- 
    4747 00016ed0     5663          clr     a3
    4748 00016ee0     ee03          movy    a0,a3           ;a3 = point 1 z
    4749 00016ef0     ec02          movx    a0,a2
    4750 00016f00     2602          sll     16,a2           ;a2 = point 1 x
    4751 00016f10     0b62          cmpi    [730,0],a2
         00016f20 fd25ffff  
    4752 00016f40     c309          jrhi    rbo_crw                 ;check intersection on left wall
    4753 00016f50     0b62          cmpi    [688,0],a2
         00016f60 fd4fffff  
    4754 00016f80     c814          jrlo    rbo_clw                 ;check intersection on right wall
    4755 00016f90     0b63          cmpi    [339,0],a3
         00016fa0 feacffff  
    4756 00016fc0     c338          jrhi    rbo_ct                  ;check top curve
    4757 00016fd0     c03b          jruc    rbo_cb                  ;check bottom curve
    4758 00016fe0     09c2  rbo_crw movi    730,a2
         00016ff0     02da  
    4759 00017000     0d3f          callr   get_z_from_x_midpoint
         00017010     0145  
    4760 00017020     0b62          cmpi    [376,0],a2
         00017030 fe87ffff  
    4761 00017050     c32f          jrhi    rbo_ct          ;intersection is on top curve
    4762 00017060     0b62          cmpi    [303,0],a2
         00017070 fed0ffff  
    4763 00017090     c82f          jrlo    rbo_cb          ;intersection is on bottom curve
    4764 000170a0     5642          clr     a2
    4765 000170b0     c000          jruc    goal_bounce_wall_outside
         000170c0     0094  
    4766 000170d0     09c2  rbo_clw movi    688,a2
         000170e0     02b0  
    4767 000170f0     0d3f          callr   get_z_from_x_midpoint
         00017100     0136  
    4768 00017110     0b62          cmpi    [392,0],a2
         00017120 fe77ffff  
    4769 00017140     c320          jrhi    rbo_ct          ;intersection is on top curve
    4770 00017150     0b62          cmpi    [287,0],a2
         00017160 fee0ffff  
    4771 00017180     c820          jrlo    rbo_cb          ;intersection is on bottom curve
    4772 00017190     05a0          move    @PUCK_CONTROL,a0,W
         000171a0 00000040- 
    4773 000171c0     ca0a          jrz     rb4_9i
    4774 000171d0                   GBLOCK  a0,a14
    4775 00017220     b5ce          move    *a14(POF_MODE),a14,W
         00017230     0210  
    4776 00017240     0b4e          cmpi    PM_ONETIME,a14
         00017250     fff2  
    4777 00017260     cb0d          jrnz    rbo_999
    4778 00017270     05ae  rb4_9i  move    @GAME_STATE,a14,W
         00017280 00000000! 
    4779 000172a0     0b4e          cmpi    INAMODE,a14
         000172b0     ffcf  
    4780 000172c0     ca03          jrz     kom2
    4781 000172d0     0b4e          cmpi    INPLAY,a14
         000172e0     ffdf  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  110

    4782 000172f0     cb04          jrnz    rbo_999
    4783 00017300     182e  kom2    movk    1,a14
    4784 00017310     058e          move    a14,@goal_pass,W        ;puck going through opening, score
         00017320 000001c0- 
    4785 00017340     0960  rbo_999 rets                    ;no goal, period over
    4786 00017350     09e3  rbo_ct  movi    [376,0],a3
         00017360 01780000  
    4787 00017380     c003          jruc    rbocbt
    4788 00017390     09e3  rbo_cb  movi    [303,0],a3
         000173a0 012f0000  
    4789 000173c0     09e2  rbocbt  movi    [706,0],a2
         000173d0 02c20000  
    4790                    
    4791 000173f0           rbo_secure_bounce
    4792 000173f0     098f          mmtm    sp,a0
         00017400     8000  
    4793 00017410     5621          clr     a1
    4794 00017420     ee01          movy    a0,a1
    4795 00017430     2600          sll     16,a0
    4796 00017440     0d3f          callr   goal_bounce_corner_end_outside
         00017450     000d  
    4797 00017460     09af          mmfm    sp,a1
         00017470     0002  
    4798 00017480     c809          jrc     lboc9
    4799 00017490     ec20          movx    a1,a0
    4800 000174a0     2600          sll     16,a0
    4801 000174b0     2e01          srl     16,a1
    4802 000174c0     2601          sll     16,a1
    4803 000174d0     0d3f          callr   goal_bounce_corner_end_outside
         000174e0     0004  
    4804 000174f0     c802          jrc     lboc9
    4805                    ;here we have failed a bounce we should make, put the puck outside the net and try again next collision
    4806 00017500     c000          jruc    put_puck_outside_net
         00017510     02b1  
    4807 00017520     0960  lboc9   rets
    4808                    
    4809 00017530           goal_bounce_corner_end_outside
    4810 00017530     b50e          move    *a8(OYPOS),a14,W
         00017540     0170  
    4811 00017550     ce06          jrn     gbce0
    4812 00017560     0d5f          calla   find_dir_to_point
         00017570 00000000! 
    4813 00017590     4c02          move    a0,a2
    4814 000175a0     c000          jruc    gbounce_puck_corner
         000175b0     f5b1  
    4815 000175c0     0d5f  gbce0   calla   find_dir_to_point
         000175d0 00000000! 
    4816 000175f0     4c02          move    a0,a2
    4817 00017600     0d3f          callr   gbounce_puck_corner
         00017610     f5ab  
    4818 00017620     c90f          jrnc    gbce3
    4819 00017630     b701  gbce2   move    *a8(ODT_VEL),a1,L
         00017640     04d0  
    4820 00017650     0b61          cmpi    [2,0000h],a1
         00017660 fffdffff  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  111

    4821 00017680     c208          jrls    gbce1
    4822 00017690     09e1          movi    [2,0000h],a1
         000176a0 00020000  
    4823 000176c0     b700          move    *a8(ODT_DIR),a0,L
         000176d0     04b0  
    4824 000176e0     0d5f          calla   set_obj_to_polar
         000176f0 00000000! 
    4825 00017710     0de0  gbce1   setc
    4826 00017720     0960  gbce3   rets
    4827                    
    4828 00017730           lgoal_bounce_corner_end_inside
    4829 00017730     0d3f          callr   lrgt1
         00017740     0023  
    4830 00017750     0d3f          callr   safe_to_score
         00017760     000e  
    4831 00017770     c903          jrnc    lb87
    4832 00017780     0d5f          calla   score_right_team
         00017790 00000000! 
    4833 000177b0     0960  lb87    rets
    4834 000177c0           rgoal_bounce_corner_end_inside
    4835 000177c0     0d3f          callr   lrgt1
         000177d0     001a  
    4836 000177e0     0d3f          callr   safe_to_score
         000177f0     0005  
    4837 00017800     c903          jrnc    rb87
    4838 00017810     0d5f          calla   score_left_team
         00017820 00000000! 
    4839 00017840     0960  rb87    rets
    4840                    
    4841 00017850           safe_to_score           ;a safety check on previous 'no goals' (a kludge)
    4842 00017850     05ae          move    @PUCK_MODE,a14,W
         00017860 000000c0- 
    4843 00017880     0b4e          cmpi    PUM_SCORE,a14
         00017890     ff9c  
    4844 000178a0     c90b          jrhs    sats99
    4845 000178b0     05ae          move    @GAME_STATE,a14,W
         000178c0 00000000! 
    4846 000178e0     0b4e          cmpi    INAMODE,a14
         000178f0     ffcf  
    4847 00017900     ca03          jrz     sats1
    4848 00017910     0b4e          cmpi    INPLAY,a14,W
         00017920     ffdf  
    4849 00017930     cb02          jrnz    sats99
    4850 00017940     0de0  sats1   setc
    4851 00017950     0960          rets
    4852 00017960     0320  sats99  clrc
    4853 00017970     0960          rets
    4854                    
    4855 00017980     0d3f  lrgt1   callr   gbce0
         00017990     ffc2  
    4856 000179a0     c005          jruc    secure_puck_inside_goal
    4857 000179b0           lgoal_bounce_wall_inside
    4858 000179b0     0d3f          callr   lgbi1
         000179c0     0009  
    4859 000179d0     c002          jruc    secure_puck_inside_goal
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  112

    4860 000179e0           rgoal_bounce_wall_inside
    4861 000179e0     0d3f          callr   rgbi1
         000179f0     0019  
    4862 00017a00           secure_puck_inside_goal
    4863 00017a00     0960          rets
    4864                    
    4865 00017a10           goal_bounce_wall_outside
    4866 00017a10     b50e          move    *a8(OYPOS),a14,W
         00017a20     0170  
    4867 00017a30     ce2b          jrn     gbw0
    4868 00017a40     c000          jruc    gbounce_puck
         00017a50     f569  
    4869 00017a60     05ae  lgbi1   move    @PUCK_MODE,a14,W
         00017a70 000000c0- 
    4870 00017a90     0b4e          cmpi    PUM_SCORE,a14
         00017aa0     ff9c  
    4871 00017ab0     c91f          jrhs    gbw1
    4872 00017ac0     05ae          move    @GAME_STATE,a14,W
         00017ad0 00000000! 
    4873 00017af0     0b4e          cmpi    INAMODE,a14
         00017b00     ffcf  
    4874 00017b10     ca03          jrz     kom3
    4875 00017b20     0b4e          cmpi    INPLAY,a14
         00017b30     ffdf  
    4876 00017b40     cb16          jrnz    gbw1
    4877 00017b50           kom3
    4878                            .if     BILL & 0
    4879                            .else
    4880 00017b50     0d5f          calla   score_right_team        ;safety, in case we miss
         00017b60 00000000! 
    4881                            .endif
    4882 00017b80     c012          jruc    gbw1
    4883 00017b90     05ae  rgbi1   move    @PUCK_MODE,a14,W
         00017ba0 000000c0- 
    4884 00017bc0     0b4e          cmpi    PUM_SCORE,a14
         00017bd0     ff9c  
    4885 00017be0     c90c          jrhs    gbw1
    4886 00017bf0     05ae          move    @GAME_STATE,a14,W
         00017c00 00000000! 
    4887 00017c20     0b4e          cmpi    INAMODE,a14
         00017c30     ffcf  
    4888 00017c40     ca03          jrz     kom4
    4889 00017c50     0b4e          cmpi    INPLAY,a14
         00017c60     ffdf  
    4890 00017c70     cb03          jrnz    gbw1
    4891 00017c80           kom4
    4892                            .if     BILL & 0
    4893                            .else
    4894 00017c80     0d5f          calla   score_left_team         ;safety, in case we miss
         00017c90 00000000! 
    4895                            .endif
    4896 00017cb0     182e  gbw1    movk    1,a14           ;only 1 needed for check (sign not used)
    4897 00017cc0     058e          move    a14,@outlaw_puck2,W
         00017cd0 00000110- 
    4898 00017cf0     0d3f  gbw0    callr   gbounce_puck
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  113

         00017d00     f53e  
    4899 00017d10     c091          jruc    gbce2
    4900                    
    4901 00017d20           goal_score_check_left
    4902 00017d20     0d3f          callr   gsc1
         00017d30     000a  
    4903 00017d40     c91d          jrnc    gscl9
    4904                            .if     BILL & 0
    4905                            JRUC    gscl9
    4906                            .else
    4907 00017d50     c080          jauc    score_right_team
         00017d60 00000000! 
    4908                            .endif
    4909 00017d80           goal_score_check_right
    4910 00017d80     0d3f          callr   gsc1
         00017d90     0004  
    4911 00017da0     c917          jrnc    gscl9
    4912                            .if     BILL & 0
    4913                            JRUC    gscl9
    4914                            .else
    4915 00017db0     c080          jauc    score_left_team
         00017dc0 00000000! 
    4916                            .endif
    4917 00017de0     05ae  gsc1    move    @PUCK_CONTROL,a14,W
         00017df0 00000040- 
    4918 00017e10     ca09          jrz     gscac
    4919 00017e20                   GBLOCK  a14,a14
    4920 00017e60     b5ce          move    *a14(POF_MODE),a14,W
         00017e70     0210  
    4921 00017e80     0b4e          cmpi    PM_ONETIME,a14
         00017e90     fff2  
    4922 00017ea0     cb06          jrnz    gscab
    4923 00017eb0     05ae  gscac   move    @goal_pass,a14,W
         00017ec0 000001c0- 
    4924 00017ee0     ca02          jrz     gscab
    4925 00017ef0     0de0          setc
    4926 00017f00     0960          rets
    4927 00017f10     0320  gscab   clrc
    4928 00017f20     0960  gscl9   rets
    4929                    
    4930                    **************************************************************************
    4931                    *                                                                        *
    4932                    * get_in_out                                                             *
    4933                    *       input  a8 = object                                               *
    4934                    *       output a0 = zx of point 1                                        *
    4935                    *              a1 = zx of point 2                                        *
    4936                    *              a4 = 00 - is outside, will be outside                     *
    4937                    *                   01 - is inside, will be outside                      *
    4938                    *                   10 - is outside, will be inside                      *
    4939                    *                   11 - is inside, will be inside                       *
    4940                    *                                                                        *
    4941                    **************************************************************************
    4942 00017f30           get_in_out
    4943 00017f30     5684          CLR     A4
    4944 00017f40     b702          move    *a8(OYVAL),a2,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  114

         00017f50     0160  
    4945 00017f60     0b62          CMPI    -02D0000H,A2
         00017f70 002cffff  
    4946 00017f90     c43b          JRLT    gio5
    4947                    ;       move    *a8(OYVAL),a2,L
    4948                    ;       move    *a8(OYVEL),a14,L
    4949                    ;       ADD     A14,A2
    4950                    ;       CMPI    -02D0000H,A2
    4951                    ;       JRGT
    4952                    
    4953 00017fa0     b702          move    *a8(OXVAL),a2,L
         00017fb0     0140  
    4954 00017fc0     0b22          addi    [0,08000h],a2
         00017fd0 00008000  
    4955 00017ff0     2a02          sra     16,a2
    4956                    ;       move    *a8(OXPOS),a2,W         ;half
    4957 00018000     b50e          move    *a8(OZPOS),a14,W
         00018010     0190  
    4958 00018020     260e          sll     16,a14
    4959 00018030     efc2          movy    a14,a2
    4960 00018040     4c40          move    a2,a0
    4961                    ;       clr     a4
    4962 00018050     0d3f          callr   are_we_inside_goal
         00018060     0073  
    4963 00018070     c911          jrnc    gio2
    4964 00018080     b703          move    *a8(OXVAL),a3,L
         00018090     0140  
    4965 000180a0     0b23          addi    [0,08000h],a3
         000180b0 00008000  
    4966 000180d0     2a03          sra     16,a3
    4967                    ;       move    *a8(OXPOS),a3,W         ;half
    4968 000180e0     ce05          jrn     gioll
    4969 000180f0     05a3          move    @outlaw_puck,a3,W
         00018100 00000100- 
    4970 00018120     c123          jrp     gio_o1                  ;return 10, outlaw goal
    4971 00018130     c004          jruc    gio3
    4972 00018140     05a3  gioll   move    @outlaw_puck,a3,W
         00018150 00000100- 
    4973 00018170     ce1e          jrn     gio_o1                  ;return 10, outlaw goal
    4974 00018180     1824  gio3    movk    1,a4
    4975 00018190     b702  gio2    move    *a8(OXVAL),a2,L
         000181a0     0140  
    4976 000181b0     b70e          move    *a8(OXVEL),a14,L
         000181c0     0100  
    4977 000181d0     41c2          add     a14,a2
    4978 000181e0     b703          move    *a8(OZVAL),a3,L
         000181f0     0180  
    4979 00018200     b70e          move    *a8(OZVEL),a14,L
         00018210     00e0  
    4980 00018220     406e          add     a3,a14
    4981 00018230     0b22          addi    [0,08000h],a2           ;half
         00018240 00008000  
    4982 00018260     2e02          srl     16,a2
    4983 00018270     efc2          movy    a14,a2
    4984 00018280     4c41          move    a2,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  115

    4985 00018290     0d3f          callr   are_we_inside_goal
         000182a0     004f  
    4986 000182b0     c902          jrnc    gio4
    4987 000182c0     1044          addk    2,a4
    4988 000182d0     0960          rets
    4989 000182e0     4c84  gio4    move    a4,a4
    4990 000182f0     cb05          jrnz    gio5
    4991 00018300     05a3          move    @outlaw_puck2,a3,W
         00018310 00000110- 
    4992 00018330     ca01          jrz     gio5
    4993 00018340     1824          movk    01b,a4  ;make bounce inside on outlaw2
    4994 00018350     0960  gio5    rets
    4995 00018360     1844  gio_o1  movk    10b,a4
    4996 00018370     b701          move    *a8(OXVAL),a1,L
         00018380     0140  
    4997 00018390     b70e          move    *a8(OXVEL),a14,L
         000183a0     0100  
    4998 000183b0     41c1          add     a14,a1
    4999 000183c0     0b21          addi    [0,08000h],a1           ;half
         000183d0 00008000  
    5000 000183f0     b703          move    *a8(OZVAL),a3,L
         00018400     0180  
    5001 00018410     b70e          move    *a8(OZVEL),a14,L
         00018420     00e0  
    5002 00018430     406e          add     a3,a14
    5003 00018440     2e01          srl     16,a1
    5004 00018450     efc1          movy    a14,a1
    5005 00018460     0960          rets
    5006                    
    5007                    **************************************************************************
    5008                    *                                                                        *
    5009                    * get_z_from_x_midpoint                                                  *
    5010                    *       input   a0 = z:x of first point                                  *
    5011                    *               a1 = z:x of second point                                 *
    5012                    *               a2 = x between a0 and a1                                 *
    5013                    *       output  a2 = z:x of line intersecting a0-a1 and x = a2           *
    5014                    *                                                                        *
    5015                    **************************************************************************
    5016 00018470           get_z_from_x_midpoint
    5017 00018470     098f          mmtm    sp,a0,a1,a3,a4
         00018480     d800  
    5018 00018490     4c03          move    a0,a3
    5019 000184a0     4c4e          move    a2,a14
    5020 000184b0     4c24          move    a1,a4
    5021 000184c0     2603          sll     16,a3
    5022 000184d0     2604          sll     16,a4
    5023 000184e0     2602          sll     16,a2
    5024 000184f0     4464          sub     a3,a4   ;pt2 - pt 1
    5025 00018500     4462          sub     a3,a2   ;xn - pt 1
    5026 00018510     2a02          sra     16,a2
    5027 00018520     5663          clr     a3
    5028 00018530     5882          divs    a4,a2   ;a2 = (x - pt1) / (pt2 - pt1)
    5029 00018540     2e00          srl     16,a0
    5030 00018550     2600          sll     16,a0
    5031 00018560     2e01          srl     16,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  116

    5032 00018570     2601          sll     16,a1
    5033 00018580     4401          sub     a0,a1
    5034 00018590     5c22          mpys    a1,a2
    5035 000185a0     2602          sll     16,a2
    5036 000185b0     4002          add     a0,a2
    5037 000185c0     edc2          movx    a14,a2
    5038 000185d0     09af          mmfm    sp,a0,a1,a3,a4
         000185e0     001b  
    5039 000185f0     0960          rets
    5040                    
    5041                    **************************************************************************
    5042                    *                                                                        *
    5043                    * get_x_from_z_midpoint                                                  *
    5044                    *       input   a0 = z:x of first point                                  *
    5045                    *               a1 = z:x of second point                                 *
    5046                    *               a2 = x between a0 and a1                                 *
    5047                    *       output  a2 = z:x of line intersecting a0-a1 and x = a2           *
    5048                    *                                                                        *
    5049                    **************************************************************************
    5050 00018600           get_x_from_z_midpoint
    5051 00018600     098f          mmtm    sp,a0,a1,a3,a4
         00018610     d800  
    5052 00018620     4c03          move    a0,a3
    5053 00018630     4c24          move    a1,a4
    5054 00018640     2e03          srl     16,a3
    5055 00018650     2603          sll     16,a3
    5056 00018660     2e04          srl     16,a4
    5057 00018670     2604          sll     16,a4
    5058 00018680     2602          sll     16,a2
    5059 00018690     4c4e          move    a2,a14
    5060 000186a0     4464          sub     a3,a4   ;pt2 - pt 1
    5061 000186b0     4462          sub     a3,a2   ;zn - pt 1
    5062 000186c0     2a02          sra     16,a2
    5063 000186d0     5663          clr     a3
    5064 000186e0     5882          divs    a4,a2   ;a2 = (x - pt1) / (pt2 - pt1)
    5065 000186f0     2600          sll     16,a0
    5066 00018700     2601          sll     16,a1
    5067 00018710     4401          sub     a0,a1
    5068 00018720     5c22          mpys    a1,a2
    5069 00018730     2602          sll     16,a2
    5070 00018740     4002          add     a0,a2
    5071 00018750     2e02          srl     16,a2
    5072 00018760     efc2          movy    a14,a2
    5073 00018770     09af          mmfm    sp,a0,a1,a3,a4
         00018780     001b  
    5074 00018790     0960          rets
    5075                    
    5076 000187a0           are_we_inside_goal      ;a2 = z:x pos
    5077 000187a0     098f          mmtm    sp,a0,a1,a2,a3,a4
         000187b0     f800  
    5078 000187c0     5663          clr     a3
    5079 000187d0     ee43          movy    a2,a3
    5080 000187e0     0383          abs     a3
    5081 000187f0     2602          sll     16,a2
    5082                    ;       move    a2,a2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  117

    5083                    ;       jrp     awig_nx
    5084 00018800     0382          abs     a2              ;a2 = x, a3 = z
    5085                    ;       inc     a2              ;shift 1 to right for truncation error  ;half?
    5086 00018810     0b62  awig_nx cmpi    [730,0],a2
         00018820 fd25ffff  
    5087 00018840     c324          jrhi    awig_outside
    5088 00018850     0b62          cmpi    [688,0],a2
         00018860 fd4fffff  
    5089 00018880     c820          jrlo    awig_outside
    5090 00018890     0b63          cmpi    [400,0],a3
         000188a0 fe6fffff  
    5091 000188c0     c31c          jrhi    awig_outside
    5092 000188d0     0b63          cmpi    [279,0],a3
         000188e0 fee8ffff  
    5093 00018900     c818          jrlo    awig_outside
    5094 00018910     0b63          cmpi    [376,0],a3
         00018920 fe87ffff  
    5095 00018940     c308          jrhi    awg_tt          ;test top
    5096 00018950     0b63          cmpi    [303,0],a3
         00018960 fed0ffff  
    5097 00018980     c914          jrhs    awig_inside
    5098 00018990     09e1  awg_tb  movi    [303,0],a1
         000189a0 012f0000  
    5099 000189c0     c003          jruc    awg_ttb
    5100 000189d0     09e1  awg_tt  movi    [376,0],a1
         000189e0 01780000  
    5101 00018a00     09e0  awg_ttb movi    [706,0],a0
         00018a10 02c20000  
    5102 00018a30     0d5f          calla   find_dsquared_to_point_whole
         00018a40 00000000! 
    5103 00018a60     0b44          cmpi    576,a4          ;24 * 24
         00018a70     fdbf  
    5104 00018a80     c204          jrls    awig_inside
    5105 00018a90           awig_outside
    5106 00018a90     0320          clrc
    5107 00018aa0     09af          mmfm    sp,a0,a1,a2,a3,a4
         00018ab0     001f  
    5108 00018ac0     0960          rets
    5109 00018ad0           awig_inside
    5110 00018ad0     0de0          setc
    5111 00018ae0     09af          mmfm    sp,a0,a1,a2,a3,a4
         00018af0     001f  
    5112 00018b00     0960          rets
    5113                    
    5114 00018b10           r_vertical_wall
    5115 00018b10     b501          move    *a8(OZPOS),a1,W
         00018b20     0190  
    5116 00018b30     2601          sll     16,a1
    5117 00018b40     b700          move    *a8(OXVAL),a0,L
         00018b50     0140  
    5118 00018b60     0b20          addi    [0,08000h],a0
         00018b70 00008000  
    5119 00018b90     2a00          sra     16,a0
    5120                    ;       move    *a8(OXPOS),a0,W         ;half
    5121 00018ba0     ce0b          jrn     rvwl
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  118

    5122 00018bb0     0b40          cmpi    796,a0
         00018bc0     fce3  
    5123 00018bd0     c611          jrle    rvw_x
    5124 00018be0     09c0          movi    796,a0
         00018bf0     031c  
    5125 00018c00     ee20          movy    a1,a0
    5126 00018c10     09e2          movi    XD1800,a2
         00018c20 00b40000  
    5127 00018c40     c000          jruc    r_stick_or_nostick_bounce
         00018c50     fc45  
    5128 00018c60     0b40  rvwl    cmpi    -796,a0
         00018c70     031b  
    5129 00018c80     c506          jrge    rvw_x
    5130 00018c90     09c0          movi    -796,a0
         00018ca0     fce4  
    5131 00018cb0     ee20          movy    a1,a0
    5132 00018cc0     5642          clr     a2
    5133 00018cd0     c000          jruc    r_stick_or_nostick_bounce
         00018ce0     fc3c  
    5134 00018cf0     0960  rvw_x   rets
    5135                    
    5136 00018d00           r_corner_check
    5137 00018d00     09e4          movi    [1,0],a4
         00018d10 00010000  
    5138 00018d30     b700          move    *a8(OXVAL),a0,L
         00018d40     0140  
    5139 00018d50     0b20          addi    [0,08000h],a0
         00018d60 00008000  
    5140 00018d80     2a00          sra     16,a0
    5141                    ;       move    *a8(OXPOS),a0,W         ;half
    5142 00018d90     ce1b          jrn     rcc_l
    5143 00018da0     b500          move    *a8(OZPOS),a0,W
         00018db0     0190  
    5144 00018dc0     0b40          cmpi    340,a0
         00018dd0     feab  
    5145 00018de0     c70b          jrgt    rcc_ur
    5146 00018df0     b702  rcc_lr  move    *a8(OXVAL),a2,L
         00018e00     0140  
    5147 00018e10     b703          move    *a8(OZVAL),a3,L
         00018e20     0180  
    5148 00018e30     09e0          movi    [798-radius,0],a0
         00018e40 02a60000  
    5149 00018e60     09e1          movi    [radius,0],a1
         00018e70 00780000  
    5150 00018e90     c025          jruc    rcc_fc
    5151 00018ea0     b702  rcc_ur  move    *a8(OXVAL),a2,L
         00018eb0     0140  
    5152 00018ec0     b703          move    *a8(OZVAL),a3,L
         00018ed0     0180  
    5153 00018ee0     09e0          movi    [798-radius,0],a0
         00018ef0 02a60000  
    5154 00018f10     09e1          movi    [679-radius,0],a1
         00018f20 022f0000  
    5155 00018f40     c01a          jruc    rcc_fc
    5156 00018f50     b500  rcc_l   move    *a8(OZPOS),a0,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  119

         00018f60     0190  
    5157 00018f70     0b40          cmpi    340,a0
         00018f80     feab  
    5158 00018f90     c70b          jrgt    rcc_ul
    5159 00018fa0     b702  rcc_ll  move    *a8(OXVAL),a2,L
         00018fb0     0140  
    5160 00018fc0     b703          move    *a8(OZVAL),a3,L
         00018fd0     0180  
    5161 00018fe0     09e0          movi    [-798+radius,0],a0
         00018ff0 fd5a0000  
    5162 00019010     09e1          movi    [radius,0],a1
         00019020 00780000  
    5163 00019040     c00a          jruc    rcc_fc
    5164 00019050     b702  rcc_ul  move    *a8(OXVAL),a2,L
         00019060     0140  
    5165 00019070     b703          move    *a8(OZVAL),a3,L
         00019080     0180  
    5166 00019090     09e0          movi    [-798+radius,0],a0
         000190a0 fd5a0000  
    5167 000190c0     09e1          movi    [679-radius,0],a1
         000190d0 022f0000  
    5168 000190f0     4c04  rcc_fc  move    a0,a4
    5169 00019100     4c25          move    a1,a5
    5170 00019110     0d5f          calla   find_dsquared_to_point_whole_a1
         00019120 00000000! 
    5171 00019140     0b41          cmpi    (radius-4)*(radius-4),a1                ;is it closer than radius-4
         00019150     cb6f  
    5172 00019160     c813          jrlo    rcc_nfd
    5173 00019170     4ca1          move    a5,a1
    5174 00019180     0d5f          calla   find_dir_to_point
         00019190 00000000! 
    5175 000191b0     09e1          movi    [radius-4,0],a1
         000191c0 00740000  
    5176 000191e0     4c02          move    a0,a2
    5177 000191f0     0d5f          calla   polar_to_rect
         00019200 00000000! 
    5178 00019220     4404          sub     a0,a4
    5179 00019230     4425          sub     a1,a5
    5180 00019240     b288          move    a4,*a8(OXVAL),L
         00019250     0140  
    5181 00019260     b2a8          move    a5,*a8(OZVAL),L
         00019270     0180  
    5182 00019280     c000          jruc    bounce_puck_corner
         00019290     f408  
    5183 000192a0     0960  rcc_nfd rets
    5184                    
    5185                    **************************************************************************
    5186                    *                                                                        *
    5187                    * rink_check_table                                                       *
    5188                    *       table in format .long   bottom_left,upper_right,routine          *
    5189                    *                                                                        *
    5190                    **************************************************************************
    5191 000192b0           rink_check_table
    5192 000192b0 00d7fcd7          .long   [245-30,-784-25],[430+30,-635+20],r_lgoal_check
    5193 00019310 00d70267          .long   [245-30,635-20],[430+30,784+25],r_rgoal_check
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  120

    5194 00019370 000afd5a          .long   [10,-798+radius],[669,798-radius],r_no_coll
    5195 000193d0 e0c0fd5a          .long   [-8000,-798+radius],[8000,798-radius],r_horizontal_wall
    5196 00019430 0048fd56          .long   [72,-682],[608,682],r_no_coll
    5197 00019490 0078fcec          .long   [radius,-788],[679-radius,788],r_no_coll
    5198 000194f0 0078dcd8          .long   [radius,-9000],[679-radius,9000],r_vertical_wall
    5199 00019550 e0c0dcd8          .long   [-8000,-9000],[8000,9000],r_corner_check
    5200 000195b0 00000000          .long   0,0,0                                   ;end of table
    5201                    
    5202 00019610           put_point_in_rink_rot_23
    5203 00019610     098f          mmtm    sp,a0,a1
         00019620     c000  
    5204 00019630     4c60          move    a3,a0
    5205 00019640     4c41          move    a2,a1
    5206 00019650     0d3f          callr   put_point_in_rink
         00019660     0019  
    5207 00019670     4c03          move    a0,a3
    5208 00019680     4c22          move    a1,a2
    5209 00019690     09af          mmfm    sp,a0,a1
         000196a0     0003  
    5210 000196b0     0960          rets
    5211 000196c0           put_point_in_rink_23
    5212 000196c0     098f          mmtm    sp,a0,a1
         000196d0     c000  
    5213 000196e0     4c40          move    a2,a0
    5214 000196f0     4c61          move    a3,a1
    5215 00019700     0d3f          callr   put_point_in_rink
         00019710     000e  
    5216 00019720     4c02          move    a0,a2
    5217 00019730     4c23          move    a1,a3
    5218 00019740     09af          mmfm    sp,a0,a1
         00019750     0003  
    5219 00019760     0960          rets
    5220                    
    5221 00019770           put_point_in_rink_rot           ;rotate 90 degrees
    5222 00019770                   SWAP    a0,a1
    5223 000197a0     0d3f          callr   put_point_in_rink
         000197b0     0004  
    5224 000197c0                   SWAP    a0,a1
    5225 000197f0     0960          rets
    5226                    
    5227 00019800           put_point_in_rink
    5228 00019800     0b60          cmpi    [-798+radius,0],a0
         00019810 02a5ffff  
    5229 00019830     c413          jrlt    pplft
    5230 00019840     0b60          cmpi    [798-radius,0],a0
         00019850 fd59ffff  
    5231 00019870     c71f          jrgt    pprgt
    5232 00019880     0b61          cmpi    [5,0],a1
         00019890 fffaffff  
    5233 000198b0     c503          jrge    ppir1
    5234 000198c0     09e1          movi    [5,0],a1
         000198d0 00050000  
    5235 000198f0     0b61  ppir1   cmpi    [674,0],a1
         00019900 fd5dffff  
    5236 00019920     c603          jrle    ppir2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  121

    5237 00019930     09e1          movi    [674,0],a1
         00019940 02a20000  
    5238 00019960     0960  ppir2   rets
    5239 00019970     0b61  pplft   cmpi    [radius,0],a1
         00019980 ff87ffff  
    5240 000199a0     c61c          jrle    ppll
    5241 000199b0     0b61          cmpi    [679-radius,0],a1
         000199c0 fdd0ffff  
    5242 000199e0     c51f          jrge    ppul
    5243 000199f0     0b60          cmpi    [-793,0],a0
         00019a00 0318ffff  
    5244 00019a20     c503          jrge    ppir3
    5245 00019a30     09e0          movi    [-793,0],a0
         00019a40 fce70000  
    5246 00019a60     0960  ppir3   rets
    5247 00019a70     0b61  pprgt   cmpi    [radius,0],a1
         00019a80 ff87ffff  
    5248 00019aa0     c61a          jrle    pplr
    5249 00019ab0     0b61          cmpi    [679-radius,0],a1
         00019ac0 fdd0ffff  
    5250 00019ae0     c51d          jrge    ppur
    5251 00019af0     0b60          cmpi    [793,0],a0
         00019b00 fce6ffff  
    5252 00019b20     c603          jrle    ppir4
    5253 00019b30     09e0          movi    [793,0],a0
         00019b40 03190000  
    5254 00019b60     0960  ppir4   rets
    5255 00019b70     098f  ppll    mmtm    sp,a2,a3,a4
         00019b80     3800  
    5256 00019b90     09c2          movi    -798+radius,a2
         00019ba0     fd5a  
    5257 00019bb0     09c3          movi    radius,a3
         00019bc0     0078  
    5258 00019bd0     c014          jruc    pplrul
    5259 00019be0     098f  ppul    mmtm    sp,a2,a3,a4
         00019bf0     3800  
    5260 00019c00     09c2          movi    -798+radius,a2
         00019c10     fd5a  
    5261 00019c20     09c3          movi    679-radius,a3
         00019c30     022f  
    5262 00019c40     c00d          jruc    pplrul
    5263 00019c50     098f  pplr    mmtm    sp,a2,a3,a4
         00019c60     3800  
    5264 00019c70     09c2          movi    798-radius,a2
         00019c80     02a6  
    5265 00019c90     09c3          movi    radius,a3
         00019ca0     0078  
    5266 00019cb0     c006          jruc    pplrul
    5267 00019cc0     098f  ppur    mmtm    sp,a2,a3,a4
         00019cd0     3800  
    5268 00019ce0     09c2          movi    798-radius,a2
         00019cf0     02a6  
    5269 00019d00     09c3          movi    679-radius,a3
         00019d10     022f  
    5270 00019d20     098f  pplrul  mmtm    sp,a0,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  122

         00019d30     c000  
    5271 00019d40     2602          sll     16,a2
    5272 00019d50     2603          sll     16,a3
    5273 00019d60     0d5f          calla   find_dsquared_to_point_whole
         00019d70 00000000! 
    5274 00019d90     0b44          cmpi    (radius-5)*(radius-5),a4
         00019da0     cc56  
    5275 00019db0     c210          jrls    ppx1
    5276 00019dc0     09af          mmfm    sp,a0,a1
         00019dd0     0003  
    5277 00019de0     0d5f          calla   find_dir_to_point
         00019df0 00000000! 
    5278 00019e10     09e1          movi    [radius-5,0],a1
         00019e20 00730000  
    5279 00019e40     0d5f          calla   polar_to_rect
         00019e50 00000000! 
    5280 00019e70     4040          add     a2,a0
    5281 00019e80     4061          add     a3,a1
    5282 00019e90     09af          mmfm    sp,a2,a3,a4
         00019ea0     001c  
    5283 00019eb0     0960          rets
    5284 00019ec0     09af  ppx1    mmfm    sp,a0,a1
         00019ed0     0003  
    5285 00019ee0     09af          mmfm    sp,a2,a3,a4
         00019ef0     001c  
    5286 00019f00     0960          rets
    5287                    
    5288 00019f10           put_puck_outside_netp           ;called when player
    5289 00019f10     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a8
         00019f20     fc80  
    5290 00019f30     07a8          move    @PUCK_OBJECT,a8,L
         00019f40 00000000- 
    5291 00019f60     b700          move    *a8(OXVAL),a0,L
         00019f70     0140  
    5292 00019f80     b701          move    *a8(OZVAL),a1,L
         00019f90     0180  
    5293 00019fa0     0d3f          callr   put_point_outside_netp
         00019fb0     0019  
    5294 00019fc0     b208          move    a0,*a8(OXVAL),L
         00019fd0     0140  
    5295 00019fe0     b228          move    a1,*a8(OZVAL),L
         00019ff0     0180  
    5296 0001a000     09af          mmfm    sp,a0,a1,a2,a3,a4,a5,a8
         0001a010     013f  
    5297 0001a020     0960          rets
    5298                    
    5299 0001a030           put_puck_outside_net
    5300 0001a030     098f          mmtm    sp,a0,a1,a2,a3,a4,a5,a8
         0001a040     fc80  
    5301 0001a050     07a8          move    @PUCK_OBJECT,a8,L
         0001a060 00000000- 
    5302 0001a080     b700          move    *a8(OXVAL),a0,L
         0001a090     0140  
    5303 0001a0a0     b701          move    *a8(OZVAL),a1,L
         0001a0b0     0180  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  123

    5304 0001a0c0     0d3f          callr   put_point_outside_net
         0001a0d0     0007  
    5305 0001a0e0     b208          move    a0,*a8(OXVAL),L
         0001a0f0     0140  
    5306 0001a100     b228          move    a1,*a8(OZVAL),L
         0001a110     0180  
    5307 0001a120     09af          mmfm    sp,a0,a1,a2,a3,a4,a5,a8
         0001a130     013f  
    5308 0001a140     0960          rets
    5309                    
    5310 0001a150           put_point_outside_netp
    5311 0001a150           put_point_outside_net
    5312 0001a150     4c02          move    a0,a2
    5313 0001a160     2a02          sra     16,a2
    5314 0001a170     ee22          movy    a1,a2
    5315 0001a180     0d3f          callr   are_we_inside_goal
         0001a190     fe60  
    5316 0001a1a0     c930          jrnc    ppon_1
    5317 0001a1b0           pponsb  PUSH    a0
    5318 0001a1c0     4c25          move    a1,a5
    5319 0001a1d0     0380          abs     a0
    5320 0001a1e0     4c04          move    a0,a4
    5321 0001a1f0     4c22          move    a1,a2
    5322 0001a200     4c81          move    a4,a1
    5323 0001a210     0d04          subi    [734,0],a4
         0001a220 fd21ffff  
    5324 0001a240     0d01          subi    [684,0],a1
         0001a250 fd53ffff  
    5325 0001a270     0384          abs     a4
    5326 0001a280     0381          abs     a1
    5327 0001a290     4c43          move    a2,a3
    5328 0001a2a0     0d02          subi    [283,0],a2
         0001a2b0 fee4ffff  
    5329 0001a2d0     0d03          subi    [398,0],a3
         0001a2e0 fe71ffff  
    5330 0001a300     0382          abs     a2
    5331 0001a310     0383          abs     a3
    5332 0001a320     0d5f          calla   mina03
         0001a330 00000000! 
    5333 0001a350     0b2e          addi    pponl,a14
         0001a360 0001a3a0' 
    5334 0001a380     87ce          move    *a14,a14,L
    5335 0001a390     016e          jump    a14
    5336 0001a3a0 0001a420' pponl   .long   ppxh
    5337 0001a3c0 0001a4c0'         .long   ppxl
    5338 0001a3e0 0001a560'         .long   ppzl
    5339 0001a400 0001a5c0'         .long   ppzh
    5340 0001a420     09e0  ppxh    movi    [734,0],a0
         0001a430 02de0000  
    5341 0001a450                   PULLQ   a14
    5342 0001a460     4dce          move    a14,a14
    5343 0001a470     c101          jrp     ppxh1
    5344 0001a480     03a0          neg     a0
    5345 0001a490     4ca1  ppxh1   move    a5,a1
    5346 0001a4a0     0de0          setc
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  124

    5347 0001a4b0     0960  ppon_1  rets
    5348 0001a4c0     09e0  ppxl    movi    [684,0],a0
         0001a4d0 02ac0000  
    5349 0001a4f0                   PULLQ   a14
    5350 0001a500     4dce          move    a14,a14
    5351 0001a510     c101          jrp     ppxl1
    5352 0001a520     03a0          neg     a0
    5353 0001a530     4ca1  ppxl1   move    a5,a1
    5354 0001a540     0de0          setc
    5355 0001a550     0960          rets
    5356 0001a560           ppzl    PULLQ   a0
    5357 0001a570     09e1          movi    [283,0],a1
         0001a580 011b0000  
    5358 0001a5a0     0de0          setc
    5359 0001a5b0     0960          rets
    5360 0001a5c0           ppzh    PULLQ   a0
    5361 0001a5d0     09e1          movi    [398,0],a1
         0001a5e0 018e0000  
    5362 0001a600     0de0          setc
    5363 0001a610     0960          rets
    5364                    
    5365 0001a620           debug_track_puck
    5366 0001a620     05a0          move    @GAME_STATE,a0,W
         0001a630 00000000! 
    5367 0001a650     0b40          cmpi    INGAME,a0
         0001a660     ffef  
    5368 0001a670     ca04          jrz     dtp3
    5369 0001a680     0b40          cmpi    INPLAY,a0
         0001a690     ffdf  
    5370 0001a6a0     cb00          jrnz    dtp9
         0001a6b0     008d  
    5371 0001a6c0     07a0  dtp3    move    @track_puck_pointer,a0,L
         0001a6d0 001771f0- 
    5372 0001a6f0     0b60          cmpi    track_puck_data,a0
         0001a700 fffffe0f- 
    5373 0001a720     c903          jrhs    dtp1
    5374 0001a730     09e0          movi    track_puck_data,a0
         0001a740 000001f0- 
    5375 0001a760     0b60  dtp1    cmpi    track_puck_pointer,a0
         0001a770 ffe88e0f- 
    5376 0001a790     c803          jrlo    dtp2
    5377 0001a7a0     09e0          movi    track_puck_data,a0
         0001a7b0 000001f0- 
    5378 0001a7d0     07a1  dtp2    move    @PUCK_OBJECT,a1,L
         0001a7e0 00000000- 
    5379 0001a800     b62e          move    *a1(OXVAL),a14,L
         0001a810     0140  
    5380 0001a820     0b2e          addi    [0,08000h],a14
         0001a830 00008000  
    5381 0001a850     2a0e          sra     16,a14
    5382                    ;       move    *a1(OXPOS),a14,W        ;half
    5383 0001a860     91c0          move    a14,*a0+,W
    5384 0001a870     b42e          move    *a1(OZPOS),a14,W
         0001a880     0190  
    5385 0001a890     91c0          move    a14,*a0+,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  125

    5386 0001a8a0     b42e          move    *a1(OYPOS),a14,W
         0001a8b0     0170  
    5387 0001a8c0     91c0          move    a14,*a0+,W
    5388 0001a8d0     05ae          move    @PUCK_CONTROL,a14,W
         0001a8e0 00000040- 
    5389 0001a900     ca0e          jrz     dt_noc
    5390 0001a910     91c0          move    a14,*a0+,W
    5391 0001a920                   GBLOCK  a14,a14
    5392 0001a960     b5c2          move    *a14(POF_MODE),a2,W
         0001a970     0210  
    5393 0001a980     9040          move    a2,*a0+,W
    5394 0001a990     b7ce          move    *a14(POF_OBJECT),a14,L
         0001a9a0     0280  
    5395 0001a9b0     b7ce          move    *a14(ANIMFRM),a14,L
         0001a9c0     0320  
    5396 0001a9d0     93c0          move    a14,*a0+,L
    5397 0001a9e0     c003          jruc    de_ceo
    5398 0001a9f0     91c0  dt_noc  move    a14,*a0+,W              ;puck_control = 0
    5399 0001aa00     91c0          move    a14,*a0+,W              ;mode = 0
    5400 0001aa10     93c0          move    a14,*a0+,L              ;script address = 0
    5401 0001aa20     b62e  de_ceo  move    *a1(OXVEL),a14,L
         0001aa30     0100  
    5402 0001aa40     93c0          move    a14,*a0+,L
    5403 0001aa50     b62e          move    *a1(OZVEL),a14,L
         0001aa60     00e0  
    5404 0001aa70     93c0          move    a14,*a0+,L
    5405 0001aa80     b62e          move    *a1(OYVEL),a14,L
         0001aa90     0120  
    5406 0001aaa0     93c0          move    a14,*a0+,L
    5407 0001aab0     b62e          move    *a1(ODT_DIR),a14,L
         0001aac0     04b0  
    5408 0001aad0     93c0          move    a14,*a0+,L
    5409 0001aae0     b62e          move    *a1(ODT_VEL),a14,L
         0001aaf0     04d0  
    5410 0001ab00     93c0          move    a14,*a0+,L
    5411 0001ab10     05ae          move    @outlaw_puck,a14,W
         0001ab20 00000100- 
    5412 0001ab40     91c0          move    a14,*a0+,W
    5413 0001ab50     05ae          move    @outlaw_puck2,a14,W
         0001ab60 00000110- 
    5414 0001ab80     91c0          move    a14,*a0+,W
    5415 0001ab90     07ae          move    @bounce_save_temp,a14,L
         0001aba0 000001a0- 
    5416 0001abc0     93c0          move    a14,*a0+,L
    5417 0001abd0     05ae          move    @goal_pass,a14,W
         0001abe0 000001c0- 
    5418 0001ac00     91c0          move    a14,*a0+,W
    5419 0001ac10     05ae          move    @CPULEFT,a14,W
         0001ac20 00000000! 
    5420 0001ac40     91c0          move    a14,*a0+,W
    5421 0001ac50     07a2          move    @PLAYER_1_BLOCK+POF_OBJECT,a2,L
         0001ac60 00000280! 
    5422 0001ac80     0d3f          callr   dpt123
         0001ac90     0030  
    5423 0001aca0     07a2          move    @PLAYER_2_BLOCK+POF_OBJECT,a2,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:58 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  126

         0001acb0 00000280! 
    5424 0001acd0     0d3f          callr   dpt123
         0001ace0     002b  
    5425 0001acf0     07a2          move    @PLAYER_4_BLOCK+POF_OBJECT,a2,L
         0001ad00 00000280! 
    5426 0001ad20     0d3f          callr   dpt123
         0001ad30     0026  
    5427 0001ad40     07a2          move    @PLAYER_5_BLOCK+POF_OBJECT,a2,L
         0001ad50 00000280! 
    5428 0001ad70     0d3f          callr   dpt123
         0001ad80     0021  
    5429 0001ad90     07a2          move    @PLAYER_6_BLOCK+POF_OBJECT,a2,L
         0001ada0 00000280! 
    5430 0001adc0     0d3f          callr   dpt123
         0001add0     001c  
    5431 0001ade0     07a2          move    @PLAYER_8_BLOCK+POF_OBJECT,a2,L
         0001adf0 00000280! 
    5432 0001ae10     0d3f          callr   dpt123
         0001ae20     0017  
    5433 0001ae30     05a2          move    @period,a2,W
         0001ae40 00000000! 
    5434 0001ae60     2582          sll     12,a2
    5435 0001ae70     05ae          move    @minutes,a14,W
         0001ae80 00000000! 
    5436 0001aea0     250e          sll     8,a14
    5437 0001aeb0     55c2          or      a14,a2
    5438 0001aec0     05ae          move    @tenseconds,a14,W
         0001aed0 00000000! 
    5439 0001aef0     248e          sll     4,a14
    5440 0001af00     55c2          or      a14,a2
    5441 0001af10     05ae          move    @seconds,a14,W
         0001af20 00000000! 
    5442 0001af40     55c2          or      a14,a2
    5443 0001af50     9040          move    a2,*a0+,W
    5444 0001af60     0780          move    a0,@track_puck_pointer,L
         0001af70 001771f0- 
    5445 0001af90     0960  dtp9    rets
    5446                    
    5447 0001afa0     b64e  dpt123  move    *a2(ANIMSCR),a14,L
         0001afb0     0340  
    5448 0001afc0     93c0          move    a14,*a0+,L
    5449 0001afd0     b64e          move    *a2(ANIMFRM),a14,L
         0001afe0     0320  
    5450 0001aff0     93c0          move    a14,*a0+,L
    5451 0001b000     0960          rets

 No Errors,  No Warnings
