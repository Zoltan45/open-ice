TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .MLIB   "HHMACS.LIB"
       2                            .FILE   "HHC.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    
       7                    **************************************************************************
       8                    *                                                                        *
       9                    *       COPYRIGHT (C) 1994 MIDWAY MANUFACTURING COMPANY.                 *
      10                    *                      ALL RIGHTS RESERVED.                              *
      11                    *                                                                        *
      12                    **************************************************************************
      13                    
      14                    
      15                    *       GET THE SYSTEM STUFF
      16                            .INCLUDE        "HH.INC"
      17                            .include        "hhc.e"
      18                            .include        "hhd.g"
      19                            .include        "hhproc.g"
      20                            .include        "hhram.g"
      21                    
      22                    ; end of include files
      23                    
      24 00000000                   .BSS    IN_ANIM,16      ;UHB '1' when processing anim funcs
      25 00000010                   .bss    xxxx,16         ;fill space to 32 bits
      26                    
      27 00000020                   .bss    bog_cpu,16
      28 00000030                   .bss    bog_dma,16
      29                    
      30 00000040                   .bss    small_timer_on,16
      31 00000050                   .bss    scbox1,32*3
      32 000000b0                   .bss    scbox2,32*3
      33 00000110                   .bss    sct1,32*3
      34 00000170                   .bss    sct2,32*3
      35 000001d0                   .bss    scper,32*3
      36 00000230                   .bss    sct1s1,32*3
      37 00000290                   .bss    sct1s2,32*3
      38 000002f0                   .bss    sct2s1,32*3
      39 00000350                   .bss    sct2s2,32*3
      40 000003b0                   .bss    scmintens,32*3          ;minutes or tens
      41 00000410                   .bss    sccolsecs,32*3          ;colon or seconds
      42 00000470                   .bss    sctnsper,32*3           ;tens or period
      43 000004d0                   .bss    scsectnts,32*3          ;seconds or tenths
      44                    
      45 00000000                   .text
      46                    
      47                    *
      48                    *The following align encompasses a CACHE segement from here to the end
      49                    *of the DMAINT.
      50                    *
      51                            .ALIGN
      52                    
      53                    **************************************************************************
      54                    ;*** DEPENDS ON A LOT OF REGISTERS BEING SET UP IN DISPLAY -- careful ***
      55                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    2

      56 00000000           PutPlanes
      57                    
      58                    *
      59                    *       DISPLAY FOREGROUND
      60                    *
      61 00000000           DispFG
      62 00000000     09e0          movi    FGLIST,a0
         00000010 00000000! 
      63 00000030     4c04          move    a0,a4
      64 00000040     0d3f          callr   DISPNEXT_FG
         00000050     004f  
      65                    
      66 00000060     05ae          move    @small_timer_on,a14,W
         00000070 00000040- 
      67 00000090     ca2a          jrz     dfgsk
      68 000000a0     07b7          move    @PAGEADDR,b7,L
         000000b0 00000000! 
      69 000000d0     09f0          movi    01000100h,b0
         000000e0 01000100  
      70 00000100     09d1          movi    0202h,b1
         00000110     0202  
      71 00000120     09f5          movi    0c0020000h,b5
         00000130 c0020000  
      72                    
      73 00000150     09f6          movi    scbox1,b6
         00000160 00000050- 
      74 00000180     05a0          move    @WAVEIRQS,a0,W
         00000190 00000000! 
      75 000001b0     2be0          sra     1,a0
      76 000001c0     c903          jrnc    dfgt_1
      77 000001d0     09f6          movi    scbox2,b6
         000001e0 000000b0- 
      78 00000200     09b6  dfgt_1  mmfm    b6,b4,b3,b2
         00000210     001c  
      79 00000220     40f3          add     b7,b3
      80 00000230     099c          mmtm    b12,b0,b1,b2,b3,b4,b5
         00000240     fc00  
      81 00000250     09d1          movi    0303h,b1
         00000260     0303  
      82 00000270     09f6          movi    sct1,b6
         00000280 00000110- 
      83 000002a0     1960          movk    11,a0
      84 000002b0     09f5          movi    0a0020000h,b5
         000002c0 a0020000  
      85 000002e0     09b6  do3a    mmfm    b6,b4,b3,b2
         000002f0     001c  
      86 00000300     40f3          add     b7,b3
      87 00000310     099c          mmtm    b12,b0,b1,b2,b3,b4,b5
         00000320     fc00  
      88 00000330     3cc0          dsjs    a0,do3a
      89                    
      90 00000340           dfgsk
      91                            .if     bog_line
      92                    
      93                            MOVE    @GAME_STATE,A14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    3

      94                            CMPI    INDIAG,A14
      95                            JREQ    xbg9                    ;BR=IN DIAGNOSTICS
      96                    
      97                            movi    01000100h,a2
      98                            movi    COLOR_PRED,a3
      99                            movi    00010020H,a9
     100                            move    @bog_cpu,a10
     101                            sll     16,a10
     102                            movi    3000000h,a11
     103                            movi    900c0000h,a12
     104                            callr   xbgln
     105                    
     106                            movi    01000100h,a2
     107                            movi    COLOR_PBLUE,a3
     108                            movi    00010020H,a9
     109                            move    @bog_dma,a10
     110                            sll     16,a10
     111                            movi    3000000h,a11
     112                            movi    900c0000h,a12
     113                            callr   xbgln
     114                    
     115                            jruc    xbg9
     116                    
     117                    *A2 = Y-SCALE:X-SCALE
     118                    *A3 = CONST:PALETTE XLATE
     119                    *A9 = VSIZE:HSIZE
     120                    *A10 = DESTINATION Y:X
     121                    *A11 = IMAGE SAG
     122                    *A12 = CONTROL:OFFSET
     123                    
     124                    
     125                    xbgln   addxy   A5,A10          ; add PAGE OFFSET to dest Y:X
     126                            cmp     B12,B13         ;Is Q Non-Empty?
     127                            jrle    xskip           ; JUMP IF Q EMPTY, RIGHT?
     128                    xQIt    ;*** WE HAVE ENOUGH TIME TO CLIP ANOTHER, PUSH THIS ONE ***
     129                    
     130                            move    B12,A7
     131                            MMTM    A7,A2,A3,A9,A10,A11,A12 ;STORE THE DMA REGS
     132                            move    A7,B12
     133                            setf    1,0,0           ;field 0 is 1 bit
     134                            movk    1,A7
     135                            move    A7,@(INTENB+B_X1E),0
     136                            setf    16,1,0
     137                            jruc    boglinex
     138                    xskip   move    B11,A7          ;DMAREGS
     139                            MOVE    *B1,B14,L       ;XUNIT @DMACTRL,  DMA BUSY?
     140                            jrn     xQIt            ;Last obj plotted was big, Q this sucker..
     141                    
     142                            MMTM    A7,A2,A3,A9,A10,A11,A12 ;STUFF THE DMA REGS
     143                    
     144                    boglinex
     145                            rets
     146                    xbg9
     147                            .endif
     148 00000340     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    4

     149                    
     150                    **************************************************************************
     151                    *                                                                        *
     152                    * DMAINT is now first, so it can take up a single cache segment when     *
     153                    *  dispnext is done                                                      *
     154                    *                                                                        *
     155                    **************************************************************************
     156                            .ALIGN
     157 00000400           DMAINT                  ;interrupt takes 84 total cycles to be processed
     158                            ;*** PULL FROM Q, PUSH ON DMA ***
     159 00000400     abbb          move    -*B13,-*B11,L   ;Y-SCALE:X-SCALE
     160 00000410     abbb          move    -*B13,-*B11,L   ;CONST:PALETTE XLATE
     161 00000420     abbb          move    -*B13,-*B11,L   ;VSIZE:HSIZE, NO, B11 IS not FOR THE DMAQ SIZE
     162 00000430     abbb          move    -*B13,-*B11,L   ;DESTINATION Y:X
     163 00000440     abbb          move    -*B13,-*B11,L   ;IMAGE SAG
     164 00000450     abbb          MOVE    -*B13,-*B11,L   ;CTRL:OFFSET
     165 00000460     0b1b          addi    6*020h,b11      ;bring b11 back to dmaregs
         00000470     00c0  
     166 00000480     499d          cmp     B12,B13         ;Is Q Non-Empty?
     167 00000490     c601          jrle    dmandn          ;branch if Q empty
     168 000004a0     0940          reti
     169 000004b0     05c0  dmandn  move    @VCOUNT,@DMATMP,W
         000004c0 c00001d0  
         000004e0 00000000! 
     170                            .if     bog_line
     171                            move    @VCOUNT,@bog_dma,W
     172                            .endif
     173 00000500     0541          setf    1,0,0           ;field 0 is 1 bit
     174 00000510     058f          move    sp,@(INTENB+B_X1E),0    ;*** DISABLE DMA INTERRUPT ***
         00000520 c0000111  
     175 00000540     0940          reti
     176                    
     177 00000550           DISPNEXT_FG
     178 00000550     09ce          movi    OFSET,a14
         00000560     01e0  
     179 00000570     09f3          movi    INTENB+B_X1E,b3
         00000580 c0000111  
     180 000005a0     4f97          move    b12,a7                  ;for fast loop, we only need to move once
     181 000005b0     1832          movk    1,b2
     182 000005c0     0541          setf    1,0,0           ;field 0 is 1 bit
     183 000005d0     c010          jruc    DISPNEXT
     184                    
     185                    **************************************************************************
     186                    *                                                                        *
     187                    * regular clip loop                                                      *
     188                    *                                                                        *
     189                    **************************************************************************
     190 000005e0           CLIP_LOOP
     191 000005e0     ae01          movb    *a0(OFLAGS),a1
         000005f0     0420  
     192 00000600     ce0d          jrn     DISPNEXT        ; don't bother if marked as offscreen
     193 00000610     4c01          move    a0,a1
     194 00000620     41c1          add     a14,a1          ;OFSET
     195 00000630     962c          move    *a1+,a12,L
     196 00000640     cf09          jrnn    DISPNEXT                ;BR = OBJECT IS OFF
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    5

     197                    
     198 00000650     09a1          mmfm    a1,a11,a10,a9,a6,a3,a2
         00000660     0e4c  
     199                    ;                       ; SAG in a11,
     200                    ;                       ; DAG in a10,
     201                    ;                       ; Unscaled size in a9,
     202                    ;                       ; SCALED SIZE in a6,
     203                    ;                       ; CONST:PAL in a3,
     204                    ;                       ; SCALE Y:X in a2
     205 00000670     e0aa          addxy   A5,A10          ; add PAGE OFFSET to dest Y:X
     206                    
     207 00000680     499d          cmp     B12,B13         ;Is Q Non-Empty?
     208 00000690     c60a          jrle    SkipQIt         ; JUMP IF Q EMPTY, RIGHT?
     209 000006a0     0987  QIt     mmtm    a7,a2,a3,a9,a10,a11,a12 ;STORE THE DMA REGS
         000006b0     3078  
     210 000006c0     4eec          move    a7,b12
     211 000006d0     8053          move    b2,*b3,0                ;**** ENABLE DMAINT ****
     212 000006e0           DISPNEXT
     213 000006e0     b600          MOVE    *A0(OBLINK),A0,L        ;GET NEXT LINK
         000006f0     0020  
     214 00000700     4804          CMP     A0,A4
     215 00000710     cbec          JRNE    CLIP_LOOP
     216 00000720     0570          setf    16,1,0
     217 00000730     0960          rets
     218 00000740     863e  SkipQIt move    *b1,b14,L       ;XUNIT @DMACTRL,  DMA BUSY?
     219 00000750     cef4          jrn     QIt             ;Last obj plotted was big, Q this sucker..
     220 00000760     4f7d          move    B11,A13         ;DMAREGS
     221 00000770     098d  STUFF   MMTM    A13,A2,A3,A9,A10,A11,A12        ;STUFF THE DMA REGS
         00000780     3078  
     222 00000790     b600          MOVE    *A0(OBLINK),A0,L        ;GET NEXT LINK
         000007a0     0020  
     223 000007b0     4804          CMP     A0,A4
     224 000007c0     cbe1          JRNE    CLIP_LOOP
     225 000007d0     0570          setf    16,1,0
     226 000007e0     0960          RETS
     227                    
     228                    **************************************************************************
     229                    *                                                                        *
     230                    * The following align contains the entire Animation loop.                *
     231                    *                                                                        *
     232                    **************************************************************************
     233                    
     234                    **************************************************************************
     235                    *                                                                        *
     236                    * ANIMP - FUNCTION TO PROCESS THE ANIMATION LIST.                        *
     237                    *       CALLED ONCE EVERY TICK.                                          *
     238                    *                                                                        *
     239                    **************************************************************************
     240 000007f0           ANIMP
     241                    *THE FOLLOWING REGISTERS MUST REMAIN UNCHANGED UNTIL THE ANIM FUNCS ARE CALLED
     242 000007f0     09cc          movi    M_FLIPH,A12             ;used to mask out M_FLIPH
         00000800     0010  
     243 00000810     09eb          MOVI    0807FH,A11              ;MASK FOR CONTROL WORD
         00000820 0000807f  
     244 00000840     09ea          movi    ANIFUNCS,A10            ;GET READY TO QUEUE UP ANIM FUNCS
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    6

         00000850 00000000! 
     245 00000870     09e9          MOVI    BOGUS_SCL,A9            ;BOGUS SCALE TO FOOL SCALE_MAMA
         00000880 08000800  
     246 000008a0     05a4          MOVE    @LAST_TIMER,A4,W        ;LOAD THE TIME FACTOR
         000008b0 00000000! 
     247                    
     248                    *** WBD NOTE:  Should we put a DINT here? to make sure DIRQ doesn't happen before
     249                    ***            Ani is done and SCALE_MAMA is called?
     250                    
     251 000008d0     07a8          move    @ANIOBJS,A8,L
         000008e0 00000000! 
     252 00000900     cb18          jrnz    NxtAni
     253                    ;       JRUC    ANISCALE
     254                    
     255 00000910           ANISCALE
     256 00000910     5600          clr     A0              ;MARK END OF ANIM FUNC LIST
     257 00000920     920a          move    A0,*A10+,L
     258                    
     259                    **** WBD NOTE: Should we put an EINT here? (See DINT NOTE)
     260 00000930     09ed          MOVI    ACTIVE,A13
         00000940 00000000! 
     261                    ;******************* Start OF 2d Block (only 040h words long) *************
     262                            ;**** PROCESS QUEUED UP ANIM FUNCS ****
     263 00000960     1820          movk    1,A0
     264 00000970     05e0          movb    A0,@IN_ANIM
         00000980 00000000- 
     265 000009a0     09ec          movi    ANIFUNCS,A12    ;reset to top of list to pull funcs
         000009b0 00000000! 
     266                            ;**** PULL OUT NEXT ANIM FUNCTION ****
     267 000009d0           ANIFNCLP                                ;MAKE SURE THIS LOOP DOESN'T
     268 000009d0     9780          move    *A12+,A0,L              ;SPAN CACHE BLOCK BOUNDARY
     269 000009e0     ca05          jrz     ANIFNCX                 ;
     270 000009f0     2f80          srl     4,A0                    ;mask out arg count
     271 00000a00     2480          sll     4,A0                    ;
     272 00000a10     9788          move    *A12+,A8,L              ;
     273 00000a20     0920          call    A0                      ;
     274 00000a30     c0f9          jruc    ANIFNCLP                ;
     275 00000a40     5600  ANIFNCX clr     A0
     276 00000a50     05e0          movb    A0,@IN_ANIM
         00000a60 00000000- 
     277 00000a80     0960  niLpX   rets
     278                    
     279                    
     280                    **************************************************************************
     281                    ;PROCESS TO ANIMATE, EXECUTE FUNCTIONS for OBJECTS/MULTIPARTERS on ANIOBJS
     282 00000a90     07ad  NxtAni  move    @anipllist,a13,L                ;players
         00000aa0 00000000! 
     283                            .ALIGN                          ;here we exactly fit
     284 00000c00     97a8  NxtAni2 move    *a13+,a8,L
     285 00000c10     ca03          jrz     NxtAni3
     286 00000c20     0d3f          callr   anisub
         00000c30     000f  
     287 00000c40     c0fb          jruc    NxtAni2
     288 00000c50     97a8  NxtAni3 move    *a13+,a8,L
     289 00000c60     0788          move    a8,@anipllist,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    7

         00000c70 00000000! 
     290 00000c90     07a8          move    @ANIOBJS,A8,L
         00000ca0 00000000! 
     291 00000cc0     cac4          jrz     ANISCALE                ;mdp safety
     292 00000cd0     0d3f  NxtAni1 callr   anisub
         00000ce0     0004  
     293 00000cf0     b708          move    *A8(ANIMNXT),A8,L
         00000d00     0300  
     294 00000d10     cbfb          jrnz    NxtAni1
     295 00000d20     c0be          jruc    ANISCALE
     296                    
     297 00000d30           anisub
     298                    ;       move    A8,B8
     299 00000d30     af06          movb    *A8(ANISLP),A6
         00000d40     0368  
     300 00000d50     4486          SUB     A4,A6           ;A4 SHOULD = LAST_TIMER, HERE
     301 00000d60     c141          jrp     Sleeping
     302                    
     303                            ;***** PROCESS AN ANIMATION SCRIPT ENTRY *******
     304 00000d70     b700          move    *A8(ANIMFRM),A0,L
         00000d80     0320  
     305 00000d90     9601          move    *A0+,A1,L               ;grab frame ptr
     306 00000da0     cb03          jrnz    SkLpFrm
     307 00000db0     b700          move    *A8(ANIMSCR),A0,L
         00000dc0     0340  
     308                    ;NxtMultiAni
     309 00000dd0     9601          move    *A0+,A1,L
     310 00000de0           SkLpFrm
     311                    *FOR ANY FLAG PROCESSING, DO NOT ACTUALLY AFFECT THE OBJECT WITH
     312                    * THE CHANGES UNTIL AFTER SkDead, IN CASE OF NOPARTANI.
     313 00000de0     b504          move    *A8(OFLAGS),A4,W
         00000df0     0420  
     314 00000e00     b507          MOVE    *A8(OCTRL),A7,W         ;GET THE DMA CONTROL, CHANGES IN ANI
         00000e10     01f0  
     315 00000e20     9406          move    *A0+,A6,W               ;get flags:Sleep
     316 00000e30     cf05          jrnN    SkOpartsYAdj0
     317                    
     318                    ;*** FIX OPARTSXY FOR CHANGING FLIP BITS
     319 00000e40     9405          move    *A0+,A5,W               ;get flip bits from script
     320 00000e50     4cae          move    A5,A14
     321 00000e60     56ee          xor     A7,A14                  ;which flip bits are changing??
     322 00000e70     5387          andn    A12,A7                  ;mask out M_FLIPH
     323 00000e80     54a7          or      A5,A7                   ;set for animator code
     324 00000e90           SkOpartsYAdj0
     325                    ;nomulti        MOVE    B8,A14
     326                    ;nomulti        CMP     A8,A14                  ;ALWAYS PROCESS SINGLE/HEAD OBJECT?
     327                    ;nomulti        JREQ    DoEverything            ;BR = YES, NO PART CHECK
     328                    ;nomulti        btst    B_NOPARTANI,A4          ;SHOULD WE ANIMATE THIS PART OF MULTI
     329                    ;nomulti        jrz     DoEverything
     330                    ;nomulti        ;IF OBJ IS IN MULTI-SCRIPT, BUT MARKED NOPARTANI
     331                    ;nomulti        ;   SKIP FUNCTION, ARGS & ANIMATION(flag stuff too)
     332                    ;nomulti        btst    B_AFUNC,A6              ;Skip over func?
     333                    ;nomulti        jrz     SkANI0
     334                    ;nomulti        move    *A0+,A14,L              ;Load function from script
     335                    ;nomulti        sll     28,A14                  ;just want arg count bits
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    8

     336                    ;nomulti        srl     24,A14                  ; arg count is in words
     337                    ;nomulti        add     A14,A0                  ;skip script ptr past args
     338                    ;nomulti        jruc    SkANI0
     339                    
     340 00000e90           DoEverything
     341                            ;**** CHECK FOR ANIM FUNCTION ****
     342 00000e90     1e66          btst    B_AFUNC,A6
     343 00000ea0     ca09          jrz     SkAFUNC
     344 00000eb0     960e          move    *A0+,A14,L
     345 00000ec0     93ca          move    A14,*A10+,L     ;QUEUE UP FUNCTION CALL
     346 00000ed0     930a          move    A8,*A10+,L      ;QUEUE UP OBJ PTR FOR FUNCTION CALL
     347 00000ee0     278e          sll     28,A14          ;just want arg count bits
     348 00000ef0     2d0e          srl     24,A14          ; arg count is in words
     349 00000f00     ca03          jrz     SkAFUNC
     350 00000f10     b208          move    A0,*A8(ANIMARG),L
         00000f20     03e0  
     351 00000f30     41c0          add     A14,A0          ;skip script ptr past args
     352 00000f40           SkAFUNC
     353                    
     354                    ;*** NOTE A0 MUST BE KEPT VALID THROUGH ANIMATION TO PROCESS MULTI ***
     355                    
     356 00000f40     1fe1          btst    0,A1            ;if bottom bit of frame ptr, skip ani
     357 00000f50     cb18          jrnz    SkANI0
     358                    
     359                    *****************************  ANI  *********************************
     360                    * ANIMATION SUBROUTINE
     361                    * A1=NEW IMAGE POINTER
     362                    * A8=OBJECT STRUCTURE POINTER TO BE UPDATED
     363                    
     364                            ;GET AND STUFF NEW SIZE,SAG,OFFSET
     365 00000f60     b228          MOVE    A1,*A8(OIMG),L
         00000f70     02c0  
     366                    ;       move    a1,a14
     367                    ;       BTST    B_MANSCALE,A4           ;IS THIS A MANUALLY SCALED OBJECT?
     368                    ;       jrz     nomanscl
     369                    ;       andni   M_NOSCALE,a4            ; force RESCALE
     370                    ;       move    a4,*a8(OFLAGS)          ;
     371 00000f80           nomanscl
     372 00000f80     9422          MOVE    *A1+,A2,W       ;GET NEW FRAMES ICTRL IN A2
     373 00000f90     5167          AND     A11,A7          ;MASK OUT OLD CONTROL PARMS, KEEP FLIP
     374 00000fa0     54e2          OR      A7,A2           ;SETUP CONTROL AND FLIP FOR NEW FRAME
     375 00000fb0     09a1          MMFM    A1,A3,A5,A7     ;A7, SIZE
         00000fc0     00a8  
     376                                                    ;A5, SAG
     377                                                    ;A3, ANIP
     378                    
     379 00000fd0     4d01          MOVE    A8,A1
     380 00000fe0     0b01          ADDI    OCTRL,A1
         00000ff0     01f0  
     381                    
     382 00001000     1e04          BTST    B_SCRNOBJ,A4            ;IS THIS A SCREEN RELATIVE OBJECT?
     383 00001010     cb19          JRNZ    ANIMP_SCRNOBJ           ;BR = YES
     384                    
     385 00001020     9041          MOVE    A2,*A1+,W               ;OCTRL
     386 00001030     92a1          MOVE    A5,*A1+,L               ;OSAG
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    9

     387 00001040     1001          ADDK    020H,A1
     388 00001050     92e1          MOVE    A7,*A1+,L               ;OUSIZE
     389                    ;       MOVE    A1,*A8(OIMG),L
     390                    
     391 00001060           ANIMP_WORLD
     392 00001060     b268          MOVE    A3,*A8(OUANIOFF),L
         00001070     0440  
     393 00001080     b268          move    a3,*a8(OANIOFF),L       ; assume same for NOSCALE objects
         00001090     01c0  
     394                    ;       BTST    B_MANSCALE,A4
     395                    ;       JRNZ    ANIMP_MAN_SCALE
     396 000010a0     1fe4          BTST    B_NOSCALE,A4
     397 000010b0     cb02          JRNZ    ANIMP_CK_SHADOW
     398 000010c0     b328          MOVE    A9,*A8(OSCALE),L        ;FOOL SCALE MAMA INTO DOIN' US
         000010d0     02a0  
     399 000010e0           ANIMP_CK_SHADOW
     400                    ;ANIMP_MAN_SCALE
     401                    
     402                    ****************************************************************
     403                    
     404 000010e0           SkANI0
     405                    ;nomulti        btst    B_AMULTI,A6     ;DO WE ANIMATE DOWN MULTI-PARTER LIST
     406                    ;nomulti        jrz     SkAFMulti
     407                    ;nomulti        move    *A8(OPARTS),A8,L
     408                    ;nomulti        jrnz    NxtMultiAni
     409                    ;SkAFMulti
     410                    ;       move    B8,A8
     411 000010e0     b208          move    A0,*A8(ANIMFRM),L
         000010f0     0320  
     412 00001100     2706          sll     24,A6
     413 00001110     2d06          srl     24,A6
     414 00001120     cb02          jrnz    GotSlp
     415 00001130     af06          movb    *A8(ANIMSLP),A6
         00001140     0360  
     416 00001150     05a4  GotSlp  MOVE    @LAST_TIMER,A4,W        ;RELOAD THE TIME FACTOR
         00001160 00000000! 
     417 00001180           Sleeping
     418 00001180     acc8          movb    A6,*A8(ANISLP)
         00001190     0368  
     419 000011a0     0960          rets
     420                    
     421                    **************************************************************************
     422                    *                                                                        *
     423                    * End of Animation cache loop                                            *
     424                    *                                                                        *
     425                    **************************************************************************
     426                    
     427 000011b0           ANIMP_SCRNOBJ
     428 000011b0     b50e          MOVE    *A8(OCTRL),A14,W        ;GET ORIGINAL FLAGS
         000011c0     01f0  
     429                    
     430 000011d0     9041          MOVE    A2,*A1+,W               ;OCTRL
     431 000011e0     92a1          MOVE    A5,*A1+,L               ;OSAG
     432 000011f0     1001          ADDK    020H,A1
     433 00001200     92e1          MOVE    A7,*A1+,L               ;OUSIZE
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   10

     434 00001210     82e1          MOVE    A7,*A1,L                ;OSIZE
     435 00001220     b705          MOVE    *A8(OUANIOFF),A5,L      ;WE MUST DO ANIMATION PNT OURSELVES
         00001230     0440  
     436                    
     437 00001240     1f6e          BTST    B_FLIPH,A14
     438 00001250     ca04          JRZ     ANIMP_FIX_FLIPV
     439                    
     440 00001260     56e7          CLR     A7
     441 00001270     eca7          MOVX    A5,A7
     442 00001280     03a7          NEG     A7
     443 00001290     ece5          MOVX    A7,A5
     444                    
     445 000012a0           ANIMP_FIX_FLIPV
     446 000012a0     1f4e          BTST    B_FLIPV,A14
     447 000012b0     ca04          JRZ     ANIMP_GET_ANIMP
     448                    
     449 000012c0     56e7          CLR     A7
     450 000012d0     eea7          MOVY    A5,A7
     451 000012e0     03a7          NEG     A7
     452 000012f0     eee5          MOVY    A7,A5
     453                    
     454 00001300           ANIMP_GET_ANIMP
     455 00001300     b70e          MOVE    *A8(ODAG),A14,L
         00001310     0220  
     456 00001320     e0ae          ADDXY   A5,A14                  ;GET POSITION OF ANIMATION PNT ONSCREEN
     457                    
     458 00001330     4c67          MOVE    A3,A7
     459                    
     460 00001340     1f62          BTST    B_FLIPH,A2
     461 00001350     ca04          JRZ     ANIMP_SET_FLIPV
     462                    
     463 00001360     56e7          CLR     A7
     464 00001370     ec67          MOVX    A3,A7
     465 00001380     03a7          NEG     A7
     466 00001390     ee67          MOVY    A3,A7
     467                    
     468 000013a0           ANIMP_SET_FLIPV
     469 000013a0     1f42          BTST    B_FLIPV,A2
     470 000013b0     ca04          JRZ     ANIMP_SET_DAG
     471                    
     472 000013c0     56a5          CLR     A5
     473 000013d0     ee65          MOVY    A3,A5
     474 000013e0     03a5          NEG     A5
     475 000013f0     eea7          MOVY    A5,A7
     476                    
     477 00001400           ANIMP_SET_DAG
     478 00001400     e2ee          SUBXY   A7,A14
     479 00001410     b3c8          MOVE    A14,*A8(ODAG),L
         00001420     0220  
     480 00001430     b1c8          MOVE    A14,*A8(OXPOS),W
         00001440     0150  
     481 00001450     2e0e          SRL     16,A14
     482 00001460     b1c8          MOVE    A14,*A8(OYPOS),W
         00001470     0170  
     483                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   11

     484 00001480     c0bd          JRUC    ANIMP_WORLD
     485                    
     486                    **************************************************************************
     487                    *                                                                        *
     488                    * End of Animation ROUTINE                                               *
     489                    *                                                                        *
     490                    **************************************************************************
     491                    
     492 00001490                   .text
     493                    **************************************************************************
     494 00001490           PULLANIMFUNC
     495                    ;*** CALLED FROM PULLANIM TO ALSO PULL A QUEUED UP ANIM FUNC
     496                    ;A0 obj being pulled from anim
     497                    ;A12 if IN_ANIM, A12 must be pointing to ANIM FUNC QUEUE
     498 00001490     098f          mmtm    SP,A1,A12
         000014a0     4008  
     499                            ;** CAN ONLY BE A QUEUED UP FUNCTION IF CURRENTLY IN ANIM LIST **
     500 000014b0     07ee          movb    @IN_ANIM,A14
         000014c0 00000000- 
     501 000014e0     ca0d          jrz     PULANIFNCX
     502                    
     503                            .IF DEBUG
     504                            ;MAKE SURE NO ONE HAS FUCKED WITH A12
     505                            cmpi    ANIFUNCS,A12
     506                            jrlo    $
     507                            cmpi    ANIFUNCSX,A12
     508                            jrhi    $
     509                            .ENDIF
     510                    
     511                            ;SCAN REST OF ANIM FUNC QUEUE FOR FUNC WITH THIS OBJ.
     512 000014f0           PULANIFNCLP
     513 000014f0     978e          move    *A12+,A14,L     ;another func?
     514 00001500     ca0b          jrz     PULANIFNCX
     515 00001510     978e          move    *A12+,A14,L     ;check the obj to match A0
     516 00001520     480e          cmp     A0,A14
     517 00001530     cbfb          jrne    PULANIFNCLP
     518                    
     519                            ;*** WE HAVE A QUEUED UP ANIM FUNC FOR THIS OBJ, PULL IT ***
     520                            ;*** Pull by shifting other funcs up queue ***
     521 00001540           SHIFTANIFNCLP
     522 00001540     4d8e          move    A12,A14         ;A12 src, A14 dest
     523 00001550     0bee          subi    040h,A14
         00001560     ffbf  
     524 00001570     9781          move    *A12+,A1,L      ;FUNC, set the ZFLAG
     525 00001580     922e          move    A1,*A14+,L
     526 00001590     9b8e          move    *A12+,*A14+,L   ;OBJ
     527 000015a0     4c21          move    A1,A1
     528 000015b0     cbf8          jrnz    SHIFTANIFNCLP
     529                    
     530 000015c0           PULANIFNCX
     531 000015c0     09af          mmfm    SP,A1,A12
         000015d0     1002  
     532 000015e0     0960          rets
     533                    
     534                    ****    .sect   "CACHE5"
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   12

     535                    
     536                            .ALIGN
     537                    
     538                    **************************************************************************
     539                    *                                                                        *
     540                    *       ANI                                                              *
     541                    *                                                                        *
     542                    *       Single frame animation subroutine.                               *
     543                    *                                                                        *
     544                    *       A1 = New IMAGE pointer                                           *
     545                    *       A4 = New OCTRL                                                   *
     546                    *       A8 = Ptr to object to animate                                    *
     547                    *                                                                        *
     548                    *       Returns:                                                         *
     549                    *               Nothing                                                  *
     550                    *                                                                        *
     551                    **************************************************************************
     552 00001600           maybe_ani
     553 00001600     098f          mmtm    SP,A0,A2,A3,A5,A7
         00001610     b500  
     554 00001620     b70e          move    *a8(OIMG),a14,L
         00001630     02c0  
     555 00001640     482e          cmp     a1,a14
     556 00001650     cb0e          jrnz    aninps
     557 00001660     09e3          movi    0807fh,a3
         00001670 0000807f  
     558 00001690     b50e          move    *a8(OCTRL),a14,W
         000016a0     01f0  
     559 000016b0     506e          and     a3,a14
     560 000016c0     5064          and     a3,a4
     561 000016d0     488e          cmp     a4,a14
     562 000016e0     cb05          jrnz    aninps
     563 000016f0     09af          mmfm    sp,a0,a2,a3,a5,a7
         00001700     00ad  
     564 00001710     0960          rets
     565                    
     566 00001720           ANI:
     567 00001720     098f          mmtm    SP,A0,A2,A3,A5,A7
         00001730     b500  
     568                            ;CHECK IF FLIP BITS CHANGE FOR OPARTSXY FUDGE
     569 00001740           aninps
     570                    ;       move    *A8(OCTRL),A2,W
     571                    ;       xor     A4,A2
     572                    ;       btst    B_FLIPH,A2
     573                    ;       jrz     SkOpartsXAdj                    ;BR=FLIPH DIDN'T CHANGE
     574                    ;       move    *A8(OPARTSXY),A3,W              ;ADJUST X PARTS
     575                    ;       NEG     A3
     576                    ;       move    A3,*A8(OPARTSXY),W
     577                    ;
     578                    ;SkOpartsXAdj
     579                            ;GET AND STUFF NEW SIZE,SAG,OFFSET
     580 00001740     4c2e          MOVE    A1,A14
     581 00001750     95c2          MOVE    *A14+,A2,W      ; ICTRL IN A2
     582 00001760     09ae          MMFM    A14,A3,A5,A7    ;A7, SIZE
         00001770     00a8  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   13

     583                                                    ;A5, SAG
     584                                                    ;A3, ANIP
     585 00001780     0b84          ANDI    0807FH,A4
         00001790 ffff7f80  
     586 000017b0     5444          OR      A2,A4
     587 000017c0     b228          MOVE    A1,*A8(OIMG),L
         000017d0     02c0  
     588 000017e0     b2e8          MOVE    A7,*A8(OUSIZE),L
         000017f0     0240  
     589 00001800     b2a8          MOVE    A5,*A8(OSAG),L
         00001810     0200  
     590                    
     591 00001820     b502          MOVE    *A8(OFLAGS),A2,W
         00001830     0420  
     592 00001840     1e02          BTST    B_SCRNOBJ,A2            ;IS THIS A SCREEN RELATIVE OBJECT?
     593 00001850     ca2a          JRZ     ANI_WORLD               ;BR = NO
     594                    
     595 00001860           ANI_SCRNOBJ
     596 00001860     b2e8          MOVE    A7,*A8(OSIZE),L
         00001870     0260  
     597                    
     598 00001880     b705          MOVE    *A8(OUANIOFF),A5,L      ;WE MUST DO ANIMATION PNT OURSELVES
         00001890     0440  
     599 000018a0     b50e          MOVE    *A8(OCTRL),A14,W
         000018b0     01f0  
     600 000018c0     1f6e          BTST    B_FLIPH,A14
     601 000018d0     ca04          JRZ     ANI_FIX_FLIPV
     602                    
     603 000018e0     56e7          CLR     A7
     604 000018f0     eca7          MOVX    A5,A7
     605 00001900     03a7          NEG     A7
     606 00001910     ece5          MOVX    A7,A5
     607                    
     608 00001920           ANI_FIX_FLIPV
     609 00001920     1f4e          BTST    B_FLIPV,A14
     610 00001930     ca04          JRZ     ANI_GET_ANIMP
     611                    
     612 00001940     56e7          CLR     A7
     613 00001950     eea7          MOVY    A5,A7
     614 00001960     03a7          NEG     A7
     615 00001970     eee5          MOVY    A7,A5
     616                    
     617 00001980           ANI_GET_ANIMP
     618 00001980     b70e          MOVE    *A8(ODAG),A14,L
         00001990     0220  
     619 000019a0     e0ae          ADDXY   A5,A14                  ;GET POSITION OF ANIMATION PNT ONSCREEN
     620                    
     621 000019b0     4c67          MOVE    A3,A7
     622                    
     623 000019c0     1f64          BTST    B_FLIPH,A4
     624 000019d0     ca04          JRZ     ANI_SET_FLIPV           ;BR=NO H-FLIP
     625                    
     626 000019e0     56e7          CLR     A7
     627 000019f0     ec67          MOVX    A3,A7
     628 00001a00     03a7          NEG     A7
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   14

     629 00001a10     ee67          MOVY    A3,A7
     630                    
     631 00001a20           ANI_SET_FLIPV
     632 00001a20     1f44          BTST    B_FLIPV,A4
     633 00001a30     ca04          JRZ     ANI_SET_DAG
     634                    
     635 00001a40     56a5          CLR     A5
     636 00001a50     ee65          MOVY    A3,A5
     637 00001a60     03a5          NEG     A5
     638 00001a70     eea7          MOVY    A5,A7
     639                    
     640 00001a80           ANI_SET_DAG
     641 00001a80     e2ee          SUBXY   A7,A14
     642 00001a90     b3c8          MOVE    A14,*A8(ODAG),L
         00001aa0     0220  
     643 00001ab0     b1c8          MOVE    A14,*A8(OXPOS),W
         00001ac0     0150  
     644 00001ad0     2e0e          SRL     16,A14
     645 00001ae0     b1c8          MOVE    A14,*A8(OYPOS),W
         00001af0     0170  
     646 00001b00           ANI_WORLD
     647 00001b00           ANI_FINISH
     648 00001b00     b088          MOVE    A4,*A8(OCTRL),W
         00001b10     01f0  
     649 00001b20     b268          MOVE    A3,*A8(OUANIOFF),L
         00001b30     0440  
     650 00001b40     b268          MOVE    A3,*A8(OANIOFF),L
         00001b50     01c0  
     651 00001b60     09af          mmfm    SP,A0,A2,A3,A5,A7
         00001b70     00ad  
     652 00001b80     0960          rets
     653                    
     654                    ;**************************************************************************
     655                    ;* ANINP - ANIMATION SUBROUTINE (no position update)                     *
     656                    ;* A1=NEW IMAGE POINTER                                                  *
     657                    ;* A4=NEW OFLAGS                                                                 *
     658                    ;* A8=OBJECT STRUCTURE POINTER TO BE UPDATED                             *
     659                    ;ANINP  mmtm    SP,A2,A3,A5
     660                    ;       ;GET AND STUFF NEW SIZE,SAG,OFFSET
     661                    ;       zext    A4,W            ;ZERO OFFSET IN A4
     662                    ;       move    *A1(ISIZE),A2,L ;A2 ISIZE
     663                    ;       addk    3,A2            ;ADJUST HOR SIZE FOR MORSEL
     664                    ;       srl     2,A2
     665                    ;       sll     2,A2
     666                    ;       MOVE    *A1(ISAG),A3,L  ;GET TOP LEFT SAG (here to use hidden cycles)
     667                    ;       clr     A5
     668                    ;       movx    A2,A5
     669                    ;       sll     3,A5            ;A5 = IMAGE WIDTH IN BITS
     670                    ;       ;HORIZONTAL FLIP CASE
     671                    ;       btst    B_FLIPH,A4
     672                    ;       jrz     SkSagHN         ;NO H FLIP
     673                    ;SagHN  ;FIX SAG FOR HFLIP
     674                    ;       add     A5,A3           ;ADD THS-1 TO SAG
     675                    ;       subk    8,A3
     676                    ;       ;FIX OFFSET FOR HFLIP
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:46 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   15

     677                    ;       move    A5,A14          ;A5=THS*8, 2*THS-1 TO OFFSET
     678                    ;       subk    4,A14
     679                    ;       sll     14,A14          ;ADJUST FOR B16-31
     680                    ;       addxy   A14,A4
     681                    ;SkSagHN        move    A8,A14
     682                    ;       addi    OFLAGS+080h,A14
     683                    ;       mmtm    A14,A1,A2,A3,A4 ;IMG,SIZE,SAG,FLAGS
     684                    ;       mmfm    SP,A2,A3,A5
     685                    ;       rets
     686                    ;**************************************************************************
     687                    ;
     688                    ;**************************************************************************
     689                    ;* SETANIOF
     690                    ;* A0 obj
     691                    ;* SETS OANIOFF FIELD BASED ON OIMG FIELD AND CURRENT FLIP BITS
     692                    ;* SETANIOF0
     693                    ;* INSTEAD OF LOADING IANIOFF FROM *A0(OIMG), ASSUMES 0
     694                    ;SETANIOF0
     695                    ;;* ENTRY POINT FOR OBJS WITHOUT AN ANIMATION POINT
     696                    ;       mmtm    SP,A4,A5,A6
     697                    ;       move    *A0(OIMG),A14,L
     698                    ;       clr     A5                      ;NO ANI OFFSET
     699                    ;       jruc    aniofe
     700                    ;SETANIOF
     701                    ;;**** SET OANIOFF FIELD OF OBJECT IN A0 ****
     702                    ;       mmtm    SP,A4,A5,A6
     703                    ;       move    *A0(OIMG),A14,L
     704                    ;       move    *A14(IANIOFF),A5,L      ;A5 = X COMPONENT OF IANIOFF
     705                    ;aniofe move    A5,A6                   ;A6 = Y COMPONENT OF IANIOFF
     706                    ;       move    *A0(OFLAGS),A4,W
     707                    ;       move    *A14(ISIZE),A14,L       ;A14 ISIZE
     708                    ;       addk    3,A14           ;ADJUST HOR SIZE FOR MORSEL
     709                    ;       srl     2,A14
     710                    ;       sll     2,A14
     711                    ;       btst    B_FLIPH,A4
     712                    ;        jrz    SkSAHF
     713                    ;       ;ADJUST X COMPONENT OF ANIOFF
     714                    ;       subxy   A14,A5          ;bottom 16 of A14 has X SIZE
     715                    ;       sext    A5
     716                    ;       neg     A5
     717                    ;       dec     A5              ;SUB THS-1 FROM ANIOFFX FOR H-FLIP
     718                    ;SkSAHF movy    A6,A5           ;A5 = OANIOFF
     719                    ;       move    A5,*A0(OANIOFF),L
     720                    ;       mmfm    SP,A4,A5,A6
     721                    ;       rets

 No Errors,  No Warnings
