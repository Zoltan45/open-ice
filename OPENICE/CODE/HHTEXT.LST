TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .MLIB   "HHMACS.LIB"
       2                            .FILE   "HHTEXT.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L
       5                            .MNOLIST
       6                    
       7                    **************************************************************************
       8                    *                                                                        *
       9                    *       COPYRIGHT (C) 1994 MIDWAY MANUFACTURING COMPANY.                 *
      10                    *                      ALL RIGHTS RESERVED.                              *
      11                    *                                                                        *
      12                    **************************************************************************
      13                    
      14                    *       GET THE SYSTEM STUFF
      15                            .INCLUDE        "HH.INC"
      16                            .INCLUDE        "HHSTRING.H"
      17                            .INCLUDE        "IMGTBL.GLO"    ;Image Equates and Globals
      18                            .INCLUDE        "HHTEXT0.TBL"
      19                            .INCLUDE        "HHTEXT1.TBL"
      20                            .include        "hhtext2.tbl"
      21                            .INCLUDE        "HHTEXTXX.TBL"
      22                            .include        "hhtext.e"
      23                            .include        "hhproc.g"
      24                            .include        "hhd.g"
      25                            .include        "hhpall.g"
      26                            .include        "hhram.g"
      27                            .include        "hhword.g"
      28                            .include        "hhc.g"
      29                    
      30                    ; end of include files
      31                    
      32                    ;               ASCII Character String Definition
      33                    ;               ---------------------------------
      34                    ;
      35                    ;     An ASCII string is n consecutive bytes terminated by a 0.
      36                    ;
      37                    ;     A string may contain:
      38                    ;
      39                    ;       1. Printable ASCII characters 20h - 7fh.
      40                    ;
      41                    ;       2. Command character denoted by a leading \.
      42                    ;
      43                    ;       3. Format specifier denoted by a leading %.
      44                    ;
      45                    ;     Command Characters:
      46                    ;
      47                    ;       A command character is identified by a preceding '\'. These
      48                    ;       are used to embed command characters and the correct arguments
      49                    ;       in the string.
      50                    ;
      51                    ;       Arguments follow the string definition in the order that they,
      52                    ;       along with format arguments, appear in the string.
      53                    ;
      54                    ;       To insert a single '\' into the string use '\\'.
      55                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    2

      56                    ;       Character               Argument                        Size
      57                    ;       ---------               --------                        ----
      58                    ;       a                       Sleep time to embed             .WORD
      59                    ;       b                       Print color to embed            .WORD
      60                    ;       c                       DMA control word to embed       .WORD
      61                    ;       d                       Font to embed                   .LONG
      62                    ;       e                       [Y,X] Position to embed         .LONG
      63                    ;       f                       [DY,DX] Position delta to embed .LONG
      64                    ;       i                       [Y,X] Spacing to embed          .LONG
      65                    ;       n           newline             -
      66                    ;       p                       Use new palette, by I.D.        .LONG
      67                    ;       u                       Turn underlining on
      68                    ;       v                       Turn underlining off
      69                    ;
      70                    ;       Inserting a '*' between the \ and the command character will
      71                    ;       cause the argument to be indirected through the specified pointer.
      72                    ;
      73                    ;       Example:
      74                    ;               .string "switch \*b color",0
      75                    ;               .long   color_ptr
      76                    ;         The color that would be inserted is pointed to by color_ptr.
      77                    ;
      78                    ;     Format Specifiers:        (Note: if a string contains format specifiers
      79                    ;                              then you must call stringf before
      80                    ;                              passing it to the string routines.)
      81                    ;
      82                    ;               %[flags][width][{h|l|L}]type
      83                    ;
      84                    ;       flags - Used for justification of output and printing of
      85                    ;               signs, blanks and hexadecimal prefixes
      86                    ;
      87                    ;               flag    Meaning                                 Default
      88                    ;               ----    -------                                 -------
      89                    ;               +       Prefix the output value with a sign     Sign only for
      90                    ;                       + or - if it is of signed type.         negatives
      91                    ;               #       Prefix x,X with 0x,0X.                  no prefix
      92                    ;               ,       Used with d,u to print commas           no commas
      93                    ;
      94                    ;       width - A non-negative decimal integer controlling the
      95                    ;               minimum number of characters printed. If width
      96                    ;               is prefixed with a 0, zeros are added until the
      97                    ;               minimum width is reached.
      98                    ;
      99                    ;       Prefix          Use
     100                    ;       ------          ---
     101                    ;       h               Used as a prefix with d,u,x,X and c to specify
     102                    ;                       that the argument is a short (byte).
     103                    ;       l,L             Used as a prefix with d,u,x and X to specify
     104                    ;                       that the argument is a long.
     105                    ;
     106                    ;       If the % format character is followed by another % then no
     107                    ;       format field is taken, rather a single % is written.
     108                    ;
     109                    ;       type    Size            Output Format
     110                    ;       ----    ----            -------------
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    3

     111                    ;       b       word            Pointer to Binary Coded Decimal (bcd) integer
     112                    ;       d       word            Pointer to Signed decimal integer
     113                    ;       u       word            Pointer to Unsigned decimal integer
     114                    ;       x       word            Pointer to Unsigned hex integer using 'abcdef'
     115                    ;       X       word            Pointer to Unsigned hex integer using 'ABCDEF'
     116                    ;       c       word            Pointer to Single character
     117                    ;       p       long            Pointer to a null terminated string
     118                    ;       s       long            Address of a null terminated string
     119                    ;
     120                    ;       Arguments - Must follow the string specification in order.
     121                    ;
     122                    ;       Examples:
     123                    ;       ---------
     124                    ;         This will print the string verbatim,
     125                    ;               .string "Let's print a string",0
     126                    ;
     127                    ;         This will put 'count' at the beginning of the string.
     128                    ;               .string "%d This is item number %d",0
     129                    ;               .long   count           ;pointer to int count
     130                    ;               .long   count           ;pointer to int count
     131                    ;
     132                    ;         This will print 'short_item' as a short and 'long_item' as a long.
     133                    ;               .string "%hd This item is a long %ld",0
     134                    ;               .long   short_item      ;pointer to int count
     135                    ;               .long   long_item       ;pointer to long long_item
     136                    ;
     137                    ;       Note: Strings may be nested as deep as defined by NUMSFBUFS
     138                    ;             Also, these parameters have limits, i.e. width, it would
     139                    ;               not be wise to specify a width of 30 or greater, and so on.
     140                    ;
     141                    ;               Commas are not recognized on lead zero fills.
     142                    
     143                    
     144              0005  NUMSFBUFS EQU   5       ;NUMBER OF BUFFERS FOR STRINGF
     145              0320  SFBUFSIZE EQU   50*16   ;STRINGF BUFFERS ARE 99 CHARACTERS + TERMINATOR
     146                    
     147 00000000                   .BSS    STRNGRAM,30*16  ;RAM FOR BUILDING OF STRINGS BY CONVERSION ROUTINES
     148 000001e0                   .BSS    STRINGF_RAM,NUMSFBUFS*SFBUFSIZE ;RESERVE STRINGF BUFFERS
     149 00001180                   .BSS    SFINDEX,16      ;INDEX OF NEXT USABLE STRINGF BUFFER
     150 00001190                   .BSS    STRING_UNDERLINE,16     ; UNDERLINE FLAG
     151 000011a0                   .BSS    STRING1,32      ;TEMP PTR FOR NESTED STRINGS, ANYONE CAN USE
     152 000011c0                   .BSS    STRING2,32
     153 000011e0                   .BSS    STRING3,32
     154                    
     155 00000000                   .EVEN
     156 00000000                   .TEXT
     157                    
     158                    **************************************************************************
     159                    *                                                                        *
     160                    *       ANY OF THE FOLLOWING STRING PRINT ROUTINES REQUIRE               *
     161                    *         THESE ARGUMENTS. PLUS ANY OTHERS SPECIFIED.                    *
     162                    *                                                                        *
     163                    *       A0 = SLEEP TIME BETWEEN CHARACTERS                               *
     164                    *       A4 = DMA CONTROL                                                 *
     165                    *       A5 = [COLOR,PALETTE]                                             *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    4

     166                    *       A8 = PTR TO STRING                                               *
     167                    *       A9 = [Y,X] SCREEN ADDRESS                                        *
     168                    *       A10 = [Y,X] SPACING                                              *
     169                    *       A11 = PTR TO FONT TABLE                                          *
     170                    *                                                                        *
     171                    *       B1  = [SOUND INDX, OID IF CHARACTERS ARE OBJECTS]                *
     172                    *       NOTES: 1- SOUND INDX applies only if string sleeps between       *
     173                    *                characters. If value is 0 then no sound is made.        *
     174                    *                Otherwise, value becomes index into TEXT_SOUND_TAB      *
     175                    *              2- If FIXED SPACING is selected, then the SPACING         *
     176                    *                 value is the only value added to advance position.     *
     177                    *                                                                        *
     178                    *       THEY ALL RETURN THESE VALUES INTACT, HOWEVER, ANY CHANGES        *
     179                    *       INCURRED FROM CONTROL BYTES WILL REMAIN.                         *
     180                    *                                                                        *
     181                    *       ALSO RETURNED:                                                   *
     182                    *       A2 = Ptr to Master object of string. If string does not use      *
     183                    *               objects, then A2 is not touched.                         *
     184                    *       A8 = POINTS TO THE NEXT BYTE AFTER THE STRING TERMINATOR         *
     185                    *       A9 = NEXT CURSOR POSITION                                        *
     186                    *                                                                        *
     187                    *       NOTE: CALL ALL OF THEM WITH JSRP                                 *
     188                    *             Uses PTEMP1 in the process block                           *
     189                    *                                                                        *
     190                    **************************************************************************
     191                    
     192                    **************************************************************************
     193                    *                                                                        *
     194                    * PRINTF - FORMAT AND PRINT A STRING.                                    *
     195                    * A1 = ROUTINE TO CALL FOR OUTPUT                                        *
     196                    * A8 = PTR TO STRING                                                     *
     197                    * RETURNS:                                                               *
     198                    * A1 = INTACT                                                            *
     199                    * A8 = POINTING TO WORD AFTER THE LAST ARGUMENT OF THIS STRING           *
     200                    *                                                                        *
     201                    * NOTE: CALL WITH JSRP                                                   *
     202                    *                                                                        *
     203                    **************************************************************************
     204 00000000           PRINTF
     205 00000000     0d3f          CALLR   STRINGF
         00000010     035a  
     206 00000020     098c          MMTM    A12,A1,A3       ;SAVE ROUTINE AND NEXT STRING PTR
         00000030     5000  
     207 00000040                   JSRPR   A1
     208 00000090     09ac          MMFM    A12,A1,A8       ;RESTORE ROUTINE AND NEXT STRING (A8)
         000000a0     0102  
     209 000000b0                   RETP
     210                    
     211                    **************************************************************************
     212                    *                                                                        *
     213                    * STRLNRM - PRINT STRING WITH:                                           *
     214                    *                LEFT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST        *
     215                    * TRASHES A4,B3 & B5                                                     *
     216                    *                                                                        *
     217                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    5

     218 000000e0           STRLNRM
     219 000000e0     09e4          MOVI    DMACNZ,A4
         000000f0 00008008  
     220 00000110     09d3          MOVI    LEFT_JUSTIFY,B3
         00000120     0000  
     221 00000130     09f5          MOVI    SCALE_1TO1,B5
         00000140 01000100  
     222 00000160     c000          JRUC    STRINGER
         00000170     0166  
     223                    
     224                    **************************************************************************
     225                    *                                                                        *
     226                    * STRCNRM - PRINT STRING WITH:                                           *
     227                    *                CENTER JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST      *
     228                    * TRASHES A4,B3 & B5                                                     *
     229                    *                                                                        *
     230                    **************************************************************************
     231 00000180           STRCNRM
     232 00000180     09e4          MOVI    DMACNZ,A4
         00000190 00008008  
     233 000001b0     09d3          MOVI    CENTER_JUSTIFY,B3
         000001c0     0001  
     234 000001d0     09f5          MOVI    SCALE_1TO1,B5
         000001e0 01000100  
     235 00000200     c000          JRUC    STRINGER
         00000210     015c  
     236                    
     237                    **************************************************************************
     238                    *                                                                        *
     239                    * STRRNRM - PRINT STRING WITH:                                           *
     240                    *                RIGHT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST       *
     241                    * TRASHES A4,B3 & B5                                                     *
     242                    *                                                                        *
     243                    **************************************************************************
     244 00000220           STRRNRM
     245 00000220     09e4          MOVI    DMACNZ,A4
         00000230 00008008  
     246 00000250     09d3          MOVI    RIGHT_JUSTIFY,B3
         00000260     0002  
     247 00000270     09f5          MOVI    SCALE_1TO1,B5
         00000280 01000100  
     248 000002a0     c000          JRUC    STRINGER
         000002b0     0152  
     249                    
     250                    **************************************************************************
     251                    *                                                                        *
     252                    * STRCNRM2 - PRINT STRING TO BOTH DISPLAY PAGES, WITH:                   *
     253                    *                CENTER JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST      *
     254                    * TRASHES A4,B3 & B5                                                     *
     255                    *                                                                        *
     256                    **************************************************************************
     257 000002c0           STRCNRM2
     258 000002c0     09e4          MOVI    DMACNZ,A4
         000002d0 00008008  
     259 000002f0     09d3          MOVI    M_TEXTDMA2|CENTER_JUSTIFY,B3
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    6

         00000300     4001  
     260 00000310     09f5          MOVI    SCALE_1TO1,B5
         00000320 01000100  
     261 00000340     c000          JRUC    STRINGER
         00000350     0148  
     262                    
     263                    **************************************************************************
     264                    *                                                                        *
     265                    * STRLNRM2 - PRINT STRING TO BOTH DISPLAY PAGES, WITH:                   *
     266                    *                LEFT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST        *
     267                    * TRASHES A4,B3 & B5                                                     *
     268                    *                                                                        *
     269                    **************************************************************************
     270 00000360           STRLNRM2
     271 00000360     09e4          MOVI    DMACNZ,A4
         00000370 00008008  
     272 00000390     09d3          MOVI    M_TEXTDMA2|LEFT_JUSTIFY,B3
         000003a0     4000  
     273 000003b0     09f5          MOVI    SCALE_1TO1,B5
         000003c0 01000100  
     274 000003e0     c000          JRUC    STRINGER
         000003f0     013e  
     275                    
     276                    **************************************************************************
     277                    *                                                                        *
     278                    * STRRNRM2 - PRINT STRING TO BOTH DISPLAY PAGES, WITH:                   *
     279                    *                RIGHT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST       *
     280                    * TRASHES A4,B3 & B5                                                     *
     281                    *                                                                        *
     282                    **************************************************************************
     283 00000400           STRRNRM2
     284 00000400     09e4          MOVI    DMACNZ,A4
         00000410 00008008  
     285 00000430     09d3          MOVI    M_TEXTDMA2|RIGHT_JUSTIFY,B3
         00000440     4002  
     286 00000450     09f5          MOVI    SCALE_1TO1,B5
         00000460 01000100  
     287 00000480     c000          JRUC    STRINGER
         00000490     0134  
     288                    
     289                    **************************************************************************
     290                    *                                                                        *
     291                    * STRLNRMO - PRINT STRING WITH:                                          *
     292                    *                LEFT JUSTIFY, NORMAL, INSERT ON OBJECT LIST             *
     293                    * TRASHES A4,B3,B4 & B5                                                  *
     294                    *                                                                        *
     295                    **************************************************************************
     296 000004a0           string_left_constant
     297 000004a0           STRLNRMO
     298 000004a0     09e4          MOVI    DMACNZ,A4
         000004b0 00008008  
     299 000004d0     09f3          MOVI    M_TEXTOBJ|LEFT_JUSTIFY,B3
         000004e0 00010000  
     300 00000500     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00000510 00008001  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    7

     301 00000530     09f5          MOVI    SCALE_1TO1,B5
         00000540 01000100  
     302 00000560     c000          JRUC    STRINGER
         00000570     0126  
     303                    
     304                    **************************************************************************
     305                    *                                                                        *
     306                    * STRCNRMO - PRINT STRING WITH:                                          *
     307                    *                CENTER JUSTIFY, NORMAL, INSERT ON OBJECT LIST           *
     308                    * TRASHES A4,B3,B4 & B5                                                  *
     309                    *                                                                        *
     310                    **************************************************************************
     311 00000580           string_center_constant
     312 00000580           STRCNRMO
     313 00000580     09e4          MOVI    DMACNZ,A4
         00000590 00008008  
     314 000005b0     09f3          MOVI    M_TEXTOBJ|CENTER_JUSTIFY,B3
         000005c0 00010001  
     315 000005e0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         000005f0 00008001  
     316 00000610     09f5          MOVI    SCALE_1TO1,B5
         00000620 01000100  
     317 00000640     c000          JRUC    STRINGER
         00000650     0118  
     318                    
     319                    **************************************************************************
     320                    *                                                                        *
     321                    * STRRNRMO - PRINT STRING WITH:                                          *
     322                    *                RIGHT JUSTIFY, NORMAL, INSERT ON THE OBJECT LIST        *
     323                    * TRASHES A4,B3,B4 & B5                                                  *
     324                    *                                                                        *
     325                    **************************************************************************
     326 00000660           string_right_constant
     327 00000660           STRRNRMO
     328 00000660     09e4          MOVI    DMACNZ,A4
         00000670 00008008  
     329 00000690     09f3          MOVI    M_TEXTOBJ|RIGHT_JUSTIFY,B3
         000006a0 00010002  
     330 000006c0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         000006d0 00008001  
     331 000006f0     09f5          MOVI    SCALE_1TO1,B5
         00000700 01000100  
     332 00000720     c000          JRUC    STRINGER
         00000730     010a  
     333                    
     334                    **************************************************************************
     335                    *                                                                        *
     336                    * STRLNC - PRINT STRING WITH:                                            *
     337                    *                LEFT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST        *
     338                    *                NO CONSTANT SUBSTITUTE                                  *
     339                    * TRASHES A4,B3 & B5                                                     *
     340                    *                                                                        *
     341                    **************************************************************************
     342 00000740           STRLNC:
     343 00000740     09e4          MOVI    DMAWNZ,A4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    8

         00000750 00008002  
     344 00000770     09d3          MOVI    LEFT_JUSTIFY,B3
         00000780     0000  
     345 00000790     09f5          MOVI    SCALE_1TO1,B5
         000007a0 01000100  
     346 000007c0     c000          JRUC    STRINGER
         000007d0     0100  
     347                    
     348                    **************************************************************************
     349                    *                                                                        *
     350                    * STRCNC - PRINT STRING WITH:                                            *
     351                    *                CENTER JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST      *
     352                    *                NO CONSTANT SUBSTITUTE                                  *
     353                    * TRASHES A4,B3 & B5                                                     *
     354                    *                                                                        *
     355                    **************************************************************************
     356 000007e0           STRCNC:
     357 000007e0     09e4          MOVI    DMAWNZ,A4
         000007f0 00008002  
     358 00000810     09d3          MOVI    CENTER_JUSTIFY,B3
         00000820     0001  
     359 00000830     09f5          MOVI    SCALE_1TO1,B5
         00000840 01000100  
     360 00000860     c000          JRUC    STRINGER
         00000870     00f6  
     361                    
     362                    **************************************************************************
     363                    *                                                                        *
     364                    * STRRNC - PRINT STRING WITH:                                            *
     365                    *                RIGHT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST       *
     366                    *                NO CONSTANT SUBSTITUTE                                  *
     367                    * TRASHES A4,B3 & B5                                                     *
     368                    *                                                                        *
     369                    **************************************************************************
     370 00000880           STRRNC:
     371 00000880     09e4          MOVI    DMAWNZ,A4
         00000890 00008002  
     372 000008b0     09d3          MOVI    RIGHT_JUSTIFY,B3
         000008c0     0002  
     373 000008d0     09f5          MOVI    SCALE_1TO1,B5
         000008e0 01000100  
     374 00000900     c000          JRUC    STRINGER
         00000910     00ec  
     375                    
     376                    **************************************************************************
     377                    *                                                                        *
     378                    * STRLNCF - PRINT STRING WITH:                                           *
     379                    *                RIGHT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST       *
     380                    *                NO CONSTANT SUBSTITUTE, FIXED SPACING                   *
     381                    * TRASHES A4,B3 & B5                                                     *
     382                    *                                                                        *
     383                    **************************************************************************
     384 00000920           STRLNCF:
     385 00000920     09e4          MOVI    DMAWNZ,A4
         00000930 00008002  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    9

     386 00000950     09d3          MOVI    M_FIXEDSPC|LEFT_JUSTIFY,B3
         00000960     2000  
     387 00000970     09f5          MOVI    SCALE_1TO1,B5
         00000980 01000100  
     388 000009a0     c000          JRUC    STRINGER
         000009b0     00e2  
     389                    
     390                    **************************************************************************
     391                    *                                                                        *
     392                    * STRRNCF - PRINT STRING WITH:                                           *
     393                    *                RIGHT JUSTIFY, NORMAL, NOT PUT ON THE OBJECT LIST       *
     394                    *                NO CONSTANT SUBSTITUTE, FIXED SPACING                   *
     395                    * TRASHES A4,B3 & B5                                                     *
     396                    *                                                                        *
     397                    **************************************************************************
     398 000009c0           STRRNCF:
     399 000009c0     09e4          MOVI    DMAWNZ,A4
         000009d0 00008002  
     400 000009f0     09d3          MOVI    M_FIXEDSPC|RIGHT_JUSTIFY,B3
         00000a00     2002  
     401 00000a10     09f5          MOVI    SCALE_1TO1,B5
         00000a20 01000100  
     402 00000a40     c000          JRUC    STRINGER
         00000a50     00d8  
     403                    
     404                    **************************************************************************
     405                    *                                                                        *
     406                    * STRLNCOF - PRINT STRING WITH:                                          *
     407                    *                LEFT JUSTIFY, NORMAL, INSERT ON OBJECT LIST             *
     408                    *                NO CONSTANT SUBSTITUTE, FIXED SPACING                   *
     409                    * TRASHES A4,B3,B4 & B5                                                  *
     410                    *                                                                        *
     411                    **************************************************************************
     412 00000a60           STRLNCOF
     413 00000a60     09e4          MOVI    DMAWNZ,A4
         00000a70 00008002  
     414 00000a90     09f3          MOVI    M_FIXEDSPC|M_TEXTOBJ|LEFT_JUSTIFY,B3
         00000aa0 00012000  
     415 00000ac0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00000ad0 00008001  
     416 00000af0     09f5          MOVI    SCALE_1TO1,B5
         00000b00 01000100  
     417 00000b20     c000          JRUC    STRINGER
         00000b30     00ca  
     418                    
     419                    **************************************************************************
     420                    *                                                                        *
     421                    * STRRNCOF - PRINT STRING WITH:                                          *
     422                    *                RIGHT JUSTIFY, NORMAL, INSERT ON OBJECT LIST            *
     423                    *                NO CONSTANT SUBSTITUTE, FIXED SPACING                   *
     424                    * TRASHES A4,B3,B4 & B5                                                  *
     425                    *                                                                        *
     426                    **************************************************************************
     427 00000b40           STRRNCOF
     428 00000b40     09e4          MOVI    DMAWNZ,A4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   10

         00000b50 00008002  
     429 00000b70     09f3          MOVI    M_FIXEDSPC|M_TEXTOBJ|RIGHT_JUSTIFY,B3
         00000b80 00012002  
     430 00000ba0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00000bb0 00008001  
     431 00000bd0     09f5          MOVI    SCALE_1TO1,B5
         00000be0 01000100  
     432 00000c00     c000          JRUC    STRINGER
         00000c10     00bc  
     433                    
     434                    **************************************************************************
     435                    *                                                                        *
     436                    * STRCNCOF - PRINT STRING WITH:                                          *
     437                    *                CENTER JUSTIFY, NORMAL, INSERT ON OBJECT LIST           *
     438                    *                NO CONSTANT SUBSTITUTE, FIXED SPACING                   *
     439                    * TRASHES A4,B3,B4 & B5                                                  *
     440                    *                                                                        *
     441                    **************************************************************************
     442 00000c20           STRCNCOF
     443 00000c20     09e4          MOVI    DMAWNZ,A4
         00000c30 00008002  
     444 00000c50     09f3          MOVI    M_FIXEDSPC|M_TEXTOBJ|CENTER_JUSTIFY,B3
         00000c60 00012001  
     445 00000c80     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00000c90 00008001  
     446 00000cb0     09f5          MOVI    SCALE_1TO1,B5
         00000cc0 01000100  
     447 00000ce0     c000          JRUC    STRINGER
         00000cf0     00ae  
     448                    
     449                    **************************************************************************
     450                    *                                                                        *
     451                    * STRLNCO - PRINT STRING WITH:                                           *
     452                    *                LEFT JUSTIFY, NORMAL, INSERT ON OBJECT LIST             *
     453                    *                NO CONSTANT SUBSTITUTE                                  *
     454                    * TRASHES A4,B3,B4 & B5                                                  *
     455                    *                                                                        *
     456                    **************************************************************************
     457 00000d00           STRLNCO
     458 00000d00     09e4          MOVI    DMAWNZ,A4
         00000d10 00008002  
     459 00000d30     09f3          MOVI    M_TEXTOBJ|LEFT_JUSTIFY,B3
         00000d40 00010000  
     460 00000d60     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00000d70 00008001  
     461 00000d90     09f5          MOVI    SCALE_1TO1,B5
         00000da0 01000100  
     462 00000dc0     c000          JRUC    STRINGER
         00000dd0     00a0  
     463                    
     464                    **************************************************************************
     465                    *                                                                        *
     466                    * STRCNCO - PRINT STRING WITH:                                           *
     467                    *                CENTER JUSTIFY, NORMAL, INSERT ON OBJECT LIST           *
     468                    *                NO CONSTANT SUBSTITUTE                                  *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   11

     469                    * TRASHES A4,B3,B4 & B5                                                  *
     470                    *                                                                        *
     471                    **************************************************************************
     472 00000de0           STRCNCO:
     473 00000de0     09e4          MOVI    DMAWNZ,A4
         00000df0 00008002  
     474 00000e10     09f3          MOVI    M_TEXTOBJ|CENTER_JUSTIFY,B3
         00000e20 00010001  
     475 00000e40     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00000e50 00008001  
     476 00000e70     09f5          MOVI    SCALE_1TO1,B5
         00000e80 01000100  
     477 00000ea0     c000          JRUC    STRINGER
         00000eb0     0092  
     478                    
     479                    **************************************************************************
     480                    *                                                                        *
     481                    * STR?NCONV - PRINT STRING WITH:                                         *
     482                    *                JUSTIFY, NORMAL, INSERT ON OBJECT LIST                  *
     483                    *                NO CONSTANT SUBSTITUTE, NO VELOCITY ADD                 *
     484                    * TRASHES A4,B3,B4 & B5                                                  *
     485                    *                                                                        *
     486                    **************************************************************************
     487 00000ec0           STRCNCONV:
     488 00000ec0     09e4          MOVI    DMAWNZ,A4
         00000ed0 00008002  
     489 00000ef0     09f3          MOVI    M_TEXTOBJ|CENTER_JUSTIFY,B3
         00000f00 00010001  
     490 00000f20     09f4          MOVI    M_SCRNOBJ|M_NOSCALE|M_NOVEL,B4
         00000f30 00008101  
     491 00000f50     09f5          MOVI    SCALE_1TO1,B5
         00000f60 01000100  
     492 00000f80     c000          JRUC    STRINGER
         00000f90     0084  
     493                    
     494 00000fa0           STRLNCONV:
     495 00000fa0     09e4          MOVI    DMAWNZ,A4
         00000fb0 00008002  
     496 00000fd0     09f3          MOVI    M_TEXTOBJ|LEFT_JUSTIFY,B3
         00000fe0 00010000  
     497 00001000     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00001010 00008001  
     498 00001030     09f5          MOVI    SCALE_1TO1,B5
         00001040 01000100  
     499 00001060     c077          JRUC    STRINGER
     500                    
     501 00001070           STRRNCONV:
     502 00001070     09e4          MOVI    DMAWNZ,A4
         00001080 00008002  
     503 000010a0     09f3          MOVI    M_TEXTOBJ|RIGHT_JUSTIFY,B3
         000010b0 00010002  
     504 000010d0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         000010e0 00008001  
     505 00001100     09f5          MOVI    SCALE_1TO1,B5
         00001110 01000100  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   12

     506 00001130     c06a          JRUC    STRINGER
     507                    
     508                    **************************************************************************
     509                    *                                                                        *
     510                    *       SHADOW ROUTINES -- IDENTICAL TO ABOVE EXCEPT YOU HAVE TO TACK    *
     511                    *       AN "S" ON THE END OF THE ROUTINE NAME                            *
     512                    *                                                                        *
     513                    **************************************************************************
     514 00001140           STRLNRMS
     515 00001140     09e4          MOVI    DMACNZ,A4
         00001150 00008008  
     516 00001170     09f3          MOVI    M_TEXTSHAD|LEFT_JUSTIFY,B3
         00001180 00008000  
     517 000011a0     09f5          MOVI    SCALE_1TO1,B5
         000011b0 01000100  
     518 000011d0     c060          JRUC    STRINGER
     519                    
     520 000011e0           STRCNRMS
     521 000011e0     09e4          MOVI    DMACNZ,A4
         000011f0 00008008  
     522 00001210     09f3          MOVI    M_TEXTSHAD|CENTER_JUSTIFY,B3
         00001220 00008001  
     523 00001240     09f5          MOVI    SCALE_1TO1,B5
         00001250 01000100  
     524 00001270     c056          JRUC    STRINGER
     525                    
     526 00001280           STRCNRMS2
     527 00001280     09e4          MOVI    DMACNZ,A4
         00001290 00008008  
     528 000012b0     09f3          MOVI    M_TEXTSHAD|M_TEXTDMA2|CENTER_JUSTIFY,B3
         000012c0 0000c001  
     529 000012e0     09f5          MOVI    SCALE_1TO1,B5
         000012f0 01000100  
     530 00001310     c04c          JRUC    STRINGER
     531                    
     532 00001320           STRRNRMS
     533 00001320     09e4          MOVI    DMACNZ,A4
         00001330 00008008  
     534 00001350     09f3          MOVI    M_TEXTSHAD|RIGHT_JUSTIFY,B3
         00001360 00008002  
     535 00001380     09f5          MOVI    SCALE_1TO1,B5
         00001390 01000100  
     536 000013b0     c042          JRUC    STRINGER
     537                    
     538 000013c0           STRCNRMOS
     539 000013c0     09e4          MOVI    DMACNZ,A4
         000013d0 00008008  
     540 000013f0     09f3          MOVI    M_TEXTOBJ|M_TEXTSHAD|CENTER_JUSTIFY,B3
         00001400 00018001  
     541 00001420     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00001430 00008001  
     542 00001450     09f5          MOVI    SCALE_1TO1,B5
         00001460 01000100  
     543 00001480     c035          JRUC    STRINGER
     544                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   13

     545 00001490           STRRNRMOS
     546 00001490     09e4          MOVI    DMACNZ,A4
         000014a0 00008008  
     547 000014c0     09f3          MOVI    M_TEXTOBJ|M_TEXTSHAD|RIGHT_JUSTIFY,B3
         000014d0 00018002  
     548 000014f0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00001500 00008001  
     549 00001520     09f5          MOVI    SCALE_1TO1,B5
         00001530 01000100  
     550 00001550     c028          JRUC    STRINGER
     551                    
     552                    **************************************************************************
     553                    *                                                                        *
     554                    *       Arbitrary SCALE routines - Same as above but the caller sends    *
     555                    *               the scale in B5.                                         *
     556                    *                                                                        *
     557                    **************************************************************************
     558 00001560           STRCNRMOS_SCALE
     559 00001560     09e4          MOVI    DMACNZ,A4
         00001570 00008008  
     560 00001590     09f3          MOVI    M_TEXTOBJ|M_TEXTSHAD|CENTER_JUSTIFY,B3
         000015a0 00018001  
     561 000015c0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         000015d0 00008001  
     562 000015f0     c01e          JRUC    STRINGER
     563                    
     564 00001600           STRLNRMOS_SCALE
     565 00001600     09e4          MOVI    DMACNZ,A4
         00001610 00008008  
     566 00001630     09f3          MOVI    M_TEXTOBJ|M_TEXTSHAD|LEFT_JUSTIFY,B3
         00001640 00018000  
     567 00001660     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00001670 00008001  
     568 00001690     c014          JRUC    STRINGER
     569                    
     570 000016a0           STRRNRMOS_SCALE
     571 000016a0     09e4          MOVI    DMACNZ,A4
         000016b0 00008008  
     572 000016d0     09f3          MOVI    M_TEXTOBJ|M_TEXTSHAD|RIGHT_JUSTIFY,B3
         000016e0 00018002  
     573 00001700     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         00001710 00008001  
     574 00001730     c00a          JRUC    STRINGER
     575                    
     576 00001740           STRLNCONV_SCALE:
     577 00001740     09e4          MOVI    DMAWNZ,A4
         00001750 00008002  
     578 00001770     09f3          MOVI    M_TEXTOBJ|LEFT_JUSTIFY,B3
         00001780 00010000  
     579 000017a0     09f4          MOVI    M_SCRNOBJ|M_NOSCALE,B4
         000017b0 00008001  
     580 000017d0     0300          JRUC    STRINGER
     581                    
     582                    **************************************************************************
     583                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   14

     584                    * STRINGER - OUTPUT A TEXT STRING, THIS IS A PROCESS SUBROUTINE!         *
     585                    * B1 = [SOUND INDX, OID IF CHARS ARE OBJECTS]                            *
     586                    *       SEE NOTE ABOVE                                                   *
     587                    * B3 = FLAGS - INSERT:JUSTIFY                                            *
     588                    *       JUSTIFY = 0 LEFT JUSTIFY                                         *
     589                    *                 1 CENTER JUSTIFY                                       *
     590                    *                 2 RIGHT JUSTIFY                                        *
     591                    *       FLAGS:                                                           *
     592                    *       BIT 13: 1=Fixed spacing (i.e. cursor adv constant # of pix).     *
     593                    *               0=Natural spacing (i.e. cursor adv based on char size).  *
     594                    *       BIT 14: 1=DMA characters on both display pages, if applicable.   *
     595                    *       BIT 15: 1=Shadow the characters                                  *
     596                    *       BIT 16: 0=Just DMA once.                                         *
     597                    *               1=Create string as OBJECTS.                              *
     598                    *       BIT 17: 0=Insert objects on list, if applicable.                 *
     599                    *               1=Do NOT insert objects, if applicable.                  *
     600                    * B4 = OBJECT OFLAGS (ONLY APPLICABLE TO TEXT CREATED AS OBJECTS)        *
     601                    * B5 = [Y,X] SCALE FACTOR                                                *
     602                    *                                                                        *
     603                    * NOTE: CALL WITH JSRP                                                   *
     604                    *       Uses PTEMP1 in the process block                                 *
     605                    *                                                                        *
     606                    **************************************************************************
     607 000017e0           STRINGER
     608 000017e0     5610          CLR     B0
     609 000017f0     0590          MOVE    B0,@STRING_UNDERLINE,W  ; CLEAR OUT UNDERLINING
         00001800 00001190- 
     610                    
     611 00001820     57ce          CLR     A14
     612 00001830     b3cd          MOVE    A14,*A13(PTEMP1),L      ;Storage for MULTI-PART string obj
         00001840     0860  
     613                    
     614 00001850     0d3f          CALLR   WHITE_SPACE     ;Calculate the White space for this font
         00001860     031a  
     615 00001870     0d3f          CALLR   SCALE_SPACING   ;Scale the spacing values
         00001880     030d  
     616 00001890     0d3f          CALLR   SHADOW_OFFSET   ;Calculate the Shadow offset, returned in B6
         000018a0     032d  
     617                    
     618                    ;DOZ NEW 5-6-95
     619 000018b0     ef4e          MOVY    A10,A14
     620 000018c0     2a0e          SRA     16,A14
     621 000018d0     ca03          JRZ     STRN_JUSTIFY    ;BR=USE DEFAULT NEWLINE
     622 000018e0     ef46          MOVY    A10,A6          ;ADJUST NEWLINE
     623 000018f0     260a          SLL     16,A10          ;CLEAR Y SPACING BETWEEN CHARACTERS
     624 00001900     2e0a          SRL     16,A10
     625 00001910           STRN_JUSTIFY
     626                    ;DOZ NEW 5-6-95
     627                    
     628 00001910     4d23          MOVE    A9,A3           ;KEEP INITIAL POSITION FOR NEWLINES
     629                    
     630 00001920     0d3f          CALLR   JUSTIFY         ;JUSTIFY THE POSITION CORRECTLY
         00001930     02f0  
     631                    
     632 00001940           STRING_NEXT_CHAR
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   15

     633 00001940     8f07          MOVB    *A8,A7          ;GET A CHARACTER
     634 00001950     2707          SLL     24,A7
     635 00001960     2d07          SRL     24,A7           ;MAKE SURE WE'RE POSITIVE
     636 00001970     ca00          JREQ    STRINGRX        ;BR = STRING BE GONE BROTHA
         00001980     0164  
     637 00001990     1108          ADDK    8,A8            ;NEXT BYTE
     638 000019a0     5610          CLR     B0              ; NOT A SPACE, YET
     639                    
     640 000019b0     0b47          CMPI    ' ',A7
         000019c0     ffdf  
     641 000019d0     c31b          JRHI    STRNCHAR        ;BR = IT'S KOSH BABY
     642 000019e0     c812          JRLO    STRING_CONTROL  ;AHHHH SO VEE HAF CONTROLLL
     643                    
     644 000019f0     56e7          CLR     A7
     645 00001a00     4f22          MOVE    A9,B2           ;SAVE IT AWAY
     646 00001a10     1e53          BTST    B_FIXEDSPC,B3   ;CHECK FOR FIXED SPACING
     647 00001a20     cb02          JRNZ    NOFSPC0         ;BR = Spacing is fixed.
     648                    
     649 00001a30     ecc7          MOVX    A6,A7           ;ADD X SPACE
     650 00001a40     e0e9          ADDXY   A7,A9           ;AND ADD IT IN
     651 00001a50           NOFSPC0
     652 00001a50     e149          ADDXY   A10,A9          ;ADD SPACING
     653                    
     654 00001a60     05ae          MOVE    @STRING_UNDERLINE,A14           ;CHECK FOR UNDERLINE
         00001a70 00001190- 
     655 00001a90     caea          JRZ     STRING_NEXT_CHAR        ;BR =  NOPE -- DO NOTHING
     656 00001aa0     4c50          MOVE    B2,B0
     657 00001ab0     4f22          MOVE    A9,B2
     658 00001ac0     4e19          MOVE    B0,A9           ; SWAP THE LOCATIONS
     659 00001ad0     1830          MOVK    1,B0
     660 00001ae0     09c7          MOVI    'A',A7          ; SET TO AN 'A' FOR APPEARANCES
         00001af0     0041  
     661 00001b00     c008          JRUC    STRNCHAR        ; PROCESS IT
     662                    
     663                    *
     664                    *Deal with the given Control Character.  See T_CONTROL_CHARACTERS for options.
     665                    *
     666 00001b10           STRING_CONTROL
     667 00001b10     1427          DEC     A7
     668 00001b20     24a7          SLL     5,A7
     669 00001b30     0b27          ADDI    T_CONTROL_CHARACTERS,A7
         00001b40 00003070' 
     670 00001b60     86e7          MOVE    *A7,A7,L
     671 00001b70     0927          CALL    A7
     672 00001b80     c0db          JRUC    STRING_NEXT_CHAR
     673                    
     674                    *OUTPUT A CHARACTER
     675 00001b90           STRNCHAR:
     676 00001b90     098f          MMTM    SP,A0,A2,A3,A4,A5,A6,A10
         00001ba0     be20  
     677                    
     678 00001bb0     4d61          MOVE    A11,A1          ;ESCAPE TO THE OTHER SIDE
     679                    
     680 00001bc0     0be7          SUBI    21H,A7          ;GET A BASE
         00001bd0     ffde  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   16

     681 00001be0     24a7          SLL     5,A7
     682 00001bf0     40e1          ADD     A7,A1
     683 00001c00     8621          MOVE    *A1,A1,L        ;LOAD THE ADDRESS OF THE IMAGE HEADER
     684 00001c10     b622          MOVE    *A1(ISIZE),A2,L
         00001c20     0010  
     685 00001c30                   SWAP    A4,A5
     686 00001c60     0d5f          CALLA   GANIOF
         00001c70 00000000! 
     687 00001c90                   SWAP    A4,A5
     688                    
     689 00001cc0     1df3          BTST    B_TEXTOBJ,B3    ;Should we create an Object or just DMA
     690 00001cd0     ca00          JREQ    STRNQDMA        ;BR = just DMA
         00001ce0     00ae  
     691                    
     692                    *CREATE THE CHARACTER AS AN OBJECT, HERE
     693                    
     694 00001cf0     0d5f          CALLA   GETOBJ
         00001d00 00000000! 
     695 00001d20     ca00          JREQ    STRNGDUN                ;BR = No object, terminate the string
         00001d30     00f7  
     696                    
     697 00001d40                   PUSH    A8
     698                    
     699 00001d50     b220          MOVE    A1,*A0(OIMG),L
         00001d60     02c0  
     700 00001d70     b240          MOVE    A2,*A0(OUSIZE),L
         00001d80     0240  
     701 00001d90     ba20          MOVE    *A1(ISAG),*A0(OSAG),L
         00001da0     0030  
         00001db0     0200  
     702 00001dc0     b2a0          MOVE    A5,*A0(OPAL),L
         00001dd0     0280  
     703                    
     704 00001de0     4d2e          MOVE    A9,A14
     705 00001df0     2e06          SRL     16,A6
     706 00001e00     eee6          MOVY    A7,A6
     707 00001e10     e2ce          SUBXY   A6,A14                  ;ADJUST FOR ANIMATION POINT
     708                    
     709 00001e20     b3c0          MOVE    A14,*A0(ODAG),L         ;STUFF 'DA DAG
         00001e30     0220  
     710 00001e40     b1c0          MOVE    A14,*A0(OXPOS),W
         00001e50     0150  
     711 00001e60     2e0e          SRL     16,A14
     712 00001e70     b1c0          MOVE    A14,*A0(OYPOS),W
         00001e80     0170  
     713                    
     714 00001e90     4c86          MOVE    A4,A6
     715 00001ea0     b42e          MOVE    *A1(ICTRL),A14,W        ;GET BPP AND COMPRESSION
         00001eb0     0000  
     716 00001ec0     55c6          OR      A14,A6
     717 00001ed0     2606          SLL     16,A6
     718 00001ee0     b2c0          MOVE    A6,*A0(OFSET),L         ;STUFF OFFSET AND CONTROL
         00001ef0     01e0  
     719                    
     720 00001f00     4e0e          MOVE    A0,B14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   17

     721 00001f10     b2be          MOVE    B5,*B14(OSCALE),L
         00001f20     02a0  
     722 00001f30     b03e          MOVE    B1,*B14(OID),W
         00001f40     0430  
     723 00001f50     b09e          MOVE    B4,*B14(OFLAGS),W
         00001f60     0420  
     724 00001f70     4eb0          MOVE    B5,A0
     725 00001f80     0d5f          CALLA   GET_SCALED_SIZE
         00001f90 00000000! 
     726 00001fb0     4fd0          MOVE    B14,A0
     727 00001fc0     b2c0          MOVE    A6,*A0(OSIZE),L
         00001fd0     0260  
     728                    
     729 00001fe0     0d5f          CALLA   INC_PALCNT              ;CLICK UP ONE MORE FOR THIS GUY
         00001ff0 00000000! 
     730                    
     731 00002010                   MOVIM   TEXTZVAL,*A0(OZVAL),L
     732                    
     733 00002060     b7a8          MOVE    *A13(PTEMP1),A8,L       ;Do we have a head Object yet?
         00002070     0860  
     734 00002080     cb04          JRNZ    STRN_OBJ_GOT_HEAD       ;BR = Yeah, we've got some head
     735 00002090     4c08          MOVE    A0,A8
     736 000020a0     b20d          MOVE    A0,*A13(PTEMP1),L
         000020b0     0860  
     737 000020c0     c003          JRUC    STRNG_OBJ_CK_INSERT
     738 000020d0           STRN_OBJ_GOT_HEAD
     739 000020d0     0d5f          CALLA   INSPART                 ;Just another Brick in the Wall
         000020e0 00000000! 
     740 00002100           STRNG_OBJ_CK_INSERT
     741                    
     742 00002100     4c10          MOVE    B0,B0
     743 00002110     cb05          JRNZ    STRN_NO_INS_OBJECT
     744                    
     745 00002120     1dd3          BTST    B_NOINSERT,B3           ;Should we insert the character?
     746 00002130     cb03          JRNZ    STRN_NO_INS_OBJECT      ;BR = No.
     747                    
     748 00002140     0d5f          CALLA   INSOBJ                  ;STUFF THIS SHEEEEEEET
         00002150 00000000! 
     749                    
     750 00002170           STRN_NO_INS_OBJECT
     751                    
     752                    *
     753                    *UNDERLINE CHECK
     754                    *
     755 00002170     05ae          MOVE    @STRING_UNDERLINE,A14,W
         00002180 00001190- 
     756 000021a0     ca2c          JRZ     STR_NO_UNDERLINE_OBJECT
     757                    
     758 000021b0     0b6b          CMPI    RD7FONT,A11             ; ONLY UNDERLINES 7 POINT
         000021c0 ffff29af" 
     759 000021e0     cb28          JRNZ    STR_NO_UNDERLINE_OBJECT
     760                    
     761 000021f0                   PUSH    A0
     762 00002200     0d5f          CALLA   GETOBJ
         00002210 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   18

     763 00002230     ca22          JRZ     STR_OBJ_UNDERLINE_DONE
     764 00002240     87e8          MOVE    *SP,A8,L
     765                    
     766 00002250     0d5f          CALLA   COPY_OBJ                ; DUPE THE OLD OBJECT
         00002260 00000000! 
     767                    
     768 00002280     0d5f          CALLA   INC_PALCNT              ;CLICK UP ONE MORE FOR THIS GUY
         00002290 00000000! 
     769                    
     770 000022b0     4c08          MOVE    A0,A8
     771                    
     772 000022c0     09e1          MOVI    FONT8UNDERLINE,A1
         000022d0 00012b20" 
     773 000022f0     09e4          MOVI    DMACAL,A4               ; CONSTANT
         00002300 0000800c  
     774 00002320     0d5f          CALLA   ANI                     ; PRESTO
         00002330 00000000! 
     775                    
     776 00002350     b50e          MOVE    *A8(OXPOS),A14,W
         00002360     0150  
     777 00002370     142e          SUBK    1,A14
     778 00002380     b1c8          MOVE    A14,*A8(OXPOS),W
         00002390     0150  
     779                    
     780 000023a0     b7a8          MOVE    *A13(PTEMP1),A8,L
         000023b0     0860  
     781 000023c0     0d5f          CALLA   INSPART                 ;Make us part of the master
         000023d0 00000000! 
     782                    
     783 000023f0     4c10          MOVE    B0,B0                   ; CHECK TO SEE IF IT IS A SPACE
     784 00002400     cb05          JRNZ    STR_OBJ_UNDERLINE_DONE
     785                    
     786 00002410     1dd3          BTST    B_NOINSERT,B3           ;Should we insert the underline?
     787 00002420     cb03          JRNZ    STR_OBJ_UNDERLINE_DONE  ;BR = No.
     788 00002430     0d5f          CALLA   INSOBJ                  ; GET IT UP
         00002440 00000000! 
     789 00002460           STR_OBJ_UNDERLINE_DONE
     790 00002460                   PULLQ   A0
     791 00002470           STR_NO_UNDERLINE_OBJECT
     792                    
     793                    ;
     794                    ;       CHECK FOR SHADOWING
     795                    ;
     796                    
     797 00002470     1e13          BTST    B_TEXTSHAD,B3
     798 00002480     ca32          JRZ     STR_NO_SHADOW_OBJECT
     799                    
     800 00002490                   PUSH    A0
     801 000024a0     0d5f          CALLA   GETOBJ
         000024b0 00000000! 
     802 000024d0     cb02          JRNE    STRN_GOT_SHADOW_OBJECT  ;BR = We got our stuff baby
     803 000024e0                   PULLQ   A0                      ;Pull back off for sanity
     804 000024f0     c02b          JRUC    STR_NO_SHADOW_OBJECT    ;And get the hell out
     805 00002500           STRN_GOT_SHADOW_OBJECT
     806 00002500                   PULLQ   A8
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   19

     807                    
     808 00002510     0d5f          CALLA   COPY_OBJ                ; DUPE THE OLD OBJECT
         00002520 00000000! 
     809                    
     810 00002540     4ed8          MOVE    B6,A8                   ;Get shadow offset
     811 00002550     0508          SEXT    A8                      ;X part only
     812 00002560     b40e          MOVE    *A0(OXPOS),A14,W
         00002570     0150  
     813 00002580     410e          ADD     A8,A14
     814 00002590     b1c0          MOVE    A14,*A0(OXPOS),W
         000025a0     0150  
     815                    
     816 000025b0     4ed8          MOVE    B6,A8                   ;Get shadow offset
     817 000025c0     2a08          SRA     16,A8                   ;Y part only
     818 000025d0     b40e          MOVE    *A0(OYPOS),A14,W        ;STUFF POSITIONS
         000025e0     0170  
     819 000025f0     410e          ADD     A8,A14
     820 00002600     b1c0          MOVE    A14,*A0(OYPOS),W        ;STUFF POSITIONS
         00002610     0170  
     821                    
     822 00002620     09ee          MOVI    TEXTZVAL+1,A14          ;JUST UNDER THE REAL THING
         00002630 84000001  
     823 00002650     b3c0          MOVE    A14,*A0(OZVAL),L        ;PUT IT UNDER REGULAR STUFF
         00002660     0180  
     824                    
     825 00002670     4ca8          MOVE    A5,A8
     826 00002680     09e5          MOVI    COLOR_PBLACK,A5
         00002690 08080101  
     827 000026b0     0d5f          CALLA   INC_PALCNT              ;MARK THE PALETTE AS TAKEN
         000026c0 00000000! 
     828 000026e0     b2a0          MOVE    A5,*A0(OPAL),L
         000026f0     0280  
     829 00002700     4d05          MOVE    A8,A5
     830                    
     831 00002710     b7a8          MOVE    *A13(PTEMP1),A8,L
         00002720     0860  
     832 00002730     0d5f          CALLA   INSPART                 ;Make us part of the master
         00002740 00000000! 
     833 00002760     1dd3          BTST    B_NOINSERT,B3           ;Should we insert the shadow?
     834 00002770     cb03          JRNZ    STR_OBJ_SHADOW_NOINSERT ;BR = No.
     835 00002780     0d5f          CALLA   INSOBJ
         00002790 00000000! 
     836 000027b0           STR_OBJ_SHADOW_NOINSERT
     837                    
     838                    *
     839                    *This is the end of the whole Object mess.  Must pull our shit here.
     840                    *
     841 000027b0           STR_NO_SHADOW_OBJECT:
     842 000027b0                   PULLQ   A8
     843 000027c0     c04e          JRUC    STRNGDUN
     844                    
     845                    *SIMPLY DMA THE SUCKER, HERE
     846                    *A1 = Ptr to ROM image header
     847                    *A2 = ISIZE of object
     848 000027d0           STRNQDMA
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   20

     849 000027d0     4eb0          MOVE    B5,A0           ;SET SCALE
     850 000027e0                   SWAP    A4,A5
     851 00002810     4d23          MOVE    A9,A3
     852 00002820     2e06          SRL     16,A6
     853 00002830     eee6          MOVY    A7,A6
     854 00002840     e2c3          SUBXY   A6,A3           ;ANIMATION PNT ADJUSTED DAG
     855                    
     856 00002850     b42e          MOVE    *A1(ICTRL),A14,W        ;GET BPP AND COMPRESSION
         00002860     0000  
     857 00002870     55c5          OR      A14,A5
     858 00002880     2605          SLL     16,A5
     859                    
     860 00002890     4c2a          MOVE    A1,A10
     861 000028a0     4c81          MOVE    A4,A1           ;CONSTANT:PALETTE
     862 000028b0     b744          MOVE    *A10(ISAG),A4,L ;SAG ME
         000028c0     0030  
     863                    
     864 000028d0     1e13          BTST    B_TEXTSHAD,B3
     865 000028e0     ca12          JRZ     NO_DMA_SHADOW
     866                    
     867 000028f0     098f          MMTM    SP,A1,A3
         00002900     5000  
     868 00002910     09e1          MOVI    COLOR_PBLACK,A1         ;Make it BLACK from the Fixed palette
         00002920 08080101  
     869                    
     870 00002940     4ede          MOVE    B6,A14
     871 00002950     e1c3          ADDXY   A14,A3                  ;Add the shadowing offset
     872                    
     873 00002960     1e33          BTST    B_TEXTDMA2,B3           ;DMA TWICE?
     874 00002970     ca04          JREQ    STRNQDS_1               ;BR = NO
     875 00002980     0d5f          CALLA   QDMAN2
         00002990 00000000! 
     876 000029b0     c003          JRUC    STRNQDS_DONE
     877 000029c0           STRNQDS_1
     878 000029c0     0d5f          CALLA   QDMAN
         000029d0 00000000! 
     879 000029f0           STRNQDS_DONE
     880 000029f0     09af          MMFM    SP,A1,A3
         00002a00     000a  
     881 00002a10           NO_DMA_SHADOW
     882 00002a10     4c10          MOVE    B0,B0                   ; CHECK FOR SPACE
     883 00002a20     cb09          JRNZ    DMA_SPACE
     884 00002a30     1e33          BTST    B_TEXTDMA2,B3           ;DMA TWICE?
     885 00002a40     ca04          JREQ    STRNQD_1                ;BR = NO
     886 00002a50     0d5f          CALLA   QDMAN2
         00002a60 00000000! 
     887 00002a80     c003          JRUC    DMA_SPACE
     888 00002a90           STRNQD_1
     889 00002a90     0d5f          CALLA   QDMAN
         00002aa0 00000000! 
     890 00002ac0           DMA_SPACE
     891                    
     892                    *Do an Underline check here
     893                    *A1 = Ptr to ROM image header
     894                    *A2 = ISIZE of object
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   21

     895 00002ac0     05ae          MOVE    @STRING_UNDERLINE,A14,W
         00002ad0 00001190- 
     896 00002af0     ca19          JRZ     NO_DMA_UNDERLINE
     897 00002b00                   PUSH    A1
     898 00002b10     09e1          MOVI    FONT8UNDERLINE,A1
         00002b20 00012b20" 
     899 00002b40     09e5          MOVI    DMACAL,A5
         00002b50 0000800c  
     900 00002b70     4d23          MOVE    A9,A3
     901 00002b80     b42e          MOVE    *A1(ICTRL),A14,W        ;GET BPP AND COMPRESSION
         00002b90     0000  
     902 00002ba0     55c5          OR      A14,A5
     903 00002bb0     2605          SLL     16,A5
     904 00002bc0     0d5f          CALLA   GANIOF
         00002bd0 00000000! 
     905 00002bf0     b624          MOVE    *A1(ISAG),A4,L
         00002c00     0030  
     906 00002c10                   PULLQ   A1
     907 00002c20     2e06          SRL     16,A6
     908 00002c30     eee6          MOVY    A7,A6
     909 00002c40     e2c3          SUBXY   A6,A3           ;ANIMATION PNT ADJUSTED DAG
     910 00002c50     1423          SUBK    1,A3            ; SHIFT OVER 1 MORE
     911 00002c60     0d5f          CALLA   QDMAN
         00002c70 00000000! 
     912 00002c90           NO_DMA_UNDERLINE
     913 00002c90     4c25          MOVE    A1,A5
     914 00002ca0     4d41          MOVE    A10,A1
     915 00002cb0           STRNGDUN
     916 00002cb0     4c10          MOVE    B0,B0           ; CHECK TO SEE IF CHAR IS A SPACE
     917 00002cc0     ca04          JRZ     STRNG_DUN_NO_SPACE
     918                    
     919 00002cd0     4e59          MOVE    B2,A9           ; SETUP THE NEW SPACING
     920 00002ce0     09af          MMFM    SP,A2,A3,A4,A5,A6,A10
         00002cf0     047c  
     921 00002d00     c00c          JRUC    STRNG_BYPASS_1
     922                    
     923                    *A2 = ISIZE of object
     924 00002d10           STRNG_DUN_NO_SPACE
     925 00002d10     5621          CLR     A1
     926 00002d20     ec41          MOVX    A2,A1
     927 00002d30     1e53          BTST    B_FIXEDSPC,B3   ; CHECK FOR FIXED SPACING
     928 00002d40     cb05          JRNZ    NOFSPC1         ; BR = NO FIXED SPACING
     929                    
     930 00002d50     4ebe          MOVE    B5,A14          ;GET X-SCALE FACTOR
     931 00002d60     050e          SEXT    A14
     932 00002d70     2501          SLL     8,A1
     933 00002d80     5bc1          DIVU    A14,A1          ;Scale the X factor
     934                    
     935 00002d90     e029          ADDXY   A1,A9           ;GET TO THE OTHER SIDE OF THE CHARACTER
     936 00002da0           NOFSPC1
     937 00002da0     09af          MMFM    SP,A2,A3,A4,A5,A6,A10
         00002db0     047c  
     938 00002dc0     e149          ADDXY   A10,A9          ;ADD IN SPACING
     939 00002dd0           STRNG_BYPASS_1
     940 00002dd0     97e0          MOVE    *SP+,A0,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   22

     941 00002de0     ca00          JREQ    STRING_NEXT_CHAR        ;BR = NO SLEEP
         00002df0     feb4  
     942                    *HOARDING THE NUTS UNTIL THE LONG LONG WINTER IS OVER.
     943 00002e00     098c          MMTM    A12,A0,A3,A4,A5,A6
         00002e10     9e00  
     944 00002e20     4c3e          MOVE    B1,B14
     945 00002e30     2e1e          SRL     16,B14          ;SHALL WE MAKE A BEEP SOUND?
     946 00002e40     ca09          JRZ     STRNG_NO_SOUND  ;BR = NO
     947 00002e50     4c03          MOVE    A0,A3
     948 00002e60     4fd0          MOVE    B14,A0          ;FLAG BECOMES INDEX
     949 00002e70     1420          DEC     A0
     950 00002e80     24a0          SLL     5,A0
     951 00002e90     0b20          ADDI    TEXT_SOUND_TAB,A0
         00002ea0 00012b90" 
     952 00002ec0     8600          MOVE    *A0,A0,L
     953                    ;       CALLA   ONESND
     954 00002ed0     4c60          MOVE    A3,A0
     955 00002ee0           STRNG_NO_SOUND
     956 00002ee0     4f8e          MOVE    A12,B14
     957 00002ef0     099e          MMTM    B14,B1,B3,B4,B5,B6
         00002f00     5e00  
     958 00002f10     4fdc          MOVE    B14,A12
     959 00002f20     0d5f          CALLA   PRCSLP
         00002f30 00000000! 
     960 00002f50     4f8e          MOVE    A12,B14
     961 00002f60     09be          MMFM    B14,B1,B3,B4,B5,B6
         00002f70     007a  
     962 00002f80     4fdc          MOVE    B14,A12
     963 00002f90     09ac          MMFM    A12,A0,A3,A4,A5,A6
         00002fa0     0079  
     964                    
     965 00002fb0     c000          JRUC    STRING_NEXT_CHAR
         00002fc0     fe97  
     966 00002fd0           STRINGRX
     967 00002fd0     1108          ADDK    8,A8                    ;GET TO THE NEXT BYTE
     968 00002fe0     4ca6          MOVE    A5,A6
     969 00002ff0     2e06          SRL     16,A6                   ;RETURN THE COLOR CORRECTLY
     970 00003000     b7ae          MOVE    *A13(PTEMP1),A14,L      ;Get master object ptr
         00003010     0860  
     971 00003020     ca01          JRZ     STRINGER_RET            ;BR= There are no objects
     972 00003030     4dc2          MOVE    A14,A2
     973 00003040           STRINGER_RET
     974 00003040                   RETP
     975                    
     976                    **************************************************************************
     977                    *                                                                        *
     978                    * Look-Up table for Control Character functions                          *
     979                    *                                                                        *
     980                    **************************************************************************
     981 00003070           T_CONTROL_CHARACTERS
     982 00003070 00003210'         .LONG   CONTROL_NEW_SLEEP
     983 00003090 00003230'         .LONG   CONTROL_NEW_PCOLOR
     984 000030b0 00003270'         .LONG   CONTROL_NEW_CONTROL
     985 000030d0 00003290'         .LONG   CONTROL_NEW_FONT
     986 000030f0 000032f0'         .LONG   CONTROL_NEW_XY
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   23

     987 00003110 00003310'         .LONG   CONTROL_NEW_SPACING
     988 00003130 00003350'         .LONG   CONTROL_ADD_DYDX
     989 00003150 00003400'         .LONG   CONTROL_NEW_PALETTE
     990 00003170 00003480'         .LONG   CONTROL_ASCII_TAB
     991 00003190 00003490'         .LONG   CONTROL_UNDERLINE_ON
     992 000031b0 000034e0'         .LONG   CONTROL_UNDERLINE_OFF
     993 000031d0 00003220'         .LONG   CONTROL_NULL
     994 000031f0 00003530'         .LONG   CONTROL_ASCII_CR
     995                    
     996                    **************************************************************************
     997                    *                                                                        *
     998                    * Control Character functions.                                           *
     999                    *       These are meant to be called directly from STRINGER.             *
    1000                    *       If you call them from elsewhere, make sure you are aware         *
    1001                    *       of the registers that may get trashed.                           *
    1002                    *                                                                        *
    1003                    **************************************************************************
    1004 00003210           CONTROL_NEW_SLEEP
    1005 00003210     9500          MOVE    *A8+,A0,W       ;NEW SLEEP TIME
    1006 00003220           CONTROL_NULL
    1007 00003220     0960          RETS
    1008 00003230           CONTROL_NEW_PCOLOR
    1009 00003230     9501          MOVE    *A8+,A1,W       ;NEW PRINT COLOR
    1010 00003240     2601          SLL     16,A1
    1011 00003250     ee25          MOVY    A1,A5           ;THE CORRECT POSITION PLEASE
    1012 00003260     0960          RETS
    1013 00003270           CONTROL_NEW_CONTROL
    1014 00003270     9504          MOVE    *A8+,A4,W       ;NEW DMA FLAGS
    1015 00003280     0960          RETS
    1016 00003290           CONTROL_NEW_FONT                ;NOTE: This gets called from JUSTIFY
    1017 00003290     970b          MOVE    *A8+,A11,L      ;NEW FONT
    1018 000032a0     0d3f          CALLR   WHITE_SPACE     ;Re-Calculate the White space for font (A6)
         000032b0     0175  
    1019 000032c0     0d3f          CALLR   SHADOW_OFFSET   ;Also the shadowing stuff              (B6)
         000032d0     018a  
    1020                    
    1021                    ;DOZ NEW 5-6-95
    1022                    ;       MOVY    A10,A14
    1023                    ;       SRA     16,A14
    1024                    ;       JRZ     C_NF_DONE       ;BR=USE DEFAULT NEWLINE
    1025                    ;       MOVY    A10,A6          ;ADJUST NEWLINE
    1026                    ;C_NF_DONE
    1027                    ;DOZ NEW 5-6-95
    1028                    
    1029 000032e0     0960          RETS
    1030 000032f0           CONTROL_NEW_XY
    1031 000032f0     9709          MOVE    *A8+,A9,L       ;NEW POSITION
    1032 00003300     0960          RETS
    1033 00003310           CONTROL_NEW_SPACING             ;NOTE: This gets called from JUSTIFY
    1034 00003310     970a          MOVE    *A8+,A10,L      ;NEW SPACING
    1035 00003320     0d3f          CALLR   SCALE_SPACING
         00003330     0162  
    1036                    
    1037                    ;DOZ NEW 5-6-95
    1038                    ;       MOVY    A10,A14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   24

    1039                    ;       SRA     16,A14
    1040                    ;       JRZ     C_NS_DONE       ;BR=USE DEFAULT NEWLINE
    1041                    ;       MOVY    A10,A6          ;ADJUST NEWLINE
    1042                    ;C_NS_DONE
    1043                    ;DOZ NEW 5-6-95
    1044                    
    1045 00003340     0960          RETS
    1046 00003350           CONTROL_ADD_DYDX
    1047 00003350     098f          MMTM    SP,A0,A2,A6
         00003360     a200  
    1048 00003370     9702          MOVE    *A8+,A2,L       ;GET DELTAS
    1049 00003380     4eb0          MOVE    B5,A0
    1050 00003390     0d5f          CALLA   GET_SCALED_SIZE
         000033a0 00000000! 
    1051 000033c0     e0c9          ADDXY   A6,A9           ;AND ADD THEM
    1052 000033d0     09af          MMFM    SP,A0,A2,A6
         000033e0     0045  
    1053 000033f0     0960          RETS
    1054 00003400           CONTROL_NEW_PALETTE
    1055 00003400     4c01          MOVE    A0,A1
    1056 00003410     9700          MOVE    *A8+,A0,L       ;GET PALETTE I.D.
    1057 00003420     0d5f          CALLA   FINDPAL         ;FIND IT'S SPOT
         00003430 00000000! 
    1058 00003450     ec05          MOVX    A0,A5
    1059 00003460     4c20          MOVE    A1,A0
    1060 00003470     0960          RETS
    1061 00003480           CONTROL_ASCII_TAB
    1062 00003480     0960          RETS
    1063 00003490           CONTROL_UNDERLINE_ON
    1064 00003490     1830          MOVK    1,B0
    1065 000034a0     0590          MOVE    B0,@STRING_UNDERLINE,W
         000034b0 00001190- 
    1066 000034d0     0960          RETS
    1067 000034e0           CONTROL_UNDERLINE_OFF
    1068 000034e0     5610          CLR     B0
    1069 000034f0     0590          MOVE    B0,@STRING_UNDERLINE,W
         00003500 00001190- 
    1070 00003520     0960          RETS
    1071 00003530           CONTROL_ASCII_CR
    1072 00003530     4c69          MOVE    A3,A9           ;GET BACK TO WHERE YOU ONCE BELONGED
    1073 00003540     56e7          CLR     A7
    1074 00003550     eec7          MOVY    A6,A7
    1075 00003560     e0e9          ADDXY   A7,A9           ;NEXT LINE DOWN
    1076 00003570     4d23          MOVE    A9,A3           ;STORE THIS POSITION
    1077 00003580     0d3f          CALLR   JUSTIFY         ;AND REJUSTIFY YOUR POSITION
         00003590     012a  
    1078 000035a0     0960          RETS
    1079                    
    1080                    **************************************************************************
    1081                    *                                                                        *
    1082                    *       END OF PRINT ROUTINES.                                           *
    1083                    *                                                                        *
    1084                    **************************************************************************
    1085                    
    1086                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   25

    1087                    *                                                                        *
    1088                    *       PRINT FORMAT AND UTILITY ROUTINES                                *
    1089                    *                                                                        *
    1090                    **************************************************************************
    1091                    *
    1092                    *NULL STRING FOR DUMMIES
    1093                    *
    1094 000035b0     0000  DUMSTRNG .WORD  0
    1095                    *
    1096                    *EQUATES FOR STRINGF
    1097              0000  B_LJUSTIFY      EQU     0               ;LEFT JUSTIFY WITHIN FIELD
    1098              0001  B_CJUSTIFY      EQU     1               ;CENTER JUSTIFY WITHIN FIELD
    1099              0002  B_PSIGN         EQU     2               ;PRINT SIGN IF SIGNED
    1100              0003  B_COMMAS        EQU     3               ;PRINT COMMAS
    1101              0004  B_PHEX          EQU     4               ;PRINT HEX PREFIX
    1102              0005  B_ZPRINT        EQU     5               ;FILL UNUSED WIDTH WITH ZEROS
    1103              0006  B_SIGNED        EQU     6               ;THIS VALUE IS OF SIGNED TYPE
    1104              0007  B_CAP           EQU     7               ;USE CAPITAL LETTERS FOR HEX DIGITS
    1105                    *
    1106                    *SIZE EQUATES
    1107              0008  TYPE_SHORT      EQU     8
    1108              0010  TYPE_INT        EQU     16
    1109              0020  TYPE_LONG       EQU     32
    1110                    **************************************************************************
    1111                    *                                                                        *
    1112                    * STRINGF - STRING FORMAT ROUTINE.                                       *
    1113                    *         SEE "ASCII Character String Definition" AT THE TOP OF FILE.    *
    1114                    * A8 = PTR TO STRING TO FORMAT.                                          *
    1115                    * RETURNS:                                                               *
    1116                    * A3 = PTR TO .EVEN WORD AFTER THE LAST ARGUMENT OF THE STRING           *
    1117                    * A8 = PTR TO FORMATTED STRING                                           *
    1118                    * NOTE: TRASHES A14                                                      *
    1119                    *                                                                        *
    1120                    **************************************************************************
    1121 000035c0           STRINGF:
    1122 000035c0                   CLRM    @SFINDEX,W      ;CLEAR THE STRING BUILD MEMORY INDEX
    1123 00003600           STRINGF_RECURSE:                ;RECURSION ENTRY POINT
    1124 00003600     098f          MMTM    SP,A0,A1,A2,A4,A5,A6,A7
         00003610     ef00  
    1125 00003620     05a7          MOVE    @SFINDEX,A7,W   ;GET THE INDEX OF THE NEXT BUFFER TO USE
         00003630 00001180- 
    1126 00003650     0b47          CMPI    NUMSFBUFS,A7
         00003660     fffa  
    1127 00003670     c805          JRLO    SFALLOC         ;MORE BUFFERS TO BE HAD
    1128 00003680     09e8          MOVI    DUMSTRNG,A8     ;POINT TO A NULL STRING WHEN OUT OF MAMMARY
         00003690 000035b0' 
    1129 000036b0     c000          JRUC    STRINGFX
         000036c0     0113  
    1130                    *ALLOCATE A BUFFER IN WHICH TO BUILD THE STRING
    1131 000036d0           SFALLOC
    1132 000036d0                   INCM    @SFINDEX,W      ;INCREMENT THE INDEX FOR NEXT MAM GRAB
    1133 00003740     09c0          MOVI    SFBUFSIZE,A0
         00003750     0320  
    1134 00003760     5e07          MPYU    A0,A7           ;OFFSET TO NEW ARRAY
    1135 00003770     0b27          ADDI    STRINGF_RAM,A7  ;ADD OFFSET, A7 POINTS TO OUR BUILD SPACE
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   26

         00003780 000001e0- 
    1136 000037a0     4ce5          MOVE    A7,A5           ;STORE PTR TO BOS HERE
    1137 000037b0     4d06          MOVE    A8,A6
    1138 000037c0           SFARGLP:
    1139 000037c0     8ec0          MOVB    *A6,A0          ;FIND THE ARGUMENT LIST
    1140 000037d0     1106          ADDK    8,A6            ;AND PNT A6 AT IT
    1141 000037e0     4c00          MOVE    A0,A0
    1142 000037f0     cbfc          JRNZ    SFARGLP         ;SEARCHING FOR NULL TERMINATOR
    1143 00003800     11e6          ADDK    0FH,A6          ;DO OUR OWN .EVEN TO MATCH ASSEMBLER
    1144 00003810     2f86          SRL     4,A6
    1145 00003820     2486          SLL     4,A6            ;MASK FRACTIONAL WORD
    1146 00003830           SFBUILDLP:
    1147 00003830     0d3f          CALLR   GETCHAR
         00003840     01b5  
    1148 00003850     c909          JRNC    SFBUILDCH       ;WE RECIEVED A NORMAL CHARACTER
    1149 00003860     8c07          MOVB    A0,*A7          ;PASS THE CONTROL
    1150 00003870     1107          ADDK    8,A7
    1151 00003880           SFBUILDARG:
    1152 00003880     4c21          MOVE    A1,A1
    1153 00003890     caf9          JRZ     SFBUILDLP       ;FINISHED
    1154 000038a0     9d07          MOVB    *A8,*A7
    1155 000038b0     1108          ADDK    8,A8
    1156 000038c0     1107          ADDK    8,A7            ;TRANSFER ARGS
    1157 000038d0     1421          DEC     A1              ;DEC ARG COUNT
    1158 000038e0     c0f9          JRUC    SFBUILDARG
    1159 000038f0           SFBUILDCH:
    1160 000038f0     1f00          BTST    7,A0            ; CHECK THE HIGH BIT
    1161 00003900     ca06          JRZ     SFVALIDCH
    1162 00003910     4d01          MOVE    A8,A1           ; SAVE IT AWAY
    1163 00003920     0d5f          CALLA   DICT_LOOKUP     ; LOOKUP THE WORD IN A0
         00003930 00000000! 
    1164 00003950     cb5a          JRNZ    SFA8TOA7        ; IF THERE IS SOMETHING, USE IT
    1165 00003960     4c28          MOVE    A1,A8           ; IF BAD RETURN
    1166 00003970           SFVALIDCH
    1167 00003970     0b40          CMPI    '%',A0
         00003980     ffda  
    1168 00003990     cb5e          JRNE    SFCONTROL       ;NOT A FORMAT CHARACTER, HOW ABOUT CONTROL
    1169                    *PARSE STRINGF FORMAT SPECIFIER HERE
    1170 000039a0     0d3f          CALLR   GETCHARI        ;NO SPECIAL CHARACTERS ALLOWED IN FORMAT
         000039b0     01c2  
    1171 000039c0     0b40          CMPI    '%',A0
         000039d0     ffda  
    1172 000039e0     ca00          JREQ    SFXFER          ;JUST PRINT A PERCENT SIGN
         000039f0     00d3  
    1173                    
    1174 00003a00     0d3f          CALLR   FFLAGS          ;GET THE FORMAT FLAGS IF THERE ARE ANY
         00003a10     0139  
    1175 00003a20     0d3f          CALLR   FWIDTH          ;GET FORMAT WIDTH NEXT
         00003a30     0166  
    1176 00003a40     0d3f          CALLR   FTYPE           ;GET THE FORMAT TYPE
         00003a50     017f  
    1177 00003a60           SFTYPE_LP:
    1178 00003a60     0b40          CMPI    's',A0          ;SEE IF IT'S A STRING
         00003a70     ff8c  
    1179 00003a80     cb05          JRNE    SFTYPE0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   27

    1180 00003a90     4d01          MOVE    A8,A1           ;STORE A8
    1181 00003aa0     96c8          MOVE    *A6+,A8,L       ;GET THE ADDRESS OF THE STRING(ALWAYS LONG)
    1182 00003ab0     0d3f          CALLR   STRINGF_RECURSE
         00003ac0     ffb3  
    1183 00003ad0     c042          JRUC    SFA8TOA7        ;TRANSFER THE NEW #
    1184 00003ae0           SFTYPE0:
    1185 00003ae0     0b40          CMPI    'p',A0          ;SEE IF IT'S A POINTER TO A STRING
         00003af0     ff8f  
    1186 00003b00     cb06          JRNE    SFTYPE1
    1187 00003b10     4d01          MOVE    A8,A1           ;STORE A8
    1188 00003b20     96c8          MOVE    *A6+,A8,L       ;GET THE PTR TO THE STRING(IT'S ALWAYS LONG)
    1189 00003b30     8708          MOVE    *A8,A8,L        ;NOW GET THE ADDRESS
    1190 00003b40     0d3f          CALLR   STRINGF_RECURSE
         00003b50     ffaa  
    1191 00003b60     c039          JRUC    SFA8TOA7        ;TRANSFER THE NEW #
    1192 00003b70           SFTYPE1:
    1193 00003b70     4d01          MOVE    A8,A1           ;SAVE A8
    1194 00003b80     0d3f          CALLR   GETARGI
         00003b90     01ae  
    1195 00003ba0     0b40          CMPI    'b',A0
         00003bb0     ff9d  
    1196 00003bc0     cb03          JRNE    SFTYPE5         ;BCD
    1197 00003bd0     0d3f          CALLR   BCD_TO_ASCII_DEC        ;CONVERT
         00003be0     02cd  
    1198 00003bf0     c030          JRUC    SFA8TOA7
    1199 00003c00           SFTYPE5:
    1200 00003c00     0b40          CMPI    'd',A0          ;SIGNED DECIMAL
         00003c10     ff9b  
    1201 00003c20     cb10          JRNE    SFTYPE6
    1202 00003c30                   BSET    B_SIGNED,A4
    1203 00003c60     0b42          CMPI    TYPE_INT,A2     ;SIGN EXTEND LITTLE BROTHER
         00003c70     ffef  
    1204 00003c80     cb02          JRNE    SFTYPE5A
    1205 00003c90     0508          SEXT    A8
    1206 00003ca0     c005          JRUC    SFTYPE5B
    1207 00003cb0           SFTYPE5A:
    1208 00003cb0     0b42          CMPI    TYPE_SHORT,A2   ;AND THE YOUNGEST
         00003cc0     fff7  
    1209 00003cd0     cb02          JRNE    SFTYPE5B
    1210 00003ce0     2708          SLL     24,A8
    1211 00003cf0     2908          SRA     24,A8
    1212 00003d00           SFTYPE5B:
    1213 00003d00     0d3f          CALLR   HEX_TO_ASCII_DEC        ;CONVERT
         00003d10     0214  
    1214 00003d20     c01d          JRUC    SFA8TOA7
    1215 00003d30           SFTYPE6:
    1216 00003d30     0b40          CMPI    'u',A0          ;UNSIGNED DECIMAL
         00003d40     ff8a  
    1217 00003d50     cb03          JRNE    SFTYPE7
    1218 00003d60     0d3f          CALLR   HEX_TO_ASCII_DEC
         00003d70     020e  
    1219 00003d80     c017          JRUC    SFA8TOA7
    1220 00003d90           SFTYPE7:
    1221 00003d90     0b40          CMPI    'x',A0          ;UNSIGNED HEXADECIMAL WITH 'abcdef'
         00003da0     ff87  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   28

    1222 00003db0     cb03          JRNE    SFTYPE8
    1223 00003dc0     0d3f          CALLR   HEX_TO_ASCII_HEX
         00003dd0     0259  
    1224 00003de0     c011          JRUC    SFA8TOA7
    1225 00003df0           SFTYPE8:
    1226 00003df0     0b40          CMPI    'X',A0          ;UNSIGNED HEXADECIMAL WITH 'ABCDEF'
         00003e00     ffa7  
    1227 00003e10     cb06          JRNE    SFTYPE9
    1228 00003e20                   BSET    B_CAP,A4
    1229 00003e50     0d3f          CALLR   HEX_TO_ASCII_HEX
         00003e60     0250  
    1230 00003e70     c008          JRUC    SFA8TOA7
    1231 00003e80           SFTYPE9:
    1232 00003e80     0b40          CMPI    'c',A0          ;SINGLE CHARACTER
         00003e90     ff9c  
    1233 00003ea0     cb04          JRNE    SFTYPE10
    1234 00003eb0     8d07          MOVB    A8,*A7
    1235 00003ec0     1107          ADDK    8,A7
    1236 00003ed0     4c28          MOVE    A1,A8
    1237 00003ee0     c094          JRUC    SFBUILDLP
    1238 00003ef0           SFTYPE10:
    1239                    *ADD NEW type SPECIFIERS HERE
    1240 00003ef0     c093          JRUC    SFBUILDLP
    1241                    *TRANSFER NEW FORMAT STRING TO THE STRING WE ARE BUILDING
    1242 00003f00           SFA8TOA7:
    1243 00003f00     8f00          MOVB    *A8,A0
    1244 00003f10     ca04          JRZ     SFA8A7DONE
    1245 00003f20     1108          ADDK    8,A8
    1246 00003f30     8c07          MOVB    A0,*A7
    1247 00003f40     1107          ADDK    8,A7
    1248 00003f50     c0fa          JRUC    SFA8TOA7
    1249 00003f60           SFA8A7DONE:
    1250 00003f60     4c28          MOVE    A1,A8
    1251 00003f70     c08b          JRUC    SFBUILDLP
    1252                    *
    1253                    *CHECK FOR A CONTROL CHARACTER
    1254 00003f80           SFCONTROL:
    1255 00003f80     0b40          CMPI    '\',A0
         00003f90     ffa3  
    1256 00003fa0     cb78          JRNE    SFXFER          ;JUST ANOTHER CHARACTER
    1257 00003fb0     0d3f          CALLR   GETCHARI        ;NOW GET THE CONTROL CHARACTER
         00003fc0     0161  
    1258 00003fd0     0b40          CMPI    '\',A0
         00003fe0     ffa3  
    1259 00003ff0     ca73          JREQ    SFXFER          ;OH! HE WANTS TO PRINT THIS
    1260 00004000     5663          CLR     A3              ;ASSUME NO INDIRECTION
    1261 00004010     0b40          CMPI    '*',A0          ;IS THERE INDIRECTION HERE?
         00004020     ffd5  
    1262 00004030     cb03          JRNE    SFCONTROL_IMM   ;BR = NO
    1263 00004040     1823          MOVK    1,A3            ;CONTROL INDIRECT FLAG
    1264 00004050     0d3f          CALLR   GETCHARI        ;THIS TIME GET THE CONTROL CHARACTER FOR REAL!
         00004060     0157  
    1265                    
    1266 00004070           SFCONTROL_IMM:
    1267 00004070     0b40          CMPI    'a',A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   29

         00004080     ff9e  
    1268 00004090     cb08          JRNE    SFC1
    1269 000040a0     09c0          MOVI    NEW_SLEEP,A0    ;NEW SLEEP TIME
         000040b0     0001  
    1270 000040c0     09c2          MOVI    TYPE_INT,A2
         000040d0     0010  
    1271 000040e0     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
         000040f0     0168  
    1272 00004100     c000          JRUC    SFBUILDLP
         00004110     ff71  
    1273 00004120           SFC1:
    1274 00004120     0b40          CMPI    'b',A0
         00004130     ff9d  
    1275 00004140     cb08          JRNE    SFC2
    1276 00004150     09c0          MOVI    NEW_PCOLOR,A0   ;NEW PRINT COLOR
         00004160     0002  
    1277 00004170     09c2          MOVI    TYPE_INT,A2
         00004180     0010  
    1278 00004190     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
         000041a0     015d  
    1279 000041b0     c000          JRUC    SFBUILDLP
         000041c0     ff66  
    1280 000041d0           SFC2:
    1281 000041d0     0b40          CMPI    'c',A0
         000041e0     ff9c  
    1282 000041f0     cb08          JRNE    SFC3
    1283 00004200     09c0          MOVI    NEW_CONTROL,A0  ;NEW DMA CONTROL WORD
         00004210     0003  
    1284 00004220     09c2          MOVI    TYPE_INT,A2
         00004230     0010  
    1285 00004240     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
         00004250     0152  
    1286 00004260     c000          JRUC    SFBUILDLP
         00004270     ff5b  
    1287 00004280           SFC3:
    1288 00004280     0b40          CMPI    'd',A0
         00004290     ff9b  
    1289 000042a0     cb08          JRNE    SFC4
    1290 000042b0     09c0          MOVI    NEW_FONT,A0     ;NEW FONT
         000042c0     0004  
    1291 000042d0     09c2          MOVI    TYPE_LONG,A2
         000042e0     0020  
    1292 000042f0     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
         00004300     0147  
    1293 00004310     c000          JRUC    SFBUILDLP
         00004320     ff50  
    1294 00004330           SFC4:
    1295 00004330     0b40          CMPI    'e',A0
         00004340     ff9a  
    1296 00004350     cb08          JRNE    SFC5
    1297 00004360     09c0          MOVI    NEW_XY,A0       ;NEW [Y,X] CURSOR POSITION
         00004370     0005  
    1298 00004380     09c2          MOVI    TYPE_LONG,A2
         00004390     0020  
    1299 000043a0     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   30

         000043b0     013c  
    1300 000043c0     c000          JRUC    SFBUILDLP
         000043d0     ff45  
    1301 000043e0           SFC5:
    1302 000043e0     0b40          CMPI    'i',A0
         000043f0     ff96  
    1303 00004400     cb08          JRNE    SFC6
    1304 00004410     09c0          MOVI    NEW_SPACING,A0  ;NEW SPACING
         00004420     0006  
    1305 00004430     09c2          MOVI    TYPE_LONG,A2
         00004440     0020  
    1306 00004450     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
         00004460     0131  
    1307 00004470     c000          JRUC    SFBUILDLP
         00004480     ff3a  
    1308 00004490           SFC6:
    1309 00004490     0b40          CMPI    'n',A0
         000044a0     ff91  
    1310 000044b0     cb03          JRNE    SFC7
    1311 000044c0     09c0          MOVI    ASCII_CR,A0     ;NEWLINE
         000044d0     000d  
    1312 000044e0     c024          JRUC    SFXFER
    1313 000044f0           SFC7:
    1314 000044f0     0b40          CMPI    'f',A0
         00004500     ff99  
    1315 00004510     cb08          JRNE    SFC8
    1316 00004520     09c0          MOVI    ADD_DYDX,A0     ;ADD [DY,DX]
         00004530     0007  
    1317 00004540     09c2          MOVI    TYPE_LONG,A2
         00004550     0020  
    1318 00004560     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
         00004570     0120  
    1319 00004580     c000          JRUC    SFBUILDLP
         00004590     ff29  
    1320 000045a0           SFC8:
    1321 000045a0     0b40          CMPI    'p',A0
         000045b0     ff8f  
    1322 000045c0     cb08          JRNE    SFC9
    1323 000045d0     09c0          MOVI    NEW_PALETTE,A0  ;USE A NEW PALETTE
         000045e0     0008  
    1324 000045f0     09c2          MOVI    TYPE_LONG,A2
         00004600     0020  
    1325 00004610     0d3f          CALLR   PUTCARG         ;GET THE CONTROL ARG
         00004620     0115  
    1326 00004630     c000          JRUC    SFBUILDLP
         00004640     ff1e  
    1327 00004650           SFC9:
    1328 00004650     0b40          CMPI    'u',A0          ; UNDERLINING ACTIVATED?
         00004660     ff8a  
    1329 00004670     cb03          JRNE    SFC10
    1330 00004680     09c0          MOVI    UNDERLINE_ON,A0
         00004690     000a  
    1331 000046a0     c008          JRUC    SFXFER
    1332 000046b0           SFC10:
    1333 000046b0     0b40          CMPI    'v',A0          ; UNDERLINING DE-ACTIVATED?
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   31

         000046c0     ff89  
    1334 000046d0     cb03          JRNE    SFC11
    1335 000046e0     09c0          MOVI    UNDERLINE_OFF,A0
         000046f0     000b  
    1336 00004700     c002          JRUC    SFXFER
    1337 00004710           SFC11:
    1338                    *ADD NEW CONTROL CHARACTERS HERE
    1339 00004710     c000          JRUC    SFBUILDLP
         00004720     ff10  
    1340 00004730           SFXFER:
    1341 00004730     8c07          MOVB    A0,*A7
    1342 00004740     1107          ADDK    8,A7
    1343 00004750     4c00          MOVE    A0,A0
    1344 00004760     cb00          JRNZ    SFBUILDLP       ;ADD ON ANOTHER CHARACTER
         00004770     ff0b  
    1345                    *STRING IS DONE
    1346 00004780     4ca8          MOVE    A5,A8           ;PASS BACK THE PTR TO THE NEW
    1347 00004790                   DECM    @SFINDEX,W      ;FREE THIS BUFFER
    1348 00004800           STRINGFX
    1349 00004800     4cc3          MOVE    A6,A3           ;RETURN END
    1350 00004810     09af          MMFM    SP,A0,A1,A2,A4,A5,A6,A7
         00004820     00f7  
    1351 00004830     0960          RETS
    1352                    
    1353                    **************************************************************************
    1354                    *                                                                        *
    1355                    * JUSTIFY - JUSTIFY THE STRING STARTING POINT FROM THE GIVEN POSITION    *
    1356                    *         BASED ON THE JUSTIFICATION BYTE                                *
    1357                    * A8 = PTR TO STRING                                                     *
    1358                    * A9 = STRING POSITION                                                   *
    1359                    * B3 = JUSTIFICATION BYTE                                                *
    1360                    *               0 = LEFT                                                 *
    1361                    *               1 = CENTER                                               *
    1362                    *               2 = RIGHT                                                *
    1363                    * B5 = [Y,X] Scale factor for string.                                    *
    1364                    * RETURNS:                                                               *
    1365                    * A9 = JUSTIFIED STARTING POSITION                                       *
    1366                    *                                                                        *
    1367                    **************************************************************************
    1368 00004840           JUSTIFY:
    1369 00004840                   PUSH    A7
    1370 00004850     56e7          CLR     A7
    1371 00004860     4e77          MOVE    B3,A7
    1372 00004870     27c7          SLL     30,A7
    1373 00004880     2c47          SRL     30,A7           ; MASK OFF THE SHADOW BIT
    1374 00004890     1427          DEC     A7
    1375 000048a0     ce08          JRN     JUSTIFYX        ;NORMAL LEFT JUSTIFY
    1376 000048b0     ca03          JREQ    JUSTIFYC        ;CENTER JUSTIFY
    1377                    *RIGHT JUSTIFY
    1378 000048c0     0d3f          CALLR   STRING_LENGTH   ;GET THE STRING LENGTH
         000048d0     0108  
    1379 000048e0     c003          JRUC    JUSTIFYA
    1380                    *CENTER JUSTIFY
    1381 000048f0           JUSTIFYC:
    1382 000048f0     0d3f          CALLR   STRING_LENGTH
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   32

         00004900     0105  
    1383 00004910     2fe7          SRL     1,A7            ;STRNGLEN/2
    1384 00004920           JUSTIFYA:
    1385 00004920     e2e9          SUBXY   A7,A9           ;ADJUST STRING STARTING POSITION
    1386 00004930           JUSTIFYX:
    1387 00004930                   PULL    A7
    1388 00004950     0960          RETS
    1389                    
    1390                    **************************************************************************
    1391                    *                                                                        *
    1392                    * SCALE_SPACING - Take the current spacing value for the font and        *
    1393                    *               scale it according to the current scale factor.          *
    1394                    * A10 = Current [Y,X] spacing.                                           *
    1395                    * B5 = [Y,X] Scale factor for font.                                      *
    1396                    * RETURNS:                                                               *
    1397                    * A10 = Scaled spacing                                                   *
    1398                    *                                                                        *
    1399                    **************************************************************************
    1400 00004960           SCALE_SPACING:
    1401 00004960     098f          MMTM    SP,A0,A2,A6
         00004970     a200  
    1402 00004980     4eb0          MOVE    B5,A0                   ;Transfer values to the proper regs
    1403 00004990     4d42          MOVE    A10,A2
    1404 000049a0     0d5f          CALLA   GET_SCALED_SIZE         ;Convert the spacing
         000049b0 00000000! 
    1405 000049d0     4cca          MOVE    A6,A10                  ;And put it in the right place.
    1406 000049e0     09af          MMFM    SP,A0,A2,A6
         000049f0     0045  
    1407 00004a00     0960          RETS
    1408                    
    1409                    **************************************************************************
    1410                    *                                                                        *
    1411                    * WHITE_SPACE - Calculate the White space lengths for the given font.    *
    1412                    *               Also handles Y spacing between lines.                    *
    1413                    * A11 = Ptr to current font table.                                       *
    1414                    * B5 = [Y,X] Scale factor for font.                                      *
    1415                    * RETURNS:                                                               *
    1416                    * A6 = [Y,X] White space values                                          *
    1417                    *                                                                        *
    1418                    **************************************************************************
    1419 00004a10           WHITE_SPACE:
    1420 00004a10     098f          MMTM    SP,A0,A2
         00004a20     a000  
    1421 00004a30     09c6          MOVI    'H' - 21H,A6    ;USE 'H' FOR SPACE AND NEWLINE STUFF
         00004a40     0027  
    1422 00004a50     24a6          SLL     5,A6
    1423 00004a60     4166          ADD     A11,A6
    1424 00004a70     86c6          MOVE    *A6,A6,L        ;LOAD THE ADDRESS OF THE IMAGE HEADER
    1425 00004a80     b6c2          MOVE    *A6(ISIZE),A2,L ;GET THE VISIBLE SIZE OF 'H'
         00004a90     0010  
    1426 00004aa0     4eb0          MOVE    B5,A0           ;We need the factor
    1427 00004ab0     0d5f          CALLA   GET_SCALED_SIZE
         00004ac0 00000000! 
    1428 00004ae0     eec2          MOVY    A6,A2
    1429 00004af0     0526          ZEXT    A6
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   33

    1430 00004b00     2fe6          SRL     1,A6            ;(X SIZE OF 'H')/2 = X SPACING
    1431 00004b10     ee46          MOVY    A2,A6
    1432 00004b20     2de2          SRL     17,A2
    1433 00004b30     2602          SLL     16,A2
    1434 00004b40     e046          ADDXY   A2,A6           ;(Y SIZE OF 'H') + (Y SIZE OF 'H')/2 = Y SPACE
    1435 00004b50     09af          MMFM    SP,A0,A2
         00004b60     0005  
    1436 00004b70     0960          RETS
    1437                    
    1438                    
    1439                    **************************************************************************
    1440                    *                                                                        *
    1441                    * SHADOW_OFFSET - Calculate the offset used for placing the shadow       *
    1442                    *               image.                                                   *
    1443                    *                                                                        *
    1444                    * A6 = Scaled [Y,X] White space characters                               *
    1445                    * A11 = Ptr to current font table.                                       *
    1446                    * B5 = [Y,X] scale factor                                                *
    1447                    * Returns:                                                               *
    1448                    *       B6 = [Y,X] shadow offset                                         *
    1449                    *                                                                        *
    1450                    **************************************************************************
    1451 00004b80           SHADOW_OFFSET
    1452 00004b80     098f          MMTM    SP,A0,A2,A6
         00004b90     a200  
    1453 00004ba0     09e2          MOVI    [2,2],A2
         00004bb0 00020002  
    1454 00004bd0     0506          SEXT    A6
    1455 00004be0     0b46          CMPI    3,A6                    ;Is this a small font?
         00004bf0     fffc  
    1456 00004c00     c703          JRGT    SOFF_NORM               ;BR = Not that small.
    1457 00004c10     0d02          SUBI    [1,1],A2                ;Reduce shadow offset, so it looks good
         00004c20 fffefffe  
    1458 00004c40           SOFF_NORM
    1459 00004c40     4eb0          MOVE    B5,A0
    1460 00004c50     0d5f          CALLA   GET_SCALED_SIZE
         00004c60 00000000! 
    1461                    
    1462 00004c80     e246          SUBXY   A2,A6
    1463 00004c90                   HALFXY  A6
    1464 00004cf0     e046          ADDXY   A2,A6
    1465                    
    1466 00004d00     0b66          CMPI    [1,1],A6                ;Sanity check
         00004d10 fffefffe  
    1467 00004d30     c503          JRGE    SOFF_OK                 ;BR = We are sane
    1468 00004d40     09e6          MOVI    [1,1],A6                ;Default to smallest visible difference
         00004d50 00010001  
    1469 00004d70           SOFF_OK
    1470 00004d70     4ec6          MOVE    A6,B6
    1471                    
    1472 00004d80     09af          MMFM    SP,A0,A2,A6
         00004d90     0045  
    1473 00004da0     0960          RETS
    1474                    
    1475                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   34

    1476                    **************************************************************************
    1477                    *                                                                        *
    1478                    * FFLAGS - PARSE THE FORMAT flags (IF THERE ARE ANY).                    *
    1479                    *        SETS THE APPROPRIATE BITS IN THE FLAG REGISTER.                 *
    1480                    * A0 = CURRENT CHARACTER FROM STRING                                     *
    1481                    * A8 = PTR TO STRING AFTER *A0                                           *
    1482                    * RETURNS:                                                               *
    1483                    * A0 = NEXT CHARACTER AFTER flags OR SAME IF NO flags PRESENT            *
    1484                    * A4 = FLAG REGISTER WITH APPROPRIATE BITS SET OR CLEARED                *
    1485                    * A8 = PTR TO NEXT CHARACTER                                             *
    1486                    * NOTE: TRASHES A14                                                      *
    1487                    *                                                                        *
    1488                    **************************************************************************
    1489 00004db0           FFLAGS:
    1490 00004db0     5684          CLR     A4              ;CLEAR FLAG REGISTER TO START
    1491 00004dc0           FFLAG_LP:
    1492 00004dc0     0b40          CMPI    '-',A0          ;CHECK FOR LEFT JUSTIFY FLAG
         00004dd0     ffd2  
    1493 00004de0     cb07          JRNE    FFLAGP1
    1494 00004df0                   BSET    B_LJUSTIFY,A4
    1495 00004e20                   BCLR    B_CJUSTIFY,A4
    1496 00004e50     c020          JRUC    FFLAG_NXT
    1497 00004e60           FFLAGP1:
    1498 00004e60     0b40          CMPI    '^',A0          ;CHECK FOR CENTER JUSTIFY FLAG
         00004e70     ffa1  
    1499 00004e80     cb07          JRNE    FFLAGP2
    1500 00004e90                   BSET    B_CJUSTIFY,A4
    1501 00004ec0                   BCLR    B_LJUSTIFY,A4
    1502 00004ef0     c016          JRUC    FFLAG_NXT
    1503 00004f00           FFLAGP2:
    1504 00004f00     0b40          CMPI    '+',A0          ;CHECK FOR PRINT SIGN FLAG
         00004f10     ffd4  
    1505 00004f20     cb04          JRNE    FFLAGP3
    1506 00004f30                   BSET    B_PSIGN,A4
    1507 00004f60     c00f          JRUC    FFLAG_NXT
    1508 00004f70           FFLAGP3:
    1509 00004f70     0b40          CMPI    ',',A0          ;CHECK FOR COMMA FLAG
         00004f80     ffd3  
    1510 00004f90     cb04          JRNE    FFLAGP4
    1511 00004fa0                   BSET    B_COMMAS,A4
    1512 00004fd0     c008          JRUC    FFLAG_NXT
    1513 00004fe0           FFLAGP4:
    1514 00004fe0     0b40          CMPI    '#',A0          ;CHECK FOR HEX PREFIX FLAG
         00004ff0     ffdc  
    1515 00005000     cb04          JRNE    FFLAGP5
    1516 00005010                   BSET    B_PHEX,A4
    1517 00005040     c001          JRUC    FFLAG_NXT
    1518 00005050           FFLAGP5:
    1519                    *ADD NEW FLAGS HERE
    1520 00005050     c003          JRUC    FFLAHH
    1521 00005060           FFLAG_NXT:
    1522 00005060     0d3f          CALLR   GETCHARI
         00005070     0056  
    1523 00005080     c0d3          JRUC    FFLAG_LP
    1524 00005090           FFLAHH
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   35

    1525 00005090     0960          RETS
    1526                    
    1527                    **************************************************************************
    1528                    *                                                                        *
    1529                    * FWIDTH - GRAB THE FORMAT width FROM THE CURRENT STRING (IF PRESENT).   *
    1530                    *        SETS ZPRINT FLAG IS FLAG REGISTER IF NECESSARY                  *
    1531                    * A0 = CURRENT CHARACTER FROM STRING                                     *
    1532                    * A4 = FLAG REGISTER                                                     *
    1533                    * A8 = PTR TO STRING AFTER *A0                                           *
    1534                    * RETURNS:                                                               *
    1535                    * A0 = NEXT CHARACTER AFTER width OR SAME IF NO width PRESENT            *
    1536                    * A3 = width , 0 = NO width SPECIFIED                                    *
    1537                    * A4 = FLAG REGISTER WITH ZPRINT FLAG SET IF NECESSARY                   *
    1538                    * A8 = PTR TO NEXT CHARACTER                                             *
    1539                    *                                                                        *
    1540                    **************************************************************************
    1541 000050a0           FWIDTH:
    1542 000050a0                   PUSH    A1
    1543 000050b0     1941          MOVK    10,A1           ;DECIMAL MULTIPLIER
    1544 000050c0     5663          CLR     A3              ;FIELD width WILL BE HERE
    1545 000050d0     0b40          CMPI    '0',A0          ;CHECK FOR LEADING ZERO PRINT FLAG
         000050e0     ffcf  
    1546 000050f0     cb05          JRNE    FWIDTH_LP
    1547 00005100                   BSET    B_ZPRINT,A4
    1548 00005130     0d3f          CALLR   GETCHARI        ;GET THE NEXT
         00005140     0049  
    1549 00005150           FWIDTH_LP:
    1550 00005150     0b40          CMPI    '0',A0
         00005160     ffcf  
    1551 00005170     c40a          JRLT    FWIDTHX         ;NOT A NUMBER
    1552 00005180     0b40          CMPI    '9',A0
         00005190     ffc6  
    1553 000051a0     c707          JRGT    FWIDTHX         ;NOT A NUMBER
    1554 000051b0     0be0          SUBI    '0',A0          ;ASCII TO DECIMAL
         000051c0     ffcf  
    1555 000051d0     5e23          MPYU    A1,A3           ;UP IT BY 10
    1556 000051e0     4003          ADD     A0,A3           ;AND ADD IN THE NEW
    1557 000051f0     0d3f          CALLR   GETCHARI
         00005200     003d  
    1558 00005210     c0f3          JRUC    FWIDTH_LP
    1559 00005220           FWIDTHX
    1560 00005220                   PULL    A1
    1561 00005240     0960          RETS
    1562                    
    1563                    **************************************************************************
    1564                    *                                                                        *
    1565                    * FTYPE - RETURN THE FORMAT TYPE, I.E. SHORT, INT OR LONG.               *
    1566                    * A0 = PTR TO CURRENT CHARACTER TO CHECK                                 *
    1567                    * A8 = PTR TO STRING THAT IS BEING FORMATTED                             *
    1568                    * RETURNS:                                                               *
    1569                    * A0 = NEXT CHARACTER TO PROCESS AFTER type OR SAME IF NO TYPE SPECIFIED *
    1570                    * A8 = PTR TO NEXT CHARACTER                                             *
    1571                    * DEFAULT RETURN IS INT                                                  *
    1572                    *                                                                        *
    1573                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   36

    1574 00005250           FTYPE:
    1575 00005250     1a02          MOVK    TYPE_INT,A2
    1576 00005260           FTYPE_LP:
    1577 00005260     0b40          CMPI    'h',A0                  ;CHECK FOR TYPE SHORT
         00005270     ff97  
    1578 00005280     cb02          JRNE    FTYPEP1
    1579 00005290     1902          MOVK    TYPE_SHORT,A2
    1580 000052a0     c00b          JRUC    FTYPE_NXT
    1581 000052b0           FTYPEP1:
    1582 000052b0     0b40          CMPI    'l',A0                  ;CHECK FOR TYPE LONG
         000052c0     ff93  
    1583 000052d0     cb02          JRNE    FTYPEP2
    1584 000052e0     1802          MOVK    TYPE_LONG,A2
    1585 000052f0     c006          JRUC    FTYPE_NXT
    1586 00005300           FTYPEP2:
    1587 00005300     0b40          CMPI    'L',A0                  ;CHECK FOR TYPE LONG
         00005310     ffb3  
    1588 00005320     cb02          JRNE    FTYPEP3
    1589 00005330     1802          MOVK    TYPE_LONG,A2
    1590 00005340     c001          JRUC    FTYPE_NXT
    1591 00005350           FTYPEP3:
    1592                    *ADD NEW TYPE HERE
    1593 00005350     c003          JRUC    FTYPEX
    1594 00005360           FTYPE_NXT:
    1595 00005360     0d3f          CALLR   GETCHARI
         00005370     0026  
    1596 00005380     c0ed          JRUC    FTYPE_LP
    1597 00005390           FTYPEX
    1598 00005390     0960          RETS
    1599                    
    1600                    **************************************************************************
    1601                    *                                                                        *
    1602                    * GETCHAR - GET NEXT CHARACTER FROM A STRING.                            *
    1603                    *         MASKS THE HIGH 24 BITS OF THE LONG WORD.                       *
    1604                    * A8 = PTR STRING                                                        *
    1605                    * RETURNS:                                                               *
    1606                    *       C = CONTROL BYTE, ARGS FOLLOW, A1 = # OF BYTE ARGUMENTS          *
    1607                    *      NC = NORMAL CHARACTER OR TERMINATOR.                              *
    1608                    *       Z = BYTE IS A TERMINATOR                                         *
    1609                    * A0 = CHARACTER                                                         *
    1610                    * A8 = PTR TO NEXT                                                       *
    1611                    *                                                                        *
    1612                    **************************************************************************
    1613 000053a0           GETCHAR:
    1614 000053a0     8f00          MOVB    *A8,A0
    1615 000053b0     2700          SLL     24,A0
    1616 000053c0     2d00          SRL     24,A0           ;MAKE SURE THIS NUMBER IS POSITIVE
    1617 000053d0     1108          ADDK    8,A8            ;POINT TO NEXT CHARACTER
    1618 000053e0     0b40          CMPI    0,A0
         000053f0     ffff  
    1619 00005400     ca0b          JREQ    GETCHARX        ;TERMINATOR
    1620 00005410     0b40          CMPI    ' ',A0
         00005420     ffdf  
    1621 00005430     c908          JRNC    GETCHARX        ;SAME AS JRHS
    1622 00005440     4c01          MOVE    A0,A1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   37

    1623 00005450     1421          DEC     A1
    1624 00005460     2461          SLL     3,A1
    1625 00005470     0b21          ADDI    CONTROL_TAB,A1
         00005480 000054e0' 
    1626 000054a0     8e21          MOVB    *A1,A1          ;GET NUMBER OF BYTES
    1627 000054b0     0de0          SETC
    1628 000054c0           GETCHARX:
    1629 000054c0     4c00          MOVE    A0,A0
    1630 000054d0     0960          RETS
    1631                    
    1632                    *
    1633                    *NUMBER OF ARGUMENT BYTES FOR CONTROL CHARACTER (1-1F)
    1634 000054e0           CONTROL_TAB
    1635 000054e0       02          .BYTE   2,2,2,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    1636 000055e0                   .EVEN
    1637                    
    1638                    **************************************************************************
    1639                    *                                                                        *
    1640                    * GETCHARI - GET NEXT CHARACTER, SKIP COMMAND BYTES AND ARGUMENTS.       *
    1641                    *          USED WITH STRGNLEN, FFLAGS, FWIDTH, FTYPE, ETC.               *
    1642                    * A8 = PTR TO STRING                                                     *
    1643                    * RETURNS:                                                               *
    1644                    *  Z = CHARACTER IS A TERMINATOR                                         *
    1645                    * A0 = CHARACTER OR TERMINATOR                                           *
    1646                    * A8 = PTR TO NEXT                                                       *
    1647                    *                                                                        *
    1648                    **************************************************************************
    1649 000055e0           GETCHARI:
    1650 000055e0                   PUSH    A1
    1651 000055f0           GETCHARI_LP:
    1652 000055f0     0d3f          CALLR   GETCHAR
         00005600     ffd9  
    1653 00005610     c903          JRNC    GETCHARIX               ;VALID CHARACTER OR TERMINATOR
    1654 00005620     2461          SLL     3,A1
    1655 00005630     4028          ADD     A1,A8                   ;SKIP ARGS
    1656 00005640     c0fa          JRUC    GETCHARI_LP
    1657 00005650           GETCHARIX:
    1658 00005650                   PULL    A1
    1659 00005670     0960          RETS
    1660                    
    1661                    **************************************************************************
    1662                    *                                                                        *
    1663                    * GETARGI - GET NEXT ARGUMENT INDIRECT IN THE ARGUMENT LIST.             *
    1664                    *           NEXT ARG IS A LONG PTR TO ARGUMENT TYPE.                     *
    1665                    * A2 = ARGUMENT TYPE, I.E. SHORT, INT OR LONG                            *
    1666                    * A6 = PTR TO ARGUMENT                                                   *
    1667                    * RETURNS:                                                               *
    1668                    * A6 = PTR TO NEXT ARGUMENT                                              *
    1669                    * A8 = UNSIGNED ARGUMENT                                                 *
    1670                    *                                                                        *
    1671                    **************************************************************************
    1672 00005680           GETARGI:
    1673 00005680     96c8          MOVE    *A6+,A8,L       ;GET THE POINTER
    1674 00005690     0b42          CMPI    TYPE_INT,A2     ;GET THE VALUE FOR PRINTING NOW
         000056a0     ffef  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   38

    1675 000056b0     cb03          JRNE    GETARG1
    1676 000056c0     8508          MOVE    *A8,A8,W        ;AH AND INT
    1677 000056d0     0528          ZEXT    A8
    1678 000056e0     c008          JRUC    GETARHH
    1679 000056f0           GETARG1:
    1680 000056f0     0b42          CMPI    TYPE_LONG,A2
         00005700     ffdf  
    1681 00005710     cb02          JRNE    GETARG2
    1682 00005720     8708          MOVE    *A8,A8,L        ;IT'S VERY LONG
    1683 00005730     c003          JRUC    GETARHH
    1684 00005740           GETARG2:
    1685 00005740     8f08          MOVB    *A8,A8          ;ARE YOU SMALL? SMALL! HAH! LIKE FRENCH BREAD!
    1686 00005750     2708          SLL     24,A8
    1687 00005760     2d08          SRL     24,A8           ;ZEXTB A8
    1688 00005770           GETARHH:
    1689 00005770     0960          RETS
    1690                    
    1691                    **************************************************************************
    1692                    *                                                                        *
    1693                    * PUTCARG - GET THE CONTROL ARGUMENT FROM THE ARG LIST AND TRANSFER      *
    1694                    *       CURRENT STRING UNDER CONSTRUCTION. FIRST IT WILL TRANSFER        *
    1695                    *       THE CONTROL BYTE.                                                *
    1696                    * A0 = CONTROL BYTE                                                      *
    1697                    * A2 = ARG TYPE                                                          *
    1698                    * A3 = INDIRECTION FLAG, IF <> 0 THEN INDIRECT ARGUMENT                  *
    1699                    * A7 = PTR TO LIST UNDER CONSTRUCTION                                    *
    1700                    * RETURNS:                                                               *
    1701                    * A7 NEXT BYTE IN STRING                                                 *
    1702                    * A0 & A2 PRESERVED                                                      *
    1703                    * A3 IS TRASHED IF ARGUMENT IS INDIRECT                                  *
    1704                    *                                                                        *
    1705                    **************************************************************************
    1706 00005780           PUTCARG:
    1707 00005780     8c07          MOVB    A0,*A7
    1708 00005790     1107          ADDK    8,A7
    1709 000057a0     4c63          MOVE    A3,A3           ;SHOULD WE HANDLE INDIRECTION
    1710 000057b0     cb07          JRNE    PUTCARGI        ;BR = YES
    1711                    *GET ARGUMENT IMMEADIATELY
    1712 000057c0     0b42          CMPI    TYPE_INT,A2
         000057d0     ffef  
    1713 000057e0     cb02          JRNE    PUTCLARG
    1714 000057f0     98c7          MOVE    *A6+,*A7+,W
    1715 00005800     c001          JRUC    PUTCARHH
    1716 00005810           PUTCLARG:
    1717 00005810     9ac7          MOVE    *A6+,*A7+,L     ;ARGUMENT IS LONG
    1718 00005820           PUTCARHH:
    1719 00005820     0960          RETS
    1720                    *GET ARGUMENT VIA INDIRECTION
    1721 00005830           PUTCARGI:
    1722 00005830     96c3          MOVE    *A6+,A3,L       ;GET POINTER
    1723 00005840     0b42          CMPI    TYPE_INT,A2
         00005850     ffef  
    1724 00005860     cb02          JRNE    PUTCLARGI
    1725 00005870     9867          MOVE    *A3+,*A7+,W
    1726 00005880     c0f9          JRUC    PUTCARHH
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   39

    1727 00005890           PUTCLARGI:
    1728 00005890     9a67          MOVE    *A3+,*A7+,L
    1729 000058a0     c0f7          JRUC    PUTCARHH
    1730                    
    1731                    **************************************************************************
    1732                    *                                                                        *
    1733                    * STRNGLEN - RETURNS THE LENGTH, IN PIXELS, OF A GIVEN STRING            *
    1734                    * A8 = PTR TO STRING                                                     *
    1735                    * A10 = [Y,X] SPACING OF STRING                                          *
    1736                    * A11 = PTR TO FONT TABLE                                                *
    1737                    * RETURNS:                                                               *
    1738                    * A7 = LENGTH OF STRING                                                  *
    1739                    * Z BIT SET IF LENGTH IS ZERO                                            *
    1740                    *                                                                        *
    1741                    **************************************************************************
    1742 000058b0           STRNGLEN
    1743 000058b0     099f          MMTM    SP,B3,B5
         000058c0     1400  
    1744 000058d0     5673          CLR     B3
    1745 000058e0     09f5          MOVI    SCALE_1TO1,B5
         000058f0 01000100  
    1746 00005910     0d3f          CALLR   STRING_LENGTH
         00005920     0003  
    1747 00005930     09bf          MMFM    SP,B3,B5
         00005940     0028  
    1748 00005950     0960          RETS
    1749                    
    1750                    **************************************************************************
    1751                    *                                                                        *
    1752                    * STRING_LENGTH - RETURNS THE LENGTH, IN PIXELS, OF A GIVEN STRING       *
    1753                    *               THIS VERSION USES FLAGS TO DETERMINE IF WE ARE           *
    1754                    *               UNDER FIXED SPACING CONSTRAINTS.                         *
    1755                    * A8 = PTR TO STRING                                                     *
    1756                    * A10 = [Y,X] SPACING OF STRING                                          *
    1757                    * A11 = PTR TO FONT TABLE                                                *
    1758                    * B3 = IF BIT 13 SET THEN A10 X COMPONENT IS FIXED SPACING VALUE         *
    1759                    * B5 = [Y,X] Scale factor for string.                                    *
    1760                    * RETURNS:                                                               *
    1761                    * A7 = LENGTH OF STRING                                                  *
    1762                    * Z BIT SET IF LENGTH IS ZERO                                            *
    1763                    *                                                                        *
    1764                    **************************************************************************
    1765 00005960           STRING_LENGTH
    1766 00005960     098f          MMTM    SP,A0,A1,A2,A6,A8,A10,A11
         00005970     e2b0  
    1767 00005980                   PUSH    B6
    1768                    
    1769 00005990     56e7          CLR     A7                      ;Clear our length counter
    1770 000059a0     5642          CLR     A2                      ;We'll store our remaining space here
    1771                    
    1772 000059b0     0d3f          CALLR   WHITE_SPACE             ;Need to know the white space values
         000059c0     ff04  
    1773                    
    1774 000059d0           STRNLEN:
    1775 000059d0     0d3f          CALLR   GETCHAR                 ;Pull the next character
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   40

         000059e0     ff9b  
    1776 000059f0     ca32          JRZ     STRNLENX                ;END O' STRING. FOR REAL!
    1777 00005a00     c914          JRNC    STRNLEN0                ;REAL CHARACTER
    1778                    
    1779 00005a10           SL_CONTROL_CHARACTER
    1780 00005a10     0b40          CMPI    ASCII_CR,A0
         00005a20     fff2  
    1781 00005a30     ca2e          JREQ    STRNLENX                ;O.K. THAT'S IT!
    1782                    
    1783 00005a40     0b40          CMPI    NEW_SPACING,A0
         00005a50     fff9  
    1784 00005a60     ca03          JREQ    SL_CALL_CONTROL         ;BR = We need to heed the spacing
    1785 00005a70     0b40          CMPI    NEW_FONT,A0
         00005a80     fffb  
    1786 00005a90     cb08          JRNE    SL_SKIP_ARGS            ;BR = Not NEW FONT, so just skip
    1787                    
    1788 00005aa0           SL_CALL_CONTROL
    1789 00005aa0     1420          DEC     A0
    1790 00005ab0     24a0          SLL     5,A0
    1791 00005ac0     0b20          ADDI    T_CONTROL_CHARACTERS,A0
         00005ad0 00003070' 
    1792 00005af0     8600          MOVE    *A0,A0,L
    1793 00005b00     0920          CALL    A0                      ;Call the proper Control Function.
    1794                    
    1795 00005b10     c0eb          JRUC    STRNLEN
    1796                    
    1797 00005b20           SL_SKIP_ARGS
    1798 00005b20     2461          SLL     3,A1
    1799 00005b30     4028          ADD     A1,A8                   ;SKIP ARGS
    1800 00005b40     c0e8          JRUC    STRNLEN
    1801                    *This is where we process a real character
    1802 00005b50           STRNLEN0:
    1803 00005b50     1e53          BTST    B_FIXEDSPC,B3           ;FIXED SPACING?
    1804 00005b60     ca02          JRZ     SL_SPACE_CHARACTER_SIZE ;BR = no
    1805 00005b70     e147          ADDXY   A10,A7                  ;Add the fixed value
    1806 00005b80     c0e4          JRUC    STRNLEN
    1807                    
    1808 00005b90           SL_SPACE_CHARACTER_SIZE
    1809 00005b90     0b40          CMPI    ' ',A0                  ;LOOK FOR A SPACE, MAN
         00005ba0     ffdf  
    1810 00005bb0     cb04          JRNE    STRNLEN1                ;BR= Not a space
    1811 00005bc0     e0c7          ADDXY   A6,A7                   ;ADD A SPACE
    1812                    ;DOZ NEW 5-2-95
    1813 00005bd0     e147          ADDXY   A10,A7                  ;ADD SPACE LENGTH
    1814                    ;DOZ NEW 5-2-95
    1815 00005be0     5642          CLR     A2                      ;Trailing spaces are the callers wish
    1816 00005bf0     c0dd          JRUC    STRNLEN
    1817 00005c00           STRNLEN1:
    1818 00005c00     0be0          SUBI    21H,A0                  ;GET A BASE
         00005c10     ffde  
    1819 00005c20     24a0          SLL     5,A0
    1820 00005c30     4160          ADD     A11,A0                  ;A0 = PTR TO CORRECT CHARACTER HEADER
    1821 00005c40     8600          MOVE    *A0,A0,L
    1822 00005c50     b401          MOVE    *A0(ISIZE),A1,W         ;GET THE ACTUAL X LENGTH
         00005c60     0010  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   41

    1823 00005c70     4ebe          MOVE    B5,A14                  ;GET X-SCALE FACTOR
    1824 00005c80     050e          SEXT    A14
    1825 00005c90     2501          SLL     8,A1
    1826 00005ca0     5bc1          DIVU    A14,A1                  ;Calculate the real deal
    1827 00005cb0     e027          ADDXY   A1,A7                   ;ADD DIGIT LENGTH
    1828 00005cc0     e147          ADDXY   A10,A7                  ;ADD SPACE LENGTH
    1829 00005cd0     4d42          MOVE    A10,A2                  ;We'll subtract this if string end
    1830                    
    1831 00005ce0     0d3f          CALLR   GETCHAR                 ;Pull the next character
         00005cf0     ff6a  
    1832 00005d00     c8d0          JRC     SL_CONTROL_CHARACTER    ;It seems we have a control character
    1833 00005d10     cbe7          JRNZ    SL_SPACE_CHARACTER_SIZE
    1834                    
    1835 00005d20           STRNLENX
    1836 00005d20     e247          SUBXY   A2,A7                   ;Get rid of any extra space
    1837 00005d30     2607          SLL     16,A7                   ;Mask any shit we may have picked up
    1838 00005d40     2e07          SRL     16,A7                   ;And pass return value in A7
    1839                    
    1840 00005d50                   PULL    B6
    1841 00005d70     09af          MMFM    SP,A0,A1,A2,A6,A8,A10,A11
         00005d80     0d47  
    1842 00005d90     0960          RETS
    1843                    
    1844                    **************************************************************************
    1845                    *                                                                        *
    1846                    * HEXTOASC - CONVERTS A 32 BIT HEX # TO AN ASCII STRING TERMINATED       *
    1847                    *          BY 0 WITH COMMAS.                                             *
    1848                    * A8 = HEX #                                                             *
    1849                    * RETURNS:                                                               *
    1850                    * A8 PTR TO THE STRING                                                   *
    1851                    *                                                                        *
    1852                    **************************************************************************
    1853 00005da0           HEXTOASC
    1854 00005da0     098f          MMTM    SP,A3,A4,A14
         00005db0     1802  
    1855 00005dc0     5663          CLR     A3
    1856 00005dd0     5684          CLR     A4
    1857 00005de0                   BSET    B_COMMAS,A4
    1858 00005e10     0d3f          CALLR   HEX_TO_ASCII_DEC
         00005e20     0003  
    1859 00005e30     09af          MMFM    SP,A3,A4,A14
         00005e40     4018  
    1860 00005e50     0960          RETS
    1861                    
    1862                    **************************************************************************
    1863                    *                                                                        *
    1864                    * HEX_TO_ASCII_DEC - FORMAT A HEXADECIMAL # TO AN DECIMAL ASCII STRING.  *
    1865                    *                    USES THE flags AND width IN A4 AND A3.              *
    1866                    * A3 = width, MINIMUM # OF CHARACTERS TO OUTPUT                          *
    1867                    * A4 = flags, USES: B_COMMAS - PUT COMMAS IN THE NUMBER                  *
    1868                    *                   B_ZPRINT - IF width IS NOT REACHED, FILL WITH 0's    *
    1869                    *                              NOT SPACES.                               *
    1870                    *                   B_SIGNED - PASSED NUMBER IS SIGNED                   *
    1871                    *                   B_PSIGN  - PRINT SIGN IF NUMBER IS OF SIGNED TYPE    *
    1872                    * A8 = HEXADECIMAL #                                                     *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   42

    1873                    * RETURNS:                                                               *
    1874                    * A8 = PTR TO STRING                                                     *
    1875                    * A3 & A4 PRESERVED                                                      *
    1876                    *                                                                        *
    1877                    **************************************************************************
    1878 00005e60           HEX_TO_ASCII_DEC:
    1879 00005e60     098f          MMTM    SP,A1,A2,A3,A5,A9
         00005e70     7440  
    1880 00005e80     56a5          CLR     A5                      ;CLR NEGATIVE FLAG
    1881 00005e90     1f24          BTST    B_SIGNED,A4
    1882 00005ea0     ca04          JREQ    HEXTNOS                 ;NOT A SIGNED NUMBER
    1883 00005eb0     4d08          MOVE    A8,A8
    1884 00005ec0     cf02          JRNN    HEXTNOS                 ;NOT A NEGATIVE NUMBER
    1885 00005ed0     03a8          NEG     A8
    1886 00005ee0     1025          INC     A5
    1887 00005ef0           HEXTNOS:
    1888 00005ef0     5621          CLR     A1
    1889 00005f00     5642          CLR     A2                      ;COMMA COUNT
    1890 00005f10     a02f          MOVE    A1,-*SP,W               ;HERE'S THE NULL TERMINATOR
    1891 00005f20     1941          MOVK    10,A1                   ;DIVISOR FOR DECIMAL
    1892 00005f30     4d09          MOVE    A8,A9
    1893 00005f40           HEXTASC2
    1894 00005f40     5708          CLR     A8
    1895 00005f50     5a28          DIVU    A1,A8
    1896 00005f60     0b09          ADDI    '0',A9                  ;MAKE THE REMAINDER ASCII
         00005f70     0030  
    1897 00005f80     a12f          MOVE    A9,-*SP,W               ;SAVE HERE
    1898 00005f90     1423          DEC     A3                      ;DECREMENT THE WIDTH
    1899 00005fa0     4d09          MOVE    A8,A9
    1900 00005fb0     ca0b          JRZ     HEXTASC3                ;BR = DONE!
    1901                    
    1902 00005fc0     1f84          BTST    B_COMMAS,A4
    1903 00005fd0     caf6          JREQ    HEXTASC2                ;BR = DON'T WORRY ABOUT COMMAS
    1904                    
    1905 00005fe0     1022          INC     A2
    1906 00005ff0     0b42          CMPI    3,A2                    ;COMMA CHECK
         00006000     fffc  
    1907 00006010     c8f2          JRLO    HEXTASC2                ;BR = NO COMMA
    1908                    
    1909 00006020     09c2          MOVI    ',',A2
         00006030     002c  
    1910                    
    1911 00006040     a04f          MOVE    A2,-*SP,W               ;STUFF A COMMA
    1912 00006050     5642          CLR     A2
    1913 00006060     c0ed          JRUC    HEXTASC2
    1914 00006070           HEXTASC3
    1915 00006070     4c63          MOVE    A3,A3
    1916 00006080     ca0a          JRZ     HEXTASC3A               ;WIDTH HAS BEEN FULFILLED
    1917 00006090     ce09          JRN     HEXTASC3A               ;THANX TI
    1918 000060a0     1f44          BTST    B_ZPRINT,A4
    1919 000060b0     cb03          JRNE    HEXTASC30               ;YES, FILL width WITH ZEROS
    1920 000060c0     09c2          MOVI    ' ',A2
         000060d0     0020  
    1921 000060e0     c002          JRUC    HEXTASC31
    1922 000060f0           HEXTASC30:
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   43

    1923 000060f0     09c2          MOVI    '0',A2
         00006100     0030  
    1924 00006110           HEXTASC31:
    1925 00006110     a04f          MOVE    A2,-*SP,W               ;STUFF THE LEADER
    1926 00006120     3c43          DSJS    A3,HEXTASC31
    1927 00006130           HEXTASC3A:
    1928 00006130     1f24          BTST    B_SIGNED,A4
    1929 00006140     ca0a          JREQ    HEXTASC3D               ;THIS IS NOT A SIGNED NUMBER
    1930 00006150     4ca5          MOVE    A5,A5
    1931 00006160     cb05          JRNZ    HEXTASC3B               ;NUMBER IS NEGATIVE
    1932 00006170     1fa4          BTST    B_PSIGN,A4
    1933 00006180     ca06          JREQ    HEXTASC3D               ;DOESN'T WANT THE SIGN PRINTED
    1934 00006190     09c2          MOVI    '+',A2
         000061a0     002b  
    1935 000061b0     c002          JRUC    HEXTASC3C
    1936 000061c0           HEXTASC3B:
    1937 000061c0     09c2          MOVI    '-',A2
         000061d0     002d  
    1938 000061e0           HEXTASC3C:
    1939 000061e0     a04f          MOVE    A2,-*SP,W               ;STUFF THE SIGN
    1940 000061f0           HEXTASC3D
    1941 000061f0     09e1          MOVI    STRNGRAM,A1             ;STORE HERE FOR BLOW OUT
         00006200 00000000- 
    1942 00006220     4c28          MOVE    A1,A8
    1943 00006230           HEXTASC4
    1944 00006230     95e9          MOVE    *SP+,A9,W
    1945 00006240     8d21          MOVB    A9,*A1
    1946 00006250     1101          ADDK    8,A1
    1947 00006260     4d29          MOVE    A9,A9
    1948 00006270     cbfb          JRNZ    HEXTASC4
    1949 00006280     09af          MMFM    SP,A1,A2,A3,A5,A9
         00006290     022e  
    1950 000062a0     0960          RETS
    1951                    
    1952                    **************************************************************************
    1953                    *                                                                        *
    1954                    * HTOHXASC - CONVERT A 32 BIT HEXADECIMAL # TO A NULL TERMINATED         *
    1955                    *          HEXADECIMAL ASCII STRING. USES 'ABCDEF' AND NO Ox PREFIX      *
    1956                    *          OR COMMAS.                                                    *
    1957                    * A8 = HEX #                                                             *
    1958                    * RETURNS:                                                               *
    1959                    * A8 = PTR TO ASCII HEX STRING                                           *
    1960                    *                                                                        *
    1961                    **************************************************************************
    1962 000062b0           HTOHXASC
    1963 000062b0     098f          MMTM    SP,A3,A4,A14
         000062c0     1802  
    1964 000062d0     5663          CLR     A3
    1965 000062e0     5684          CLR     A4
    1966 000062f0                   BSET    B_CAP,A4
    1967 00006320     0d3f          CALLR   HEX_TO_ASCII_HEX
         00006330     0003  
    1968 00006340     09af          MMFM    SP,A3,A4,A14
         00006350     4018  
    1969 00006360     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   44

    1970                    
    1971                    **************************************************************************
    1972                    *                                                                        *
    1973                    * HEX_TO_ASCII_HEX - CONVERTS A 32 BIT HEX # TO A NULL TERMINATED        *
    1974                    *                  ASCII STRING.                                         *
    1975                    * A3 = width, MINIMUM # OF CHARACTERS CONVERTED                          *
    1976                    * A4 = flags, USES: B_COMMAS - PUT COMMAS IN THE NUMBER                  *
    1977                    *                 B_ZPRINT - IF width IS NOT REACHED, FILL WITH 0's      *
    1978                    *                            NOT SPACES.                                 *
    1979                    *                 B_CAP    - USE 'ABCDEF'                                *
    1980                    *                 B_PHEX   - PREFIX WITH HEX SPECIFIER 0x OR 0X          *
    1981                    * A8 = HEX #                                                             *
    1982                    * RETURNS:                                                               *
    1983                    * A8 PTR TO THE STRING                                                   *
    1984                    * A3 & A4 ARE PRESERVED                                                  *
    1985                    *                                                                        *
    1986                    **************************************************************************
    1987 00006370           HEX_TO_ASCII_HEX
    1988 00006370     098f          MMTM    SP,A1,A2,A3,A9
         00006380     7040  
    1989 00006390     5621          CLR     A1
    1990 000063a0     5642          CLR     A2                      ;COMMA COUNT
    1991 000063b0     a02f          MOVE    A1,-*SP,W               ;HERE'S THE NULL TERMINATOR
    1992 000063c0     1a01          MOVK    16,A1                   ;DIVISOR FOR HEX
    1993 000063d0     4d09          MOVE    A8,A9
    1994 000063e0           HEXTASCH2
    1995 000063e0     5708          CLR     A8
    1996 000063f0     5a28          DIVU    A1,A8
    1997 00006400     0b09          ADDI    '0',A9                  ;MAKE THE REMAINDER ASCII
         00006410     0030  
    1998 00006420     0b49          CMPI    '9',A9                  ;IS IT IN A-F RANGE?
         00006430     ffc6  
    1999 00006440     c207          JRLS    HHH1
    2000 00006450     1f04          BTST    B_CAP,A4                ;ARE WE IN CAPITAL MODE
    2001 00006460     cb03          JRNE    HHH0                    ;YES
    2002 00006470     0b09          ADDI    'a' - ':',A9            ;MAKE alpha!
         00006480     0027  
    2003 00006490     c002          JRUC    HHH1
    2004 000064a0           HHH0:
    2005 000064a0     0b09          ADDI    'A' - ':',A9            ;MAKE ALPHA!
         000064b0     0007  
    2006 000064c0           HHH1:
    2007 000064c0     1423          DEC     A3                      ;DECREMENT THE WIDTH
    2008 000064d0     a12f          MOVE    A9,-*SP,W               ;SAVE HERE
    2009 000064e0     4d09          MOVE    A8,A9
    2010 000064f0     ca0b          JRZ     HEXTASCH3               ;BR = DONE!
    2011 00006500     1022          INC     A2
    2012 00006510     0b42          CMPI    3,A2                    ;COMMA CHECK
         00006520     fffc  
    2013 00006530     c8ea          JRLO    HEXTASCH2               ;BR = NO COMMA
    2014                    *
    2015                    *        SEE IF WE'RE DOING COMMAS
    2016                    *
    2017 00006540     1f84          BTST    B_COMMAS,A4             ;COMMAS?
    2018 00006550     cae8          JREQ    HEXTASCH2               ;NOPE....IGNORE!
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   45

    2019                    
    2020 00006560     09c2          MOVI    ',',A2
         00006570     002c  
    2021                    
    2022 00006580     a04f          MOVE    A2,-*SP,W               ;STUFF A COMMA
    2023 00006590     5642          CLR     A2
    2024 000065a0     c0e3          JRUC    HEXTASCH2
    2025 000065b0           HEXTASCH3:
    2026 000065b0     4c63          MOVE    A3,A3
    2027 000065c0     ca0a          JRZ     HEXTASCH3A              ;WIDTH HAS BEEN FULFILLED
    2028 000065d0     ce09          JRN     HEXTASCH3A              ;THANX TI
    2029 000065e0     1f44          BTST    B_ZPRINT,A4
    2030 000065f0     cb03          JRNE    HEXTASCH30              ;YES, FILL width WITH ZEROS
    2031 00006600     09c2          MOVI    ' ',A2
         00006610     0020  
    2032 00006620     c002          JRUC    HEXTASCH31
    2033 00006630           HEXTASCH30:
    2034 00006630     09c2          MOVI    '0',A2
         00006640     0030  
    2035 00006650           HEXTASCH31:
    2036 00006650     a04f          MOVE    A2,-*SP,W               ;STUFF THE LEADER
    2037 00006660     3c43          DSJS    A3,HEXTASCH31
    2038 00006670           HEXTASCH3A:
    2039                    *CHECK FOR 0x PREFIX
    2040 00006670     1f64          BTST    B_PHEX,A4
    2041 00006680     ca0b          JREQ    HEXTASCH3D              ;NO PREFIX NECESSARY
    2042 00006690     1f04          BTST    B_CAP,A4
    2043 000066a0     cb03          JRNE    HEXTASCH3B              ;PRINT A CAPITAL X
    2044 000066b0     09c2          MOVI    'x',A2
         000066c0     0078  
    2045 000066d0     c002          JRUC    HEXTASCH3C
    2046 000066e0           HEXTASCH3B:
    2047 000066e0     09c2          MOVI    'X',A2
         000066f0     0058  
    2048 00006700           HEXTASCH3C:
    2049 00006700     a04f          MOVE    A2,-*SP,W
    2050 00006710     09c2          MOVI    '0',A2
         00006720     0030  
    2051 00006730     a04f          MOVE    A2,-*SP,W
    2052 00006740           HEXTASCH3D:
    2053                    *DUMP THE STRING AND PASS IT BACK
    2054 00006740     09e1          MOVI    STRNGRAM,A1             ;STORE HERE FOR BLOW OUT
         00006750 00000000- 
    2055 00006770     4c28          MOVE    A1,A8
    2056 00006780           HEXTASCH4:
    2057 00006780     95e9          MOVE    *SP+,A9,W
    2058 00006790     8d21          MOVB    A9,*A1
    2059 000067a0     1101          ADDK    8,A1
    2060 000067b0     4d29          MOVE    A9,A9
    2061 000067c0     cbfb          JRNZ    HEXTASCH4
    2062 000067d0     09af          MMFM    SP,A1,A2,A3,A9
         000067e0     020e  
    2063 000067f0     0960          RETS
    2064                    
    2065                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   46

    2066                    *                                                                        *
    2067                    * BCDTOASC - CONVERT A 32 BIT HEXADECIMAL # TO A NULL TERMINATED         *
    2068                    *          HEXADECIMAL ASCII STRING. COMMAS AND LEAD ZERO BLANKING       *
    2069                    *          ARE ASSERTED.                                                 *
    2070                    * A8 = BCD #                                                             *
    2071                    * RETURNS:                                                               *
    2072                    * A8 = PTR TO ASCII HEX STRING                                           *
    2073                    *                                                                        *
    2074                    **************************************************************************
    2075 00006800           BCDTOASC
    2076 00006800     098f          MMTM    SP,A3,A4,A14
         00006810     1802  
    2077 00006820     5663          CLR     A3
    2078 00006830     5684          CLR     A4
    2079 00006840                   BSET    B_COMMAS,A4
    2080 00006870     0d3f          CALLR   BCD_TO_ASCII_DEC
         00006880     0003  
    2081 00006890     09af          MMFM    SP,A3,A4,A14
         000068a0     4018  
    2082 000068b0     0960          RETS
    2083                    
    2084                    **************************************************************************
    2085                    *                                                                        *
    2086                    * BCD_TO_ASCII_DEC - CONVERTS A BCD NUMBER INTO A NULL TERMINATED        *
    2087                    *                  ASCII DECIMAL STRING.                                 *
    2088                    * A3 = width, MINIMUM # OF CHARACTERS CONTAINED IN THE STRING            *
    2089                    * A4 = flags, USES: B_COMMAS - PUT COMMAS IN THE NUMBER                  *
    2090                    *                 B_ZPRINT - IF width IS NOT REACHED, FILL WITH 0's      *
    2091                    *                            NOT SPACES.                                 *
    2092                    * A8 = BCD #                                                             *
    2093                    * RETURNS:                                                               *
    2094                    * A8 PTR TO THE STRING                                                   *
    2095                    * A3 & A4 ARE PRESERVED                                                  *
    2096                    *                                                                        *
    2097                    **************************************************************************
    2098 000068c0           BCD_TO_ASCII_DEC:
    2099 000068c0     098f          MMTM    SP,A1,A2,A3,A5,A9
         000068d0     7440  
    2100 000068e0     4d01          MOVE    A8,A1
    2101 000068f0     1822          MOVK    1,A2
    2102 00006900     4c45          MOVE    A2,A5           ;DIGIT COUNT
    2103 00006910     2f81          SRL     4,A1            ;WE WILL ALWAYS PRINT THE FIRST DUDE
    2104 00006920           BCDZLP:
    2105 00006920     4c29          MOVE    A1,A9
    2106 00006930     2f81          SRL     4,A1            ;SLIDE DIGIT OFF THE END
    2107 00006940     1022          INC     A2              ;KNOCK UP ANOTHER DIGIT
    2108 00006950     2789          SLL     28,A9
    2109 00006960     2c89          SRL     28,A9
    2110 00006970     ca01          JREQ    BCDZ            ;IT'S A ZERO
    2111 00006980     4c45          MOVE    A2,A5           ;UPDATE VALID DIGIT COUNT
    2112 00006990           BCDZ:
    2113 00006990     0b42          CMPI    8,A2
         000069a0     fff7  
    2114 000069b0     c8f6          JRLO    BCDZLP          ;MORE DIGITS TO CHECK
    2115                    *O.K. LET'S STRING THIS BITCH
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   47

    2116 000069c0     5642          CLR     A2                      ;COMMA COUNT
    2117 000069d0     a04f          MOVE    A2,-*SP,W               ;HERE'S THE NULL TERMINATOR
    2118 000069e0           BCDCLP:
    2119 000069e0     4d09          MOVE    A8,A9
    2120 000069f0     2f88          SRL     4,A8                    ;SHIT THIS DIGIT
    2121 00006a00     2789          SLL     28,A9
    2122 00006a10     2c89          SRL     28,A9                   ;ISOLATE
    2123 00006a20     0b09          ADDI    '0',A9                  ;MAKE ASCII
         00006a30     0030  
    2124 00006a40     0b49          CMPI    '9',A9
         00006a50     ffc6  
    2125 00006a60     c202          JRLS    BCDISNUM                ;IT'S A VALID NUMBER.
    2126 00006a70     09c9          MOVI    ' ',A9                  ;SUBSTITUTE A SPACE FOR ERROR
         00006a80     0020  
    2127 00006a90           BCDISNUM:
    2128 00006a90     a12f          MOVE    A9,-*SP,W               ;PUSH ON MY MAN
    2129 00006aa0     1423          DEC     A3                      ;DECREMENT width
    2130 00006ab0     1425          DEC     A5                      ;DIGIT COUNT
    2131 00006ac0     ca0b          JRZ     BCDDONE                 ;WE HAVE FINISHED
    2132                    *COMMA SHIT
    2133 00006ad0     1022          INC     A2
    2134 00006ae0     0b42          CMPI    3,A2                    ;COMMA CHECK
         00006af0     fffc  
    2135 00006b00     c8ed          JRLO    BCDCLP                  ;BR = NO COMMA
    2136 00006b10     1f84          BTST    B_COMMAS,A4             ;PRINT COMMAS?
    2137 00006b20     caeb          JREQ    BCDCLP                  ;NOPE....IGNORE!
    2138                    
    2139 00006b30     09c2          MOVI    ',',A2
         00006b40     002c  
    2140                    
    2141 00006b50     a04f          MOVE    A2,-*SP,W               ;STUFF A COMMA
    2142 00006b60     5642          CLR     A2
    2143 00006b70     c0e6          JRUC    BCDCLP
    2144 00006b80           BCDDONE:
    2145 00006b80     4c63          MOVE    A3,A3
    2146 00006b90     ca0a          JRZ     BCDXFER                 ;WIDTH HAS BEEN FULFILLED
    2147 00006ba0     ce09          JRN     BCDXFER                 ;THANX TI
    2148 00006bb0     1f44          BTST    B_ZPRINT,A4
    2149 00006bc0     cb03          JRNE    BCDZP1                  ;YES, FILL width WITH ZEROS
    2150 00006bd0     09c2          MOVI    ' ',A2
         00006be0     0020  
    2151 00006bf0     c002          JRUC    BCDZP2
    2152 00006c00           BCDZP1:
    2153 00006c00     09c2          MOVI    '0',A2
         00006c10     0030  
    2154 00006c20           BCDZP2:
    2155 00006c20     a04f          MOVE    A2,-*SP,W               ;STUFF THE LEADER
    2156 00006c30     3c43          DSJS    A3,BCDZP2
    2157 00006c40           BCDXFER:
    2158                    *DUMP THE STRING AND PASS IT BACK
    2159 00006c40     09e1          MOVI    STRNGRAM,A1             ;STORE HERE FOR BLOW OUT
         00006c50 00000000- 
    2160 00006c70     4c28          MOVE    A1,A8
    2161 00006c80           BCDXFER_LP:
    2162 00006c80     95e9          MOVE    *SP+,A9,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   48

    2163 00006c90     8d21          MOVB    A9,*A1
    2164 00006ca0     1101          ADDK    8,A1
    2165 00006cb0     4d29          MOVE    A9,A9
    2166 00006cc0     cbfb          JRNZ    BCDXFER_LP
    2167                    
    2168 00006cd0     09af          MMFM    SP,A1,A2,A3,A5,A9
         00006ce0     022e  
    2169 00006cf0     0960          RETS
    2170                    
    2171                    **************************************************************************
    2172                    *                                                                        *
    2173                    *          L_MESS                                                        *
    2174                    *                                                                        *
    2175                    *          A8 POINTS AT MESS_MAC FOLLOWED BY MESSAGE TEXT.               *
    2176                    *             POP ALL REGGIES LEAVING A8 POINTING AT TEXT.               *
    2177                    *             AND JUMP TO THE TEXT PROCESSOR!                            *
    2178                    *                                                                        *
    2179                    *          THE MMFM POPS THE ROUTINE TO CALL INTO A1.                    *
    2180                    *                                                                        *
    2181                    *          YOU ***MUST*** USE JSRP TO GET HERE.                          *
    2182                    *                                                                        *
    2183                    **************************************************************************
    2184 00006d00           L_MESS_LOOP
    2185 00006d00     0b08          ADDI    8,A8                    ;PUSH BEYOND THIS BYTE
         00006d10     0008  
    2186 00006d20           L_MESS
    2187 00006d20     0b08          ADDI    0FH,A8                  ;IF IT ENDS IN OTHER THAN ZERO..
         00006d30     000f  
    2188                    *                                       ;KICK TO NEXT WORD (I.E. .EVEN)
    2189 00006d40     2f88          SRL     4,A8
    2190 00006d50     2488          SLL     4,A8                    ;MASK FRACTIONAL WORD
    2191                    
    2192 00006d60     09a8          MMFM    A8,A0,A1,A5,A9,A10,A11  ;LOAD UP REGGIES FROM A8.
         00006d70     0e23  
    2193 00006d80     4e01          MOVE    A0,B1                   ;STORE THE OID
    2194 00006d90     5600          CLR     A0                      ;MAKE SURE WE DON'T SLEEP
    2195                    
    2196                    ****    JSRPR   A1                      ;JSRP TO THE ROUTINE
    2197 00006da0                   JSRP    PRINTF
    2198                    
    2199 00006e10     8f00          MOVB    *A8,A0                  ;CHECK NEXT BYTE 0=DONE...1=MORE.
    2200 00006e20     cbed          JRNZ    L_MESS_LOOP
    2201 00006e30                   RETP
    2202                    
    2203                    **************************************************************************
    2204                    *                                                                        *
    2205                    *          LM_SETUP                                                      *
    2206                    *                                                                        *
    2207                    *          THIS IS CALLED TO SETUP THE WORLD FOR A STRING                *
    2208                    *          OPERATION, BUT NOT PHYSICALLY MAKE THE CALL.                  *
    2209                    *                                                                        *
    2210                    *          THIS ALLOWS TWEAKING OF REGGIES BEFORE THE CALL.              *
    2211                    *                                                                        *
    2212                    *          LM_FINIS                                                     *
    2213                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   49

    2214                    *          THIS IS CALLED ONCE THE MODIFICATIONS ARE MADE!               *
    2215                    *                                                                        *
    2216                    *                                                                        *
    2217                    **************************************************************************
    2218 00006e60           LM_SETUP
    2219 00006e60     09a8          MMFM    A8,A0,A1,A5,A9,A10,A11          ;LOAD UP REGGIES FROM A8.
         00006e70     0e23  
    2220 00006e80     4e01          MOVE    A0,B1
    2221 00006e90     5600          CLR     A0                              ;NO SLEEPING
    2222 00006ea0     0960          RETS
    2223 00006eb0           LM_FINIS
    2224 00006eb0     0161          JUMP    A1                              ;THIS RUNS ROUTINE AND
    2225                    
    2226                    **************************************************************************
    2227                    *                                                                        *
    2228                    * LM_PRINTF - THIS ROUTINE COMBINES LM_SETUP WITH PRINTF, USE IF YOU     *
    2229                    *               DON'T NEED TO TWEAK THE REGISTERS                        *
    2230                    * A8 = MESS_MAC FOLLOWED BY STRING.                                      *
    2231                    * NOTE: CALL WITH JSRP                                                   *
    2232                    *                                                                        *
    2233                    **************************************************************************
    2234 00006ec0           LM_PRINTF:
    2235 00006ec0     0d3f          CALLR   LM_SETUP
         00006ed0     fff8  
    2236 00006ee0     c000          JRUC    PRINTF
         00006ef0     f910  
    2237                    
    2238                    **************************************************************************
    2239                    *                                                                        *
    2240                    * CLRTEXT - CLEAR ALL TEXT ON THE OBJECT LIST.                           *
    2241                    *                                                                        *
    2242                    **************************************************************************
    2243 00006f00           CLRTEXT
    2244 00006f00     098f          MMTM    SP,A0,A1
         00006f10     c000  
    2245 00006f20     09c0          MOVI    OID_TEXT,A0
         00006f30     0480  
    2246 00006f40     0d5f          CALLA   KILOBJ_ALL
         00006f50 00000000! 
    2247 00006f70     09af          MMFM    SP,A0,A1
         00006f80     0003  
    2248 00006f90     0960          RETS
    2249                    
    2250 0000ca70                   .DATA
    2251                    
    2252                    
    2253                    **************************************************************************
    2254                    *                                                                        *
    2255                    *       FONT TABLES STARTING AT ASCII $21                                *
    2256                    *                                                                        *
    2257                    **************************************************************************
    2258                    *
    2259                    *5 POINT FONT.
    2260                    *
    2261 0000ca70           RD5FONT
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   50

    2262 0000ca70 00004e40"         .LONG  FONT5EXC,FONT5APOS,FONT5EXC,FONT5EXC,FONT5EXC,FONT5EXC
    2263 0000cb30 00005000"         .LONG  FONT5APOS,FONT5EXC,FONT5EXC,FONT5EXC,FONT5EXC
    2264 0000cbd0 00004e40"         .LONG  FONT5EXC,FONT5MIN,FONT5PER,FONT5SLA,FONT50,FONT51
    2265 0000cc90 000049e0"         .LONG  FONT52,FONT53,FONT54,FONT55,FONT56,FONT57,FONT58,FONT59
    2266 0000cd90 00004f90"         .LONG  FONT5COLON,FONT5EXC,FONT5EXC,FONT5EXC,FONT5EXC
    2267 0000ce30 00004e40"         .LONG  FONT5EXC,FONT5EXC
    2268 0000ce70 00003e10"         .LONG  FONT5A,FONT5B,FONT5C,FONT5D,FONT5E,FONT5F,FONT5G,FONT5H
    2269 0000cf70 00004190"         .LONG  FONT5I,FONT5J,FONT5K,FONT5L,FONT5M,FONT5N,FONT5O,FONT5P
    2270 0000d070 00004510"         .LONG  FONT5Q,FONT5R,FONT5S,FONT5T,FONT5U,FONT5V,FONT5W,FONT5X
    2271 0000d170 00004890"         .LONG  FONT5Y,FONT5Z
    2272 0000d1b0 000050e0"         .LONG  FONT5GERA,FONT5GERB,FONT5GERO,FONT5GERU,FONT5GERA,FONT5GERB
    2273 0000d270 00003e10"         .LONG  FONT5A,FONT5B,FONT5C,FONT5D,FONT5E,FONT5F,FONT5G,FONT5H
    2274 0000d370 00004190"         .LONG  FONT5I,FONT5J,FONT5K,FONT5L,FONT5M,FONT5N,FONT5O,FONT5P
    2275 0000d470 00004510"         .LONG  FONT5Q,FONT5R,FONT5S,FONT5T,FONT5U,FONT5V,FONT5W,FONT5X
    2276 0000d570 00004890"         .LONG  FONT5Y,FONT5Z
    2277 0000d5b0 00005150"         .LONG  FONT5GERO,FONT5GERU,FONT5TM,FONT5REG,FONT5COPY
    2278                    
    2279                    *
    2280                    *7 POINT FONT.
    2281                    *
    2282 0000d650           RD7FONT
    2283 0000d650 00005700"         .LONG  FONT8EXC,FONT8APOS,FONT8NUM,FONT8DOLL,FONT8PERC,FONT8AND
    2284 0000d710 000053f0"         .LONG  FONT8APOS,FONT8LPAREN,FONT8RPAREN,FONT8ASTR,FONT8PLUS
    2285 0000d7b0 00005540"         .LONG  FONT8COM,FONT8MIN,FONT8PER,FONT8SLA
    2286 0000d830 00000000"         .LONG  FONT80,FONT81,FONT82,FONT83,FONT84,FONT85,FONT86,FONT87,FONT88
    2287 0000d950 00000510"         .LONG  FONT89
    2288 0000d970 000054d0"         .LONG  FONT8COL,FONT8SMCOL,FONT8EXC,FONT8EQL,FONT8EXC,FONT8QUEST
    2289 0000da30 00005700"         .LONG  FONT8EXC
    2290 0000da50 000005a0"         .LONG  FONT8A,FONT8B,FONT8C,FONT8D,FONT8E,FONT8F,FONT8G,FONT8H,FONT8I
    2291 0000db70 00000ab0"         .LONG  FONT8J,FONT8K,FONT8L,FONT8M,FONT8N,FONT8O,FONT8P,FONT8Q,FONT8R
    2292 0000dc90 00000fc0"         .LONG  FONT8S,FONT8T,FONT8U,FONT8V,FONT8W,FONT8X,FONT8Y,FONT8Z
    2293 0000dd90 00005770"         .LONG  FONT8GERA,FONT8GERB,FONT8GERO,FONT8GERU,FONT8GERA,FONT8GERB
    2294 0000de50 000005a0"         .LONG  FONT8A,FONT8B,FONT8C,FONT8D,FONT8E,FONT8F,FONT8G,FONT8H,FONT8I
    2295 0000df70 00000ab0"         .LONG  FONT8J,FONT8K,FONT8L,FONT8M,FONT8N,FONT8O,FONT8P,FONT8Q,FONT8R
    2296 0000e090 00000fc0"         .LONG  FONT8S,FONT8T,FONT8U,FONT8V,FONT8W,FONT8X,FONT8Y,FONT8Z
    2297 0000e190 00005850"         .LONG  FONT8GERO,FONT8GERU,FONT8TM,FONT8REG,FONT8COPY
    2298                    
    2299                    *
    2300                    *15 POINT FONT. @ is missing (10/20/88)
    2301                    *
    2302 0000e230           RD15FONT
    2303 0000e230 000062d0"         .LONG  FONT15EXC,FONT15QUOTE,FONT15POUND,FONT15DOLL,FONT15PCT
    2304 0000e2d0 00005e70"         .LONG  FONT15AND,FONT15SQUOTE,FONT15LPAREN,FONT15RPAREN,FONT15ASTERIX
    2305 0000e370 000067a0"         .LONG  FONT15PLUS,FONT15COMMA,FONT15MINUS,FONT15PER,FONT15SLASH
    2306 0000e410 00001440"         .LONG  FONT150,FONT151,FONT152,FONT153,FONT154,FONT155,FONT156
    2307 0000e4f0 00001830"         .LONG  FONT157,FONT158,FONT159
    2308 0000e550 00005f50"         .LONG  FONT15COLON,FONT15SEMI,FONT15LESS,FONT15EQUAL,FONT15GREATER
    2309 0000e5f0 00006880"         .LONG  FONT15QUEST,FONT15EXC
    2310 0000e630 000019e0"         .LONG  FONT15A,FONT15B,FONT15C,FONT15D,FONT15E,FONT15F,FONT15G,FONT15H
    2311 0000e730 00001e60"         .LONG  FONT15I,FONT15J,FONT15K,FONT15L,FONT15M,FONT15N,FONT15O,FONT15P
    2312 0000e830 000022e0"         .LONG  FONT15Q,FONT15R,FONT15S,FONT15T,FONT15U,FONT15V,FONT15W,FONT15X
    2313 0000e930 00002760"         .LONG  FONT15Y,FONT15Z
    2314                    ;       .LONG  FONT15GERA,FONT15GERB,FONT15GERO,FONT15GERU
    2315 0000e970 00006340"         .LONG  FONT15GERA,FONT15GERB,FONT15SP,FONT15RUB
    2316 0000e9f0 00006420"         .LONG  FONT15GERa,FONT15GERB
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   51

    2317 0000ea30 00002880"         .LONG  FONT15a,FONT15b,FONT15c,FONT15d,FONT15e,FONT15f,FONT15g,FONT15h
    2318 0000eb30 00006e30"         .LONG  FONT15i,FONT15j,FONT15k,FONT15l,FONT15m,FONT15n,FONT15o,FONT15p
    2319 0000ec30 00007140"         .LONG  FONT15q,FONT15r,FONT15s,FONT15t,FONT15u,FONT15v,FONT15w,FONT15x
    2320 0000ed30 00007450"         .LONG  FONT15y,FONT15z
    2321 0000ed70 00006490"         .LONG  FONT15GERo,FONT15GERu,FONT15TM,FONT15REG,FONT15COPY
    2322 0000ee10 00006c00"         .LONG  FONT15SP,FONT15RUB,FONT15END,FONT15RQUOTE,FONT15ENGPOUND
    2323 0000eeb0 000060a0"         .LONG  FONT15CR
    2324                    
    2325                    *
    2326                    *20 POINT FONT. Much is missing (10/25/89)
    2327                    *
    2328                    ;RD20FONT
    2329                    ;       .LONG  FONT20EXC,FONT20QUOTE,FONT20POUND,FONT20DOLL,FONT20PCT
    2330                    ;       .LONG  FONT20AND,FONT20SQUOTE,FONT20LPAREN,FONT20RPAREN,FONT20ASTERIX
    2331                    ;       .LONG  FONT20PLUS,FONT20COM,FONT20MIN,FONT20PER,FONT20SLA
    2332                    ;       .LONG  FONT200,FONT201,FONT202,FONT203,FONT204,FONT205,FONT206
    2333                    ;       .LONG  FONT207,FONT208,FONT209
    2334                    ;       .LONG  FONT20COL,FONT20SEMI,FONT20EXC,FONT20EQUAL,FONT20EXC
    2335                    ;       .LONG  FONT20QUEST,FONT20AT
    2336                    ;       .LONG  FONT20A,FONT20B,FONT20C,FONT20D,FONT20E,FONT20F,FONT20G
    2337                    ;       .LONG  FONT20H,FONT20I,FONT20J,FONT20K,FONT20L,FONT20M,FONT20N
    2338                    ;       .LONG  FONT20O,FONT20P,FONT20Q,FONT20R,FONT20S,FONT20T,FONT20U
    2339                    ;       .LONG  FONT20V,FONT20W,FONT20X,FONT20Y,FONT20Z
    2340                    ;       .LONG  T2FONT20GERA,T2FONT20GERB,T2FONT20GERO,T2FONT20GERU
    2341                    ;       .LONG  T2FONT20GERA,T2FONT20GERB
    2342                    ;       .LONG  FONT20A,FONT20B,FONT20C,FONT20D,FONT20E,FONT20F,FONT20G
    2343                    ;       .LONG  FONT20H,FONT20I,FONT20J,FONT20K,FONT20L,FONT20M,FONT20N
    2344                    ;       .LONG  FONT20O,FONT20P,FONT20Q,FONT20R,FONT20S,FONT20T,FONT20U
    2345                    ;       .LONG  FONT20V,FONT20W,FONT20X,FONT20Y,FONT20Z
    2346                    ;       .LONG  T2FONT20GERO,T2FONT20GERU,FONT20TM,FONT20REG,FONT20COPY
    2347                    
    2348                    *
    2349                    *10 POINT GAME FONT.
    2350                    *
    2351 0000eed0           H10FONT
    2352 0000eed0 00008560"         .LONG  FONT10EXC,FONT8APOS,FONT10NUM,FONT8DOLL,FONT10PCT,FONT10AND
    2353 0000ef90 000086b0"         .LONG  FONT10APO,FONT10PARR,FONT10PARL,FONT8ASTR,FONT8PLUS
    2354 0000f030 00005540"         .LONG  FONT8COM,FONT10DASH,FONT10PER,FONT10SLSH
    2355 0000f0b0 000084f0"         .LONG  FONT100,FONT101,FONT102,FONT103,FONT104,FONT105,FONT106,FONT107,FONT108
    2356 0000f1d0 00008480"         .LONG  FONT109
    2357 0000f1f0 00008a30"         .LONG  FONT10CLN,FONT8SMCOL,FONT8EXC,FONT8EQL,FONT8EXC,FONT10QUE
    2358 0000f2b0 00005700"         .LONG  FONT8EXC
    2359 0000f2d0 000075a0"         .LONG  FONT10A,FONT10B,FONT10C,FONT10D,FONT10E,FONT10F,FONT10G,FONT10H,FONT10I
    2360 0000f3f0 00007990"         .LONG  FONT10J,FONT10K,FONT10L,FONT10M,FONT10N,FONT10O,FONT10P,FONT10Q,FONT10R
    2361 0000f510 00007d80"         .LONG  FONT10S,FONT10T,FONT10U,FONT10V,FONT10W,FONT10X,FONT10Y,FONT10Z
    2362 0000f610 00009600"         .LONG  MORE10,FONT8GERB,FONT8GERO,FONT8GERU,FONT8GERA,FONT8GERB
    2363                    
    2364                    ;       .LONG  BOST10,BUFF10,HART10,MONT10,OTTA10,PITT10,QUEB10,FLOR10,NEWJ10
    2365                    ;       .LONG  NYIS10,NYRA10,PHIL10,TAMP10,WASH10,CHIC10,DALL10,DETR10,STLO10
    2366                    ;       .LONG  TORO10,WINN10,ANAH10,CALG10,EDMO10,LOSA10,SANJ10,VANC10
    2367                    
    2368 0000f6d0 00008aa0"         .LONG  ANAH10,BOST10,BUFF10,CALG10,CHIC10,COLO10,DALL10,DETR10,EDMO10
    2369 0000f7f0 00008e20"         .LONG  FLOR10,HART10,LOSA10,MONT10,NEWJ10,NYIS10,NYRA10,OTTA10,PHIL10
    2370 0000f910 00009210"         .LONG  PITT10,SANJ10,STLO10,TAMP10,TORO10,VANC10,WASH10,WINN10
    2371                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   52

    2372 0000fa10 00005850"         .LONG  FONT8GERO,FONT8GERU,FONT8TM,FONT8REG,FONT8COPY
    2373                    
    2374                    *
    2375                    *11 POINT WIDE GAME FONT.
    2376                    *
    2377 0000fab0           H11WFONT
    2378 0000fab0 0000a630"         .LONG  FONT11EXC,FONT8APOS,FONT10NUM,FONT8DOLL,FONT8PERC,FONT8AND
    2379 0000fb70 0000a780"         .LONG  FONT11APO,FONT8LPAREN,FONT8RPAREN,FONT8ASTR,FONT8PLUS
    2380 0000fc10 00005540"         .LONG  FONT8COM,FONT8MIN,FONT11PER,FONT11SL
    2381 0000fc90 0000a5c0"         .LONG  FONT110,FONT111,FONT112,FONT113,FONT114,FONT115,FONT116,FONT117,FONT118
    2382 0000fdb0 0000a550"         .LONG  FONT119
    2383 0000fdd0 000054d0"         .LONG  FONT8COL,FONT8SMCOL,FONT8EXC,FONT8EQL,FONT8EXC,FONT11QUE
    2384 0000fe90 00005700"         .LONG  FONT8EXC
    2385 0000feb0 00009670"         .LONG  FONT11A,FONT11B,FONT11C,FONT11D,FONT11E,FONT11F,FONT11G,FONT11H,FONT11I
    2386 0000ffd0 00009a60"         .LONG  FONT11J,FONT11K,FONT11L,FONT11M,FONT11N,FONT11O,FONT11P,FONT11Q,FONT11R
    2387 000100f0 00009e50"         .LONG  FONT11S,FONT11T,FONT11U,FONT11V,FONT11W,FONT11X,FONT11Y,FONT11Z
    2388 000101f0 00005770"         .LONG  FONT8GERA,FONT8GERB,FONT8GERO,FONT8GERU,FONT8GERA,FONT8GERB
    2389 000102b0 000075a0"         .LONG  FONT10A,FONT10B,FONT10C,FONT10D,FONT10E,FONT10F,FONT10G,FONT10H,FONT10I
    2390 000103d0 00007990"         .LONG  FONT10J,FONT10K,FONT10L,FONT10M,FONT10N,FONT10O,FONT10P,FONT10Q,FONT10R
    2391 000104f0 00007d80"         .LONG  FONT10S,FONT10T,FONT10U,FONT10V,FONT10W,FONT10X,FONT10Y,FONT10Z
    2392 000105f0 00005850"         .LONG  FONT8GERO,FONT8GERU,FONT8TM,FONT8REG,FONT8COPY
    2393                    
    2394                    *
    2395                    *18 POINT THIN GAME FONT.
    2396                    *
    2397 00010690           H18TFONT
    2398 00010690 0000b970"         .LONG  FONT17EXC,FONT17PER,FONT17NM,FONT17PER,FONT17PER
    2399 00010730 0000b890"         .LONG  FONT17PER,FONT17APO,FONT17PER,FONT17PER,FONT17PER
    2400 000107d0 0000b890"         .LONG  FONT17PER,FONT17PER,FONT18DS,FONT17PER,FONT18SL
    2401                    ;       .LONG  FONT17T0,FONT17T1,FONT17T2,FONT17T3,FONT17T4,FONT17T5,FONT17T6
    2402                    ;       .LONG  FONT17T7,FONT17T8,FONT17T9
    2403 00010870 0000b7b0"         .LONG  FONT170,FONT171,FONT172,FONT173,FONT174,FONT175,FONT176
    2404 00010950 0000b660"         .LONG  FONT177,FONT178,FONT179
    2405 000109b0 0000b890"         .LONG  FONT17PER,FONT17PER,FONT17PER,FONT17PER,FONT17PER
    2406 00010a50 0000b820"         .LONG  FONT17QUE,FONT17PER
    2407 00010a90 0000a860"         .LONG  FONT17A,FONT17B,FONT17C,FONT17D,FONT17E,FONT17F,FONT17G
    2408 00010b70 0000ab70"         .LONG  FONT17H,FONT17I,FONT17J,FONT17K,FONT17L,FONT17M,FONT17N
    2409 00010c50 0000ae80"         .LONG  FONT17O,FONT17P,FONT17Q,FONT17R,FONT17S,FONT17T,FONT17U
    2410 00010d30 0000b190"         .LONG  FONT17V,FONT17W,FONT17X,FONT17Y,FONT17Z
    2411                    ;       .LONG  FONT17PER,FONT17PER,FONT18SP,FONT18ARR
    2412 00010dd0 00012a30"         .LONG  XFONT17TM,FONT17PER,CIRCLER,FONT18ARR
    2413 00010e50 0000b890"         .LONG  FONT17PER,FONT17PER
    2414 00010e90 0000a860"         .LONG  FONT17A,FONT17B,FONT17C,FONT17D,FONT17E,FONT17F,FONT17G
    2415 00010f70 0000ab70"         .LONG  FONT17H,FONT17I,FONT17J,FONT17K,FONT17L,FONT17M,FONT17N
    2416 00011050 0000ae80"         .LONG  FONT17O,FONT17P,FONT17Q,FONT17R,FONT17S,FONT17T,FONT17U
    2417 00011130 0000b190"         .LONG  FONT17V,FONT17W,FONT17X,FONT17Y,FONT17Z
    2418 000111d0 0000b890"         .LONG  FONT17PER,FONT17PER,FONT17PER,FONT17PER,FONT17PER
    2419                    
    2420                    *
    2421                    *18 POINT GAME FONT.
    2422                    *
    2423 00011270           H18FONT
    2424 00011270 0000c620"         .LONG  FONT18EXC,FONT18PER,FONT17NM,FONT18PER,FONT18PER
    2425 00011310 0000c690"         .LONG  FONT18PER,FONT18APO,FONT18PER,FONT18PER,FONT18PER
    2426 000113b0 0000c690"         .LONG  FONT18PER,FONT18PER,FONT18DS,FONT18PER,FONT18SL
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   53

    2427 00011450 0000b7b0"         .LONG  FONT170,FONT171,FONT172,FONT173,FONT174,FONT175,FONT176
    2428 00011530 0000b660"         .LONG  FONT177,FONT178,FONT179
    2429 00011590 0000c690"         .LONG  FONT18PER,FONT18PER,FONT18PER,FONT18PER,FONT18PER
    2430 00011630 0000c540"         .LONG  FONT18QUE,FONT18PER
    2431 00011670 0000b9e0"         .LONG  FONT18A,FONT18B,FONT18C,FONT18D,FONT18E,FONT18F,FONT18G
    2432 00011750 0000bcf0"         .LONG  FONT18H,FONT18I,FONT18J,FONT18K,FONT18L,FONT18M,FONT18N
    2433 00011830 0000c000"         .LONG  FONT18O,FONT18P,FONT18Q,FONT18R,FONT18S,FONT18T,FONT18U
    2434 00011910 0000c310"         .LONG  FONT18V,FONT18W,FONT18X,FONT18Y,FONT18Z
    2435                    ;       .LONG  FONT18PER,FONT18PER,FONT18PER,FONT18ARR
    2436 000119b0 00012a30"         .LONG  XFONT17TM,FONT17PER,CIRCLER,FONT18ARR
    2437 00011a30 0000c690"         .LONG  FONT18PER,FONT18PER
    2438 00011a70 0000b9e0"         .LONG  FONT18A,FONT18B,FONT18C,FONT18D,FONT18E,FONT18F,FONT18G
    2439 00011b50 0000bcf0"         .LONG  FONT18H,FONT18I,FONT18J,FONT18K,FONT18L,FONT18M,FONT18N
    2440 00011c30 0000c000"         .LONG  FONT18O,FONT18P,FONT18Q,FONT18R,FONT18S,FONT18T,FONT18U
    2441 00011d10 0000c310"         .LONG  FONT18V,FONT18W,FONT18X,FONT18Y,FONT18Z
    2442 00011db0 0000c690"         .LONG  FONT18PER,FONT18PER,FONT18PER,FONT18PER,FONT18PER
    2443                    
    2444                    *
    2445                    *50 POINT GAME FONT.
    2446                    *
    2447 00011e50           H50FONT
    2448 00011e50 00003cc0"         .LONG  FONT51EXC,FONT51PER,FONT51PER,FONT51PER,FONT51PER
    2449 00011ef0 00003da0"         .LONG  FONT51PER,FONT51PER,FONT51PER,FONT51PER,FONT51PER
    2450 00011f90 00003da0"         .LONG  FONT51PER,FONT51PER,FONT51DASH,FONT51PER,FONT51PER
    2451 00012030 00003c50"         .LONG  FONT510,FONT511,FONT512,FONT513,FONT514,FONT515,FONT516
    2452 00012110 00003b00"         .LONG  FONT517,FONT518,FONT519
    2453 00012170 00003da0"         .LONG  FONT51PER,FONT51PER,FONT51PER,FONT51PER,FONT51PER
    2454 00012210 00003da0"         .LONG  FONT51PER,FONT51PER
    2455 00012250 00002d00"         .LONG  FONT51A,FONT51B,FONT51C,FONT51D,FONT51E,FONT51F,FONT51G
    2456 00012330 00003010"         .LONG  FONT51H,FONT51I,FONT51J,FONT51K,FONT51L,FONT51M,FONT51N
    2457 00012410 00003320"         .LONG  FONT51O,FONT51P,FONT51DASH,FONT51R,FONT51S,FONT51T,FONT51U
    2458 000124f0 00003630"         .LONG  FONT51V,FONT51W,FONT51DASH,FONT51Y,FONT51Z
    2459                    ;       .LONG  FONT51PER,FONT51PER,FONT51PER,FONT51PER
    2460 00012590 00012a30"         .LONG  XFONT17TM,FONT51PER,CIRCLER,FONT51PER
    2461 00012610 00003da0"         .LONG  FONT51PER,FONT51PER
    2462 00012650 00002d00"         .LONG  FONT51A,FONT51B,FONT51C,FONT51D,FONT51E,FONT51F,FONT51G
    2463 00012730 00003010"         .LONG  FONT51H,FONT51I,FONT51J,FONT51K,FONT51L,FONT51M,FONT51N
    2464 00012810 00003320"         .LONG  FONT51O,FONT51P,FONT51DASH,FONT51R,FONT51S,FONT51T,FONT51U
    2465 000128f0 00003630"         .LONG  FONT51V,FONT51W,FONT51DASH,FONT51Y,FONT51Z
    2466 00012990 00003da0"         .LONG  FONT51PER,FONT51PER,FONT51PER,FONT51PER,FONT51PER
    2467                    
    2468 00012a30           XFONT17TM:
    2469 00012a30     1000          .word   01000H,4,17
    2470 00012a60 04000000          .long   04000000H
    2471 00012a80     0000          .word   0,0
    2472 00012aa0 00000000!         .long   TRADMARKP
    2473                    
    2474                    **************************************************************************
    2475                    *                                                                        *
    2476                    *                 SPECIAL CHARACTER DEFINITIONS                          *
    2477                    *                                                                        *
    2478                    **************************************************************************
    2479 00012ac0           FONT8BLK:
    2480 00012ac0     0004          .WORD   4,4,2,-2
    2481 00012b00 02000000          .LONG   IROM
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   54

    2482                    
    2483 00012b20           FONT8UNDERLINE:
    2484 00012b20     0006          .WORD   6,1,0,-9
    2485 00012b60 02000000          .LONG   IROM
    2486                    
    2487 00012b80           SUFFIX_S:
    2488 00012b80       73          .STRING "s"
    2489                    
    2490 00012b88           SUFFIX_NULL:
    2491 00012b88       00          .BYTE   0
    2492 00012b90                   .EVEN
    2493                    
    2494                    **************************************************************************
    2495                    *                                                                        *
    2496                    *               SOUND TABLE FOR BEEPS AND CLICKS THAT ARE                *
    2497                    *               ATTACHED TO CHARACTER OUTPUT.                            *
    2498                    *                                                                        *
    2499                    **************************************************************************
    2500 00012b90           TEXT_SOUND_TAB
    2501 00012b90 00012bd0"         .LONG   TEXT_TTY_SND, TEXT_TTY1_SND
    2502                    
    2503 00012bd0           TEXT_TTY_SND
    2504 00012bd0     f2e0          .WORD   0F2E0H,1,080CCH,0       ;MOST OBNOXIOUS TTY SOUND
    2505 00012c10           TEXT_TTY1_SND
    2506 00012c10     f2e0          .WORD   0F2E0H,1,080EBH,0       ;TOLERABLE TTY CLICK
    2507                    
    2508                    **************************************************************************
    2509                    *                                                                        *
    2510                    * PALETTES                                                               *
    2511                    *                                                                        *
    2512                    **************************************************************************
    2513                    
    2514 00012c50           TEXTPAL:
    2515 00012c50     002d     .word   45
    2516 00012c60     0000     .word   00000h,07c00h,06739h,0001fh,035adh,077a0h,0741ah,003a0h
    2517 00012ce0     0000     .word   00000h,00010h,00881h,00ca1h,00cc2h,010e2h,01102h,01523h
    2518 00012d60     1543     .word   01543h,01963h,01984h,01da4h,01dc3h,01dc4h,021c3h,021c4h
    2519 00012de0     1de3     .word   01de3h,01de4h,021e3h,021e4h,02205h,02625h,02645h,02a66h
    2520 00012e60     2a86     .word   02a86h,02ea6h,02ec7h,032e7h,03307h,03727h,03748h,03b47h
    2521 00012ee0     3b48     .word   03b48h,03767h,03768h,03b67h,03b68h
    2522                    
    2523                    *
    2524                    * GAME FONT GRAY PALETTE, GFONT10CP IN IMGPAL.ASM
    2525                    ;mdp
    2526                    ;FONTGRYP:
    2527                    ;   .word   21
    2528                    ;   .word   00000h,00000h,07fffh,03defh,077bdh,06f7bh,06b5ah,06318h
    2529                    ;   .word   05ad6h,056b5h,04e73h,04631h,04631h,04631h,04e73h,056b5h
    2530                    ;   .word   05ef7h,06739h,06f7bh,077bdh,077bdh
    2531 00012f30           FONTGRYP2:
    2532 00012f30     0015     .word   21
    2533 00012f40     0000     .word   00000h,00000h,07fffh,03defh,077bdh,06f7bh,06b5ah,06318h
    2534 00012fc0     5ad6     .word   05ad6h,056b5h,04e73h,04631h,04631h,04631h,04e73h,056b5h
    2535 00013040     5ef7     .word   05ef7h,06739h,06f7bh,077bdh,077bdh
    2536                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   55

    2537 00013090           BLUTXT3P:
    2538                    ;   .word   21 
    2539                    ;   .word   00000h,00000h,0527fh,018d2h,0463fh,03dffh,0319fh,0295fh
    2540                    ;   .word   0211fh,018dfh,00c7fh,0043fh,0001fh,0043fh,0109fh,018dfh
    2541                    ;   .word   0211fh,0295fh,0319fh,039dfh,0463fh
    2542                    ;BLUTXT4P:
    2543                    ;   .word   21 
    2544                    ;   .word   00000h,00000h,0527fh,018d2h,0463fh,03dffh,0319fh,0295fh
    2545                    ;   .word   0043fh,014bfh,0253fh,035bfh,0463fh,035bfh,0253fh,014bfh
    2546                    ;   .word   0043fh,014bfh,0253fh,035bfh,0463fh
    2547 00013090           BLUTXT5P:
    2548 00013090     0015     .word   21 
    2549 000130a0     0000     .word   00000h,00000h,04a3eh,02535h,0529fh,04a5fh,03dffh,035bfh
    2550 00013120     2d7f     .word   02d7fh,0253fh,018dfh,0109fh,00c7fh,0109fh,01cffh,0253fh
    2551 000131a0     2d7f     .word   02d7fh,035bfh,03dffh,0463fh,0529fh
    2552                    
    2553                    
    2554 000131f0           GLDTXT1P:
    2555                    ;   .word   21
    2556                    ;   .word   00000h,00000h,07ffch,03920h,07f4eh,07f26h,076e5h,06ea3h
    2557                    ;   .word   06662h,06221h,05a00h,051c0h,049a0h,049a0h,051c0h,05a00h
    2558                    ;   .word   06221h,06662h,06ea3h,076e5h,07f26h
    2559                    ;GLDTXT2P:
    2560                    ;   .word   21
    2561                    ;   .word   00000h,00000h,07ffch,03920h,07f4eh,072c9h,06665h,055e2h
    2562                    ;   .word   049a0h,05602h,06665h,072c9h,07f4eh,072c9h,06665h,055e2h
    2563                    ;   .word   049a0h,055e0h,06642h,072a4h,07f26h
    2564 000131f0           GLDTXT5P:
    2565 000131f0     0015     .word   21 
    2566 00013200     0000     .word   00000h,00000h,0738eh,03920h,07f4eh,07f26h,076e5h,06ea3h
    2567 00013280     6662     .word   06662h,06221h,05a00h,051c0h,049a0h,049a0h,051c0h,05a00h
    2568 00013300     6221     .word   06221h,06662h,06ea3h,076e5h,07f26h
    2569                    
    2570                    ;GRNTXT1P:
    2571                    ;   .word   21
    2572                    ;   .word   00000h,00000h,07fffh,015e5h,067b9h,063d8h,05bb6h,05394h
    2573                    ;   .word   04791h,03f6fh,0374dh,02f2bh,02709h,022e8h,022e8h,02b0ah
    2574                    ;   .word   0374dh,04370h,05394h,05fd7h,06ffbh
    2575                    ;GRNTXT2P:
    2576                    ;   .word   21
    2577                    ;   .word   00000h,00000h,07fffh,015e5h,067b9h,05795h,04751h,0372dh
    2578                    ;   .word   02709h,0372dh,04350h,05795h,067b9h,05795h,04751h,0372dh
    2579                    ;   .word   02709h,0372dh,04771h,05bb6h,06ffbh
    2580 00013350           GRNTXT3P:
    2581                    ;   .word   21 
    2582                    ;   .word   00000h,00000h,067f9h,015c4h,047f1h,03bceh,033ach,02769h
    2583                    ;   .word   01f47h,01725h,01304h,00ae2h,002a0h,00280h,006c1h,00ee3h
    2584                    ;   .word   01725h,02348h,02b8ah,037adh,047f1h
    2585                    ;GRNTXT4P:
    2586                    ;   .word   21 
    2587                    ;   .word   00000h,00000h,067f9h,015c4h,047f1h,02f8bh,01b46h,00ae2h
    2588                    ;   .word   00280h,00ae2h,01b46h,02f8bh,047f1h,02f8bh,01b46h,00ae2h
    2589                    ;   .word   00280h,00ae2h,01b46h,02f8bh,047f1h
    2590 00013350           GRNTXT5P:
    2591 00013350     0015     .word   21 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   56

    2592 00013360     0000     .word   00000h,00000h,04f53h,015c4h,047f1h,03bceh,033ach,02769h
    2593 000133e0     1f47     .word   01f47h,01725h,01304h,00ae2h,002a0h,00280h,006c1h,00ee3h
    2594 00013460     1725     .word   01725h,02348h,02b8ah,037adh,047f1h
    2595                    
    2596                    ;PRPTXT1P:
    2597                    ;   .word   21
    2598                    ;   .word   00000h,00000h,07fffh,05c77h,07f7fh,07f1fh,07ebfh,07e5fh
    2599                    ;   .word   07e1fh,07dbfh,07d5fh,07cffh,07c9fh,07c9fh,07cffh,07d7fh
    2600                    ;   .word   07ddfh,07e3fh,07e9fh,07f1fh,07f7fh
    2601                    ;PRPTXT2P:
    2602                    ;   .word   21
    2603                    ;   .word   00000h,00000h,07fffh,05c77h,07f7fh,07ebfh,07e1fh,07d5fh
    2604                    ;   .word   07c9fh,07d5fh,07e1fh,07ebfh,07f7fh,07ebfh,07e1fh,07d5fh
    2605                    ;   .word   07c9fh,07d5fh,07e1fh,07ebfh,07f7fh
    2606 000134b0           PRPTXT3P:
    2607                    ;   .word   21 
    2608                    ;   .word   00000h,00000h,07edfh,05c77h,07e5fh,079feh,079beh,0755dh
    2609                    ;   .word   0751dh,070dch,0707ch,0703ch,06c1bh,0703ch,0707ch,070dch
    2610                    ;   .word   0751dh,0755dh,079beh,079feh,07e5fh
    2611                    ;PRPTXT4P:
    2612                    ;   .word   21 
    2613                    ;   .word   00000h,00000h,07edfh,05c77h,07e5fh,079beh,0751dh,0707ch
    2614                    ;   .word   06c1bh,0707ch,0751dh,079beh,07e5fh,079beh,0751dh,0707ch
    2615                    ;   .word   06c1bh,0707ch,0751dh,079beh,07e5fh
    2616 000134b0           PRPTXT5P:
    2617 000134b0     0015     .word   21 
    2618 000134c0     0000     .word   00000h,00000h,07e3fh,05c77h,07e5fh,079feh,079beh,0755dh
    2619 00013540     751d     .word   0751dh,070dch,0707ch,0703ch,06c1bh,0703ch,0707ch,070dch
    2620 000135c0     751d     .word   0751dh,0755dh,079beh,079feh,07e5fh
    2621                    
    2622                    ;REDTXT1P:
    2623                    ;   .word   21
    2624                    ;   .word   00000h,00000h,07fffh,05400h,07ef7h,07eb5h,07e52h,07e10h
    2625                    ;   .word   07dadh,07d6bh,07d08h,07cc6h,07c00h,07c42h,07cc6h,07d4ah
    2626                    ;   .word   07d8ch,07dceh,07e10h,07e52h,07eb5h
    2627                    ;REDTXT2P:
    2628                    ;   .word   21
    2629                    ;   .word   00000h,00000h,07fffh,05400h,07ef7h,07e31h,07d6bh,07ca5h
    2630                    ;   .word   07c00h,07ca5h,07d6bh,07e31h,07ef7h,07e31h,07d6bh,07ca5h
    2631                    ;   .word   07c00h,07ca5h,07d6bh,07e31h,07ef7h
    2632 00013610           REDTXT3P:
    2633 00013610     0015     .word   21 
    2634 00013620     0000     .word   00000h,00000h,07d8ch,03800h,07c63h,07c42h,07c00h,07c00h
    2635 000136a0     7400     .word   07400h,06800h,06000h,05400h,04c00h,05800h,06400h,07000h
    2636 00013720     7c00     .word   07c00h,07c00h,07c21h,07c42h,07c63h
    2637 00013770           REDTXT4P:
    2638 00013770     0015     .word   21 
    2639 00013780     0000     .word   00000h,00000h,07d8ch,03800h,07c63h,07042h,06421h,05800h
    2640 00013800     4c00     .word   04c00h,05800h,06421h,07042h,07c63h,07042h,06421h,05800h
    2641 00013880     4c00     .word   04c00h,05800h,06421h,07042h,07c63h
    2642                    
    2643 000138d0           ORGTXT1P:
    2644 000138d0     0015     .word   21 
    2645 000138e0     7c1f     .word   07c1fh,00000h,07e6bh,06460h,07e29h,07de7h,07dc6h,07d84h
    2646 00013960     7d42     .word   07d42h,07d21h,074e0h,06ca0h,06ca0h,06ca0h,074e0h,07d21h
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:23 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   57

    2647 000139e0     7d63     .word   07d63h,07da5h,07de7h,07e29h,07e29h
    2648                    
    2649                            .end

 No Errors,  No Warnings
