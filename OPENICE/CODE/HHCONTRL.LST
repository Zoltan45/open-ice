TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .MLIB   "HHMACS.LIB"
       2                            .FILE   "HHCONTROL.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    
       7                    *
       8                    *GET THE SYSTEM STUFF
       9                    *
      10                            .INCLUDE        "HH.INC"
      11                            .INCLUDE        "HHSTRING.H"
      12                            .INCLUDE        "IMGTBL.GLO"
      13                            .include        "hhcontrl.tbl"
      14                            .include        "hhmath.g"
      15                            .include        "hhproc.g"
      16                            .include        "hhplayer.g"
      17                            .include        "hhpuck.g"
      18                            .include        "hhgame.g"
      19                            .include        "hhmisc.g"
      20                            .include        "hhcontrl.e"
      21                            .include        "hhutil.g"
      22                            .include        "hhram.g"
      23                            .include        "hh.g"
      24                            .include        "hhd.g"
      25                            .include        "hhselect.g"
      26                            .include        "hhc.g"
      27                            .include        "hhshow.g"
      28                            .include        "hhgdrone.g"
      29                            .include        "hhgscr.g"
      30                            .include        "hhgscr2.g"
      31                            .include        "hhhigher.g"
      32                            .include        "hhspeech.g"
      33                            .include        "hhcontr2.g"
      34                            .include        "hhscr_sh.g"
      35                            .include        "hhscr_ch.g"
      36                            .include        "hhscr_sk.g"
      37                            .include        "hhscr_ms.g"
      38                            .include        "hhndrone.g"
      39                            .include        "hhtimer.g"
      40                            .include        "hhpup.g"
      41                            .include        "hhcontr3.g"
      42                            .include        "hhscrchf.g"
      43                            .include        "hhstabl2.g"
      44                    
      45                    ; end of include files
      46                    
      47 00000000                   .TEXT
      48 00000000                   .EVEN
      49                    
      50 00000000                   .bss    no_control,16           ;we can't control anyone (do not use ever again)
      51 00000010                   .bss    global_control_slow,32
      52                    
      53 00000030                   .bss    whack_goalie_count,16
      54                    
      55 00000000           control_player  ;a10 = player number
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    2

      56 00000000     4d40  cp0     move    a10,a0                          ;we still need it in a0 and a10
      57 00000010                   GBLOCK  a0,a6
      58 00000060     0d5f          calla   get_offense_mode
         00000070 00000000! 
      59 00000090     0b41          cmpi    1,a1
         000000a0     fffe  
      60 000000b0     ca19          jrz     cpdf
      61 000000c0     57ce          clr     a14             ;speed boost
      62 000000d0     5642          clr     a2              ;skid boost
      63 000000e0     05a1          move    @PUCK_CONTROL,a1,W
         000000f0 00000000! 
      64 00000110     482a          cmp     a1,a10
      65 00000120     cb22          jrnz    cpnd
      66                    
      67 00000130     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         00000140     0c50  
      68 00000150     1f2e          btst    B_PUP_SPEED,a14
      69 00000160     ca04          jrz     nopups
      70 00000170     09ee          movi    pspeed_data_powered,a14
         00000180 00000000! 
      71 000001a0     c002          jruc    yspups                  ;power up speed
      72 000001b0     b6ce  nopups  move    *a6(POF_S_SPED),a14,L
         000001c0     00e0  
      73 000001d0     b7ce  yspups  move    *a14(PS_SP_CONTROL_PENALTY),a14,L
         000001e0     0160  
      74                            .if     NO_PUCK_HOG
      75                            .else
      76 000001f0     07a8          move    @global_control_slow,a8,L       ;zero, unless we are hogging the puck
         00000200 00000010- 
      77 00000220     410e          add     a8,a14
      78                            .endif
      79 00000230     03ae          neg     a14
      80 00000240     c010          jruc    cpnd
      81 00000250     b6c2  cpdf    move    *a6(POF_S_STOP),a2,L
         00000260     0100  
      82 00000270     ae42          movb    *a2(PS_ST_DEFENSE_SKID),a2
         00000280     0060  
      83                    
      84 00000290     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         000002a0     0c50  
      85 000002b0     1f2e          btst    B_PUP_SPEED,a14
      86 000002c0     ca04          jrz     nop1ps
      87 000002d0     09ee          movi    pspeed_data_powered,a14
         000002e0 00000000! 
      88 00000300     c002          jruc    ysp1ps                  ;power up speed
      89 00000310     b6ce  nop1ps  move    *a6(POF_S_SPED),a14,L
         00000320     00e0  
      90 00000330     b7ce  ysp1ps  move    *a14(PS_SP_DEFENSE_BOOST),a14,L
         00000340     0140  
      91 00000350     ac46  cpnd    movb    a2,*a6(POF_SKID_BOOST)
         00000360     05b0  
      92 00000370     b3c6          move    a14,*a6(POF_SPEED_BOOST),L
         00000380     04a0  
      93 00000390     b6c8          move    *a6(POF_OBJECT),a8,L
         000003a0     0280  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    3

      94 000003b0     05ae          move    @no_control,a14,W
         000003c0 00000000- 
      95 000003e0     cb00          jrnz    control_player_higher   ;do not ever do this again
         000003f0     01fb  
      96 00000400     b4ce          move    *a6(POF_FLAGS),a14,W
         00000410     0200  
      97 00000420     1f6e          btst    B_PF_HIGHER,a14
      98 00000430     cb00          jrnz    control_player_higher   ;must have flags in a14
         00000440     01f6  
      99 00000450     1fee          btst    B_PF_HUMAN,a14
     100 00000460     ca00          jrz     control_player_drone
         00000470     01d3  
     101                    
     102                    ;       callr   delete_cpuarrow_if      ;can be very slow
     103 00000480     57ce          clr     a14
     104 00000490     b1c6          move    a14,*a6(POF_DRONE_BUTTONS),W    ;wipe out any drone signals
         000004a0     09d0  
     105                    
     106 000004b0     0d3f          callr   read_joystick
         000004c0     150a  
     107 000004d0     0d5f          calla   update_turbo            ;can be slow
         000004e0 00000000! 
     108                    ;       move    *a6(POF_FLAGS),a14,W
     109                    ;       btst    B_PF_CONTROL,a14
     110                    ;       jrz     skpotc
     111 00000500     0d5f          calla   one_timer_check
         00000510 0001b1f0' 
     112 00000530     b4ce          move    *a6(POF_FLAGS),a14,W
         00000540     0200  
     113 00000550     1fce          btst    B_PF_CONTROL,a14
     114 00000560     cb03          jrnz    ccp1
     115 00000570     1ece  skpotc  btst    B_PF_CONTROLM,a14
     116 00000580     ca00          jrz     control_player_nc                       ;br=no control
         00000590     01bc  
     117 000005a0     05ae  ccp1    move    @GAME_STATE,a14,W
         000005b0 00000000! 
     118 000005d0     0b4e          cmpi    INPLAY,a14                      ;if period is over, no control
         000005e0     ffdf  
     119 000005f0     cb00          jrnz    control_player_ncnt
         00000600     01a8  
     120 00000610     0d3f          callr   are_we_intended
         00000620     03e6  
     121 00000630     c805          jrc     cpnolog
     122 00000640     0d3f          callr   move_player
         00000650     01e8  
     123 00000660     0d3f          callr   face_player
         00000670     0432  
     124 00000680     c006          jruc    cpsps
     125 00000690     098f  cpnolog mmtm    sp,a10
         000006a0     0020  
     126 000006b0     0d3f          callr   line_up_for_pass
         000006c0     1b34  
     127 000006d0     09af          mmfm    sp,a10
         000006e0     0400  
     128 000006f0     b4ce  cpsps   move    *a6(POF_FLAGS),a14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    4

         00000700     0200  
     129 00000710     1fce          btst    B_PF_CONTROL,a14
     130 00000720     cb02          jrnz    ccp2
     131 00000730     1eae          btst    B_PF_CONTROLB,a14
     132 00000740     ca02          jrz     end_of_player
     133 00000750     0d3f  ccp2    callr   set_player_script
         00000760     056f  
     134 00000770           end_of_player
     135 00000770     0d5f          calla   fix_players_arrow       ;can be slow
         00000780 00000000! 
     136 000007a0     0d5f          calla   fix_players_trail
         000007b0 00000000! 
     137 000007d0     0d3f          callr   fix_player_below
         000007e0     0006  
     138 000007f0                   SLEEP   1
     139 00000830     c000          jruc    cp0
         00000840     ff7b  
     140                    
     141 00000850           fix_player_below                ;safety on below ice
     142 00000850     b6c8          move    *a6(POF_OBJECT),a8,L
         00000860     0280  
     143 00000870     b50e          move    *a8(OYPOS),a14,W
         00000880     0170  
     144 00000890     0b4e          cmpi    10,a14
         000008a0     fff5  
     145 000008b0     c407          jrlt    fpb9
     146 000008c0     57ce          clr     a14
     147 000008d0     b1c8          move    a14,*a8(OYACCEL),W
         000008e0     02f0  
     148 000008f0     b3c8          move    a14,*a8(OYVEL),L
         00000900     0120  
     149 00000910     b3c8          move    a14,*a8(OYVAL),L
         00000920     0160  
     150 00000930     0960  fpb9    rets
     151                    
     152 00000940           clean_up_players
     153 00000940     05a0          move    @PUCK_CONTROL,a0,W      ;first place puck
         00000950 00000000! 
     154 00000970     ca40          jrz     ppwp_9
     155 00000980                   GBLOCK  a0,a6
     156 000009d0     b4c0          move    *a6(POF_MODE),a0,W
         000009e0     0210  
     157 000009f0     0b40          cmpi    PM_ONETIME,a0
         00000a00     fff2  
     158 00000a10     ca36          jrz     ppwp_9                  ;if we are onetiming, we don't place puck
     159                    
     160 00000a20     07a9          move    @PUCK_OBJECT,a9,L
         00000a30 00000000! 
     161 00000a50     b52e          MOVE    *A9(ODT_PFLAGS),A14,W
         00000a60     0590  
     162 00000a70     1fce          btst    B_INBACK,a14
     163 00000a80     cb08          jrnz    putbhd
     164 00000a90     1fee          BTST    B_INFRONT,A14
     165 00000aa0     ca0c          JRZ     CUP_NORM                        ;BR=DON'T FORCE PUCK IN FRONT
     166 00000ab0     0d5f          calla   get_players_puck_point_bz
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    5

         00000ac0 00000000! 
     167 00000ae0     0be1          subi    200,a1
         00000af0     ff37  
     168 00000b00     c00a          JRUC    CUP_SETPOS
     169 00000b10     0d5f  putbhd  calla   get_players_puck_point_bz
         00000b20 00000000! 
     170 00000b40     0b01          addi    200,a1
         00000b50     00c8  
     171 00000b60     c004          JRUC    CUP_SETPOS
     172 00000b70           CUP_NORM
     173 00000b70     0d5f          calla   get_players_puck_point_b
         00000b80 00000000! 
     174 00000ba0     5642          clr     a2
     175 00000bb0           CUP_SETPOS
     176 00000bb0     0d5f          calla   put_point_in_rink
         00000bc0 00000000! 
     177 00000be0     0d3f          callr   fix_front_back_goal
         00000bf0     002e  
     178                    
     179 00000c00     b249          move    a2,*a9(OYVAL),L
         00000c10     0160  
     180 00000c20     b209          move    a0,*a9(OXVAL),L         ;store to pucks position
         00000c30     0140  
     181 00000c40     b229          move    a1,*a9(OZVAL),L
         00000c50     0180  
     182 00000c60     bb09          move    *a8(OXVEL),*a9(OXVEL),L ;copy velocities to puck
         00000c70     0100  
         00000c80     0100  
     183 00000c90     bb09          move    *a8(OXVEL),*a9(ODT_REALXVEL),L
         00000ca0     0100  
         00000cb0     04f0  
     184 00000cc0     bb09          move    *a8(OYVEL),*a9(OYVEL),L ;to minimize puck drift between updates
         00000cd0     0120  
         00000ce0     0120  
     185 00000cf0     bb09          move    *a8(OZVEL),*a9(OZVEL),L
         00000d00     00e0  
         00000d10     00e0  
     186 00000d20     bb09          move    *a8(ODT_DIR),*a9(ODT_DIR),L
         00000d30     04b0  
         00000d40     04b0  
     187 00000d50     bb09          move    *a8(ODT_VEL),*a9(ODT_VEL),L
         00000d60     04d0  
         00000d70     04d0  
     188 00000d80     09ea  ppwp_9  movi    plblcklst,a10           ;fix all players shadows
         00000d90 00001830' 
     189 00000db0     09eb          movi    [4700,0],a11
         00000dc0 125c0000  
     190 00000de0     9746  fpr2    move    *a10+,a6,L
     191 00000df0     ca0d          jrz     fps_09
     192 00000e00     aece          movb    *a6(POF_IGNORE_PUCK),a14        ;dec the ignore puck count
         00000e10     0598  
     193 00000e20     ca03          jrz     dip_9
     194 00000e30     142e          dec     a14
     195 00000e40     adc6          movb    a14,*a6(POF_IGNORE_PUCK)
         00000e50     0598  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    6

     196 00000e60           dip_9
     197 00000e60     b6c9          move    *a6(POF_OBJECT),a9,L
         00000e70     0280  
     198 00000e80     b6c8          move    *a6(POF_SHADOW),a8,L
         00000e90     02a0  
     199 00000ea0     0d3f          callr   shad_do
         00000eb0     0075  
     200 00000ec0     c0f1          jruc    fpr2
     201 00000ed0     0960  fps_09  rets
     202                    
     203 00000ee0           fix_front_back_goal     ;a8 = player
     204                                            ;a0, a1 = puck point
     205 00000ee0     b703          move    *a8(OZVAL),a3,L
         00000ef0     0180  
     206 00000f00     0b63          cmpi    TOP_GOALPOST_Z+[50,0],a3
         00000f10 fe44ffff  
     207 00000f30     c724          jrgt    ffbg8
     208 00000f40     0b63          cmpi    BOT_GOALPOST_Z-[50,0],a3
         00000f50 ff13ffff  
     209 00000f70     c420          jrlt    ffbg8
     210 00000f80     b704          move    *a8(OXVAL),a4,L
         00000f90     0140  
     211 00000fa0     4c8e          move    a4,a14
     212 00000fb0     038e          abs     a14
     213 00000fc0     0b6e          cmpi    RGHT_GOALLINE_X-[120,0],a14
         00000fd0 fdc7ffff  
     214 00000ff0     c418          jrlt    ffbg8
     215 00001000     4c05          move    a0,a5   ;now check more closely
     216 00001010     0385          abs     a5
     217 00001020     0b6e          cmpi    RGHT_GOALLINE_X,a14
         00001030 fd4fffff  
     218 00001050     c707          jrgt    ffb_pr
     219 00001060     0b65          cmpi    RGHT_GOALLINE_X,a5
         00001070 fd4fffff  
     220 00001090     c40e          jrlt    ffbg8           ;we are inside of goal line, nothing
     221 000010a0     0d3f          callr   ffbgcgl         ;check across goal line
         000010b0     0031  
     222 000010c0     c00b          jruc    ffbg8
     223 000010d0     0b6e  ffb_pr  cmpi    RGHT_GOALLINE_X+GOAL_DEPTH_X,a14
         000010e0 fd25ffff  
     224 00001100     c407          jrlt    ffb_in
     225 00001110     0b65          cmpi    RGHT_GOALLINE_X+GOAL_DEPTH_X,a5
         00001120 fd25ffff  
     226 00001140     c703          jrgt    ffbg8           ;we are outside of goal line+depth, nothing
     227 00001150     0d3f          callr   ffbgcdp         ;check across goal line depth
         00001160     0002  
     228 00001170     0300          jruc    ffbg8
     229 00001180           ffb_in
     230 00001180     0960  ffbg8   rets
     231                    
     232 00001190     098f  ffbgcdp mmtm    sp,a0,a1,a2
         000011a0     e000  
     233 000011b0     0380          abs     a0
     234 000011c0     2a00          sra     16,a0
     235 000011d0     ee20          movy    a1,a0           ;puck
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    7

     236 000011e0     4dc1          move    a14,a1
     237 000011f0     2a01          sra     16,a1
     238 00001200     ee61          movy    a3,a1           ;player
     239 00001210     09c2          movi    (RGHT_GOALLINE_X+GOAL_DEPTH_X)>016H,a2
         00001220     0001  
     240 00001230     0d5f          calla   get_z_from_x_midpoint
         00001240 00000000! 
     241 00001260     2a02          sra     16,a2
     242 00001270     0b42          cmpi    (TOP_GOALPOST_Z>016H)+5,a2
         00001280     fff9  
     243 00001290     c70f          jrgt    ffbd_8
     244 000012a0     0b42          cmpi    (BOT_GOALPOST_Z>016H)-5,a2
         000012b0     0003  
     245 000012c0     c40c          jrlt    ffbd_8
     246 000012d0     09af          mmfm    sp,a0,a1,a2
         000012e0     0007  
     247 000012f0     4c61          move    a3,a1
     248 00001300     09e0          movi    RGHT_GOALLINE_X+GOAL_DEPTH_X,a0
         00001310 02da0000  
     249 00001330     4c84          move    a4,a4
     250 00001340     cf01          jrnn    ffbd2
     251 00001350     03a0          neg     a0
     252 00001360     5642  ffbd2   clr     a2
     253 00001370     0de0          setc
     254 00001380     0960          rets
     255 00001390     09af  ffbd_8  mmfm    sp,a0,a1,a2
         000013a0     0007  
     256 000013b0     0320          clrc
     257 000013c0     0960          rets
     258                    
     259 000013d0     098f  ffbgcgl mmtm    sp,a0,a1,a2
         000013e0     e000  
     260 000013f0     0380          abs     a0
     261 00001400     2a00          sra     16,a0
     262 00001410     ee20          movy    a1,a0           ;puck
     263 00001420     4dc1          move    a14,a1
     264 00001430     2a01          sra     16,a1
     265 00001440     ee61          movy    a3,a1           ;player
     266 00001450     09c2          movi    RGHT_GOALLINE_X>016H,a2
         00001460     0001  
     267 00001470     0d5f          calla   get_z_from_x_midpoint
         00001480 00000000! 
     268 000014a0     2a02          sra     16,a2
     269 000014b0     0b42          cmpi    (TOP_GOALPOST_Z>016H)+5,a2
         000014c0     fff9  
     270 000014d0     c70f          jrgt    ffbg_8
     271 000014e0     0b42          cmpi    (BOT_GOALPOST_Z>016H)-5,a2
         000014f0     0003  
     272 00001500     c40c          jrlt    ffbg_8
     273 00001510     09af          mmfm    sp,a0,a1,a2
         00001520     0007  
     274 00001530     4c61          move    a3,a1
     275 00001540     09e0          movi    RGHT_GOALLINE_X,a0
         00001550 02b00000  
     276 00001570     4c84          move    a4,a4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    8

     277 00001580     cf01          jrnn    ffbg2
     278 00001590     03a0          neg     a0
     279 000015a0     5642  ffbg2   clr     a2
     280 000015b0     0de0          setc
     281 000015c0     0960          rets
     282 000015d0     09af  ffbg_8  mmfm    sp,a0,a1,a2
         000015e0     0007  
     283 000015f0     0320          clrc
     284 00001600     0960          rets
     285                    
     286                    **************************************************************************
     287                    *                                                                        *
     288                    * shad_do                                                                *
     289                    *                                                                        *
     290                    **************************************************************************
     291 00001610     bb28  shad_do move    *a9(OXVAL),*a8(OXVAL),L
         00001620     0140  
         00001630     0140  
     292 00001640     57ce          clr     a14
     293 00001650     b3c8          move    a14,*a8(OYVAL),L
         00001660     0160  
     294                    ;       move    *a9(OYVAL),*a8(OYVAL),L
     295 00001670     b724          move    *a9(OZVAL),a4,L
         00001680     0180  
     296 00001690     4c8e          move    a4,a14
     297 000016a0     4164          add     a11,a4          ;4700,0
     298 000016b0     b288          move    a4,*a8(OZVAL),L
         000016c0     0180  
     299 000016d0     bb28          move    *a9(OXVEL),*a8(OXVEL),L
         000016e0     0100  
         000016f0     0100  
     300 00001700     bb28          move    *a9(OZVEL),*a8(OZVEL),L
         00001710     00e0  
         00001720     00e0  
     301 00001730     298e          sra     20,a14
     302                    
     303                            .if     DEBUG
     304                            CMPI    -5,A14
     305                            LOCKON  LT
     306                            CMPI    54,A14
     307                            LOCKON  GT
     308                            .endif
     309                    
     310 00001740     24ae          sll     5,a14
     311 00001750     0b2e          addi    z_shad_table,a14
         00001760 000019b0' 
     312 00001780     87c1          move    *a14,a1,L
     313 00001790     b70e          move    *a8(OIMG),a14,L
         000017a0     02c0  
     314 000017b0     49c1          cmp     a14,a1
     315 000017c0     ca05          jrz     fpfpr2
     316 000017d0     b504          move    *a8(OCTRL),a4,W
         000017e0     01f0  
     317 000017f0     c080          jauc    ANI
         00001800 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    9

     318 00001820     0960  fpfpr2  rets
     319                    
     320                    
     321 00001830           plblcklst
     322 00001830 00000000!         .long   PLAYER_1_BLOCK
     323 00001850 00000000!         .long   PLAYER_2_BLOCK
     324 00001870 00000000!         .long   PLAYER_4_BLOCK
     325 00001890 00000000!         .long   PLAYER_5_BLOCK
     326 000018b0 00000000!         .long   PLAYER_6_BLOCK
     327 000018d0 00000000!         .long   PLAYER_8_BLOCK
     328 000018f0 00000000          .long   0
     329                    
     330 00001910 00000000"         .long   shadow3         ;-80
     331 00001930 00000000"         .long   shadow3         ;-64
     332 00001950 00000000"         .long   shadow3         ;-48
     333 00001970 00000000"         .long   shadow3         ;-32
     334 00001990 00000000"         .long   shadow3         ;-16
     335 000019b0           z_shad_table
     336 000019b0 00000000"         .long   shadow3         ;0
     337 000019d0 00000000"         .long   shadow3         ;16
     338 000019f0 00000000"         .long   shadow3         ;32
     339 00001a10 00000000"         .long   shadow3         ;48
     340 00001a30 00000090"         .long   shadow4         ;64
     341 00001a50 00000090"         .long   shadow4         ;80
     342 00001a70 00000090"         .long   shadow4         ;96
     343 00001a90 00000090"         .long   shadow4         ;112
     344 00001ab0 00000090"         .long   shadow4         ;128
     345 00001ad0 00000120"         .long   shadow5         ;144
     346 00001af0 00000120"         .long   shadow5         ;160
     347 00001b10 00000120"         .long   shadow5         ;176
     348 00001b30 00000120"         .long   shadow5         ;192
     349 00001b50 000001b0"         .long   shadow6         ;208
     350 00001b70 000001b0"         .long   shadow6         ;224
     351 00001b90 000001b0"         .long   shadow6         ;240
     352 00001bb0 000001b0"         .long   shadow6         ;256
     353 00001bd0 000001b0"         .long   shadow6         ;272
     354 00001bf0 00000240"         .long   shadow7         ;288
     355 00001c10 00000240"         .long   shadow7         ;304
     356 00001c30 00000240"         .long   shadow7         ;320
     357 00001c50 00000240"         .long   shadow7         ;336
     358 00001c70 000002d0"         .long   shadow8         ;352
     359 00001c90 000002d0"         .long   shadow8         ;368
     360 00001cb0 000002d0"         .long   shadow8         ;384
     361 00001cd0 000002d0"         .long   shadow8         ;400
     362 00001cf0 000002d0"         .long   shadow8         ;416
     363 00001d10 00000360"         .long   shadow9         ;432
     364 00001d30 00000360"         .long   shadow9         ;448
     365 00001d50 00000360"         .long   shadow9         ;464
     366 00001d70 00000360"         .long   shadow9         ;480
     367 00001d90 000003f0"         .long   shadow10        ;496
     368 00001db0 000003f0"         .long   shadow10        ;512
     369 00001dd0 000003f0"         .long   shadow10        ;528
     370 00001df0 000003f0"         .long   shadow10        ;544
     371 00001e10 000003f0"         .long   shadow10        ;560
     372 00001e30 00000480"         .long   shadow11        ;576
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   10

     373 00001e50 00000480"         .long   shadow11        ;592
     374 00001e70 00000480"         .long   shadow11        ;608
     375 00001e90 00000480"         .long   shadow11        ;624
     376 00001eb0 00000510"         .long   shadow12        ;640
     377 00001ed0 00000510"         .long   shadow12        ;656
     378 00001ef0 00000510"         .long   shadow12        ;672
     379 00001f10 00000510"         .long   shadow12        ;688
     380 00001f30 00000510"         .long   shadow12        ;704
     381 00001f50 00000510"         .long   shadow12        ;720
     382 00001f70 00000510"         .long   shadow12        ;736
     383 00001f90 00000510"         .long   shadow12        ;752
     384 00001fb0 00000510"         .long   shadow12        ;768
     385 00001fd0 00000510"         .long   shadow12        ;784
     386 00001ff0 00000510"         .long   shadow12        ;800
     387 00002010 00000510"         .long   shadow12        ;716
     388 00002030 00000510"         .long   shadow12        ;732
     389 00002050 00000510"         .long   shadow12        ;748
     390 00002070 00000510"         .long   shadow12        ;764
     391                    
     392                    ;delete_cpuarrow_if
     393                    ;       move    *a6(POF_ARROW_CPU),a7,L
     394                    ;       jrz     nocpu3
     395                    ;       move    @BABY_SIZE,a14,W
     396                    ;       jrz     nocpu3
     397                    ;       movi    3000,a14
     398                    ;       move    a14,*a7(OXPOS),W                ;put it off the screen
     399                    ;       move    *a7(OCTRL),a14,W
     400                    ;       ori     DMAGO,a14               ;turn it on
     401                    ;       move    a14,*a7(OCTRL),W
     402                    ;       PUSH    a8
     403                    ;       move    a7,a8
     404                    ;       calla   DELETE_OBJ              ;kill it
     405                    ;       PULLQ   a8
     406                    ;       clr     a14
     407                    ;       move    a14,*a6(POF_ARROW_CPU),L        ;don't do it again
     408                    ;       move    a14,*a6(POF_DRONE_BUTTONS),W    ;wipe out any drone signals
     409                    ;nocpu3 rets
     410                    
     411                    ;;;delete_cpuarrow_if
     412                    ;;;     move    *a6(POF_ARROW_CPU),a7,L
     413                    ;;;     jrz     nocpu3
     414                    ;;;     movi    3000,a0
     415                    ;;;     move    a0,*a7(OXPOS),W         ;put it off the screen
     416                    ;;;     move    *a7(OCTRL),a0,W
     417                    ;;;     ori     DMAGO,a0                ;turn it on
     418                    ;;;     move    a0,*a7(OCTRL),W
     419                    ;;;     PUSH    a8
     420                    ;;;     move    a7,a8
     421                    ;;;     calla   DELETE_OBJ              ;kill it
     422                    ;;;     PULLQ   a8
     423                    ;;;     clr     a0
     424                    ;;;     move    a0,*a6(POF_ARROW_CPU),L ;don't do it again
     425                    ;;;     move    a0,*a6(POF_DRONE_BUTTONS),W     ;wipe out any drone signals
     426                    ;;;nocpu3       rets
     427                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   11

     428 00002090           control_player_ncnt
     429 00002090     0d5f          calla   update_turbo_up         ;can be slow
         000020a0 00000000! 
     430 000020c0     5600          clr     a0
     431 000020d0     b208          move    a0,*a8(OXVEL),L
         000020e0     0100  
     432 000020f0     b208          move    a0,*a8(OZVEL),L
         00002100     00e0  
     433 00002110     b208          move    a0,*a8(ODT_VEL),L
         00002120     04d0  
     434 00002130     0d5f          calla   set_stand_script
         00002140 00000000! 
     435                            ;fall through
     436 00002160           control_player_nc                       ;it is a human player, but a script has control
     437 00002160     57ce          clr     a14
     438 00002170     adc6          movb    a14,*a6(POF_STAND_STILL)
         00002180     0590  
     439 00002190     c000          jruc    end_of_player
         000021a0     fe5c  
     440 000021b0           control_player_drone
     441 000021b0     0d5f          calla   update_turbo_drone
         000021c0 00000000! 
     442 000021e0     0d5f          calla   one_timer_check
         000021f0 0001b1f0' 
     443 00002210     b4ce          move    *a6(POF_FLAGS),a14,W
         00002220     0200  
     444 00002230     1fce          btst    B_PF_CONTROL,a14
     445 00002240     ca0f          jrz     cpd_nc
     446 00002250     0d5f          calla   do_drone_logic          ;does the line up for pass for us
         00002260 00000000! 
     447 00002280     b4ce          move    *a6(POF_FLAGS),a14,W
         00002290     0200  
     448 000022a0     1fce          btst    B_PF_CONTROL,a14
     449 000022b0     ca08          jrz     cpd_nc
     450 000022c0     0d3f          callr   are_we_intended
         000022d0     021b  
     451 000022e0     c808          jrc     cpd_1
     452 000022f0     0d3f          callr   face_player
         00002300     0269  
     453 00002310     0d3f          callr   set_player_script
         00002320     03b3  
     454 00002330     c003          jruc    cpd_1
     455 00002340     57ce  cpd_nc  clr     a14
     456 00002350     adc6          movb    a14,*a6(POF_STAND_STILL)
         00002360     0590  
     457 00002370     0d3f  cpd_1   callr   drone_rink_check
         00002380     1437  
     458 00002390     c000          jruc    end_of_player
         000023a0     fe3c  
     459                    
     460 000023b0           control_player_higher
     461 000023b0     b4ce          move    *a6(POF_FLAGS),a14,W
         000023c0     0200  
     462 000023d0     1fee          btst    B_PF_HUMAN,a14
     463 000023e0     cb04          jrnz    cph_1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   12

     464 000023f0     0d5f          calla   update_turbo_drone      ;can be slow
         00002400 00000000! 
     465 00002420     c007          jruc    cph_2
     466 00002430     0d5f  cph_1   calla   update_turbo_up         ;can be slow
         00002440 00000000! 
     467                    ;;;     callr   delete_cpuarrow_if      ;can be slow
     468 00002460     b4c0          move    *a6(POF_NUMBER),a0
         00002470     0000  
     469 00002480     0d3f          callr   read_joystick_short
         00002490     1343  
     470 000024a0     0d3f  cph_2   callr   drone_rink_check
         000024b0     1424  
     471 000024c0     c000          jruc    end_of_player
         000024d0     fe29  
     472                    
     473 000024e0           move_player
     474 000024e0     b6c8          move    *a6(POF_OBJECT),a8,L    ;object in a8
         000024f0     0280  
     475 00002500     aec0          movb    *a6(POF_M_JOY),a0
         00002510     03a8  
     476 00002520     cb02          jrnz    mp1                             ;if we are not centered, do our conversion
     477 00002530     1420          dec     a0                              ;else a0 is -1
     478 00002540     c003          jruc    mp2
     479 00002550     0d5f  mp1     calla   dir_to_degrees          ;direction to move in a0
         00002560 00000000! 
     480 00002580     b4c1  mp2     move    *a6(POF_TURBO_MODE),a1,W
         00002590     0580  
     481 000025a0           move_player_dir
     482                    ;       callr   are_we_intended
     483 000025a0     b028          move    a1,*a8(ODT_TURBO),W
         000025b0     05c0  
     484 000025c0     4c21          move    a1,a1
     485 000025d0     ca01          jrz     mskr8                   ;skate rate 0
     486 000025e0     1821          movk    1,a1
     487 000025f0     ac26  mskr8   movb    a1,*a6(POF_SKATE_RATE_G)
         00002600     0a08  
     488 00002610     4c00          move    a0,a0
     489 00002620     ce00          jrn     stop_player                     ;our joystick is centered
         00002630     0191  
     490 00002640     b208          move    a0,*a8(ODT_GDIR),L
         00002650     05a0  
     491 00002660     b6c1          move    *a6(POF_S_STOP),a1,L
         00002670     0100  
     492 00002680     b62e          move    *a1(PS_ST_RSTOP_THRESH),a14,L
         00002690     0020  
     493 000026a0     b700          move    *a8(ODT_VEL),a0,L
         000026b0     04d0  
     494 000026c0     49c0          cmp     a14,a0
     495 000026d0     c200          jrls    move_player_exactly             ;we are below our reverse stop threshold
         000026e0     00ee  
     496 000026f0     b4ce          move    *a6(POF_FLAGS),a14,W
         00002700     0200  
     497 00002710     1fee          btst    B_PF_HUMAN,a14
     498 00002720     ca05          jrz     mskdd
     499 00002730     b50e          move    *a8(OFLAGS),a14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   13

         00002740     0420  
     500 00002750     1f0e          btst    B_OFSCRN,a14
     501 00002760     cb00          jrnz    move_player_exactly             ;we are human, we are offscreen, we stop on a dime
         00002770     00e5  
     502 00002780     b701  mskdd   move    *a8(ODT_DIR),a1,L
         00002790     04b0  
     503 000027a0     b700          move    *a8(ODT_GDIR),a0,L
         000027b0     05a0  
     504 000027c0     4420          sub     a1,a0
     505 000027d0                   THETA_H a0
     506 000028e0     4c02          move    a0,a2                           ;save our angular distance in a2
     507 000028f0     ca00          jrz     move_player_exactly             ;we are moving in our goal direction, so keep it up
         00002900     00cc  
     508 00002910     b6c7          move    *a6(POF_S_CORN),a7,L
         00002920     0120  
     509 00002930     0380          abs     a0
     510 00002940     b6e1          move    *a7(PS_CR_SKID),a1,L
         00002950     0000  
     511 00002960     4820          cmp     a1,a0
     512 00002970     c300          jrhi    skid_to_reverse_player          ;we are turning by too great an angle, skid to stop(reve
         00002980     0128  
     513 00002990     b6e9          move    *a7(PS_CR_TURN_TABLE_D),a9,L    ;defense table
         000029a0     0040  
     514 000029b0     aec0          movb    *a6(POF_NUMBER),a0
         000029c0     0000  
     515 000029d0     0d5f          calla   get_offense_mode
         000029e0 00000000! 
     516 00002a00     0b41          cmpi    1,a1
         00002a10     fffe  
     517 00002a20     ca23          jrz     tt_d                            ;if we are defense, we are done
     518 00002a30     b6e9          move    *a7(PS_CR_TURN_TABLE),a9,L
         00002a40     0020  
     519 00002a50     4c21          move    a1,a1
     520 00002a60     ca1f          jrz     tt_d                            ;if we are offense, we are done
     521 00002a70     098f          mmtm    sp,a0,a1,a2,a3,a4
         00002a80     f800  
     522 00002a90     b700          move    *a8(OXVAL),a0,L
         00002aa0     0140  
     523 00002ab0     0b20          addi    [0,08000h],a0
         00002ac0 00008000  
     524 00002ae0     2a00          sra     16,a0
     525 00002af0     b501          move    *a8(OZPOS),a1,W
         00002b00     0190  
     526 00002b10     07ae          move    @PUCK_OBJECT,a14,L
         00002b20 00000000! 
     527 00002b40     b7c2          move    *a14(OXVAL),a2,L
         00002b50     0140  
     528 00002b60     0b22          addi    [0,08000h],a2
         00002b70 00008000  
     529 00002b90     2a02          sra     16,a2
     530 00002ba0     b5c3          move    *a14(OZPOS),a3,W
         00002bb0     0190  
     531 00002bc0     0d5f          calla   find_dist_quick
         00002bd0 00000000! 
     532 00002bf0     0b44          cmpi    100,a4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   14

         00002c00     ff9b  
     533 00002c10     09af          mmfm    sp,a0,a1,a2,a3,a4
         00002c20     001f  
     534 00002c30     c302          jrhi    tt_d                            ;if open, and we are far, use offense table
     535 00002c40     b6e9          move    *a7(PS_CR_TURN_TABLE_C),a9,L    ;use close open table
         00002c50     0060  
     536 00002c60     4c42  tt_d    move    a2,a2                   ;here a2 is the angular difference between where we are and wher
     537 00002c70     ce49          jrn     mp_neg                  ;we are turning negative
     538                    
     539 00002c80     8720  mpp1    move    *a9,a0,L                ;we are turning positive
     540 00002c90     4802          cmp     a0,a2
     541 00002ca0     c203          jrls    mpp2
     542 00002cb0     0b09          addi    96,a9
         00002cc0     0060  
     543 00002cd0     c0fa          jruc    mpp1
     544 00002ce0     b704  mpp2    move    *a8(ODT_DIR),a4,L       ;ang direction
         00002cf0     04b0  
     545 00002d00     b700          move    *a8(ODT_DVEL),a0,L      ;ang vel.
         00002d10     0510  
     546 00002d20     b705          move    *a8(ODT_GDIR),a5,L      ;goal direction
         00002d30     05a0  
     547 00002d40     b721          move    *a9(020h),a1,L          ;ang. acc
         00002d50     0020  
     548 00002d60     b723          move    *a9(040h),a3,L          ;max ang. vel
         00002d70     0040  
     549 00002d80     4020          add     a1,a0           ;vel = old vel + acc
     550 00002d90     4860          cmp     a3,a0           ;if > max
     551 00002da0     c201          jrls    mpp3
     552 00002db0     4c60          move    a3,a0           ;then it is max
     553 00002dc0     b208  mpp3    move    a0,*a8(ODT_DVEL),L      ;new ang vel.
         00002dd0     0510  
     554 00002de0     4004          add     a0,a4                   ;new angular direction
     555                    ;now check if we passed our destination, careful of wraparound at 360
     556 00002df0     0b65          cmpi    XD0900,a5               ;if goal < 90
         00002e00 ffa5ffff  
     557 00002e20     c315          jrhi    mpp4
     558 00002e30                   THETA_N a4                      ;normalize new direction
     559 00002f10     0b64          cmpi    XD1800,a4               ;if angle > 180
         00002f20 ff4bffff  
     560 00002f40     c36e          jrhi    mpp10                   ; then we haven't passed it up
     561 00002f50     48a4          cmp     a5,a4                   ;if > our destination
     562 00002f60     c368          jrhi    mpp9                    ; then we did pass it up
     563 00002f70     c06b          jruc    mpp10                   ; else we haven't
     564 00002f80     0b65  mpp4    cmpi    XD1800,a5               ;if goal < 180
         00002f90 ff4bffff  
     565 00002fb0     c312          jrhi    mpp5
     566 00002fc0                   THETA_N a4                      ;normalize new direction
     567 000030a0     0b64          cmpi    XD2700,a4               ;if angle > 270
         000030b0 fef1ffff  
     568 000030d0     c355          jrhi    mpp10                   ; then we haven't passed it up
     569 000030e0     48a4  mpp5    cmp     a5,a4                   ;if > our destination
     570 000030f0     c34f          jrhi    mpp9                    ; then we did pass it up
     571 00003100     c052          jruc    mpp10                   ; else we haven't
     572                    
     573 00003110     03a2  mp_neg  neg     a2              ;make it positive
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   15

     574 00003120     8720  mpn1    move    *a9,a0,L
     575 00003130     4802          cmp     a0,a2
     576 00003140     c203          jrls    mpn2
     577 00003150     0b09          addi    96,a9
         00003160     0060  
     578 00003170     c0fa          jruc    mpn1
     579 00003180     03a2  mpn2    neg     a2              ;make it negative again
     580 00003190     b704          move    *a8(ODT_DIR),a4,L       ;ang direction
         000031a0     04b0  
     581 000031b0     b700          move    *a8(ODT_DVEL),a0,L      ;ang vel.
         000031c0     0510  
     582 000031d0     b705          move    *a8(ODT_GDIR),a5,L      ;goal direction
         000031e0     05a0  
     583 000031f0     b721          move    *a9(020h),a1,L          ;ang. acc
         00003200     0020  
     584 00003210     b723          move    *a9(040h),a3,L          ;max ang. vel
         00003220     0040  
     585 00003230     03a3          neg     a3
     586 00003240     4420          sub     a1,a0           ;vel = old vel - acc
     587 00003250     4860          cmp     a3,a0           ;if || > |max|
     588 00003260     c501          jrge    mpn3
     589 00003270     4c60          move    a3,a0           ;then it is max
     590 00003280     b208  mpn3    move    a0,*a8(ODT_DVEL),L      ;new ang vel.
         00003290     0510  
     591 000032a0     4004          add     a0,a4                   ;new angular direction
     592                    ;now check if we passed our destination, careful of wraparound at 360
     593 000032b0     0b65          cmpi    XD0900,a5               ;if goal < 90
         000032c0 ffa5ffff  
     594 000032e0     c315          jrhi    mpn4
     595 000032f0                   THETA_N a4                      ;normalize new direction
     596 000033d0     0b64          cmpi    XD2700,a4               ;if angle > 270
         000033e0 fef1ffff  
     597 00003400     c31e          jrhi    mpp9                    ; then we passed it up
     598 00003410     48a4          cmp     a5,a4                   ;if < our destination
     599 00003420     c81c          jrlo    mpp9                    ; then we did pass it up
     600 00003430     c01f          jruc    mpp10                   ; else we haven't
     601 00003440     0b65  mpn4    cmpi    XD1800,a5               ;if goal < 180
         00003450 ff4bffff  
     602 00003470     c812          jrlo    mpn5
     603 00003480                   THETA_N a4                      ;normalize new direction
     604 00003560     0b64          cmpi    XD0900,a4               ;if angle < 90
         00003570 ffa5ffff  
     605 00003590     c805          jrlo    mpp9                    ; then we passed it up
     606 000035a0     48a4  mpn5    cmp     a5,a4                   ;if < our destination
     607 000035b0     c803          jrlo    mpp9                    ; then we did pass it up
     608 000035c0     c006          jruc    mpp10                   ; else we haven't
     609                    
     610 000035d0           move_player_exactly
     611 000035d0     b705          move    *a8(ODT_GDIR),a5,L
         000035e0     05a0  
     612 000035f0     4ca4  mpp9    move    a5,a4                   ;goal = new direction
     613 00003600     5600          clr     a0
     614 00003610     b208          move    a0,*a8(ODT_DVEL),L      ;zero out angular velocity
         00003620     0510  
     615 00003630           mpp10   THETA_N a4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   16

     616 00003710     b288          move    a4,*a8(ODT_DIR),L               ;new direction
         00003720     04b0  
     617 00003730     b4c7          move    *a6(POF_PUP_FLAGS),a7,W
         00003740     0c50  
     618 00003750     1f27          btst    B_PUP_SPEED,a7
     619 00003760     ca04          jrz     nop2ps
     620 00003770     09e7          movi    pspeed_data_powered,a7
         00003780 00000000! 
     621 000037a0     c002          jruc    ysp2ps                  ;power up speed
     622 000037b0     b6c7  nop2ps  move    *a6(POF_S_SPED),a7,L
         000037c0     00e0  
     623 000037d0     57ce  ysp2ps  clr     a14
     624 000037e0     adc6          movb    a14,*a6(POF_STAND_STILL)
         000037f0     0590  
     625 00003800     1820          movk    1,a0
     626 00003810     b006          move    a0,*a6(POF_MODE),W
         00003820     0210  
     627 00003830     b701          move    *a8(ODT_VEL),a1,L
         00003840     04d0  
     628 00003850     b50e          move    *a8(ODT_TURBO),a14,W            ;we check object, not player
         00003860     05c0  
     629 00003870     cb17          jrnz    sa_t
     630 00003880     b6ee  sa_nt   move    *a7(PS_SP_S0_THRESH),a14,L
         00003890     0060  
     631 000038a0     49c1          cmp     a14,a1
     632 000038b0     c905          jrhs    as_nf0
     633 000038c0     b6e2          move    *a7(PS_SP_SPEED_0),a2,L ;based on our speed
         000038d0     0000  
     634 000038e0     aee3          movb    *a7(PS_SP_SAME_0_MT),a3
         000038f0     0180  
     635 00003900     c024          jruc    saae
     636 00003910     b6ee  as_nf0  move    *a7(PS_SP_SPEED_THRESH),a14,L
         00003920     0080  
     637 00003930     49c1          cmp     a14,a1
     638 00003940     c905          jrhs    as_nfst                 ;see which acceleration curve we use
     639 00003950     b6e2          move    *a7(PS_SP_SPEED_1),a2,L ;based on our speed
         00003960     0020  
     640 00003970     aee3          movb    *a7(PS_SP_SAME_L_MT),a3
         00003980     0188  
     641 00003990     c01b          jruc    saae
     642 000039a0     b6e2  as_nfst move    *a7(PS_SP_SPEED_2),a2,L
         000039b0     0040  
     643 000039c0     aee3          movb    *a7(PS_SP_SAME_H_MT),a3
         000039d0     0190  
     644 000039e0     c016          jruc    saae
     645 000039f0     b6ee  sa_t    move    *a7(PS_SP_T0_THRESH),a14,L
         00003a00     0100  
     646 00003a10     49c1          cmp     a14,a1
     647 00003a20     c905          jrhs    as_f0
     648 00003a30     b6e2          move    *a7(PS_SP_TURBO_0),a2,L ;based on our speed
         00003a40     00a0  
     649 00003a50     aee3          movb    *a7(PS_SP_SAME_0_MT),a3
         00003a60     0180  
     650 00003a70     c00d          jruc    saae
     651 00003a80     b6ee  as_f0   move    *a7(PS_SP_TURBO_THRESH),a14,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   17

         00003a90     0120  
     652 00003aa0     49c1          cmp     a14,a1
     653 00003ab0     c905          jrhs    sa_fast                 ;see which acceleration curve we use
     654 00003ac0     b6e2          move    *a7(PS_SP_TURBO_1),a2,L ;based on our speed
         00003ad0     00c0  
     655 00003ae0     aee3          movb    *a7(PS_SP_SAME_L_MT),a3
         00003af0     0188  
     656 00003b00     c004          jruc    saae
     657 00003b10     b6e2  sa_fast move    *a7(PS_SP_TURBO_2),a2,L
         00003b20     00e0  
     658 00003b30     aee3          movb    *a7(PS_SP_SAME_H_MT),a3
         00003b40     0190  
     659 00003b50     b6ce  saae    move    *a6(POF_SPEED_BOOST),a14,L
         00003b60     04a0  
     660 00003b70     41c2          add     a14,a2
     661 00003b80     b246          move    a2,*a6(POF_SPEED_GL),L  ;so we can see if we are speeding or slowing
         00003b90     0440  
     662 00003ba0     0d3f          callr   move_to_s_no_r          ;move to speed if we don't receive
         00003bb0     0086  
     663 00003bc0     b700          move    *a8(ODT_DIR),a0,L
         00003bd0     04b0  
     664 00003be0     c080          jauc    set_obj_to_polar_p
         00003bf0 00000000! 
     665                    
     666 00003c10           skid_to_reverse_player
     667 00003c10     57ce          clr     a14
     668 00003c20     b1c6          move    a14,*a6(POF_QS_OK),W    ;ok to go to quick start
         00003c30     05f0  
     669 00003c40     b6c7          move    *a6(POF_S_STOP),a7,L
         00003c50     0100  
     670 00003c60     b4ce          move    *a6(POF_FLAGS),a14,W
         00003c70     0200  
     671 00003c80     0bae          ori     M_PF_OKDIR,a14
         00003c90 00000008  
     672 00003cb0     b1c6          move    a14,*a6(POF_FLAGS),W
         00003cc0     0200  
     673 00003cd0     57ce          clr     a14
     674 00003ce0     adc6          movb    a14,*a6(POF_STAND_STILL)
         00003cf0     0590  
     675 00003d00     b4c0          move    *a6(POF_MODE),a0,W
         00003d10     0210  
     676 00003d20     ca06          jrz     rsk1
     677 00003d30     0b40          cmpi    PM_SKID,a0
         00003d40     fffb  
     678 00003d50     ca0b          jrz     rsksh
     679 00003d60     0d5f          calla   slide_to_reverse_sound
         00003d70 00000000! 
     680 00003d90     b4c0  rsk1    move    *a6(POF_NOFACE),a0,W
         00003da0     09c0  
     681 00003db0     0b40          cmpi    111011100b,a0
         00003dc0     fe23  
     682 00003dd0     ca03          jrz     rsksh
     683 00003de0     1880          movk    PM_SKID,a0
     684 00003df0     b006          move    a0,*a6(POF_MODE),W
         00003e00     0210  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   18

     685 00003e10     b701  rsksh   move    *a8(ODT_VEL),a1,L
         00003e20     04d0  
     686 00003e30     5642          clr     a2
     687 00003e40     aee3          movb    *a7(PS_ST_SKID_R_MT),a3
         00003e50     0040  
     688 00003e60     b50e          move    *a8(ODT_TURBO),a14,W
         00003e70     05c0  
     689 00003e80     ca02          jrz     cpsake
     690 00003e90     aee3          movb    *a7(PS_ST_TSKID_R_MT),a3
         00003ea0     0050  
     691 00003eb0     aece  cpsake  movb    *a6(POF_SKID_BOOST),a14
         00003ec0     05b0  
     692 00003ed0     41c3          add     a14,a3
     693 00003ee0     0d3f          callr   move_to_s_no_r          ;move to speed if we don't receive
         00003ef0     0052  
     694 00003f00     b700          move    *a8(ODT_DIR),a0,L
         00003f10     04b0  
     695 00003f20     c080          jauc    set_obj_to_polar
         00003f30 00000000! 
     696                    
     697 00003f50           stop_player
     698 00003f50     57ce          clr     a14
     699 00003f60     b1c6          move    a14,*a6(POF_QS_OK),W    ;ok to go to quick start
         00003f70     05f0  
     700 00003f80     bb08          move    *a8(ODT_DIR),*a8(ODT_GDIR),L    ;our direction is our goal direction (helps pick skid sc
         00003f90     04b0  
         00003fa0     05a0  
     701 00003fb0     b6c7          move    *a6(POF_S_STOP),a7,L
         00003fc0     0100  
     702 00003fd0     b4ce          move    *a6(POF_FLAGS),a14,W
         00003fe0     0200  
     703 00003ff0     0bae          ori     M_PF_OKDIR,a14
         00004000 00000008  
     704 00004020     b1c6          move    a14,*a6(POF_FLAGS),W
         00004030     0200  
     705 00004040     b701          move    *a8(ODT_VEL),a1,L
         00004050     04d0  
     706 00004060     ca00          jrz     mph_stopped
         00004070     0084  
     707 00004080     57ce          clr     a14
     708 00004090     adc6          movb    a14,*a6(POF_STAND_STILL)
         000040a0     0590  
     709 000040b0     b4c0          move    *a6(POF_MODE),a0,W
         000040c0     0210  
     710 000040d0     ca14          jrz     ask1
     711 000040e0     0b40          cmpi    PM_SKID,a0
         000040f0     fffb  
     712 00004100     ca19          jrz     asksh
     713 00004110     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         00004120     0c50  
     714 00004130     1f2e          btst    B_PUP_SPEED,a14
     715 00004140     ca04          jrz     nop3ps
     716 00004150     09ee          movi    pspeed_data_powered,a14
         00004160 00000000! 
     717 00004180     c002          jruc    ysp3ps                  ;power up speed
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   19

     718 00004190     b6ce  nop3ps  move    *a6(POF_S_SPED),a14,L
         000041a0     00e0  
     719 000041b0     b7ce  ysp3ps  move    *a14(PS_SP_SPEED_0),a14,L
         000041c0     0000  
     720 000041d0     49c1          cmp     a14,a1
     721 000041e0     c20d          jrls    asksh1
     722 000041f0     0d5f          calla   slide_to_stop_sound
         00004200 00000000! 
     723 00004220     b4c0  ask1    move    *a6(POF_NOFACE),a0,W
         00004230     09c0  
     724 00004240     0b40          cmpi    111011100b,a0
         00004250     fe23  
     725 00004260     ca03          jrz     asksh
     726 00004270     1880          movk    PM_SKID,a0
     727 00004280     b006          move    a0,*a6(POF_MODE),W
         00004290     0210  
     728 000042a0     b701  asksh   move    *a8(ODT_VEL),a1,L
         000042b0     04d0  
     729 000042c0     5642  asksh1  clr     a2
     730 000042d0     aee3          movb    *a7(PS_ST_SKID_S_MT),a3
         000042e0     0048  
     731 000042f0     b50e          move    *a8(ODT_TURBO),a14,W
         00004300     05c0  
     732 00004310     ca02          jrz     cpsate
     733 00004320     aee3          movb    *a7(PS_ST_TSKID_S_MT),a3
         00004330     0058  
     734 00004340     aece  cpsate  movb    *a6(POF_SKID_BOOST),a14
         00004350     05b0  
     735 00004360     41c3          add     a14,a3
     736 00004370     0d3f          callr   move_to_s_no_r          ;move to speed if we don't receive
         00004380     0009  
     737 00004390     b700          move    *a8(ODT_DIR),a0,L
         000043a0     04b0  
     738 000043b0     b6ee          move    *a7(PS_ST_STOP_THRESH),a14,L
         000043c0     0000  
     739 000043d0     49c1          cmp     a14,a1
     740 000043e0     c24d          jrls    mph_stopped
     741 000043f0     c080          jauc    set_obj_to_polar
         00004400 00000000! 
     742                    
     743 00004420           move_to_s_no_r          ;move to speed if we don't receive
     744 00004420     0d3f          callr   are_we_intended
         00004430     0005  
     745 00004440     c803          jrc     msr1
     746 00004450     c080          jauc    move_to_speed_x
         00004460 00000000! 
     747 00004480     0960  msr1    rets
     748                    
     749 00004490           are_we_intended
     750 00004490     098f          mmtm    sp,a0,a7
         000044a0     8100  
     751 000044b0     05ae          move    @not_free_receiver,a14,W
         000044c0 00000000! 
     752 000044e0     ca39          jrz     sna2
     753 000044f0     05ae          move    @PUCK_CONTROL,a14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   20

         00004500 00000000! 
     754 00004520     cb35          jrnz    sna2                    ;somebody has puck, ok
     755 00004530     05ae          move    @PUCK_MODE,a14,W
         00004540 00000000! 
     756 00004560     0b4e          cmpi    PUM_PASS,a14
         00004570     fff5  
     757 00004580     ca03          jrz     s2                      ;passes our pass mode test
     758 00004590     0b4e          cmpi    PUM_TPASS,a14
         000045a0     fff4  
     759 000045b0     cb2c          jrnz    sna2                    ;doesn't pass our pass mode test
     760 000045c0     05ae  s2      move    @PUCK_INTENDED,a14,W
         000045d0 00000000! 
     761 000045f0     aec7          movb    *a6(POF_NUMBER),a7
         00004600     0000  
     762 00004610     48ee          cmp     a7,a14
     763 00004620     cb25          jrnz    sna2
     764 00004630     07ae          move    @bhit_dest_time,a14,L
         00004640 00000000! 
     765 00004660     cb19          jrnz    nsna
     766 00004670     07a7          move    @PUCK_OBJECT,a7,L
         00004680 00000000! 
     767 000046a0     b6ee          move    *a7(ODT_XDEST),a14,L
         000046b0     0550  
     768 000046c0     b6e0          move    *a7(OXVAL),a0,L
         000046d0     0140  
     769 000046e0     440e          sub     a0,a14
     770 000046f0     282e          sra     31,a14          ;get just sign of dest - val
     771 00004700     b6e0          move    *a7(OXVEL),a0,L
         00004710     0100  
     772 00004720     2820          sra     31,a0
     773 00004730     480e          cmp     a0,a14
     774 00004740     cb0f          jrnz    saana
     775 00004750     b6ee          move    *a7(ODT_ZDEST),a14,L
         00004760     0570  
     776 00004770     b6e0          move    *a7(OZVAL),a0,L
         00004780     0180  
     777 00004790     440e          sub     a0,a14
     778 000047a0     282e          sra     31,a14          ;get just sign of dest - val
     779 000047b0     b6e0          move    *a7(OZVEL),a0,L
         000047c0     00e0  
     780 000047d0     2820          sra     31,a0
     781 000047e0     480e          cmp     a0,a14
     782 000047f0     cb04          jrnz    saana
     783 00004800     0de0  nsna    setc
     784 00004810     09af          mmfm    sp,a0,a7
         00004820     0081  
     785 00004830     0960          rets
     786 00004840     5600  saana   clr     a0
     787 00004850     0580          move    a0,@not_free_receiver,W
         00004860 00000000! 
     788 00004880     0320  sna2    clrc
     789 00004890     09af          mmfm    sp,a0,a7
         000048a0     0081  
     790 000048b0     0960          rets
     791                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   21

     792 000048c0           mph_stopped
     793 000048c0     5600          clr     a0
     794 000048d0     b006          move    a0,*a6(POF_QS_OK),W     ;ok to go to quick start
         000048e0     05f0  
     795 000048f0     b006          move    a0,*a6(POF_MODE),W
         00004900     0210  
     796 00004910     aec0          movb    *a6(POF_DIRECTION),a0
         00004920     0390  
     797 00004930     0d5f          calla   dir_to_degrees          ;grab direction so bdirection works
         00004940 00000000! 
     798 00004960     5621          clr     a1
     799 00004970     c080          jauc    set_obj_to_polar
         00004980 00000000! 
     800                    
     801 000049a0           face_player
     802 000049a0     bcc6          movb    *a6(POF_DIRECTION),*a6(POF_LAST_DIRECTION)
         000049b0     0390  
         000049c0     03d8  
     803 000049d0     b4c0          move    *a6(POF_MODE),a0,W
         000049e0     0210  
     804 000049f0     ca17          jrz     face_standing           ;br=standing
     805 00004a00     b4c1          move    *a6(POF_NOFACE),a1,W
         00004a10     09c0  
     806 00004a20     cb34          jrnz    face_safe_travel
     807 00004a30     aec0          movb    *a6(POF_NUMBER),a0
         00004a40     0000  
     808 00004a50     05a1          move    @PUCK_CONTROL,a1,W
         00004a60 00000000! 
     809 00004a80     cb04          jrnz    fpic
     810 00004a90     05a1          move    @PUCK_LAST_CONTROL,a1,W
         00004aa0 00000000! 
     811 00004ac0     ca09          jrz     fp_none                 ;br= nobody has puck
     812 00004ad0     4801  fpic    cmp     a0,a1
     813 00004ae0     ca72          jrz     face_travel             ;br= we have puck
     814 00004af0     0d5f          calla   get_offense_mode
         00004b00 00000000! 
     815 00004b20     0b41          cmpi    1,a1
         00004b30     fffe  
     816 00004b40     ca00          jrz     face_to_defense
         00004b50     0088  
     817 00004b60     c06a  fp_none jruc    face_travel
     818                    
     819 00004b70           face_standing
     820 00004b70     b4c1          move    *a6(POF_NOFACE),a1,W
         00004b80     09c0  
     821 00004b90     cb2f          jrnz    face_safe_standing
     822 00004ba0     aec0          movb    *a6(POF_NUMBER),a0
         00004bb0     0000  
     823 00004bc0     0d5f          calla   get_offense_mode
         00004bd0 00000000! 
     824 00004bf0     4c21          move    a1,a1
     825 00004c00     ca15          jrz     fsta9           ;we are offense, do not change face
     826 00004c10     aece          movb    *a6(POF_STAND_STILL),a14
         00004c20     0590  
     827 00004c30     102e          inc     a14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   22

     828 00004c40     0b4e          cmpi    256,a14
         00004c50     feff  
     829 00004c60     c202          jrls    fsta4
     830 00004c70     09ce          movi    252,a14         ;so we can change face every 4 ticks
         00004c80     00fc  
     831 00004c90     adc6  fsta4   movb    a14,*a6(POF_STAND_STILL)
         00004ca0     0590  
     832 00004cb0     0b4e          cmpi    32,a14
         00004cc0     ffdf  
     833 00004cd0     c208          jrls    fsta9
     834 00004ce0     4dc0          move    a14,a0
     835 00004cf0     2fc0          srl     2,a0
     836 00004d00     2440          sll     2,a0
     837 00004d10     49c0          cmp     a14,a0
     838 00004d20     cb03          jrnz    fsta9
     839 00004d30     b6c8          move    *a6(POF_OBJECT),a8,L    ;just in case
         00004d40     0280  
     840 00004d50     c01b          jruc    rotate_toward_puck
     841 00004d60     0960  fsta9   rets
     842                    
     843 00004d70           face_safe_travel
     844 00004d70     b700          move    *a8(ODT_DIR),a0,L
         00004d80     04b0  
     845 00004d90     0d5f          calla   dir_to_18
         00004da0 00000000! 
     846 00004dc0     4a01          btst    a0,a1
     847 00004dd0     ca08          jrz     fst_8
     848 00004de0     1820          movk    1,a0
     849 00004df0     b70e          move    *a8(OZVEL),a14,L
         00004e00     00e0  
     850 00004e10     ca03          jrz     fst_z0
     851 00004e20     ce03          jrn     fst_8
     852 00004e30     18a0          movk    5,a0
     853 00004e40     c001          jruc    fst_8
     854 00004e50     0960  fst_z0  rets
     855                    
     856 00004e60     ac06  fst_8   movb    a0,*a6(POF_DIRECTION)
         00004e70     0390  
     857 00004e80     0960          rets
     858                    
     859 00004e90           face_safe_standing
     860 00004e90     aec0          movb    *a6(POF_DIRECTION),a0
         00004ea0     0390  
     861 00004eb0     4a01          btst    a0,a1
     862 00004ec0     ca03          jrz     fsss9
     863 00004ed0     1820          movk    1,a0
     864 00004ee0     ac06          movb    a0,*a6(POF_DIRECTION)
         00004ef0     0390  
     865 00004f00     0960  fsss9   rets
     866                    
     867 00004f10           rotate_toward_puck
     868 00004f10     05a0          move    @PUCK_CONTROL,a0,W
         00004f20 00000000! 
     869 00004f40     ca08          jrz     rtpka
     870 00004f50                   GBLOCK  a0,a9
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   23

     871 00004fa0     b729          move    *a9(POF_OBJECT),a9,L
         00004fb0     0280  
     872 00004fc0     c003          jruc    rtpkb
     873 00004fd0     07a9  rtpka   move    @PUCK_OBJECT,a9,L
         00004fe0 00000000! 
     874 00005000     b720  rtpkb   move    *a9(OXVAL),a0,L
         00005010     0140  
     875 00005020     b721          move    *a9(OZVAL),a1,L
         00005030     0180  
     876 00005040     b702          move    *a8(OXVAL),a2,L
         00005050     0140  
     877 00005060     b703          move    *a8(OZVAL),a3,L
         00005070     0180  
     878 00005080     0d5f          calla   find_dir_to_point_18
         00005090 00000000! 
     879 000050b0     aec1          movb    *a6(POF_DIRECTION),a1
         000050c0     0390  
     880 000050d0     4801          cmp     a0,a1
     881 000050e0     ca11          jrz     rtpk_9
     882 000050f0     4420          sub     a1,a0
     883 00005100     c101          jrp     rtpk1
     884 00005110     1100          addk    8,a0
     885 00005120     0b40  rtpk1   cmpi    4,a0
         00005130     fffb  
     886 00005140     c202          jrls    rtps
     887 00005150     1421          subk    1,a1
     888 00005160     c001          jruc    rteoe
     889 00005170     1021  rtps    addk    1,a1
     890 00005180     c101  rteoe   jrp     rteoa
     891 00005190     1101          addk    8,a1
     892 000051a0     0b41  rteoa   cmpi    8,a1
         000051b0     fff7  
     893 000051c0     c201          jrls    rtei
     894 000051d0     1501          subk    8,a1
     895 000051e0     ac26  rtei    movb    a1,*a6(POF_DIRECTION)
         000051f0     0390  
     896 00005200     0960  rtpk_9  rets
     897                    
     898 00005210           face_travel                     ;face the direction we are traveling
     899 00005210     b700          move    *a8(ODT_VEL),a0,L
         00005220     04d0  
     900 00005230     ca07          jrz     ftn
     901 00005240     b700          move    *a8(ODT_DIR),a0,L
         00005250     04b0  
     902 00005260     0d5f          calla   dir_to_18
         00005270 00000000! 
     903 00005290     ac06          movb    a0,*a6(POF_DIRECTION)
         000052a0     0390  
     904 000052b0     0960  ftn     rets
     905                    
     906 000052c0           face_to_goal                    ;face goal of defensive team
     907 000052c0     09e1          movi    [339,0800h],a1
         000052d0 01530800  
     908 000052f0     09e0          movi    [670,0],a0
         00005300 029e0000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   24

     909 00005320     05a2          move    @PUCK_CONTROL,a2,W
         00005330 00000000! 
     910 00005350     cb03          jrnz    fgt1
     911 00005360     05a2          move    @PUCK_LAST_CONTROL,a2,W
         00005370 00000000! 
     912 00005390     0b42  fgt1    cmpi    2,a2
         000053a0     fffd  
     913 000053b0     c258          jrls    face_to_point
     914 000053c0     03a0          neg     a0
     915 000053d0     c056          jruc    face_to_point
     916                    
     917 000053e0           face_to_defense
     918 000053e0     05a9          move    @PUCK_CONTROL,a9,W
         000053f0 00000000! 
     919 00005410     ca3f          jrz     ftp3_x
     920 00005420     4d40          move    a10,a0          ;player number
     921 00005430     1420          dec     a0
     922 00005440     2fc0          srl     2,a0
     923 00005450     4c0b          move    a0,a11          ;save team
     924 00005460     0bc0          xori    1,a0
         00005470 00000001  
     925 00005490     2440          sll     2,a0
     926 000054a0     1020          inc     a0              ;first enemy
     927 000054b0                   GBLOCK  a0,a7
     928 00005500     b6e7          move    *a7(POF_OBJECT),a7,L
         00005510     0280  
     929 00005520     b4e7          move    *a7(OXPOS),a7,W
         00005530     0150  
     930 00005540     1020          inc     a0
     931 00005550                   GBLOCK  a0,a9
     932 000055a0     b729          move    *a9(POF_OBJECT),a9,L
         000055b0     0280  
     933 000055c0     b529          move    *a9(OXPOS),a9,W
         000055d0     0150  
     934 000055e0     1040          addk    2,a0
     935 000055f0                   GBLOCK  a0,a0
     936 00005630     b600          move    *a0(POF_OBJECT),a0,L
         00005640     0280  
     937 00005650     b400          move    *a0(OXPOS),a0,W
         00005660     0150  
     938 00005670     b50e          move    *a8(OXPOS),a14,W
         00005680     0150  
     939 00005690     4d6b          move    a11,a11
     940 000056a0     ca04          jrz     ftdd1
     941 000056b0     03ae          neg     a14
     942 000056c0     03a0          neg     a0
     943 000056d0     03a9          neg     a9
     944 000056e0     03a7          neg     a7
     945 000056f0     480e  ftdd1   cmp     a0,a14
     946 00005700     c710          jrgt    ftp3_x
     947 00005710     492e          cmp     a9,a14
     948 00005720     c70e          jrgt    ftp3_x
     949 00005730     48ee          cmp     a7,a14
     950 00005740     c70c          jrgt    ftp3_x
     951 00005750     b4c0          move    *a6(POF_FLAGS),a0,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   25

         00005760     0200  
     952 00005770     0b80          andni   M_PF_OKDIR,a0
         00005780 00000008  
     953 000057a0     b006          move    a0,*a6(POF_FLAGS),W
         000057b0     0200  
     954 000057c0     186e          movk    3,a14
     955 000057d0     4d6b          move    a11,a11
     956 000057e0     ca1d          jrz     face_to_direction
     957 000057f0     18ee          movk    7,a14
     958 00005800     c01b          jruc    face_to_direction
     959 00005810     c09f  ftp3_x  jruc    face_travel
     960                    
     961 00005820           face_to_puck                    ;face the puck
     962 00005820     05a9          move    @PUCK_CONTROL,a9,W
         00005830 00000000! 
     963 00005850     ca07          jrz     ftp_x
     964 00005860                   GBLOCK  a9,a9
     965 000058a0     b729          move    *a9(POF_OBJECT),a9,L
         000058b0     0280  
     966 000058c0     c003          jruc    ftp_xy
     967 000058d0     07a9  ftp_x   move    @PUCK_OBJECT,a9,L
         000058e0 00000000! 
     968 00005900     b720  ftp_xy  move    *a9(OXVAL),a0,L
         00005910     0140  
     969 00005920     b721          move    *a9(OZVAL),a1,L
         00005930     0180  
     970 00005940           face_to_point                   ;face a point
     971 00005940     b702          move    *a8(OXVAL),a2,L
         00005950     0140  
     972 00005960     b703          move    *a8(OZVAL),a3,L
         00005970     0180  
     973 00005980     0d5f          calla   find_dir_to_point_18
         00005990 00000000! 
     974 000059b0     4c0e          move    a0,a14
     975                            ;
     976 000059c0           face_to_direction               ;given a direction to face
     977 000059c0     b700          move    *a8(ODT_VEL),a0,L
         000059d0     04d0  
     978 000059e0     ca18          jrz     ftd_a14
     979 000059f0     b4c0          move    *a6(POF_FLAGS),a0,W
         00005a00     0200  
     980 00005a10     1f80          btst    B_PF_OKDIR,a0
     981 00005a20     cb14          jrnz    ftd_a14
     982 00005a30     b700          move    *a8(ODT_DIR),a0,L
         00005a40     04b0  
     983 00005a50     0d5f          calla   dir_to_18
         00005a60 00000000! 
     984 00005a80     440e          sub     a0,a14
     985 00005a90     cf01          jrnn    ftd1
     986 00005aa0     110e          addk    8,a14
     987 00005ab0     0b4e  ftd1    cmpi    3,a14
         00005ac0     fffc  
     988 00005ad0     c806          jrlo    ftd_a0
     989 00005ae0     0b4e          cmpi    5,a14
         00005af0     fffa  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   26

     990 00005b00     c303          jrhi    ftd_a0
     991 00005b10     1480          subk    4,a0
     992 00005b20     c101          jrp     ftd_a0
     993 00005b30     1100          addk    8,a0
     994 00005b40     ac06  ftd_a0  movb    a0,*a6(POF_DIRECTION)
         00005b50     0390  
     995 00005b60     0960          rets
     996 00005b70     adc6  ftd_a14 movb    a14,*a6(POF_DIRECTION)
         00005b80     0390  
     997 00005b90     b4ce          move    *a6(POF_FLAGS),a14,W
         00005ba0     0200  
     998 00005bb0     0b8e          andni   M_PF_OKDIR,a14
         00005bc0 00000008  
     999 00005be0     b1c6          move    a14,*a6(POF_FLAGS),W
         00005bf0     0200  
    1000 00005c00     0960          rets
    1001                    
    1002 00005c10           face_puck_player
    1003 00005c10     05a9          move    @PUCK_CONTROL,a9,W
         00005c20 00000000! 
    1004 00005c40     ca07          jrz     face_puck
    1005 00005c50                   GBLOCK  a9,a9
    1006 00005c90     b729          move    *a9(POF_OBJECT),a9,L
         00005ca0     0280  
    1007 00005cb0     c003          jruc    fpk1
    1008 00005cc0           face_puck
    1009 00005cc0     07a9          move    @PUCK_OBJECT,a9,L
         00005cd0 00000000! 
    1010 00005cf0     b720  fpk1    move    *a9(OXVAL),a0,L
         00005d00     0140  
    1011 00005d10     b721          move    *a9(OZVAL),a1,L
         00005d20     0180  
    1012 00005d30     b702          move    *a8(OXVAL),a2,L
         00005d40     0140  
    1013 00005d50     b703          move    *a8(OZVAL),a3,L
         00005d60     0180  
    1014 00005d70     0d5f          calla   find_dir_to_point_18
         00005d80 00000000! 
    1015 00005da0     ac06          movb    a0,*a6(POF_DIRECTION)
         00005db0     0390  
    1016 00005dc0     0960          rets
    1017                    
    1018 00005dd0           set_player_script_a79
    1019 00005dd0     098f          mmtm    sp,a6,a8
         00005de0     0280  
    1020 00005df0     4ce6          move    a7,a6
    1021 00005e00     4d28          move    a9,a8
    1022 00005e10     0d3f          callr   set_player_script
         00005e20     0003  
    1023 00005e30     09af          mmfm    sp,a6,a8
         00005e40     0140  
    1024 00005e50     0960          rets
    1025 00005e60           set_player_script               ;sets script based on our mode
    1026                    ;       movi    debug_script,a1
    1027                    ;       jauc    start_panim_if_not
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   27

    1028                    
    1029                    ;       jauc    set_test_script
    1030                    
    1031 00005e60     b4c0          move    *a6(POF_MODE),a0,W
         00005e70     0210  
    1032 00005e80     24a0          sll     5,a0
    1033 00005e90     0b20          addi    spsll,a0
         00005ea0 00005ef0' 
    1034 00005ec0     8600          move    *a0,a0,L
    1035 00005ed0     0160          jump    a0
    1036                    
    1037 00005ee0     0960  no_spsc rets
    1038 00005ef0 00000000! spsll   .long   set_stand_script
    1039 00005f10 00000000!         .long   set_run_script
    1040 00005f30 00000000!         .long   set_pass_script
    1041 00005f50 00000000!         .long   set_wrist_shot_script
    1042 00005f70 00000000!         .long   set_skid_script
    1043 00005f90 00000000!         .long   set_steal_script
    1044 00005fb0 00000000!         .long   set_push_script
    1045 00005fd0 00000000!         .long   set_shake_script
    1046 00005ff0 00000000!         .long   set_dump_script
    1047 00006010 00000000!         .long   set_stand_script
    1048 00006030 00000000!         .long   set_fall_script
    1049 00006050 00000000!         .long   set_stand_script
    1050 00006070 00000000!         .long   set_stand_script
    1051 00006090 00000000!         .long   set_onetime_script
    1052 000060b0 00000000!         .long   set_high_stick_script
    1053 000060d0 00000000!         .long   set_slash_script
    1054 000060f0 00000000!         .long   set_swing_script
    1055 00006110 00007290'         .long   set_hip_check_script
    1056 00006130 00000000!         .long   set_down_block_script
    1057                    
    1058 00006150           pass_puck_sw
    1059 00006150     0d5f          calla   check_for_player
         00006160 00000000! 
    1060 00006180     c94d          jrnc    pp_9
    1061 00006190     05ae          move    @GAME_STATE,a14,W
         000061a0 00000000! 
    1062 000061c0     0b4e          cmpi    INPLAY,a14
         000061d0     ffdf  
    1063 000061e0     cb47          jrnz    pp_9
    1064 000061f0                   GBLOCK  a0,a6
    1065 00006240     0d3f          callr   inc_get_up
         00006250     0381  
    1066 00006260     05ae          move    @taps_ok,a14,W
         00006270 00000000! 
    1067 00006290     ca03          jrz     ppsg1
    1068 000062a0     0d5f          calla   inc_tap
         000062b0 00000000! 
    1069 000062d0     b4ce  ppsg1   move    *a6(POF_MODE),a14,W     ;if shooting, ok
         000062e0     0210  
    1070 000062f0     0b4e          cmpi    3,a14                   ;if shooting, ok
         00006300     fffc  
    1071 00006310     cb03          jrnz    ppkw
    1072 00006320     b4ce          move    *a6(POF_FLAGS),a14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   28

         00006330     0200  
    1073 00006340     c004          jruc    ppka
    1074 00006350     b4ce  ppkw    move    *a6(POF_FLAGS),a14,W
         00006360     0200  
    1075 00006370     1fce          btst    B_PF_CONTROL,a14
    1076 00006380     ca30          jrz     pp_no_control
    1077 00006390     0b8e  ppka    andi    M_PF_HIGHER|M_PF_HIGHER_W,a14
         000063a0 ffffffcf  
    1078 000063c0     cb00          jrnz    pp_higher
         000063d0     033c  
    1079 000063e0     07a1          move    @WAVEIRQS,a1,L
         000063f0 00000000! 
    1080 00006410     b6ce          move    *a6(POF_SHOT_START),a14,L
         00006420     0420  
    1081 00006430     442e          sub     a1,a14
    1082 00006440     038e          abs     a14
    1083 00006450     0b4e          cmpi    3,a14
         00006460     fffc  
    1084 00006470     c200          jrls    pass_and_shoot          ;do pass and shoot same time
         00006480     077e  
    1085 00006490     05a1          move    @PUCK_CONTROL,a1,W
         000064a0 00000000! 
    1086 000064c0     4801          cmp     a0,a1
    1087 000064d0     cb5d          jrnz    pp_np
    1088 000064e0     b4ce          move    *a6(POF_MODE),a14,W     ;if shooting, ok
         000064f0     0210  
    1089 00006500     0b4e          cmpi    3,a14
         00006510     fffc  
    1090 00006520     cb03          jrnz    ppk2
    1091 00006530     b6ce          move    *a6(POF_SHOT_PASS),a14,L
         00006540     0500  
    1092 00006550     016e          jump    a14
    1093 00006560     b6c8  ppk2    move    *a6(POF_OBJECT),a8,L
         00006570     0280  
    1094 00006580     05a1          move    @PUCK_MODE,a1,W
         00006590 00000000! 
    1095 000065b0     09e3          movi    pass_ok_mlist,a3
         000065c0 00006a60' 
    1096 000065e0     0d5f          calla   check_mode_ok
         000065f0 00000000! 
    1097 00006610     c904          jrnc    pp_9
    1098                    
    1099                    ;;-----
    1100                    ;       movb    *a6(POF_NUMBER),a1
    1101                    ;       sll     8,a1
    1102                    ;       addi    PIDOF_WATCH_PASS,a1
    1103                    ;       movi    new_pass_watch,a7
    1104                    ;       move    a6,a11
    1105                    ;       calla   KILL_AND_GETPPRC
    1106                    ;       jauc    SUCIDE
    1107                    ;
    1108                    ;new_pass_watch
    1109                    ;npw_0  SLEEP   1
    1110                    ;       move    *a11(POF_BUTTONS),a0,W
    1111                    ;       btst    1,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   29

    1112                    ;       jrnz    npw_0
    1113                    ;
    1114                    ;       move    a11,a6
    1115                    ;       move    *a6(POF_OBJECT),a8,L
    1116                    ;;-----
    1117                    
    1118 00006620     b4c1          move    *a6(POF_TURBO_MODE),a1,W
         00006630     0580  
    1119 00006640           pass_puck_process
    1120 00006640     0d3f          callr   pass_puck
         00006650     001f  
    1121 00006660     c080  pp_9    jauc    SUCIDE
         00006670 00000000! 
    1122 00006690           pp_no_control
    1123 00006690     0d3f          callr   signal_to_pass
         000066a0     0ec0  
    1124 000066b0     c080          jauc    SUCIDE
         000066c0 00000000! 
    1125                    
    1126 000066e0           pass_puck_quick_process
    1127 000066e0     07ae          move    @WAVEIRQS,a14,L
         000066f0 00000000! 
    1128 00006710     b3c6          move    a14,*a6(POF_PASS_START),L
         00006720     0460  
    1129 00006730     b4ce          move    *a6(POF_FLAGS),a14,W
         00006740     0200  
    1130 00006750     0b8e          andni   M_PF_BPASS,a14
         00006760 00000100  
    1131 00006780     b1c6          move    a14,*a6(POF_FLAGS),W
         00006790     0200  
    1132 000067a0     09ea          movi    set_pass_early_script,a10
         000067b0 00000000! 
    1133 000067d0     09eb          movi    pass_button_release,a11         ;this will set the same script
         000067e0 00008280' 
    1134 00006800     0d3f          callr   ppinhp
         00006810     0011  
    1135 00006820     c080          jauc    SUCIDE
         00006830 00000000! 
    1136                    
    1137 00006850           pass_puck
    1138 00006850     07ae          move    @WAVEIRQS,a14,L
         00006860 00000000! 
    1139 00006880     b3c6          move    a14,*a6(POF_PASS_START),L
         00006890     0460  
    1140 000068a0     b4ce          move    *a6(POF_FLAGS),a14,W
         000068b0     0200  
    1141 000068c0     0b8e          andni   M_PF_BPASS,a14
         000068d0 00000100  
    1142 000068f0     b1c6          move    a14,*a6(POF_FLAGS),W
         00006900     0200  
    1143 00006910     0d3f          callr   get_pass_stuff
         00006920     00be  
    1144                                    ;a10 = script set address
    1145                                    ;a11 = button release address
    1146 00006930     b366  ppinhp  move    a11,*a6(POF_PASS_RELEASE),L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   30

         00006940     0540  
    1147 00006950     092a          call    a10                     ;set script
    1148 00006960     0d3f          callr   set_pass_mode
         00006970     0142  
    1149 00006980     0d3f          callr   take_player_control
         00006990     07e1  
    1150 000069a0     aec1          movb    *a6(POF_NUMBER),a1
         000069b0     0000  
    1151 000069c0     2501          sll     8,a1
    1152 000069d0     0b01          addi    PIDOF_WATCH_PASS,a1
         000069e0     0002  
    1153 000069f0     09e7          movi    pass_watch,a7
         00006a00 00008300' 
    1154 00006a20     4ccb          move    a6,a11
    1155 00006a30     c080          jauc    KILL_AND_GETPPRC
         00006a40 00000000! 
    1156                    
    1157 00006a60           pass_ok_mlist
    1158 00006a60     0000          .word   0,1,3,4,-1
    1159                    
    1160                    ;       a0 = player, a1 = puck control, a8 = player object, a6 = block
    1161 00006ab0     57ce  pp_np   clr     a14
    1162 00006ac0     b1c6          move    a14,*a6(POF_HAS_CHECKED),W
         00006ad0     05d0  
    1163 00006ae0     0d3f          callr   do_we_hack_goalie
         00006af0     03eb  
    1164 00006b00     c800          jrc     hack_at_goalie
         00006b10     041e  
    1165 00006b20     b4ce          move    *a6(POF_TURBO_MODE),a14,W       ;pass without puck
         00006b30     0580  
    1166 00006b40     cb2b          jrnz    pp_tnp
    1167 00006b50     05ae          move    @UNLIM_CHECK,a14,W
         00006b60 00000000! 
    1168 00006b80     ca04          jrz     pp_swat
    1169 00006b90     b4ce          move    *a6(POF_BUTTONS),a14,W
         00006ba0     0380  
    1170 00006bb0     1fae          btst    2,a14           ;turbo
    1171 00006bc0     cb23          jrnz    pp_tnp          ;unlimited check, does not require more than button
    1172                    
    1173 00006bd0     1421  pp_swat dec     a1
    1174                    ;       jrn     pp_s2
    1175 00006be0     ce18          jrn     ppx9
    1176 00006bf0     1420          dec     a0
    1177 00006c00     2fc1          srl     2,a1
    1178 00006c10     2fc0          srl     2,a0
    1179 00006c20     4801          cmp     a0,a1
    1180 00006c30     cb03          jrnz    pp_s2
    1181 00006c40     0d3f          callr   signal_to_pass
         00006c50     0e65  
    1182 00006c60     c010          jruc    ppx9
    1183 00006c70     b6c8  pp_s2   move    *a6(POF_OBJECT),a8,L
         00006c80     0280  
    1184 00006c90     0d3f          callr   take_player_control
         00006ca0     07b0  
    1185                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   31

    1186 00006cb0     aec0          movb    *a6(POF_DIRECTION),a0
         00006cc0     0390  
    1187 00006cd0     0d5f          calla   are_we_backwards
         00006ce0 00000000! 
    1188 00006d00     c809          jrc     ppnp_back
    1189 00006d10     18a0          movk    5,a0
    1190 00006d20     b006          move    a0,*a6(POF_MODE),W
         00006d30     0210  
    1191 00006d40     0d5f          calla   set_player_script
         00006d50 00005e60' 
    1192 00006d70     c080  ppx9    jauc    SUCIDE
         00006d80 00000000! 
    1193 00006da0           ppnp_back
    1194 00006da0     0d5f          calla   set_backward_sweep_check_script
         00006db0 00000000! 
    1195 00006dd0     c080          jauc    SUCIDE
         00006de0 00000000! 
    1196                    
    1197 00006e00           pp_tnp
    1198 00006e00     b6c8  pp_push move    *a6(POF_OBJECT),a8,L
         00006e10     0280  
    1199 00006e20     0d5f          calla   are_we_intended
         00006e30 00004490' 
    1200 00006e50     c903          jrnc    sp_ps2                  ;also check is below (for drone/non drone)
    1201 00006e60     57ce          clr     a14
    1202 00006e70     adc6          movb    a14,*a6(POF_BDIRECTION)
         00006e80     03d0  
    1203 00006e90     aec0  sp_ps2  movb    *a6(POF_M_JOY),a0
         00006ea0     03a8  
    1204 00006eb0     ca11          jrz     pppg1
    1205 00006ec0     4c02          move    a0,a2
    1206 00006ed0     aec0          movb    *a6(POF_BDIRECTION),a0
         00006ee0     03d0  
    1207 00006ef0     cb02          jrnz    ppcf1
    1208 00006f00     aec0          movb    *a6(POF_DIRECTION),a0
         00006f10     0390  
    1209 00006f20     0d5f  ppcf1   calla   are_we_backwards
         00006f30 00000000! 
    1210 00006f50     c905          jrnc    pppg2
    1211 00006f60     1082          addk    4,a2
    1212 00006f70     0b42          cmpi    8,a2
         00006f80     fff7  
    1213 00006f90     c201          jrls    pppg2
    1214 00006fa0     1502          subk    8,a2
    1215 00006fb0     ac46  pppg2   movb    a2,*a6(POF_DIRECTION)
         00006fc0     0390  
    1216 00006fd0     0d3f  pppg1   callr   skater_push
         00006fe0     0003  
    1217 00006ff0     c080          jauc    SUCIDE
         00007000 00000000! 
    1218                    
    1219 00007020           skater_push
    1220 00007020     0d5f          calla   are_we_intended
         00007030 00004490' 
    1221 00007050     c903          jrnc    sp_ps1                  ;also check is above (for drone/non drone)
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   32

    1222 00007060     57ce          clr     a14
    1223 00007070     adc6          movb    a14,*a6(POF_BDIRECTION)
         00007080     03d0  
    1224 00007090     57ce  sp_ps1  clr     a14
    1225 000070a0     b1c6          move    a14,*a6(POF_HAS_CHECKED),W
         000070b0     05d0  
    1226 000070c0     b6c8          move    *a6(POF_OBJECT),a8,L
         000070d0     0280  
    1227 000070e0     0d3f          callr   take_player_control
         000070f0     076b  
    1228 00007100     5600          clr     a0
    1229 00007110     0d5f          calla   take_turbo
         00007120 00000000! 
    1230 00007140     c080          jauc    do_check
         00007150 00000000! 
    1231                    
    1232                    
    1233                    ;       movb    *a6(POF_DIRECTION),a0
    1234                    ;       move    *a8(ODT_VEL),a14,L
    1235                    ;       cmpi    [6,0],a14
    1236                    ;       jrls    ppop2
    1237                    ;       calla   are_we_backwards
    1238                    ;       jrc     backwards_check
    1239                    ;ppop2  move    @PUCK_CONTROL,a14,W
    1240                    ;       jrz     spdr
    1241                    ;       movb    *a6(POF_NUMBER),a0
    1242                    ;       EQTEAM  a0,a14
    1243                    ;       jrz     spdr                    ;if puck carrier is same team, no slash
    1244                    ;       move    @PUCK_CONTROL,a0,W
    1245                    ;       GBLOCK  a0,a7
    1246                    ;       movb    *a7(POF_DIRECTION),a1
    1247                    ;       movb    *a6(POF_DIRECTION),a2
    1248                    ;       cmp     a1,a2
    1249                    ;       jrnz    spdr                    ;if puck carrier is not going same direction as us, no slash
    1250                    ;       move    *a7(POF_OBJECT),a9,L
    1251                    ;       move    *a9(OXVAL),a0,L
    1252                    ;       addi    [0,08000h],a0
    1253                    ;       sra     16,a0
    1254                    ;       move    *a9(OZPOS),a1,W
    1255                    ;       move    *a8(OXVAL),a2,L
    1256                    ;       addi    [0,08000h],a2
    1257                    ;       sra     16,a2
    1258                    ;       move    *a8(OZPOS),a3,W
    1259                    ;       calla   find_dist_quick
    1260                    ;       cmpi    110,a4
    1261                    ;       jrhi    spdr
    1262                    ;       move    *a8(ODT_VEL),a0,L
    1263                    ;       cmpi    [3,0],a0
    1264                    ;       jrls    spdr
    1265                    ;       move    *a9(ODT_VEL),a0,L
    1266                    ;       cmpi    [3,0],a0
    1267                    ;       jrls    spdr
    1268                    ;       move    *a9(OXVAL),a0,L
    1269                    ;       move    *a9(OZVAL),a1,L
    1270                    ;       move    *a8(OXVAL),a2,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   33

    1271                    ;       move    *a8(OZVAL),a3,L
    1272                    ;       calla   find_dir_to_point_18
    1273                    ;       movb    *a7(POF_DIRECTION),a1
    1274                    ;       cmp     a0,a1
    1275                    ;       jrnz    spdr
    1276                    ;       movk    PM_SLASH,a1
    1277                    ;       jruc    spd1
    1278                    ;spdr   movk    PM_CROSSCHECK,a1
    1279                    ;       move    *a6(POF_TURBO_AMOUNT+010h),a0
    1280                    ;       cmpi    53,a0
    1281                    ;       jrls    spd1
    1282                    ;       movb    *a6(POF_DIRECTION),a1
    1283                    ;       cmpi    1,a1
    1284                    ;       jrz     spdr2
    1285                    ;       cmpi    5,a1
    1286                    ;       jrz     spdr2
    1287                    ;       movi    400,a0
    1288                    ;       calla   RANDPER
    1289                    ;       jrnc    spdr2
    1290                    ;       movk    PM_SWING,a1             ;400/1024 chance of blatant swing
    1291                    ;       jruc    spd1
    1292                    ;spdr2  movk    PM_HIGHSTICK,a1
    1293                    ;spd1   move    a1,*a6(POF_MODE),W
    1294                    ;       jauc    set_player_script
    1295                    
    1296 00007170           backwards_check
    1297 00007170     1a20          movk    PM_HIP,a0
    1298 00007180     b006          move    a0,*a6(POF_MODE),W
         00007190     0210  
    1299 000071a0     0d5f          calla   get_push_block          ;returns a11
         000071b0 00000000! 
    1300 000071d0     9560          move    *a11+,a0,W
    1301 000071e0     0d3f          callr   can_we_hip
         000071f0     0024  
    1302 00007200     c810          jrc     set_hdv
    1303 00007210     9560          move    *a11+,a0,W
    1304 00007220     0d3f          callr   can_we_hip
         00007230     0020  
    1305 00007240     c80c          jrc     set_hdv
    1306 00007250     9560          move    *a11+,a0,W
    1307 00007260     0d3f          callr   can_we_hip
         00007270     001c  
    1308 00007280     c808          jrc     set_hdv
    1309 00007290           set_hip_check_script
    1310 00007290     09ce  set_hdn movi    339,a14
         000072a0     0153  
    1311 000072b0     b501          move    *a8(OZPOS),a1,W
         000072c0     0190  
    1312 000072d0     0be1          subi    679,a1
         000072e0     fd58  
    1313 000072f0     03a1          neg     a1
    1314 00007300     c00b          jruc    stf1
    1315 00007310           set_hdv GBLOCK  a0,a7
    1316 00007360     b6e7          move    *a7(POF_OBJECT),a7,L
         00007370     0280  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   34

    1317 00007380     b4ee          move    *a7(OZPOS),a14,W
         00007390     0190  
    1318 000073a0     b501          move    *a8(OZPOS),a1,W
         000073b0     0190  
    1319 000073c0     49c1  stf1    cmp     a14,a1
    1320 000073d0     c703          jrgt    shdown
    1321 000073e0     c080  shup    jauc    set_hip_check_up_script
         000073f0 00000000! 
    1322 00007410     c080  shdown  jauc    set_hip_check_down_script
         00007420 00000000! 
    1323                    
    1324 00007440           can_we_hip
    1325 00007440     4c0e          move    a0,a14
    1326 00007450     248e          sll     4,a14
    1327 00007460     0b0e          addi    POF_D_1P-16,a14
         00007470     05f0  
    1328 00007480     40ce          add     a6,a14
    1329 00007490     85ce          move    *a14,a14,W
    1330 000074a0     0b4e          cmpi    120,a14
         000074b0     ff87  
    1331 000074c0     c302          jrhi    cwen
    1332 000074d0     0de0          setc
    1333 000074e0     0960          rets
    1334 000074f0     0320  cwen    clrc
    1335 00007500     0960          rets
    1336                    
    1337 00007510           get_pass_stuff
    1338 00007510     b4ce          move    *a6(POF_FLAGS),a14,W
         00007520     0200  
    1339 00007530     1fae          btst    B_PF_GOALIE,a14
    1340 00007540     cb00          jrnz    gps_goalie
         00007550     008a  
    1341 00007560     098f          mmtm    sp,a0,a1,a9
         00007570     c040  
    1342 00007580     aec0          movb    *a6(POF_NUMBER),a0
         00007590     0000  
    1343 000075a0     0d5f          calla   get_pass_receiver
         000075b0 00000000! 
    1344 000075d0                   GBLOCK  a0,a9
    1345 00007620     b729          move    *a9(POF_OBJECT),a9,L
         00007630     0280  
    1346 00007640     b500          move    *a8(OXPOS),a0,W
         00007650     0150  
    1347 00007660     b521          move    *a9(OXPOS),a1,W
         00007670     0150  
    1348 00007680     4401          sub     a0,a1           ;x difference
    1349 00007690     0381          abs     a1
    1350 000076a0     b500          move    *a8(OZPOS),a0,W
         000076b0     0190  
    1351 000076c0     b52e          move    *a9(OZPOS),a14,W
         000076d0     0190  
    1352 000076e0     45c0          sub     a14,a0
    1353 000076f0     0380          abs     a0              ;z difference
    1354 00007700     4801          cmp     a0,a1
    1355 00007710     c918          jrhs    gps_lr          ;left or right is direction
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   35

    1356 00007720     b500  gps_ud  move    *a8(OZPOS),a0,W
         00007730     0190  
    1357 00007740     b52e          move    *a9(OZPOS),a14,W
         00007750     0190  
    1358 00007760     480e          cmp     a0,a14
    1359 00007770     c709          jrgt    gps_up
    1360 00007780     09eb  gps_dn  movi    pass_down_b_release,a11
         00007790 00008030' 
    1361 000077b0     09ea          movi    set_pass_down_script,a10
         000077c0 00000000! 
    1362 000077e0     09af          mmfm    sp,a0,a1,a9
         000077f0     0203  
    1363 00007800     0960          rets
    1364 00007810     09eb  gps_up  movi    pass_up_b_release,a11
         00007820 000080a0' 
    1365 00007840     09ea          movi    set_pass_up_script,a10
         00007850 00000000! 
    1366 00007870     09af          mmfm    sp,a0,a1,a9
         00007880     0203  
    1367 00007890     0960          rets
    1368 000078a0     b500  gps_lr  move    *a8(OXPOS),a0,W
         000078b0     0150  
    1369 000078c0     b52e          move    *a9(OXPOS),a14,W
         000078d0     0150  
    1370 000078e0     480e          cmp     a0,a14
    1371 000078f0     c725          jrgt    gps_rt
    1372 00007900     aece  gps_lf  movb    *a6(POF_DIRECTION),a14
         00007910     0390  
    1373 00007920     0b4e          cmpi    3,a14
         00007930     fffc  
    1374 00007940     cb17          jrnz    gpslf1
    1375 00007950     b500          move    *a8(OZPOS),a0,W
         00007960     0190  
    1376 00007970     b52e          move    *a9(OZPOS),a14,W
         00007980     0190  
    1377 00007990     45c0          sub     a14,a0
    1378 000079a0     0380          abs     a0              ;z difference
    1379 000079b0     0b40          cmpi    50,a0
         000079c0     ffcd  
    1380 000079d0     c90e          jrhs    gpslf1
    1381 000079e0     b50e          move    *a8(ODT_VEL+010h),a14,W
         000079f0     04e0  
    1382 00007a00     0b4e          cmpi    4,a14
         00007a10     fffb  
    1383 00007a20     c209          jrls    gpslf1
    1384 00007a30     09eb          movi    pass_left_thru_release,a11
         00007a40 00007f50' 
    1385 00007a60     09ea          movi    set_pass_left_thru_script,a10
         00007a70 00000000! 
    1386 00007a90     09af          mmfm    sp,a0,a1,a9
         00007aa0     0203  
    1387 00007ab0     0960          rets
    1388 00007ac0     09eb  gpslf1  movi    pass_left_b_release,a11
         00007ad0 00008110' 
    1389 00007af0     09ea          movi    set_pass_left_script,a10
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   36

         00007b00 00000000! 
    1390 00007b20     09af          mmfm    sp,a0,a1,a9
         00007b30     0203  
    1391 00007b40     0960          rets
    1392 00007b50     aece  gps_rt  movb    *a6(POF_DIRECTION),a14
         00007b60     0390  
    1393 00007b70     0b4e          cmpi    7,a14
         00007b80     fff8  
    1394 00007b90     cb17          jrnz    gpsrt1
    1395 00007ba0     b500          move    *a8(OZPOS),a0,W
         00007bb0     0190  
    1396 00007bc0     b52e          move    *a9(OZPOS),a14,W
         00007bd0     0190  
    1397 00007be0     45c0          sub     a14,a0
    1398 00007bf0     0380          abs     a0              ;z difference
    1399 00007c00     0b40          cmpi    50,a0
         00007c10     ffcd  
    1400 00007c20     c90e          jrhs    gpsrt1
    1401 00007c30     b50e          move    *a8(ODT_VEL+010h),a14,W
         00007c40     04e0  
    1402 00007c50     0b4e          cmpi    4,a14
         00007c60     fffb  
    1403 00007c70     c209          jrls    gpsrt1
    1404 00007c80     09eb          movi    pass_right_thru_release,a11
         00007c90 00007fc0' 
    1405 00007cb0     09ea          movi    set_pass_right_thru_script,a10
         00007cc0 00000000! 
    1406 00007ce0     09af          mmfm    sp,a0,a1,a9
         00007cf0     0203  
    1407 00007d00     0960          rets
    1408 00007d10     09eb  gpsrt1  movi    pass_right_b_release,a11
         00007d20 00008180' 
    1409 00007d40     09ea          movi    set_pass_right_script,a10
         00007d50 00000000! 
    1410 00007d70     09af          mmfm    sp,a0,a1,a9
         00007d80     0203  
    1411 00007d90     0960          rets
    1412                    
    1413 00007da0           set_pass_mode
    1414 00007da0                   PUSH    a0
    1415 00007db0     1840          movk    PM_PASS,a0
    1416 00007dc0     b006          move    a0,*a6(POF_MODE),W
         00007dd0     0210  
    1417 00007de0                   PULLQ   a0
    1418 00007df0     0960          rets
    1419                    
    1420 00007e00           gps_goalie
    1421 00007e00     09ea          movi    DUMRETS,a10
         00007e10 00000000! 
    1422 00007e30     09eb          movi    DUMDIE,a11
         00007e40 00000000! 
    1423 00007e60     b4ce          MOVE    *A6(POF_MODE),A14,W
         00007e70     0210  
    1424 00007e80     0b4e          CMPI    PM_GSMOTHER,A14
         00007e90     fff1  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   37

    1425 00007ea0     ca09          JREQ    GPS_G_DONE                      ;BR=WE'RE SMOTHERING THE PUCK
    1426 00007eb0     09ea          MOVI    SET_GPASS_SCRIPT,A10
         00007ec0 00000000! 
    1427 00007ee0     0b4e          CMPI    PM_GHOLDING,A14
         00007ef0     fff0  
    1428 00007f00     cb03          JRNE    GPS_G_DONE                      ;BR=WE'RE HOLDING THE PUCK
    1429 00007f10     09ea          MOVI    SET_GDROPPASS_SCRIPT,A10
         00007f20 00000000! 
    1430 00007f40           GPS_G_DONE
    1431 00007f40     0960          rets
    1432                    
    1433 00007f50           pass_left_thru_release
    1434 00007f50     0d3f          callr   pbr_c1
         00007f60     002a  
    1435 00007f70     cb26          jrnz    pd9
    1436 00007f80     0d5f          calla   set_pass_left_thru_early_script
         00007f90 00000000! 
    1437 00007fb0     c022          jruc    pd9
    1438 00007fc0           pass_right_thru_release
    1439 00007fc0     0d3f          callr   pbr_c1
         00007fd0     0023  
    1440 00007fe0     cb1f          jrnz    pd9
    1441 00007ff0     0d5f          calla   set_pass_right_thru_early_script
         00008000 00000000! 
    1442 00008020     c01b          jruc    pd9
    1443 00008030           pass_down_b_release
    1444 00008030     0d3f          callr   pbr_c1
         00008040     001c  
    1445 00008050     cb18          jrnz    pd9
    1446 00008060     0d5f          calla   set_pass_down_early_script
         00008070 00000000! 
    1447 00008090     c014          jruc    pd9
    1448 000080a0           pass_up_b_release
    1449 000080a0     0d3f          callr   pbr_c1
         000080b0     0015  
    1450 000080c0     cb11          jrnz    pd9
    1451 000080d0     0d5f          calla   set_pass_up_early_script
         000080e0 00000000! 
    1452 00008100     c00d          jruc    pd9
    1453 00008110           pass_left_b_release
    1454 00008110     0d3f          callr   pbr_c1
         00008120     000e  
    1455 00008130     cb0a          jrnz    pd9
    1456 00008140     0d5f          calla   set_pass_left_early_script
         00008150 00000000! 
    1457 00008170     c006          jruc    pd9
    1458 00008180           pass_right_b_release
    1459 00008180     0d3f          callr   pbr_c1
         00008190     0007  
    1460 000081a0     cb03          jrnz    pd9
    1461 000081b0     0d5f          calla   set_pass_right_early_script
         000081c0 00000000! 
    1462 000081e0     c080  pd9     jauc    SUCIDE
         000081f0 00000000! 
    1463                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   38

    1464                    
    1465 00008210     aec0  pbr_c1  movb    *a6(POF_NUMBER),a0
         00008220     0000  
    1466 00008230     05ae          move    @PUCK_CONTROL,a14,W
         00008240 00000000! 
    1467 00008260     480e          cmp     a0,a14
    1468 00008270     0960          rets
    1469                    
    1470 00008280           pass_button_release
    1471 00008280     aec0          movb    *a6(POF_NUMBER),a0
         00008290     0000  
    1472 000082a0     0d5f          calla   set_pass_early_script
         000082b0 00000000! 
    1473 000082d0     c080          jauc    SUCIDE
         000082e0 00000000! 
    1474                    
    1475 00008300           pass_watch
    1476 00008300           ppw_0   SLEEP   1
    1477 00008340     b560          move    *a11(POF_BUTTONS),a0,W
         00008350     0380  
    1478 00008360     1fc0          btst    1,a0
    1479 00008370     cbf8          jrnz    ppw_0
    1480 00008380     b760          move    *a11(POF_PASS_RELEASE),a0,L
         00008390     0540  
    1481 000083a0     4d66          move    a11,a6
    1482 000083b0     b6c8          move    *a6(POF_OBJECT),a8,L
         000083c0     0280  
    1483 000083d0     0160          jump    a0
    1484                    
    1485 000083e0           pass_script_done_1
    1486 000083e0     b706          move    *a8(ODT_PBK),a6,L
         000083f0     0530  
    1487 00008400     b4ce          move    *a6(POF_FLAGS),a14,W
         00008410     0200  
    1488 00008420     0bae          ori     M_PF_CONTROLM,a14
         00008430 00000200  
    1489 00008450     b1c6          move    a14,*a6(POF_FLAGS),W
         00008460     0200  
    1490 00008470     194e          movk    PUM_PASS,a14
    1491                    ;       jruc    ppsd1
    1492                    ;turbo_pass_script_done_1
    1493                    ;       movk    PUM_TPASS,a14
    1494 00008480     05a1  ppsd1   move    @PUCK_CONTROL,a1,W
         00008490 00000000! 
    1495 000084b0     4801          cmp     a0,a1
    1496 000084c0     cb6a          jrnz    pscr_abort
    1497 000084d0     0d5f          calla   set_safe_puck_mode_a14
         000084e0 00000000! 
    1498 00008500     0d3f          callr   record_pass_a6
         00008510     0548  
    1499 00008520     0d5f          calla   turn_on_players_arrow
         00008530 00000000! 
    1500 00008550     0d5f          calla   get_pass_receiver
         00008560 00000000! 
    1501 00008580     098f          mmtm    sp,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   39

         00008590     8000  
    1502 000085a0     0d5f          calla   turn_on_receivers_arrow
         000085b0 00000000! 
    1503 000085d0     0580          move    a0,@PUCK_INTENDED,W
         000085e0 00000000! 
    1504 00008600     05c0          move    @PUCK_CONTROL,@PUCK_LAST_CONTROL,W
         00008610 00000000! 
         00008630 00000000! 
    1505 00008650     5621          clr     a1
    1506 00008660     0581          move    a1,@PUCK_CONTROL,W
         00008670 00000000! 
    1507 00008690     0d5f          calla   new_puck_control
         000086a0 00000000! 
    1508 000086c0     b6c9          move    *a6(POF_S_PASS),a9,L            ;pup pass change here
         000086d0     0160  
    1509 000086e0     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         000086f0     0c50  
    1510 00008700     1eee          btst    B_PUP_PASS,a14
    1511 00008710     ca03          jrz     npupps1
    1512 00008720     09e9          movi    pass_data_powered,a9
         00008730 00000000! 
    1513 00008750     b727  npupps1 move    *a9(PS_PS_PASS_TURBO),a7,L
         00008760     0020  
    1514 00008770     b72e          move    *a9(PS_PS_TPASS_CHANGE),a14,L
         00008780     00a0  
    1515 00008790     4fc6          move    a14,b6
    1516 000087a0     b6ca          move    *a6(POF_S_SHOT),a10,L
         000087b0     0140  
    1517 000087c0     b74a          move    *a10(PS_SH_MAX_YVEL),a10,L      ;no change needed for pup shot
         000087d0     0080  
    1518 000087e0     0d5f          calla   put_puck_outside_netp
         000087f0 00000000! 
    1519 00008810     b4ce          move    *a6(POF_FLAGS),a14,W
         00008820     0200  
    1520 00008830     1eee          btst    B_PF_BPASS,a14
    1521 00008840     ca0b          jrz     rplk
    1522 00008850     0b8e          andni   M_PF_BPASS,a14
         00008860 00000100  
    1523 00008880     b1c6          move    a14,*a6(POF_FLAGS),W
         00008890     0200  
    1524 000088a0     0d3f          callr   clean_up_my_signals
         000088b0     0c2d  
    1525 000088c0     0d5f          calla   send_puck_to_player_boards
         000088d0 00000000! 
    1526 000088f0     c005          jruc    nplk
    1527 00008900     0d3f  rplk    callr   clean_up_my_signals
         00008910     0c27  
    1528 00008920     0d5f          calla   send_puck_to_player             ;does not take on current vel.
         00008930 00000000! 
    1529 00008950     09af  nplk    mmfm    sp,a0
         00008960     0001  
    1530 00008970     0d5f          calla   spx_pass_1
         00008980 00000000! 
    1531 000089a0     b6c9          move    *a6(POF_S_PASS),a9,L            ;no change needed for pup pass
         000089b0     0160  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   40

    1532 000089c0     b520          move    *a9(PS_PS_TPASS_GTHRESH),a0,W
         000089d0     0060  
    1533 000089e0     480a          cmp     a0,a10
    1534 000089f0     c814          jrlo    pptb9                           ;not in air
    1535 00008a00     b520          move    *a9(PS_PS_TPASS_MTHRESH),a0,W
         00008a10     0070  
    1536 00008a20     480a          cmp     a0,a10
    1537 00008a30     c905          jrhs    pptair
    1538 00008a40     1840          movk    2,a0
    1539 00008a50     0d5f          calla   RAND0
         00008a60 00000000! 
    1540 00008a80     ca0b          jrz     pptb9                           ;not in air (50%)
    1541 00008a90     09e0  pptair  movi    [-2,0000h],a0
         00008aa0 fffe0000  
    1542 00008ac0     07a8          move    @PUCK_OBJECT,a8,L
         00008ad0 00000000! 
    1543 00008af0     b208          move    a0,*a8(OYVEL),L
         00008b00     0120  
    1544 00008b10     0d5f          calla   give_puck_shot_gravity
         00008b20 00000000! 
    1545 00008b40     c080  pptb9   jauc    slap_shot_sound
         00008b50 00000000! 
    1546 00008b70           pscr_abort
    1547 00008b70     c000          jruc    do_end_of_shoot_stuff
         00008b80     0467  
    1548                    
    1549                    **************************************************************************
    1550                    *                                                                        *
    1551                    * pass_script_done_zero                                                  *
    1552                    *       output  a0 = intended receiver                                   *
    1553                    *               a2 = x velocity to give to puck                          *
    1554                    *               a3 = z velocity to give to puck                          *
    1555                    *               a4 = distance puck will travel                           *
    1556                    *               a10= unknown, but keep unaltered                         *
    1557                    *               b6 = routine to call to change angle                     *
    1558                    *                                                                        *
    1559                    **************************************************************************
    1560 00008b90           pass_script_done_zero
    1561 00008b90     b706          move    *a8(ODT_PBK),a6,L
         00008ba0     0530  
    1562 00008bb0     b4ce          move    *a6(POF_FLAGS),a14,W
         00008bc0     0200  
    1563 00008bd0     0bae          ori     M_PF_CONTROLM,a14
         00008be0 00000200  
    1564 00008c00     b1c6          move    a14,*a6(POF_FLAGS),W
         00008c10     0200  
    1565 00008c20     05a1          move    @PUCK_CONTROL,a1,W
         00008c30 00000000! 
    1566 00008c50     4801          cmp     a0,a1
    1567 00008c60     cb20          jrnz    p0scr_abort
    1568 00008c70     0d5f          calla   get_pass_receiver
         00008c80 00000000! 
    1569 00008ca0     098f          mmtm    sp,a0
         00008cb0     8000  
    1570 00008cc0     b6c9          move    *a6(POF_S_PASS),a9,L            ;pup pass change here
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   41

         00008cd0     0160  
    1571 00008ce0     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         00008cf0     0c50  
    1572 00008d00     1eee          btst    B_PUP_PASS,a14
    1573 00008d10     ca03          jrz     npupps2
    1574 00008d20     09e9          movi    pass_data_powered,a9
         00008d30 00000000! 
    1575 00008d50     b727  npupps2 move    *a9(PS_PS_PASS_TURBO),a7,L
         00008d60     0020  
    1576 00008d70     b72e          move    *a9(PS_PS_TPASS_CHANGE),a14,L
         00008d80     00a0  
    1577 00008d90     4fc6          move    a14,b6
    1578 00008da0     b6ca          move    *a6(POF_S_SHOT),a10,L           ;no change needed for pup shot
         00008db0     0140  
    1579 00008dc0     b74a          move    *a10(PS_SH_MAX_YVEL),a10,L
         00008dd0     0080  
    1580 00008de0     0d3f          callr   clean_up_my_signals
         00008df0     0bd9  
    1581 00008e00     0d5f          calla   send_puck_to_player_part1               ;does not take on current vel.
         00008e10 00000000! 
    1582 00008e30     09af          mmfm    sp,a0
         00008e40     0001  
    1583 00008e50     0de0          setc
    1584 00008e60     0960          rets
    1585                    
    1586 00008e70           p0scr_abort
    1587 00008e70     0d3f          callr   do_end_of_shoot_stuff
         00008e80     0437  
    1588 00008e90     0320          clrc
    1589 00008ea0     0960          rets
    1590                    
    1591 00008eb0           pass_script_done_zero_one
    1592 00008eb0     194e          movk    PUM_PASS,a14
    1593 00008ec0     0d5f          calla   set_safe_puck_mode_a14
         00008ed0 00000000! 
    1594 00008ef0     0d3f          callr   record_pass_a6
         00008f00     04a9  
    1595 00008f10     098f          mmtm    sp,a0,a2,a3,a4,a10
         00008f20     b820  
    1596 00008f30     0d5f          calla   turn_on_receivers_arrow
         00008f40 00000000! 
    1597 00008f60     0580          move    a0,@PUCK_INTENDED,W
         00008f70 00000000! 
    1598 00008f90     05c0          move    @PUCK_CONTROL,@PUCK_LAST_CONTROL,W
         00008fa0 00000000! 
         00008fc0 00000000! 
    1599 00008fe0     5621          clr     a1
    1600 00008ff0     0581          move    a1,@PUCK_CONTROL,W
         00009000 00000000! 
    1601 00009020     0d5f          calla   new_puck_control
         00009030 00000000! 
    1602 00009050     09af          mmfm    sp,a0,a2,a3,a4,a10
         00009060     041d  
    1603 00009070     0d5f          calla   send_puck_to_player_part2               ;does not take on current vel.
         00009080 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   42

    1604 000090a0     0d5f          calla   spx_pass_1
         000090b0 00000000! 
    1605 000090d0     b6c9          move    *a6(POF_S_PASS),a9,L            ;no change needed for pup pass
         000090e0     0160  
    1606 000090f0     b520          move    *a9(PS_PS_TPASS_GTHRESH),a0,W
         00009100     0060  
    1607 00009110     480a          cmp     a0,a10
    1608 00009120     c8a1          jrlo    pptb9                           ;not in air
    1609 00009130     b520          move    *a9(PS_PS_TPASS_MTHRESH),a0,W
         00009140     0070  
    1610 00009150     480a          cmp     a0,a10
    1611 00009160     c905          jrhs    p1ptair
    1612 00009170     1840          movk    2,a0
    1613 00009180     0d5f          calla   RAND0
         00009190 00000000! 
    1614 000091b0     ca0b          jrz     p1ptb9                          ;not in air (50%)
    1615 000091c0     09e0  p1ptair movi    [-2,0000h],a0
         000091d0 fffe0000  
    1616 000091f0     07a8          move    @PUCK_OBJECT,a8,L
         00009200 00000000! 
    1617 00009220     b208          move    a0,*a8(OYVEL),L
         00009230     0120  
    1618 00009240     0d5f          calla   give_puck_shot_gravity
         00009250 00000000! 
    1619 00009270     c080  p1ptb9  jauc    slap_shot_sound
         00009280 00000000! 
    1620                    
    1621 000092a0           shoot_puck_sw
    1622 000092a0     0d5f          calla   check_for_player
         000092b0 00000000! 
    1623 000092d0     c944          jrnc    sp_9                    ;if not playing game, exit
    1624 000092e0     05ae          move    @GAME_STATE,a14,W
         000092f0 00000000! 
    1625 00009310     0b4e          cmpi    INPLAY,a14
         00009320     ffdf  
    1626 00009330     cb3e          jrnz    sp_9
    1627 00009340                   GBLOCK  a0,a6
    1628 00009390     0d3f          callr   inc_get_up
         000093a0     006c  
    1629 000093b0     05ae          move    @taps_ok,a14,W
         000093c0 00000000! 
    1630 000093e0     ca03          jrz     spsg1
    1631 000093f0     0d5f          calla   inc_tap
         00009400 00000000! 
    1632 00009420     b4ce  spsg1   move    *a6(POF_MODE),a14,W     ;if shooting, ok
         00009430     0210  
    1633 00009440     0b4e          cmpi    2,a14
         00009450     fffd  
    1634 00009460     cb03          jrnz    spkw
    1635 00009470     b4ce          move    *a6(POF_FLAGS),a14,W
         00009480     0200  
    1636 00009490     c004          jruc    spka
    1637 000094a0     b4ce  spkw    move    *a6(POF_FLAGS),a14,W
         000094b0     0200  
    1638 000094c0     1fce          btst    B_PF_CONTROL,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   43

    1639 000094d0     ca27          jrz     sp_no_control
    1640 000094e0     0b8e  spka    andi    M_PF_HIGHER|M_PF_HIGHER_W,a14
         000094f0 ffffffcf  
    1641 00009510     cb28          jrnz    sp_higher
    1642                    
    1643 00009520     b4ce          move    *a6(POF_MODE),a14
         00009530     0210  
    1644 00009540     0b4e          cmpi    PM_PASS,a14
         00009550     fffd  
    1645 00009560     ca00          jrz     pass_and_shoot
         00009570     046f  
    1646                    ;       move    @WAVEIRQS,a1,L
    1647                    ;       move    *a6(POF_PASS_START),a14,L
    1648                    ;       sub     a1,a14
    1649                    ;       abs     a14
    1650                    ;       cmpi    3,a14
    1651                    ;       jrls    pass_and_shoot          ;do pass and shoot same time
    1652                    
    1653 00009580     05a1          move    @PUCK_CONTROL,a1,W
         00009590 00000000! 
    1654 000095b0     4801          cmp     a0,a1
    1655 000095c0     cb00          jrnz    sp_shnp                 ;br= has no puck
         000095d0     009b  
    1656 000095e0     b6c8          move    *a6(POF_OBJECT),a8,L
         000095f0     0280  
    1657 00009600     05a1          move    @PUCK_MODE,a1,W
         00009610 00000000! 
    1658 00009630     0b41          cmpi    14,a1                   ;one timer?
         00009640     fff1  
    1659 00009650     ca00          jrz     sp_ot                   ;br=yes, it is a one timer
         00009660     03cf  
    1660 00009670     09e3          movi    shoot_ok_mlist,a3
         00009680 00009f50' 
    1661 000096a0     0d5f          calla   check_mode_ok
         000096b0 00000000! 
    1662 000096d0     c904          jrnc    sp_9
    1663 000096e0     b4ce          move    *a6(POF_TURBO_MODE),a14,W
         000096f0     0580  
    1664 00009700           shoot_puck_process
    1665 00009700     0d3f          callr   shoot_puck
         00009710     003b  
    1666 00009720     c080  sp_9    jauc    SUCIDE
         00009730 00000000! 
    1667 00009750           sp_no_control
    1668 00009750     0d3f          callr   signal_to_shoot
         00009760     0bca  
    1669 00009770     c080          jauc    SUCIDE
         00009780 00000000! 
    1670                    
    1671 000097a0           pp_higher
    1672 000097a0           sp_higher
    1673 000097a0     aec0          movb    *a6(POF_NUMBER),a0
         000097b0     0000  
    1674 000097c0     0b40          cmpi    2,a0
         000097d0     fffd  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   44

    1675 000097e0     ca18          jrz     sppp2
    1676 000097f0     0b40          cmpi    5,a0
         00009800     fffa  
    1677 00009810     ca15          jrz     sppp2
    1678 00009820     1841          movk    2,a1
    1679 00009830     0b40          cmpi    5,a0
         00009840     fffa  
    1680 00009850     c801          jrlo    sptpa
    1681 00009860     18a1          movk    5,a1
    1682 00009870           sptpa   GBLOCK  a1,a14
    1683 000098c0     b5ce          move    *a14(POF_FLAGS),a14,W
         000098d0     0200  
    1684 000098e0     1fee          btst    B_PF_HUMAN,a14
    1685 000098f0     cb80          janz    SUCIDE
         00009900 00000000! 
    1686 00009920                   GBLOCK  a1,a6
    1687 00009970     05ae  sppp2   move    @PUCK_MODE,a14
         00009980 00000000! 
    1688 000099a0     0b4e          cmpi    PUM_FACEOFF,a14
         000099b0     ff9b  
    1689 000099c0     cb80          janz    SUCIDE
         000099d0 00000000! 
    1690 000099f0     b6c8          move    *a6(POF_OBJECT),a8,L
         00009a00     0280  
    1691 00009a10     0d5f          calla   faceoff_tap
         00009a20 00000000! 
    1692 00009a40     c080          jauc    SUCIDE
         00009a50 00000000! 
    1693                    
    1694 00009a70           inc_get_up
    1695 00009a70     b4ce          move    *a6(POF_GET_UP_COUNT),a14,W
         00009a80     0e10  
    1696 00009a90     110e          addk    8,a14
    1697 00009aa0     b1c6          move    a14,*a6(POF_GET_UP_COUNT),W
         00009ab0     0e10  
    1698 00009ac0     0960          rets
    1699                    
    1700 00009ad0           shoot_puck
    1701 00009ad0     b500          move    *a8(OXPOS),a0,W
         00009ae0     0150  
    1702 00009af0     aece          movb    *a6(POF_NUMBER),a14
         00009b00     0000  
    1703 00009b10     0b4e          cmpi    4,a14
         00009b20     fffb  
    1704 00009b30     c201          jrls    spkl
    1705 00009b40     03a0          neg     a0
    1706 00009b50     0b40  spkl    cmpi    -233,a0
         00009b60     00e8  
    1707 00009b70     c710          jrgt    spko
    1708 00009b80     05ae          move    @minutes,a14,W
         00009b90 00000000! 
    1709 00009bb0     ca0c          jrz     spko
    1710 00009bc0     0d5f          calla   quick_freeze_check
         00009bd0 00000000! 
    1711 00009bf0     c908          jrnc    spko
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   45

    1712 00009c00     b4ce          move    *a6(POF_FREEZE_BITS),a14,W
         00009c10     0c00  
    1713 00009c20     1fae          btst    PFRZ_SHOOTFAR,a14
    1714 00009c30     cb04          jrnz    spko
    1715 00009c40     0d5f          calla   check_freeze_shootfar
         00009c50 00000000! 
    1716 00009c70     0960          rets
    1717 00009c80     0d5f  spko    calla   shoot_board_animate
         00009c90 00000000! 
    1718 00009cb0     07ae          move    @WAVEIRQS,a14,L
         00009cc0 00000000! 
    1719 00009ce0     b3c6          move    a14,*a6(POF_SHOT_START),L
         00009cf0     0420  
    1720 00009d00     1860          movk    PM_SHOOT,a0
    1721 00009d10     b006          move    a0,*a6(POF_MODE),W
         00009d20     0210  
    1722 00009d30     0d3f          callr   get_quick_shot_point
         00009d40     04d9  
    1723 00009d50     b702          move    *a8(OXVAL),a2,L
         00009d60     0140  
    1724 00009d70     b703          move    *a8(OZVAL),a3,L
         00009d80     0180  
    1725 00009d90     0d5f          calla   find_dir_to_point_18
         00009da0 00000000! 
    1726 00009dc0     ac06          movb    a0,*a6(POF_DIRECTION)
         00009dd0     0390  
    1727 00009de0     ac06          movb    a0,*a6(POF_BDIRECTION)
         00009df0     03d0  
    1728 00009e00     0d3f          callr   get_shoot_stuff
         00009e10     0067  
    1729                                    ;a10 = script set address
    1730                                    ;a11 = button release address
    1731                                    ;a9 = pass from shoot address
    1732 00009e20     b326          move    a9,*a6(POF_SHOT_PASS),L
         00009e30     0500  
    1733 00009e40     b366          move    a11,*a6(POF_SHOT_RELEASE),L
         00009e50     04e0  
    1734 00009e60     0d3f          callr   take_player_control
         00009e70     0493  
    1735 00009e80     092a          call    a10
    1736 00009e90     aec1          movb    *a6(POF_NUMBER),a1
         00009ea0     0000  
    1737 00009eb0     2501          sll     8,a1
    1738 00009ec0     0b01          addi    PIDOF_WATCH_SHOOT,a1
         00009ed0     0001  
    1739 00009ee0     09e7          movi    shot_watch,a7
         00009ef0 0000af40' 
    1740 00009f10     4ccb          move    a6,a11
    1741 00009f20     c080          jauc    KILL_AND_GETPPRC
         00009f30 00000000! 
    1742                    
    1743 00009f50           shoot_ok_mlist
    1744 00009f50     0000          .word   0,1,4,-1
    1745                    
    1746 00009f90           sp_shnp
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   46

    1747                    ;       for josh
    1748                    ;       move    *a6(POF_TURBO_MODE),a14,W
    1749                    ;       jrnz    sp_tnp
    1750 00009f90     0d3f          callr   do_we_hack_goalie
         00009fa0     00a0  
    1751 00009fb0     c800          jrc     hack_at_goalie
         00009fc0     00d3  
    1752 00009fd0     1421          dec     a1
    1753 00009fe0     ce07          jrn     sp_tnp
    1754 00009ff0     1420          dec     a0
    1755 0000a000     2fc1          srl     2,a1
    1756 0000a010     2fc0          srl     2,a0
    1757 0000a020     4801          cmp     a0,a1
    1758 0000a030     cb02          jrnz    sp_tnp
    1759 0000a040     0d3f          callr   signal_to_shoot
         0000a050     0b3b  
    1760 0000a060     aec0  sp_tnp  movb    *a6(POF_NUMBER),a0
         0000a070     0000  
    1761 0000a080     0d5f          calla   get_offense_mode
         0000a090 00000000! 
    1762 0000a0b0     0b41          cmpi    1,a1
         0000a0c0     fffe  
    1763 0000a0d0     cb20          jrnz    sptnp9
    1764 0000a0e0     b6c8          move    *a6(POF_OBJECT),a8,L
         0000a0f0     0280  
    1765 0000a100     b50e          move    *a8(OXPOS),a14,W
         0000a110     0150  
    1766 0000a120     1420          dec     a0
    1767 0000a130     2fc0          srl     2,a0
    1768 0000a140     ca01          jrz     sptnh
    1769 0000a150     03ae          neg     a14
    1770 0000a160     0b4e  sptnh   cmpi    -235,a14
         0000a170     00ea  
    1771 0000a180     c718          jrgt    sdb_1kn                 ;1 knee in non defensive zone
    1772 0000a190     1a40          movk    PM_BLOCK,a0
    1773 0000a1a0     b006          move    a0,*a6(POF_MODE),W
         0000a1b0     0210  
    1774 0000a1c0     0d3f          callr   take_player_control
         0000a1d0     045d  
    1775 0000a1e0     5600          clr     a0
    1776 0000a1f0     ac06          movb    a0,*a6(POF_BDIRECTION)
         0000a200     03d0  
    1777 0000a210     0d3f          callr   face_puck
         0000a220     fba9  
    1778                    ;       calla   set_down_block_script
    1779 0000a230     0d5f          calla   set_down_knees_script
         0000a240 00000000! 
    1780 0000a260     b700          move    *a8(ODT_DIR),a0,L
         0000a270     04b0  
    1781 0000a280     b701          move    *a8(ODT_VEL),a1,L
         0000a290     04d0  
    1782 0000a2a0     2be1          sra     1,a1
    1783 0000a2b0     0d5f          calla   set_obj_to_polar
         0000a2c0 00000000! 
    1784 0000a2e0     c080  sptnp9  jauc    SUCIDE
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   47

         0000a2f0 00000000! 
    1785 0000a310     1a40  sdb_1kn movk    PM_BLOCK,a0
    1786 0000a320     b006          move    a0,*a6(POF_MODE),W
         0000a330     0210  
    1787 0000a340     0d3f          callr   take_player_control
         0000a350     0445  
    1788 0000a360     5600          clr     a0
    1789 0000a370     ac06          movb    a0,*a6(POF_BDIRECTION)
         0000a380     03d0  
    1790 0000a390     0d3f          callr   face_puck
         0000a3a0     fb91  
    1791 0000a3b0     0d5f          calla   set_down_block_script
         0000a3c0 00000000! 
    1792 0000a3e0     b700          move    *a8(ODT_DIR),a0,L
         0000a3f0     04b0  
    1793 0000a400     b701          move    *a8(ODT_VEL),a1,L
         0000a410     04d0  
    1794 0000a420     2be1          sra     1,a1
    1795 0000a430     0d5f          calla   set_obj_to_polar
         0000a440 00000000! 
    1796 0000a460     c080          jauc    SUCIDE
         0000a470 00000000! 
    1797                    
    1798                    
    1799 0000a490           get_shoot_stuff
    1800 0000a490     1960          movk    11,a0
    1801 0000a4a0     0d5f          calla   predict_obj
         0000a4b0 00000000! 
    1802 0000a4d0     4c02          move    a0,a2
    1803 0000a4e0     4c23          move    a1,a3
    1804 0000a4f0     0d3f          callr   get_quick_shifted_shot_point
         0000a500     044c  
    1805 0000a510     0d5f          calla   find_dir_to_point_18
         0000a520 00000000! 
    1806 0000a540     4c0a          move    a0,a10                  ;a10 can hold us for now
    1807                    
    1808 0000a550     09e9          movi    pass_from_shoot,a9
         0000a560 0000dbd0' 
    1809 0000a580     09eb          movi    wrist_shot_button_release,a11
         0000a590 0000b490' 
    1810 0000a5b0     b4ce          move    *a6(POF_FLAGS),a14,W
         0000a5c0     0200  
    1811 0000a5d0     1fae          btst    B_PF_GOALIE,a14
    1812 0000a5e0     cb21          jrnz    gss_goalie
    1813 0000a5f0     1fee          btst    B_PF_HUMAN,a14
    1814 0000a600     ca0d          jrz     gss_drone
    1815 0000a610     b4ce          move    *a6(POF_TURBO_MODE),a14,W
         0000a620     0580  
    1816 0000a630     cb0a          jrnz    gss_trb
    1817 0000a640     0b4a          cmpi    1,a10
         0000a650     fffe  
    1818 0000a660     ca1e          jrz     gss_wd                  ;wrist shot down
    1819 0000a670     0b4a          cmpi    5,a10
         0000a680     fffa  
    1820 0000a690     ca1f          jrz     gss_wu                  ;backhand shot up
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   48

    1821 0000a6a0     09ea          movi    set_wrist_shot_script,a10
         0000a6b0 00000000! 
    1822 0000a6d0     0960          rets
    1823 0000a6e0           gss_drone
    1824 0000a6e0     b4ce  gss_trb move    *a6(POF_HOT_VALUE),a14,W
         0000a6f0     0b70  
    1825 0000a700     0b4e          cmpi    18,a14
         0000a710     ffed  
    1826 0000a720     ca0e          jrz     gs_gbgb
    1827 0000a730     0b4a          cmpi    1,a10
         0000a740     fffe  
    1828 0000a750     ca17          jrz     gss_sd                  ;slap shot down
    1829 0000a760     0b4a          cmpi    5,a10
         0000a770     fffa  
    1830 0000a780     ca1b          jrz     gss_su                  ;turbo backhand shot up
    1831 0000a790     09eb          movi    turbo_shoot_button_release,a11
         0000a7a0 0000b3c0' 
    1832 0000a7c0     09ea          movi    set_turbo_shoot_script,a10
         0000a7d0 00000000! 
    1833 0000a7f0     0960  gss_nt  rets
    1834 0000a800           gss_goalie
    1835 0000a800     0960          rets
    1836                    
    1837                    
    1838 0000a810     09ea  gs_gbgb movi    set_bscaleshoot_script,a10      ;for just about on fire, grow big
         0000a820 00000000! 
    1839 0000a840     0960          rets
    1840                    
    1841 0000a850     09ea  gss_wd  movi    set_wrist_shot_down_script,a10
         0000a860 00000000! 
    1842 0000a880     0960          rets
    1843 0000a890     09ea  gss_wu  movi    set_backhand_shot_up_script,a10
         0000a8a0 00000000! 
    1844 0000a8c0     0960          rets
    1845 0000a8d0     09eb  gss_sd  movi    turbo_shoot_button_release,a11
         0000a8e0 0000b3c0' 
    1846 0000a900     09ea          movi    set_slap_shot_down_script,a10
         0000a910 00000000! 
    1847 0000a930     0960          rets
    1848 0000a940     09eb  gss_su  movi    turbo_shoot_button_release,a11
         0000a950 0000b3c0' 
    1849 0000a970     09ea          movi    set_turbo_back_shot_up_script,a10
         0000a980 00000000! 
    1850 0000a9a0     0960          rets
    1851                    
    1852 0000a9b0           do_we_hack_goalie
    1853 0000a9b0     098f          mmtm    sp,a1
         0000a9c0     4000  
    1854 0000a9d0     05ae          move    @PUCK_CONTROL,a14,W
         0000a9e0 00000000! 
    1855 0000aa00     0b4e          cmpi    4,a14
         0000aa10     fffb  
    1856 0000aa20     ca03          jrz     dwhg2
    1857 0000aa30     0b4e          cmpi    8,a14
         0000aa40     fff7  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   49

    1858 0000aa50     cb26          jrnz    dwhgn
    1859 0000aa60     aec1  dwhg2   movb    *a6(POF_NUMBER),a1
         0000aa70     0000  
    1860 0000aa80     1421          dec     a1
    1861 0000aa90     142e          dec     a14
    1862 0000aaa0     2bce          sra     2,a14
    1863 0000aab0     2bc1          sra     2,a1
    1864 0000aac0     482e          cmp     a1,a14
    1865 0000aad0     ca1e          jrz     dwhgn
    1866 0000aae0     102e          inc     a14
    1867 0000aaf0     244e          sll     2,a14
    1868 0000ab00                   GBLOCK  a14,a1
    1869 0000ab50     b42e          move    *a1(POF_FLAGS),a14,W
         0000ab60     0200  
    1870 0000ab70     1fae          btst    B_PF_GOALIE,a14
    1871 0000ab80     ca13          jrz     dwhgn
    1872 0000ab90     b42e          move    *a1(POF_MODE),a14,W
         0000aba0     0210  
    1873 0000abb0     0b4e          cmpi    PM_GSMOTHER,a14
         0000abc0     fff1  
    1874 0000abd0     cb0e          jrnz    dwhgn
    1875 0000abe0     aece          movb    *a6(POF_NUMBER),a14
         0000abf0     0000  
    1876 0000ac00     248e          sll     4,a14
    1877 0000ac10     0b0e          addi    POF_D_1P-16,a14
         0000ac20     05f0  
    1878 0000ac30     402e          add     a1,a14
    1879 0000ac40     85ce          move    *a14,a14,W              ;distance
    1880 0000ac50     0b4e          cmpi    100,a14
         0000ac60     ff9b  
    1881 0000ac70     c904          jrhs    dwhgn
    1882 0000ac80     09af  dwhgy   mmfm    sp,a1
         0000ac90     0002  
    1883 0000aca0     0de0          setc
    1884 0000acb0     0960          rets
    1885 0000acc0     09af  dwhgn   mmfm    sp,a1
         0000acd0     0002  
    1886 0000ace0     0320          clrc
    1887 0000acf0     0960          rets
    1888                    
    1889 0000ad00           hack_at_goalie
    1890 0000ad00     05ae          move    @PUCK_CONTROL,a14,W
         0000ad10 00000000! 
    1891 0000ad30     b6c8          move    *a6(POF_OBJECT),a8,L
         0000ad40     0280  
    1892 0000ad50                   GBLOCK  a14,a14
    1893 0000ad90     b7ce          move    *a14(POF_OBJECT),a14,L
         0000ada0     0280  
    1894 0000adb0     b7c0          move    *a14(OXVAL),a0,L
         0000adc0     0140  
    1895 0000add0     b7c1          move    *a14(OZVAL),a1,L
         0000ade0     0180  
    1896 0000adf0     b702          move    *a8(OXVAL),a2,L
         0000ae00     0140  
    1897 0000ae10     b703          move    *a8(OZVAL),a3,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   50

         0000ae20     0180  
    1898 0000ae30     0d5f          calla   find_dir_to_point_18
         0000ae40 00000000! 
    1899 0000ae60     ac06          movb    a0,*a6(POF_DIRECTION)
         0000ae70     0390  
    1900 0000ae80     18ae          movk    PM_STEAL,a14
    1901 0000ae90     b1c6          move    a14,*a6(POF_MODE),W
         0000aea0     0210  
    1902 0000aeb0     0d5f          calla   take_player_control
         0000aec0 0000e7b0' 
    1903 0000aee0     0d5f          calla   set_whack_goalie_script
         0000aef0 00000000! 
    1904 0000af10     c080          jauc    SUCIDE
         0000af20 00000000! 
    1905                    
    1906 0000af40           shot_watch
    1907 0000af40     b769          move    *a11(POF_S_SHOT),a9,L           ;pup shot change here
         0000af50     0140  
    1908 0000af60     b56e          move    *a11(POF_PUP_FLAGS),a14,W
         0000af70     0c50  
    1909 0000af80     1f0e          btst    B_PUP_SHOOT,a14
    1910 0000af90     ca03          jrz     npsh5
    1911 0000afa0     09e9          movi    shoot_data_powered,a9
         0000afb0 00000000! 
    1912 0000afd0     b721  npsh5   move    *a9(PS_SH_SHOOT0_SPEED),a1,L
         0000afe0     0000  
    1913 0000aff0     b72a          move    *a9(PS_SH_SHOOT_SPEED),a10,L
         0000b000     0020  
    1914 0000b010     af29          movb    *a9(PS_SH_SHOOT_MT),a9
         0000b020     00a0  
    1915 0000b030     b56e          move    *a11(POF_TURBO_MODE),a14,W
         0000b040     0580  
    1916 0000b050     ca0f          jrz     sswa
    1917 0000b060     b769          move    *a11(POF_S_SHOT),a9,L           ;pup shot change here
         0000b070     0140  
    1918 0000b080     b56e          move    *a11(POF_PUP_FLAGS),a14,W
         0000b090     0c50  
    1919 0000b0a0     1f0e          btst    B_PUP_SHOOT,a14
    1920 0000b0b0     ca03          jrz     npsh4
    1921 0000b0c0     09e9          movi    shoot_data_powered,a9
         0000b0d0 00000000! 
    1922 0000b0f0     b721  npsh4   move    *a9(PS_SH_SHOOT0_TURBO),a1,L
         0000b100     0040  
    1923 0000b110     b72a          move    *a9(PS_SH_SHOOT_TURBO),a10,L
         0000b120     0060  
    1924 0000b130     af29          movb    *a9(PS_SH_SHOOTT_MT),a9
         0000b140     00a8  
    1925 0000b150     b22b  sswa    move    a1,*a11(POF_SHOOT_CURRENT),L
         0000b160     0480  
    1926 0000b170           ssw_0   SLEEP   1
    1927 0000b1b0     af6e          movb    *a11(POF_NUMBER),a14
         0000b1c0     0000  
    1928 0000b1d0     05a0          move    @PUCK_CONTROL,a0,W
         0000b1e0 00000000! 
    1929 0000b200     49c0          cmp     a14,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   51

    1930 0000b210     cb17          jrnz    sssw9
    1931 0000b220     b761          move    *a11(POF_SHOOT_CURRENT),a1,L
         0000b230     0480  
    1932 0000b240     4d42          move    a10,a2
    1933 0000b250     4d23          move    a9,a3
    1934 0000b260     0d5f          calla   move_to_speed_x
         0000b270 00000000! 
    1935 0000b290     b22b          move    a1,*a11(POF_SHOOT_CURRENT),L
         0000b2a0     0480  
    1936 0000b2b0     b56e  ssw_1   move    *a11(POF_FLAGS),a14,W
         0000b2c0     0200  
    1937 0000b2d0     1fee          btst    B_PF_HUMAN,a14
    1938 0000b2e0     cae8          jrz     ssw_0
    1939 0000b2f0     b560          move    *a11(POF_BUTTONS),a0,W
         0000b300     0380  
    1940 0000b310     1fe0          btst    0,a0
    1941 0000b320     cbe4          jrnz    ssw_0
    1942 0000b330     b760          move    *a11(POF_SHOT_RELEASE),a0,L
         0000b340     04e0  
    1943 0000b350     4d66          move    a11,a6
    1944 0000b360     b6c8          move    *a6(POF_OBJECT),a8,L
         0000b370     0280  
    1945 0000b380     0160          jump    a0
    1946 0000b390     c080  sssw9   jauc    SUCIDE
         0000b3a0 00000000! 
    1947                    
    1948 0000b3c0           turbo_shoot_button_release
    1949                    ;;;;    move    @WAVEIRQS,a1,L
    1950                    ;;;;    move    *a6(POF_SHOT_FAKE),a14,L
    1951                    ;;;;    sub     a1,a14
    1952                    ;;;;    neg     a14
    1953                    ;;;;    cmpi    30,a14
    1954                    ;;;;    jrls    tsrd
    1955                    ;;;;    move    *a6(POF_SHOT_START),a14,L
    1956                    ;;;;    sub     a14,a1
    1957                    ;;;;    cmpi    5,a1
    1958                    ;;;;    jrls    tsre
    1959 0000b3c0     0d5f  tsrd    calla   set_turbo_shoot_early_script
         0000b3d0 00000000! 
    1960 0000b3f0     c080          jauc    SUCIDE
         0000b400 00000000! 
    1961 0000b420     b3c6  tsre    move    a14,*a6(POF_SHOT_FAKE),L
         0000b430     0400  
    1962 0000b440     0d3f          callr   do_end_of_shoot_stuff
         0000b450     01da  
    1963 0000b460     c080          jauc    SUCIDE
         0000b470 00000000! 
    1964                    
    1965 0000b490           wrist_shot_button_release
    1966                    ;;;;    move    @WAVEIRQS,a1,L
    1967                    ;;;;    move    *a6(POF_SHOT_FAKE),a14,L
    1968                    ;;;;    sub     a1,a14
    1969                    ;;;;    neg     a14
    1970                    ;;;;    cmpi    30,a14
    1971                    ;;;;    jrls    wsrd
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   52

    1972                    ;;;;    move    *a6(POF_SHOT_START),a14,L
    1973                    ;;;;    sub     a14,a1
    1974                    ;;;;    cmpi    5,a1
    1975                    ;;;;    jrls    wsre
    1976 0000b490     c080  wsrd    jauc    SUCIDE
         0000b4a0 00000000! 
    1977 0000b4c0     b3c6  wsre    move    a14,*a6(POF_SHOT_FAKE),L
         0000b4d0     0400  
    1978 0000b4e0     0d3f          callr   do_end_of_shoot_stuff
         0000b4f0     01d0  
    1979 0000b500     c080          jauc    SUCIDE
         0000b510 00000000! 
    1980                    
    1981 0000b530           shoot_button_release
    1982                    ;;;;    move    @WAVEIRQS,a1,L
    1983                    ;;;;    move    *a6(POF_SHOT_FAKE),a14,L
    1984                    ;;;;    sub     a1,a14
    1985                    ;;;;    neg     a14
    1986                    ;;;;    cmpi    30,a14
    1987                    ;;;;    jrls    srd
    1988                    ;;;;    move    *a6(POF_SHOT_START),a14,L
    1989                    ;;;;    sub     a14,a1
    1990                    ;;;;    cmpi    5,a1
    1991                    ;;;;    jrls    sre
    1992                    ;;;;    jauc    set_swing_script
    1993 0000b530     0d5f  srd     calla   set_shoot_early_script
         0000b540 00000000! 
    1994 0000b560     c080          jauc    SUCIDE
         0000b570 00000000! 
    1995 0000b590     b3c6  sre     move    a14,*a6(POF_SHOT_FAKE),L
         0000b5a0     0400  
    1996 0000b5b0     0d3f          callr   do_end_of_shoot_stuff
         0000b5c0     01c3  
    1997 0000b5d0           no_shoot_release
    1998 0000b5d0     c080          jauc    SUCIDE
         0000b5e0 00000000! 
    1999                    
    2000 0000b600           onetime_script_done_fff1
    2001 0000b600     b4ce          move    *a6(POF_FLAGS),a14,W
         0000b610     0200  
    2002 0000b620     1e4e          btst    B_PF_OTD,a14
    2003 0000b630     cb00          jrnz    otsd1
         0000b640     00b7  
    2004 0000b650     05a1          move    @PUCK_CONTROL,a1,W
         0000b660 00000000! 
    2005 0000b680     aec0          movb    *a6(POF_NUMBER),a0
         0000b690     0000  
    2006 0000b6a0     4801          cmp     a0,a1
    2007 0000b6b0     cb00          jrnz    otsd1
         0000b6c0     00af  
    2008 0000b6d0     0d3f          callr   does_player_abort_ot
         0000b6e0     00ae  
    2009 0000b6f0     c800          jrc     shsr_abort
         0000b700     016d  
    2010 0000b710     bb08          move    *a8(ODT_DIR),*a8(ODT_SAVEDIR),L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   53

         0000b720     04b0  
         0000b730     0580  
    2011 0000b740     bb08          move    *a8(ODT_VEL),*a8(ODT_SAVEVEL),L
         0000b750     04d0  
         0000b760     0560  
    2012 0000b770     0d3f          callr   otd_subb
         0000b780     0166  
    2013 0000b790     0d3f          callr   get_shot_point_ot
         0000b7a0     0344  
    2014 0000b7b0     b6ce          move    *a6(POF_S_SHOT),a14,L                   ;no change needed for pup shot
         0000b7c0     0140  
    2015 0000b7d0     b7ce          move    *a14(PS_SH_SHOT_CHANGE),a14,L
         0000b7e0     00b0  
    2016 0000b7f0     4fc6          move    a14,b6
    2017 0000b800     b6ca          move    *a6(POF_S_SHOT),a10,L                   ;no change needed for pup shot
         0000b810     0140  
    2018 0000b820     b74a          move    *a10(PS_SH_MAX_YVEL),a10,L
         0000b830     0080  
    2019 0000b840     0d5f          calla   wrist_shot_sound
         0000b850 00000000! 
    2020 0000b870     0d5f          calla   record_shot_a6
         0000b880 0000d950' 
    2021 0000b8a0     0d5f          calla   put_puck_outside_netp
         0000b8b0 00000000! 
    2022 0000b8d0     0d5f          calla   compute_shot_tip
         0000b8e0 00000000! 
    2023 0000b900     5642          clr     a2
    2024 0000b910     0d3f          callr   flame_shoot_check
         0000b920     01f3  
    2025 0000b930     b6c7          move    *a6(POF_S_SHOT),a7,L            ;pup shot change here
         0000b940     0140  
    2026 0000b950     b6e7          move    *a7(PS_SH_SHOOT_SPEED),a7,L
         0000b960     0020  
    2027 0000b970     c080          jauc    send_puck_to_point_xyz_asamev
         0000b980 00000000! 
    2028                    
    2029 0000b9a0           onetime_script_done_ff1
    2030 0000b9a0     b4ce          move    *a6(POF_FLAGS),a14,W
         0000b9b0     0200  
    2031 0000b9c0     1e4e          btst    B_PF_OTD,a14
    2032 0000b9d0     cb7e          jrnz    otsd1
    2033 0000b9e0     05a1          move    @PUCK_CONTROL,a1,W
         0000b9f0 00000000! 
    2034 0000ba10     aec0          movb    *a6(POF_NUMBER),a0
         0000ba20     0000  
    2035 0000ba30     4801          cmp     a0,a1
    2036 0000ba40     cb77          jrnz    otsd1
    2037 0000ba50     0d3f          callr   does_player_abort_ot
         0000ba60     0076  
    2038 0000ba70     c800          jrc     shsr_abort
         0000ba80     0135  
    2039 0000ba90     0d3f          callr   otd_subaa
         0000baa0     00af  
    2040 0000bab0     05a1          move    @PUCK_CONTROL,a1,W
         0000bac0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   54

    2041 0000bae0     aec0          movb    *a6(POF_NUMBER),a0
         0000baf0     0000  
    2042 0000bb00     4801          cmp     a0,a1
    2043 0000bb10     cb6a          jrnz    otsd1
    2044 0000bb20     0b44          cmpi    60,a4
         0000bb30     ffc3  
    2045 0000bb40     c767          jrgt    otsd1
    2046 0000bb50     0d3f          callr   otd_subb
         0000bb60     0128  
    2047 0000bb70     0d3f          callr   get_shot_point_ot
         0000bb80     0306  
    2048 0000bb90     b6ce          move    *a6(POF_S_SHOT),a14,L                   ;no change needed for pup shot
         0000bba0     0140  
    2049 0000bbb0     b7ce          move    *a14(PS_SH_SHOT_CHANGE),a14,L
         0000bbc0     00b0  
    2050 0000bbd0     4fc6          move    a14,b6
    2051 0000bbe0     b6ca          move    *a6(POF_S_SHOT),a10,L                   ;no change needed for pup shot
         0000bbf0     0140  
    2052 0000bc00     b74a          move    *a10(PS_SH_MAX_YVEL),a10,L
         0000bc10     0080  
    2053 0000bc20     0d5f          calla   wrist_shot_sound
         0000bc30 00000000! 
    2054 0000bc50     0d5f          calla   record_shot_a6
         0000bc60 0000d950' 
    2055 0000bc80     0d5f          calla   put_puck_outside_netp
         0000bc90 00000000! 
    2056 0000bcb0     0d5f          calla   compute_shot_tip
         0000bcc0 00000000! 
    2057 0000bce0     5642          clr     a2
    2058 0000bcf0     0d3f          callr   flame_shoot_check
         0000bd00     01b5  
    2059 0000bd10     b6c7          move    *a6(POF_S_SHOT),a7,L            ;pup shot change here
         0000bd20     0140  
    2060 0000bd30     b6e7          move    *a7(PS_SH_SHOOT_SPEED),a7,L
         0000bd40     0020  
    2061 0000bd50     c080          jauc    send_puck_to_point_xyz_asamev
         0000bd60 00000000! 
    2062                    
    2063 0000bd80           onetime_script_done_1
    2064 0000bd80     b4ce          move    *a6(POF_FLAGS),a14,W
         0000bd90     0200  
    2065 0000bda0     1e4e          btst    B_PF_OTD,a14
    2066 0000bdb0     cb40          jrnz    otsd1
    2067 0000bdc0     05a1          move    @PUCK_CONTROL,a1,W
         0000bdd0 00000000! 
    2068 0000bdf0     aec0          movb    *a6(POF_NUMBER),a0
         0000be00     0000  
    2069 0000be10     4801          cmp     a0,a1
    2070 0000be20     cb39          jrnz    otsd1
    2071                    
    2072                    ;  for marty
    2073 0000be30     0d3f          callr   does_player_abort_ot
         0000be40     0038  
    2074 0000be50     c800          jrc     shsr_abort
         0000be60     00f7  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   55

    2075                    
    2076 0000be70     0d3f          callr   otd_subaa
         0000be80     0071  
    2077 0000be90     05a1          move    @PUCK_CONTROL,a1,W
         0000bea0 00000000! 
    2078 0000bec0     aec0          movb    *a6(POF_NUMBER),a0
         0000bed0     0000  
    2079 0000bee0     4801          cmp     a0,a1
    2080 0000bef0     cb2c          jrnz    otsd1
    2081 0000bf00     0b44          cmpi    66,a4                   ;60
         0000bf10     ffbd  
    2082 0000bf20     c729          jrgt    otsd1
    2083 0000bf30     0d3f          callr   otd_subb
         0000bf40     00ea  
    2084 0000bf50     b6c7          move    *a6(POF_S_SHOT),a7,L            ;pup shot change here
         0000bf60     0140  
    2085 0000bf70     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         0000bf80     0c50  
    2086 0000bf90     1f0e          btst    B_PUP_SHOOT,a14
    2087 0000bfa0     ca03          jrz     npsh3
    2088 0000bfb0     09e7          movi    shoot_data_powered,a7
         0000bfc0 00000000! 
    2089 0000bfe0     b6e7  npsh3   move    *a7(PS_SH_SHOOT_SPEED),a7,L
         0000bff0     0020  
    2090                    ;       move    *a6(POF_SHOOT_CURRENT),a7,L
    2091 0000c000     0d3f          callr   get_shot_point_ot
         0000c010     02bd  
    2092 0000c020     b6ce          move    *a6(POF_S_SHOT),a14,L                   ;no change needed for pup shot
         0000c030     0140  
    2093 0000c040     b7ce          move    *a14(PS_SH_SHOT_CHANGE),a14,L
         0000c050     00b0  
    2094 0000c060     4fc6          move    a14,b6
    2095 0000c070     b6ca          move    *a6(POF_S_SHOT),a10,L                   ;no change needed for pup shot
         0000c080     0140  
    2096 0000c090     b74a          move    *a10(PS_SH_MAX_YVEL),a10,L
         0000c0a0     0080  
    2097 0000c0b0     0d5f          calla   wrist_shot_sound
         0000c0c0 00000000! 
    2098 0000c0e0     0d5f          calla   record_shot_a6
         0000c0f0 0000d950' 
    2099 0000c110     0d5f          calla   put_puck_outside_netp
         0000c120 00000000! 
    2100 0000c140     0d5f          calla   compute_shot_onetime
         0000c150 00000000! 
    2101 0000c170     0d3f          callr   flame_shoot_check
         0000c180     016d  
    2102 0000c190     c080          jauc    send_puck_to_point_xyz_v
         0000c1a0 00000000! 
    2103 0000c1c0     0960  otsd1   rets
    2104                    
    2105 0000c1d0           does_player_abort_ot
    2106 0000c1d0     098f          mmtm    sp,a0
         0000c1e0     8000  
    2107 0000c1f0     b4ce          move    *a6(POF_FLAGS),a14,W
         0000c200     0200  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   56

    2108 0000c210     1fee          btst    B_PF_HUMAN,a14
    2109 0000c220     ca2f          jrz     dspan
    2110 0000c230     b4ce          move    *a6(POF_BUTTONS),a14,W
         0000c240     0380  
    2111 0000c250     1fee          btst    0,a14
    2112 0000c260     cb2b          jrnz    dspan   ;he is holding down
    2113 0000c270     aec0          movb    *a6(POF_NUMBER),a0
         0000c280     0000  
    2114 0000c290     05a1          move    @PUCK_CONTROL,a1,W
         0000c2a0 00000000! 
    2115 0000c2c0     4801          cmp     a0,a1
    2116 0000c2d0     cb24          jrnz    dspan           ;he doesn't have it, no abort
    2117 0000c2e0     0d5f          calla   get_players_puck_point_o
         0000c2f0 00000000! 
    2118 0000c310     0b20          addi    [0,08000h],a0           ;half
         0000c320 00008000  
    2119 0000c340     2a00          sra     16,a0
    2120 0000c350     2a01          sra     16,a1
    2121 0000c360     07a9          move    @PUCK_OBJECT,a9,L
         0000c370 00000000! 
    2122 0000c390     b722          move    *a9(OXVAL),a2,L
         0000c3a0     0140  
    2123 0000c3b0     0b22          addi    [0,08000h],a2
         0000c3c0 00008000  
    2124 0000c3e0     2a02          sra     16,a2
    2125 0000c3f0     b523          move    *a9(OZPOS),a3,W
         0000c400     0190  
    2126 0000c410     0d5f          calla   find_dist_quick
         0000c420 00000000! 
    2127 0000c440     0b44          cmpi    60,a4
         0000c450     ffc3  
    2128 0000c460     c30b          jrhi    dspan                   ;he is too far, no abort
    2129 0000c470     b50e          move    *a8(OXPOS),a14,W
         0000c480     0150  
    2130 0000c490     aec0          movb    *a6(POF_NUMBER),a0
         0000c4a0     0000  
    2131 0000c4b0     1420          dec     a0
    2132 0000c4c0     2fc0          srl     2,a0
    2133 0000c4d0     ca01          jrz     dpa1
    2134 0000c4e0     03ae          neg     a14
    2135 0000c4f0     0b4e  dpa1    cmpi    233,a14
         0000c500     ff16  
    2136 0000c510     c604          jrle    dspay   ;he is in defensive zone, allow abort
    2137 0000c520     0320  dspan   clrc
    2138 0000c530     09af          mmfm    sp,a0
         0000c540     0001  
    2139 0000c550     0960          rets
    2140 0000c560     0de0  dspay   setc
    2141 0000c570     09af          mmfm    sp,a0
         0000c580     0001  
    2142 0000c590     0960          rets
    2143                    
    2144 0000c5a0           otd_subaa
    2145 0000c5a0     c006          jruc    otsa
    2146 0000c5b0           otd_suba
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   57

    2147 0000c5b0     0d3f          callr   otsa
         0000c5c0     0004  
    2148 0000c5d0     0b44          cmpi    60,a4
         0000c5e0     ffc3  
    2149 0000c5f0     c77e          jrgt    shsr_abort
    2150 0000c600     0960          rets
    2151 0000c610     05a1  otsa    move    @PUCK_CONTROL,a1,W
         0000c620 00000000! 
    2152 0000c640     4801          cmp     a0,a1
    2153 0000c650     cb78          jrnz    shsr_abort
    2154 0000c660     0d5f          calla   get_players_puck_point_o
         0000c670 00000000! 
    2155 0000c690     0b20          addi    [0,08000h],a0           ;half
         0000c6a0 00008000  
    2156 0000c6c0     2a00          sra     16,a0
    2157 0000c6d0     2a01          sra     16,a1
    2158 0000c6e0     07a9          move    @PUCK_OBJECT,a9,L
         0000c6f0 00000000! 
    2159                    
    2160 0000c710     b722          move    *a9(OXVAL),a2,L
         0000c720     0140  
    2161 0000c730     0b22          addi    [0,08000h],a2
         0000c740 00008000  
    2162 0000c760     2a02          sra     16,a2
    2163                    ;       move    *a9(OXPOS),a2,W         ;half
    2164                    
    2165 0000c770     b523          move    *a9(OZPOS),a3,W
         0000c780     0190  
    2166 0000c790     0d5f          calla   find_dist_quick
         0000c7a0 00000000! 
    2167 0000c7c0     0960          rets
    2168                    
    2169 0000c7d0           shoot_script_done_1
    2170 0000c7d0     198e          movk    PUM_SHOT,a14
    2171 0000c7e0     c001          jruc    pppd1
    2172 0000c7f0           turbo_shoot_script_done_1
    2173 0000c7f0     19ae          movk    PUM_SSHOT,a14
    2174 0000c800     05a1  pppd1   move    @PUCK_CONTROL,a1,W
         0000c810 00000000! 
    2175 0000c830     4801          cmp     a0,a1
    2176 0000c840     cb59          jrnz    shsr_abort
    2177                    
    2178 0000c850     b4c1          MOVE    *A6(POF_SHOT_ATTEMPTS),A1,W
         0000c860     0ba0  
    2179 0000c870     1021          INC     A1
    2180 0000c880     b026          MOVE    A1,*A6(POF_SHOT_ATTEMPTS),W
         0000c890     0ba0  
    2181 0000c8a0     0581          MOVE    A1,@SHOT_ATTEMPTS,W
         0000c8b0 00000000! 
    2182 0000c8d0     07c0          MOVE    @WAVEIRQS,@SHOTIRQ,L
         0000c8e0 00000000! 
         0000c900 00000000! 
    2183                    
    2184 0000c920     0d5f          calla   set_safe_puck_mode_a14
         0000c930 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   58

    2185 0000c950     5621          clr     a1
    2186 0000c960     0581          move    a1,@PUCK_INTENDED,W
         0000c970 00000000! 
    2187 0000c990     05c0          move    @PUCK_CONTROL,@PUCK_LAST_CONTROL,W
         0000c9a0 00000000! 
         0000c9c0 00000000! 
    2188 0000c9e0     0581          move    a1,@PUCK_CONTROL,W
         0000c9f0 00000000! 
    2189 0000ca10     0d5f          calla   new_puck_control
         0000ca20 00000000! 
    2190                    ;       movi    -1,a1           ;40     ;after 2/3 second,
    2191 0000ca40     09c1          movi    50,a1
         0000ca50     0032  
    2192 0000ca60     0581          move    a1,@PUCK_OPEN_CONTROL_TIME,W    ;let us pick it up again
         0000ca70 00000000! 
    2193 0000ca90     0581          move    a1,@PUCK_OPEN_LAST_TIME,W       ;let us pick it up again
         0000caa0 00000000! 
    2194 0000cac0     b6c7          move    *a6(POF_SHOOT_CURRENT),a7,L
         0000cad0     0480  
    2195 0000cae0     0d3f          callr   get_shot_point_nt
         0000caf0     020f  
    2196 0000cb00     b6ce          move    *a6(POF_S_SHOT),a14,L           ;no change needed for pup shot
         0000cb10     0140  
    2197 0000cb20     b7ce          move    *a14(PS_SH_SHOT_CHANGE),a14,L
         0000cb30     00b0  
    2198 0000cb40     4fc6          move    a14,b6
    2199 0000cb50     b6ca          move    *a6(POF_S_SHOT),a10,L           ;no change needed for pup shot
         0000cb60     0140  
    2200 0000cb70     b74a          move    *a10(PS_SH_MAX_YVEL),a10,L
         0000cb80     0080  
    2201 0000cb90     0d5f          calla   wrist_shot_sound
         0000cba0 00000000! 
    2202 0000cbc0     0d5f          calla   spx_shot2
         0000cbd0 00000000! 
    2203 0000cbf0     0d5f          calla   record_shot_a6
         0000cc00 0000d950' 
    2204 0000cc20     0d5f          calla   put_puck_outside_netp
         0000cc30 00000000! 
    2205 0000cc50     0d5f          calla   compute_shot_regular
         0000cc60 00000000! 
    2206                            ;do not trash a0,a1,a7,a10 or b6
    2207 0000cc80     b4ce          move    *a6(POF_SAFETY_WARNING),a14,W
         0000cc90     0a60  
    2208 0000cca0     ca0e          jrz     dnttl
    2209 0000ccb0     4c0e          move    a0,a14
    2210 0000ccc0     038e          abs     a14
    2211 0000ccd0     0d0e          subi    [20,0],a14      ;40 easier
         0000cce0 ffebffff  
    2212 0000cd00     4c00          move    a0,a0
    2213 0000cd10     c101          jrp     dntt2
    2214 0000cd20     03ae          neg     a14
    2215 0000cd30     4dc0  dntt2   move    a14,a0
    2216 0000cd40     4cee          move    a7,a14
    2217 0000cd50     2bee          sra     1,a14
    2218 0000cd60     45c7          sub     a14,a7
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   59

    2219 0000cd70     2bee          sra     1,a14
    2220 0000cd80     45c7          sub     a14,a7
    2221 0000cd90     0d3f  dnttl   callr   flame_shoot_check
         0000cda0     00ab  
    2222 0000cdb0     c080          jauc    send_puck_to_point_xyz_v
         0000cdc0 00000000! 
    2223 0000cde0           shsr_abort
    2224 0000cde0     c041          jruc    do_end_of_shoot_stuff
    2225                    
    2226 0000cdf0           otd_subb
    2227 0000cdf0     19ae          movk    PUM_SSHOT,a14
    2228 0000ce00     0d5f          calla   set_safe_puck_mode_a14
         0000ce10 00000000! 
    2229 0000ce30     5621          clr     a1
    2230 0000ce40     0581          move    a1,@PUCK_INTENDED,W
         0000ce50 00000000! 
    2231 0000ce70     05c0          move    @PUCK_CONTROL,@PUCK_LAST_CONTROL,W
         0000ce80 00000000! 
         0000cea0 00000000! 
    2232 0000cec0     0581          move    a1,@PUCK_CONTROL,W
         0000ced0 00000000! 
    2233 0000cef0     0d5f          calla   new_puck_control
         0000cf00 00000000! 
    2234 0000cf20     09c1          movi    50,a1
         0000cf30     0032  
    2235 0000cf40     0581          move    a1,@PUCK_OPEN_CONTROL_TIME,W    ;let us pick it up again
         0000cf50 00000000! 
    2236 0000cf70     0581          move    a1,@PUCK_OPEN_LAST_TIME,W       ;let us pick it up again
         0000cf80 00000000! 
    2237 0000cfa0     09c0          movi    PM_SHOOT,a0             ;take us out of one timer mode
         0000cfb0     0003  
    2238 0000cfc0     b006          move    a0,*a6(POF_MODE),W
         0000cfd0     0210  
    2239 0000cfe0     09ee          movi    DUMDIE,a14
         0000cff0 00000000! 
    2240 0000d010     b3c6          move    a14,*a6(POF_SHOT_PASS),L
         0000d020     0500  
    2241 0000d030     b700          move    *a8(ODT_SAVEDIR),a0,L
         0000d040     0580  
    2242 0000d050     b701          move    *a8(ODT_SAVEVEL),a1,L
         0000d060     0560  
    2243 0000d070     c080          jauc    set_obj_to_polar
         0000d080 00000000! 
    2244                    
    2245                    
    2246 0000d0a0           A_SCRIPT_DONE
    2247 0000d0a0     b706          MOVE    *A8(ODT_PBK),A6,L                       ;PLAYER BLOCK
         0000d0b0     0530  
    2248 0000d0c0     aec0          MOVB    *A6(POF_NUMBER),A0                      ;PLAYER NUMBER
         0000d0d0     0000  
    2249 0000d0e0     0d3f          callr   give_player_control
         0000d0f0     0139  
    2250 0000d100     5600          clr     a0
    2251 0000d110     b006          move    a0,*a6(POF_MODE),W
         0000d120     0210  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   60

    2252 0000d130     0960          rets
    2253                    
    2254 0000d140           onetime_script_done_2
    2255 0000d140     05a1          move    @PUCK_CONTROL,a1,W
         0000d150 00000000! 
    2256 0000d170     4820          cmp     a1,a0
    2257 0000d180     cb07          jrnz    osd21
    2258 0000d190     5621          clr     a1
    2259 0000d1a0     0581          move    a1,@PUCK_CONTROL,W
         0000d1b0 00000000! 
    2260 0000d1d0     0d5f          calla   new_puck_control
         0000d1e0 00000000! 
    2261 0000d200           osd21
    2262 0000d200           pass_script_done_2
    2263                    ;turbo_pass_script_done_2
    2264 0000d200           turbo_shoot_script_done_2
    2265 0000d200           shoot_script_done_2
    2266 0000d200           do_end_of_shoot_stuff
    2267 0000d200     aec0          movb    *a6(POF_NUMBER),a0
         0000d210     0000  
    2268 0000d220     2500          sll     8,a0
    2269 0000d230     0b00          addi    PIDOF_WATCH_SHOOT,a0
         0000d240     0001  
    2270 0000d250     0d5f          calla   KILLPROC_ALL                            ;kill switch watch process
         0000d260 00000000! 
    2271 0000d280     aec0          movb    *a6(POF_NUMBER),a0
         0000d290     0000  
    2272 0000d2a0     2500          sll     8,a0
    2273 0000d2b0     0b00          addi    PIDOF_WATCH_PASS,a0
         0000d2c0     0002  
    2274 0000d2d0     0d5f          calla   KILLPROC_ALL                            ;kill switch watch process
         0000d2e0 00000000! 
    2275 0000d300           non_shoot_script_done
    2276 0000d300     0d3f          callr   give_player_control
         0000d310     0117  
    2277 0000d320     5600          clr     a0
    2278 0000d330     b006          move    a0,*a6(POF_MODE),W
         0000d340     0210  
    2279 0000d350     0960          rets
    2280                    
    2281                    
    2282 0000d360     19c1  sp_ot   movk    14,a1                   ;one timer
    2283 0000d370     0d5f          calla   set_safe_puck_mode_a1
         0000d380 00000000! 
    2284 0000d3a0     5621          clr     a1
    2285 0000d3b0     0581          move    a1,@PUCK_INTENDED,W
         0000d3c0 00000000! 
    2286 0000d3e0     05c0          move    @PUCK_CONTROL,@PUCK_LAST_CONTROL,W
         0000d3f0 00000000! 
         0000d410 00000000! 
    2287 0000d430     0581          move    a1,@PUCK_CONTROL,W
         0000d440 00000000! 
    2288 0000d460     0d5f          calla   new_puck_control
         0000d470 00000000! 
    2289 0000d490     09c1          movi    50,a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   61

         0000d4a0     0032  
    2290 0000d4b0     0581          move    a1,@PUCK_OPEN_CONTROL_TIME,W    ;let us pick it up again
         0000d4c0 00000000! 
    2291 0000d4e0     0581          move    a1,@PUCK_OPEN_LAST_TIME,W       ;let us pick it up again
         0000d4f0 00000000! 
    2292 0000d510     b6c7          move    *a6(POF_S_SHOT),a7,L            ;pup shot change here
         0000d520     0140  
    2293 0000d530     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         0000d540     0c50  
    2294 0000d550     1f0e          btst    B_PUP_SHOOT,a14
    2295 0000d560     ca03          jrz     npsh2
    2296 0000d570     09e7          movi    shoot_data_powered,a7
         0000d580 00000000! 
    2297 0000d5a0     b6e7  npsh2   move    *a7(PS_SH_SHOOT_SPEED),a7,L
         0000d5b0     0020  
    2298 0000d5c0     b4ce          move    *a6(POF_TURBO_MODE),a14,W
         0000d5d0     0580  
    2299 0000d5e0     ca0b          jrz     sptc
    2300 0000d5f0     b6c7          move    *a6(POF_S_SHOT),a7,L            ;pup shot change here
         0000d600     0140  
    2301 0000d610     b4ce          move    *a6(POF_PUP_FLAGS),a14,W
         0000d620     0c50  
    2302 0000d630     1f0e          btst    B_PUP_SHOOT,a14
    2303 0000d640     ca03          jrz     npsh1
    2304 0000d650     09e7          movi    shoot_data_powered,a7
         0000d660 00000000! 
    2305 0000d680     b6e7  npsh1   move    *a7(PS_SH_SHOOT_TURBO),a7,L
         0000d690     0060  
    2306 0000d6a0     0d3f  sptc    callr   get_shot_point_ot
         0000d6b0     0153  
    2307 0000d6c0     b6ce          move    *a6(POF_S_SHOT),a14,L           ;no change needed for pup shot
         0000d6d0     0140  
    2308 0000d6e0     b7ce          move    *a14(PS_SH_SHOT_CHANGE),a14,L
         0000d6f0     00b0  
    2309 0000d700     4fc6          move    a14,b6
    2310 0000d710     b6ca          move    *a6(POF_S_SHOT),a10,L           ;no change needed for pup shot
         0000d720     0140  
    2311 0000d730     b74a          move    *a10(PS_SH_MAX_YVEL),a10,L
         0000d740     0080  
    2312 0000d750     0d5f          calla   record_shot_a6
         0000d760 0000d950' 
    2313 0000d780     0d5f          calla   put_puck_outside_netp
         0000d790 00000000! 
    2314 0000d7b0     0d5f          calla   compute_shot_onetime
         0000d7c0 00000000! 
    2315 0000d7e0     0d3f          callr   flame_shoot_check
         0000d7f0     0006  
    2316 0000d800     0d5f          calla   send_puck_to_point_xyz_v
         0000d810 00000000! 
    2317 0000d830     c080          jauc    SUCIDE
         0000d840 00000000! 
    2318                    
    2319 0000d860           flame_shoot_check
    2320 0000d860     098f          mmtm    sp,a0,a14
         0000d870     8002  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   62

    2321 0000d880     05ae          move    @hot_player,a14
         0000d890 00000000! 
    2322 0000d8b0     aec0          movb    *a6(POF_NUMBER),a0
         0000d8c0     0000  
    2323 0000d8d0     480e          cmp     a0,a14
    2324 0000d8e0     cb03          jrnz    fsccc9
    2325 0000d8f0     0d5f          calla   flame_shoot_sound
         0000d900 00000000! 
    2326 0000d920     09af  fsccc9  mmfm    sp,a0,a14
         0000d930     4001  
    2327 0000d940     0960          rets
    2328                    
    2329 0000d950           record_shot_a6
    2330 0000d950     098f          mmtm    sp,a0,a1,a4
         0000d960     c800  
    2331                    ;       movb    *a6(POF_NUMBER),a0
    2332                    ;       sll     5,a0
    2333                    ;       addi    total_shots_p1-32,a0
    2334                    ;       move    *a0,a14,L
    2335                    ;       inc     a14
    2336                    ;       move    a14,*a0,L
    2337 0000d970     09c1          movi    POF_SHOTS_P1-8,a1
         0000d980     0778  
    2338 0000d990     c00e          jruc    rca6
    2339 0000d9a0           record_pass_a6
    2340 0000d9a0     098f          mmtm    sp,a0,a1,a4
         0000d9b0     c800  
    2341                    ;       movb    *a6(POF_NUMBER),a0
    2342                    ;       sll     5,a0
    2343                    ;       addi    total_passes_p1-32,a0
    2344                    ;       move    *a0,a14,L
    2345                    ;       inc     a14
    2346                    ;       move    a14,*a0,L
    2347 0000d9c0     09c1          movi    POF_PASSES_P1-8,a1
         0000d9d0     07d8  
    2348 0000d9e0     c009          jruc    rca6
    2349 0000d9f0           record_steal_a6
    2350 0000d9f0     098f          mmtm    sp,a0,a1,a4
         0000da00     c800  
    2351                    ;       movb    *a6(POF_NUMBER),a0
    2352                    ;       sll     5,a0
    2353                    ;       addi    total_steals_p1-32,a0
    2354                    ;       move    *a0,a14,L
    2355                    ;       inc     a14
    2356                    ;       move    a14,*a0,L
    2357 0000da10     09c1          movi    POF_STEALS_P1-8,a1
         0000da20     07f8  
    2358 0000da30     c004          jruc    rca6
    2359 0000da40           record_check_a6
    2360 0000da40     098f          mmtm    sp,a0,a1,a4
         0000da50     c800  
    2361                    ;       movb    *a6(POF_NUMBER),a0
    2362                    ;       sll     5,a0
    2363                    ;       addi    total_checks_p1-32,a0
    2364                    ;       move    *a0,a14,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   63

    2365                    ;       inc     a14
    2366                    ;       move    a14,*a0,L
    2367 0000da60     09c1          movi    POF_CHECKS_P1-8,a1
         0000da70     0818  
    2368 0000da80     05a4  rca6    move    @PUCK_MODE,a4,W
         0000da90 00000000! 
    2369 0000dab0     0b44          cmpi    PUM_SCORE,a4
         0000dac0     ff9c  
    2370 0000dad0     c90c          jrhs    rca9
    2371 0000dae0     05a4          move    @period,a4
         0000daf0 00000000! 
    2372 0000db10     2464          sll     3,a4
    2373 0000db20     4024          add     a1,a4
    2374 0000db30     40c4          add     a6,a4   ;a4 POF_SHOTS offset by period
    2375 0000db40     8e80          movb    *a4,a0
    2376 0000db50     1020          inc     a0
    2377 0000db60     0b40          cmpi    255,a0
         0000db70     ff00  
    2378 0000db80     ca01          jrz     rca9
    2379 0000db90     8c04          movb    a0,*a4
    2380 0000dba0     09af  rca9    mmfm    sp,a0,a1,a4
         0000dbb0     0013  
    2381 0000dbc0     0960          rets
    2382                    
    2383 0000dbd0           pass_from_shoot
    2384 0000dbd0     0d3f          callr   do_end_of_shoot_stuff
         0000dbe0     ff61  
    2385 0000dbf0     aec0          movb    *a6(POF_NUMBER),a0
         0000dc00     0000  
    2386 0000dc10     b4c1          move    *a6(POF_TURBO_MODE),a1,W
         0000dc20     0580  
    2387 0000dc30     b6c8          move    *a6(POF_OBJECT),a8,L
         0000dc40     0280  
    2388 0000dc50     c000          jruc    pass_puck_quick_process
         0000dc60     f8a7  
    2389                    
    2390 0000dc70           pass_and_shoot
    2391 0000dc70     c080          jauc    SUCIDE
         0000dc80 00000000! 
    2392                    
    2393 0000dca0     b6c8          move    *a6(POF_OBJECT),a8,L
         0000dcb0     0280  
    2394 0000dcc0     aec0          movb    *a6(POF_M_JOY),a0
         0000dcd0     03a8  
    2395 0000dce0     cb02          jrnz    inacar
    2396 0000dcf0     aec0          movb    *a6(POF_DIRECTION),a0
         0000dd00     0390  
    2397 0000dd10           inacar
    2398                            .if     BILL
    2399                            calla   dir_to_degrees
    2400                            callr   dump_puck
    2401                            .else
    2402 0000dd10     0d3f          callr   bounce_pass
         0000dd20     0003  
    2403                            .endif
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   64

    2404 0000dd30     c080          jauc    SUCIDE
         0000dd40 00000000! 
    2405 0000dd60           bounce_pass
    2406 0000dd60     5600          clr     a0
    2407 0000dd70     b206          move    a0,*a6(POF_SHOT_START),L
         0000dd80     0420  
    2408 0000dd90     aec0          movb    *a6(POF_NUMBER),a0
         0000dda0     0000  
    2409 0000ddb0     05ae          move    @PUCK_CONTROL,a14,W
         0000ddc0 00000000! 
    2410 0000dde0     480e          cmp     a0,a14
    2411 0000ddf0     cb12          jrnz    pas_bpx
    2412 0000de00     b3c6          move    a14,*a6(POF_PASS_START),L
         0000de10     0460  
    2413 0000de20     b4ce          move    *a6(POF_FLAGS),a14,W
         0000de30     0200  
    2414 0000de40     0bae          ori     M_PF_BPASS,a14
         0000de50 00000100  
    2415 0000de70     b1c6          move    a14,*a6(POF_FLAGS),W
         0000de80     0200  
    2416 0000de90     0d3f          callr   get_pass_stuff
         0000dea0     f966  
    2417                                    ;a10 = script set address
    2418                                    ;a11 = button release address
    2419 0000deb0     b366          move    a11,*a6(POF_PASS_RELEASE),L
         0000dec0     0540  
    2420 0000ded0     092a          call    a10                     ;set script
    2421 0000dee0     0d3f          callr   set_pass_mode
         0000def0     f9ea  
    2422 0000df00     0d3f          callr   take_player_control
         0000df10     0089  
    2423                    ;       movb    *a6(POF_NUMBER),a1
    2424                    ;       sll     8,a1
    2425                    ;       addi    PIDOF_WATCH_PASS,a1
    2426                    ;       movi    pass_watch,a7
    2427                    ;       move    a6,a11
    2428                    ;       jauc    KILL_AND_GETPPRC
    2429 0000df20     0960  pas_bpx rets
    2430                    
    2431                    
    2432 0000df30           dump_puck       ;a0 = direction, a1 = turbo
    2433 0000df30                   PUSH    a0
    2434                    
    2435                    ;       move    *a6(POF_S_DUMP),a9,L
    2436                    
    2437 0000df40     0d3f          callr   do_end_of_shoot_stuff
         0000df50     ff2a  
    2438 0000df60     aec0          movb    *a6(POF_NUMBER),a0
         0000df70     0000  
    2439 0000df80     05ae          move    @PUCK_CONTROL,a14,W
         0000df90 00000000! 
    2440 0000dfb0     480e          cmp     a0,a14
    2441 0000dfc0     cb4a          jrnz    pas_npx
    2442 0000dfd0     2500          sll     8,a0
    2443 0000dfe0     0b00          addi    PIDOF_PASS_SHOOT,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   65

         0000dff0     0003  
    2444 0000e000     b00d          move    a0,*a13(PROCID),W
         0000e010     0020  
    2445 0000e020     5600          clr     a0
    2446 0000e030     05c0          move    @PUCK_CONTROL,@PUCK_LAST_CONTROL,W
         0000e040 00000000! 
         0000e060 00000000! 
    2447 0000e080     0580          move    a0,@PUCK_CONTROL,W
         0000e090 00000000! 
    2448 0000e0b0     0d5f          calla   new_puck_control
         0000e0c0 00000000! 
    2449 0000e0e0                   PULLQ   a0
    2450                    
    2451                    ;       move    *a9(PS_DP_DUMP_SPEED),a1,L
    2452                    ;       move    *a9(PS_DP_DUMP_CHANGE),a2,L
    2453 0000e0f0     09e1          movi    [8,0],a1
         0000e100 00080000  
    2454 0000e120     09e2          movi    change_dump,a2
         0000e130 0000feb0' 
    2455                    
    2456 0000e150     09e3          movi    [-3,08000],a3                           ;-2.5
         0000e160 fffd1f40  
    2457 0000e180     b4ce          move    *a6(POF_TURBO_MODE),a14,W
         0000e190     0580  
    2458 0000e1a0     ca0d          jrz     pas_1
    2459                    
    2460                    ;       move    *a9(PS_DP_DUMP_TURBO),a1,L
    2461                    ;       move    *a9(PS_DP_TDUMP_CHANGE),a2,L
    2462 0000e1b0     09e1          movi    [10,0],a1
         0000e1c0 000a0000  
    2463 0000e1e0     09e2          movi    change_tdump,a2
         0000e1f0 000100d0' 
    2464                    
    2465                    
    2466 0000e210     09e3          movi    [-3,0],a3
         0000e220 fffd0000  
    2467 0000e240     0d5f          calla   slap_shot_sound
         0000e250 00000000! 
    2468 0000e270     c003          jruc    pas_11
    2469 0000e280     0d5f  pas_1   calla   wrist_shot_sound
         0000e290 00000000! 
    2470 0000e2b0     07a8  pas_11  move    @PUCK_OBJECT,a8,L
         0000e2c0 00000000! 
    2471 0000e2e0     b268          move    a3,*a8(OYVEL),L
         0000e2f0     0120  
    2472 0000e300     0922          call    a2
    2473 0000e310     0d5f          calla   set_obj_to_polar_v
         0000e320 00000000! 
    2474 0000e340     0d5f          calla   give_puck_shot_gravity
         0000e350 00000000! 
    2475 0000e370     09c0          movi    30,a0
         0000e380     001e  
    2476 0000e390     0580          move    a0,@PUCK_OPEN_CONTROL_TIME,W
         0000e3a0 00000000! 
    2477 0000e3c0     0580          move    a0,@PUCK_OPEN_LAST_TIME,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   66

         0000e3d0 00000000! 
    2478 0000e3f0     1900          movk    8,a0
    2479 0000e400     b006          move    a0,*a6(POF_MODE),W
         0000e410     0210  
    2480 0000e420     19e0          movk    15,a0
    2481 0000e430     0d5f          calla   set_safe_puck_mode_a0
         0000e440 00000000! 
    2482 0000e460     0960  pas_np  rets
    2483 0000e470           pas_npx PULLQ   a0
    2484 0000e480     0960          rets
    2485                    
    2486 0000e490           give_player_control
    2487 0000e490     b4ce          move    *a6(POF_FLAGS),a14,W
         0000e4a0     0200  
    2488 0000e4b0     1fce          btst    B_PF_CONTROL,a14
    2489 0000e4c0     cb0b          jrnz    gpca
    2490 0000e4d0     098f          mmtm    sp,a0
         0000e4e0     8000  
    2491 0000e4f0     07a0          move    @WAVEIRQS,a0,L
         0000e500 00000000! 
    2492 0000e520     0b00          addi    40,a0
         0000e530     0028  
    2493 0000e540     b206          move    a0,*a6(POF_DRONE_NO_CHECK),L
         0000e550     0c60  
    2494 0000e560     09af          mmfm    sp,a0
         0000e570     0001  
    2495 0000e580     0bae  gpca    ori     M_PF_CONTROL,a14
         0000e590 00000002  
    2496 0000e5b0     0b8e          andni   M_PF_CONTROLB|M_PF_CONTROLM|M_PF_TRAILS,a14
         0000e5c0 00004600  
    2497 0000e5e0     b1c6          move    a14,*a6(POF_FLAGS),W
         0000e5f0     0200  
    2498 0000e600     57ce          clr     a14
    2499 0000e610     b3c6          move    a14,*a6(POF_CONTROL_OBJECT),L
         0000e620     0d40  
    2500 0000e630     b3c6          move    a14,*a6(POF_CONTROL_SCRIPT),L
         0000e640     0d60  
    2501 0000e650     098f          mmtm    sp,a8
         0000e660     0080  
    2502 0000e670     b6c8          move    *a6(POF_OBJECT),a8,L
         0000e680     0280  
    2503 0000e690     b3c8          move    a14,*a8(ODT_SC_OVERRIDE),L
         0000e6a0     0790  
    2504 0000e6b0     b1c8          move    a14,*a8(ODT_SC_XSCALE),W
         0000e6c0     07b0  
    2505 0000e6d0     b1c8          move    a14,*a8(OYACCEL),W
         0000e6e0     02f0  
    2506 0000e6f0     b3c8          move    a14,*a8(OYVEL),L
         0000e700     0120  
    2507 0000e710     b3c8          move    a14,*a8(OYVAL),L
         0000e720     0160  
    2508 0000e730     b708          move    *a8(OPARTS),a8,L
         0000e740     00c0  
    2509 0000e750     ca02          jrz     gpcb
    2510 0000e760     b3c8          move    a14,*a8(ODT_SC_OVERRIDE),L              ;head
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   67

         0000e770     0790  
    2511 0000e780     09af  gpcb    mmfm    sp,a8
         0000e790     0100  
    2512 0000e7a0     0960          rets
    2513 0000e7b0           take_player_control
    2514 0000e7b0     b4ce          move    *a6(POF_FLAGS),a14,W
         0000e7c0     0200  
    2515 0000e7d0     0b8e          andni   M_PF_CONTROL|M_PF_CONTROLB|M_PF_CONTROLM,a14
         0000e7e0 00000602  
    2516 0000e800     b1c6          move    a14,*a6(POF_FLAGS),W
         0000e810     0200  
    2517 0000e820     c012          jruc    cmnx
    2518 0000e830           take_player_control_a7
    2519 0000e830     b4ee          move    *a7(POF_FLAGS),a14,W
         0000e840     0200  
    2520 0000e850     0b8e          andni   M_PF_CONTROL|M_PF_CONTROLB|M_PF_CONTROLM,a14
         0000e860 00000602  
    2521 0000e880     b1c7          move    a14,*a7(POF_FLAGS),W
         0000e890     0200  
    2522 0000e8a0     c00a          jruc    cmnx
    2523 0000e8b0           take_player_control_m           ;allow movement, but not script
    2524 0000e8b0     b4ce          move    *a6(POF_FLAGS),a14,W
         0000e8c0     0200  
    2525 0000e8d0     0b8e          andni   M_PF_CONTROL|M_PF_CONTROLB,a14
         0000e8e0 00000402  
    2526 0000e900     0bae          ori     M_PF_CONTROLM,a14
         0000e910 00000200  
    2527 0000e930     b1c6          move    a14,*a6(POF_FLAGS),W
         0000e940     0200  
    2528 0000e950     57ce  cmnx    clr     a14
    2529 0000e960     b3c6          move    a14,*a6(POF_CONTROL_OBJECT),L
         0000e970     0d40  
    2530 0000e980     b3c6          move    a14,*a6(POF_CONTROL_SCRIPT),L
         0000e990     0d60  
    2531 0000e9a0     c080          jauc    clear_srt
         0000e9b0 00000000! 
    2532                    
    2533                    **************************************************************************
    2534                    *                                                                        *
    2535                    * get_shot_point                                                         *
    2536                    *       input   a0 = player                                              *
    2537                    *       output  a0 = x                                                   *
    2538                    *               a1 = z                                                   *
    2539                    *               a2 = y                                                   *
    2540                    *                                                                        *
    2541                    **************************************************************************
    2542 0000e9d0           get_quick_shifted_shot_point    ;just used for facing
    2543 0000e9d0     aec0          movb    *a6(POF_NUMBER),a0
         0000e9e0     0000  
    2544 0000e9f0     1420          dec     a0
    2545 0000ea00     2fc0          srl     2,a0
    2546 0000ea10     24a0          sll     5,a0
    2547 0000ea20     0b20          addi    gqssp,a0
         0000ea30 0000eaa0' 
    2548 0000ea50     8600          move    *a0,a0,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   68

    2549 0000ea60     09e1          movi    midz,a1
         0000ea70 01538000  
    2550 0000ea90     0960          rets
    2551 0000eaa0 02710000  gqssp   .long   x_team1s
    2552 0000eac0 fd8f0000          .long   x_team2s
    2553                    
    2554 0000eae0           get_quick_shot_point    ;just used for facing
    2555 0000eae0     aec0          movb    *a6(POF_NUMBER),a0
         0000eaf0     0000  
    2556 0000eb00     1420          dec     a0
    2557 0000eb10     2fc0          srl     2,a0
    2558 0000eb20     24a0          sll     5,a0
    2559 0000eb30     0b20          addi    gqsp,a0
         0000eb40 0000ebb0' 
    2560 0000eb60     8600          move    *a0,a0,L
    2561 0000eb70     09e1          movi    midz,a1
         0000eb80 01538000  
    2562 0000eba0     0960          rets
    2563 0000ebb0 02af0000  gqsp    .long   x_team1
    2564 0000ebd0 fd510000          .long   x_team2
    2565                    
    2566 0000ebf0           get_shot_point_nt       ;non turbo shot
    2567 0000ebf0           get_shot_point_t        ;turbo shot
    2568 0000ebf0           get_shot_point_ot       ;one timer shot
    2569 0000ebf0     098f          mmtm    sp,a3
         0000ec00     1000  
    2570 0000ec10     b4c0          move    *a6(POF_FLAGS),a0,W
         0000ec20     0200  
    2571 0000ec30     1fe0          btst    B_PF_HUMAN,a0
    2572 0000ec40     ca20          jrz     gsp_drone
    2573 0000ec50     aec0          movb    *a6(POF_NUMBER),a0
         0000ec60     0000  
    2574 0000ec70     24a0          sll     5,a0
    2575 0000ec80     0b20          addi    spxl-32,a0
         0000ec90 0000f030' 
    2576 0000ecb0     8600          move    *a0,a0,L
    2577 0000ecc0     aec3          movb    *a6(POF_JOY),a3
         0000ecd0     0398  
    2578                    
    2579                            .if     BILL & 0
    2580                            MOVK    2,A3
    2581                            .endif
    2582                    
    2583 0000ece0     24e3          sll     7,a3
    2584 0000ecf0     4003          add     a0,a3
    2585 0000ed00     b660          move    *a3(64),a0,L    ;start y
         0000ed10     0040  
    2586                    
    2587                            .if     BILL ;DON'T WANT PUCK IN AIR
    2588                            .else
    2589 0000ed20     4c01          move    a0,a1
    2590 0000ed30     0b20          addi    [10,0],a0
         0000ed40 000a0000  
    2591 0000ed60     0d01          subi    [10,0],a1
         0000ed70 fff5ffff  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   69

    2592 0000ed90     0d5f          calla   RANGERND
         0000eda0 00000000! 
    2593 0000edc0     4c00          move    a0,a0
    2594 0000edd0     ce01          jrn     gr81
    2595 0000ede0     5600          clr     a0
    2596                            .endif
    2597                    
    2598 0000edf0     4c02  gr81    move    a0,a2
    2599 0000ee00     9660          move    *a3+,a0,L
    2600 0000ee10     9661          move    *a3+,a1,L
    2601                    ;       move    *a3,a2,L
    2602 0000ee20     09af          mmfm    sp,a3
         0000ee30     0008  
    2603 0000ee40     0960          rets
    2604 0000ee50           gsp_drone
    2605 0000ee50     09e0          movi    [13,0],a0
         0000ee60 000d0000  
    2606 0000ee80     09e1          movi    [-3,0],a1
         0000ee90 fffd0000  
    2607 0000eeb0     0d5f          calla   RANGERND
         0000eec0 00000000! 
    2608 0000eee0     4c00          move    a0,a0
    2609 0000eef0     ce01          jrn     aw984
    2610 0000ef00     5600          clr     a0
    2611 0000ef10     4c02  aw984   move    a0,a2
    2612 0000ef20     aec0          movb    *a6(POF_NUMBER),a0
         0000ef30     0000  
    2613 0000ef40     1420          dec     a0
    2614 0000ef50     2fc0          srl     2,a0
    2615 0000ef60     24a0          sll     5,a0
    2616 0000ef70     0b20          addi    gpdr,a0
         0000ef80 0000f010' 
    2617 0000efa0     9600          move    *a0+,a0,L
    2618 0000efb0     09e1          movi    midz,a1
         0000efc0 01538000  
    2619 0000efe0     09af          mmfm    sp,a3
         0000eff0     0008  
    2620 0000f000     0960          rets
    2621                    
    2622 0000f010 02af0000  gpdr    .long   x_team1,x_team2
    2623                    
    2624 0000f050 0000f150' spxl    .long   team_1_postab
    2625 0000f070 0000f150'         .long   team_1_postab
    2626 0000f090 0000f150'         .long   team_1_postab
    2627 0000f0b0 0000f150'         .long   team_1_postab
    2628 0000f0d0 0000f5d0'         .long   team_2_postab
    2629 0000f0f0 0000f5d0'         .long   team_2_postab
    2630 0000f110 0000f5d0'         .long   team_2_postab
    2631 0000f130 0000f5d0'         .long   team_2_postab
    2632                    
    2633                            .if     BILL
    2634                    
    2635                    lowy    .equ    [0,0]
    2636                    midy    .equ    [0,0]
    2637                    highy   .equ    [-41,0]
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   70

    2638                    
    2639                    ;lowz   .equ    [320,0]
    2640                    ;midz   .equ    [339,08000h]
    2641                    ;highz  .equ    [359,0]
    2642                    
    2643                    ;lowz   .equ    [287,0] ;[311,0]
    2644                    ;midz   .equ    [339,08000h]
    2645                    ;highz  .equ    [392,0] ;[368,0]
    2646                    
    2647                    lowz    .equ    [319,0]
    2648                    midz    .equ    [339,08000h]
    2649                    highz   .equ    [360,0]
    2650                    
    2651                            .else
    2652                    
    2653          00030000  lowy    .equ    [3,0]           ;keep us more on the ground
    2654          00030000  midy    .equ    [3,0]
    2655          ffe20000  highy   .equ    [-30,0]                 ;[-5,0]
    2656                    
    2657          013f0000  lowz    .equ    [319,0]
    2658          01538000  midz    .equ    [339,08000h]
    2659          01680000  highz   .equ    [360,0]
    2660                            .endif
    2661                    
    2662          02af0000  x_team1 .equ    [687,0]
    2663          fd510000  x_team2 .equ    [-687,0]
    2664                    
    2665          02710000  x_team1s .equ   [690-65,0]
    2666          fd8f0000  x_team2s .equ   [-690+65,0]
    2667                    
    2668 0000f150           team_1_postab
    2669 0000f150 02af0000          .long   x_team1,midz,midy,0
    2670 0000f1d0 02af0000          .long   x_team1,lowz,midy,0
    2671 0000f250 02af0000          .long   x_team1,lowz,lowy,0
    2672 0000f2d0 02af0000          .long   x_team1,midz,lowy,0
    2673 0000f350 02af0000          .long   x_team1,highz,lowy,0
    2674 0000f3d0 02af0000          .long   x_team1,highz,midy,0
    2675 0000f450 02af0000          .long   x_team1,highz,highy,0
    2676 0000f4d0 02af0000          .long   x_team1,midz,highy,0
    2677 0000f550 02af0000          .long   x_team1,lowz,highy,0
    2678                    
    2679 0000f5d0           team_2_postab
    2680 0000f5d0 fd510000          .long   x_team2,midz,midy,0
    2681 0000f650 fd510000          .long   x_team2,lowz,midy,0
    2682 0000f6d0 fd510000          .long   x_team2,lowz,highy,0
    2683 0000f750 fd510000          .long   x_team2,midz,highy,0
    2684 0000f7d0 fd510000          .long   x_team2,highz,highy,0
    2685 0000f850 fd510000          .long   x_team2,highz,midy,0
    2686 0000f8d0 fd510000          .long   x_team2,highz,lowy,0
    2687 0000f950 fd510000          .long   x_team2,midz,lowy,0
    2688 0000f9d0 fd510000          .long   x_team2,lowz,lowy,0
    2689                    
    2690                    **************************************************************************
    2691                    *                                                                        *
    2692                    * change_shot                                                            *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   71

    2693                    * change_pass                                                            *
    2694                    * change_tshot                                                           *
    2695                    * change_tpass                                                           *
    2696                    *       input   a0 = direction                                           *
    2697                    *               a1 = velocity                                            *
    2698                    *               a2 = y velocity                                          *
    2699                    *               a6 = player block                                        *
    2700                    *       output  as above                                                 *
    2701                    *                                                                        *
    2702                    **************************************************************************
    2703 0000fa50           change_shot
    2704 0000fa50     0d3f          callr   are_we_edging
         0000fa60     009d  
    2705 0000fa70     c800          jrc     change_edge
         0000fa80     0081  
    2706 0000fa90     4e26          move    a1,b6           ;we can trash this
    2707 0000faa0     4c01          move    a0,a1
    2708 0000fab0     09ee          movi    XD0080,a14              ;+/- 5 degrees
         0000fac0 00080000  
    2709 0000fae0     4c42          move    a2,a2
    2710 0000faf0     cb03          jrnz    acsp_1
    2711 0000fb00     09ee          movi    XD0040,a14
         0000fb10 00040000  
    2712 0000fb30     45c0  acsp_1  sub     a14,a0
    2713 0000fb40     41c1          add     a14,a1
    2714 0000fb50     0d5f          calla   RANGERND
         0000fb60 00000000! 
    2715 0000fb80                   THETA_N a0
    2716 0000fc60     4ed1          move    b6,a1
    2717 0000fc70     0960          rets
    2718 0000fc80           change_tpass
    2719 0000fc80           change_pass
    2720 0000fc80     0960          rets
    2721 0000fc90     0d3f          callr   are_we_edging
         0000fca0     0079  
    2722 0000fcb0     c85e          jrc     change_edge
    2723 0000fcc0     4e26          move    a1,b6           ;we can trash this
    2724 0000fcd0     4c01          move    a0,a1
    2725 0000fce0     09ee          movi    XD0020,a14              ;+/- 5 degrees
         0000fcf0 00020000  
    2726 0000fd10     4c42          move    a2,a2
    2727 0000fd20     cb03          jrnz    csp_1
    2728 0000fd30     09ee          movi    XD0010,a14
         0000fd40 00010000  
    2729 0000fd60     45c0  csp_1   sub     a14,a0
    2730 0000fd70     41c1          add     a14,a1
    2731 0000fd80     0d5f          calla   RANGERND
         0000fd90 00000000! 
    2732 0000fdb0                   THETA_N a0
    2733 0000fe90     4ed1          move    b6,a1
    2734 0000fea0     0960          rets
    2735                    
    2736 0000feb0           change_tshot
    2737 0000feb0           change_dump
    2738 0000feb0     0d3f          callr   are_we_edging
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   72

         0000fec0     0057  
    2739 0000fed0     c83c          jrc     change_edge
    2740 0000fee0     4e26          move    a1,b6           ;we can trash this
    2741 0000fef0     4c01          move    a0,a1
    2742 0000ff00     09ee          movi    XD0110,a14              ;+/- 5 degrees
         0000ff10 000b0000  
    2743 0000ff30     4c42          move    a2,a2
    2744 0000ff40     cb03          jrnz    cttd_1
    2745 0000ff50     09ee          movi    XD0060,a14
         0000ff60 00060000  
    2746 0000ff80     45c0  cttd_1  sub     a14,a0
    2747 0000ff90     41c1          add     a14,a1
    2748 0000ffa0     0d5f          calla   RANGERND
         0000ffb0 00000000! 
    2749 0000ffd0                   THETA_N a0
    2750 000100b0     4ed1          move    b6,a1
    2751 000100c0     0960          rets
    2752                    
    2753 000100d0           change_tdump
    2754 000100d0     0d3f          callr   are_we_edging
         000100e0     0035  
    2755 000100f0     c81a          jrc     change_edge
    2756 00010100     4e26          move    a1,b6           ;we can trash this
    2757 00010110     4c01          move    a0,a1
    2758 00010120     09ee          movi    XD0100,a14              ;+/- 5 degrees
         00010130 000a0000  
    2759 00010150     45c0          sub     a14,a0
    2760 00010160     41c1          add     a14,a1
    2761 00010170     0d5f          calla   RANGERND
         00010180 00000000! 
    2762 000101a0                   THETA_N a0
    2763 00010280     4ed1          move    b6,a1
    2764 00010290     0960          rets
    2765                    
    2766 000102a0           change_edge
    2767 000102a0     4e26          move    a1,b6           ;we can trash this
    2768 000102b0     4c01          move    a0,a1
    2769 000102c0     09ee          movi    XD0030,a14              ;+/- 5 degrees
         000102d0 00030000  
    2770 000102f0     45c0          sub     a14,a0
    2771 00010300     41c1          add     a14,a1
    2772 00010310     0d5f          calla   RANGERND
         00010320 00000000! 
    2773 00010340                   THETA_N a0
    2774 00010420     4ed1          move    b6,a1
    2775 00010430     0960          rets
    2776                    
    2777 00010440           are_we_edging                   ;cs = we are pushing the puck along an edge
    2778 00010440     098f          mmtm    sp,a8
         00010450     0080  
    2779 00010460     b6c8          move    *a6(POF_OBJECT),a8,L
         00010470     0280  
    2780 00010480     b50e          move    *a8(OZPOS),a14,W
         00010490     0190  
    2781 000104a0     0b4e          cmpi    649,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   73

         000104b0     fd76  
    2782 000104c0     c503          jrge    awe_p1
    2783 000104d0     0b4e          cmpi    32,a14
         000104e0     ffdf  
    2784 000104f0     c714          jrgt    awe_npo
    2785 00010500     0b60  awe_p1  cmpi    XD0040,a0
         00010510 fffbffff  
    2786 00010530     c20c          jrls    awe_ys
    2787 00010540     0b60          cmpi    XD3600-XD0040,a0
         00010550 fe9bffff  
    2788 00010570     c908          jrhs    awe_ys
    2789 00010580     0b60          cmpi    XD1800-XD0040,a0
         00010590 ff4fffff  
    2790 000105b0     c824          jrlo    awe_no
    2791 000105c0     0b60          cmpi    XD1800+XD0040,a0
         000105d0 ff47ffff  
    2792 000105f0     c320          jrhi    awe_no
    2793 00010600     0de0  awe_ys  setc
    2794 00010610     09af          mmfm    sp,a8
         00010620     0100  
    2795 00010630     0960          rets
    2796                    
    2797 00010640     b70e  awe_npo move    *a8(OXVAL),a14,L
         00010650     0140  
    2798 00010660     0b2e          addi    [0,08000h],a14
         00010670 00008000  
    2799 00010690     2a0e          sra     16,a14
    2800                    ;awe_npo        move    *a8(OXPOS),a14,W        ;half
    2801                    
    2802 000106a0     0b4e          cmpi    -768,a14
         000106b0     02ff  
    2803 000106c0     c603          jrle    awe_n2
    2804 000106d0     0b4e          cmpi    768,a14
         000106e0     fcff  
    2805 000106f0     c410          jrlt    awe_no
    2806 00010700     0b60  awe_n2  cmpi    XD0900-XD0040,a0
         00010710 ffa9ffff  
    2807 00010730     c80c          jrlo    awe_no
    2808 00010740     0b60          cmpi    XD0900+XD0040,a0
         00010750 ffa1ffff  
    2809 00010770     c2e8          jrls    awe_ys
    2810 00010780     0b60          cmpi    XD2700-XD0040,a0
         00010790 fef5ffff  
    2811 000107b0     c804          jrlo    awe_no
    2812 000107c0     0b60          cmpi    XD2700+XD0040,a0
         000107d0 feedffff  
    2813 000107f0     c2e0          jrls    awe_ys
    2814 00010800     0320  awe_no  clrc
    2815 00010810     09af          mmfm    sp,a8
         00010820     0100  
    2816 00010830     0960          rets
    2817                    
    2818                    **************************************************************************
    2819                    *                                                                        *
    2820                    * int_control                                                            *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   74

    2821                    * off_control                                                            *
    2822                    * def_control                                                            *
    2823                    *       how do we handle a player coming in contact with the puck        *
    2824                    *       input   a4 = distance to puck                                    *
    2825                    *               a6 = player block                                        *
    2826                    *               a8 = puck_object                                         *
    2827                    *       output  a0 = 0 - ignore puck, we are too far away                *
    2828                    *                  = 1 - puck is unaffected, we miss it                  *
    2829                    *                  = 2 - puck is rebounded                               *
    2830                    *                  = 3 - puck is controlled                              *
    2831                    *               a1 = speed to rebound puck away if a0 = 2                *
    2832                    *               a2 = ticks to ignore control if a0 = 1 or 2              *
    2833                    *                                                                        *
    2834                    **************************************************************************
    2835 00010840           int_control
    2836 00010840     0b44          cmpi    50,a4
         00010850     ffcd  
    2837 00010860     c900          jrhs    ctrl_0
         00010870     0108  
    2838 00010880     05ae          move    @PUCK_MODE,a14,W
         00010890 00000000! 
    2839 000108b0     0b4e          cmpi    1,a14                   ;face off?
         000108c0     fffe  
    2840 000108d0     ca00          jrz     ctrl_3                  ;then we always control
         000108e0     010f  
    2841 000108f0     b500          move    *a8(ODT_VEL+010h),a0,W
         00010900     04e0  
    2842 00010910     0b40          cmpi    5,a0
         00010920     fffa  
    2843 00010930     c204          jrls    dc_c
    2844 00010940     0b44          cmpi    35,a4
         00010950     ffdc  
    2845 00010960     c900          jrhs    ctrl_0
         00010970     00f8  
    2846 00010980     b6c9  dc_c    move    *a6(POF_OBJECT),a9,L
         00010990     0280  
    2847 000109a0     0d5f          calla   find_closest_distance
         000109b0 00000000! 
    2848 000109d0     b501          move    *a8(ODT_VEL+010H),a1,W  ;velocity (high word)
         000109e0     04e0  
    2849 000109f0     b503          move    *a8(OYPOS),a3,W
         00010a00     0170  
    2850 00010a10     03a3          neg     a3
    2851 00010a20     0b43          cmpi    15,a3
         00010a30     fff0  
    2852 00010a40     c905          jrhs    ic_air
    2853 00010a50     09e5          movi    intended_dist_table,a5
         00010a60 00011b10' 
    2854 00010a80     c000          jruc    table_from_distance
         00010a90     00ca  
    2855 00010aa0     09e5  ic_air  movi    intended_dist_air_table,a5
         00010ab0 00011ba0' 
    2856 00010ad0     c000          jruc    table_from_distance
         00010ae0     00c5  
    2857                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   75

    2858 00010af0           off_control1
    2859 00010af0     05a7          move    @PUCK_MODE,a7
         00010b00 00000000! 
    2860 00010b20     0b47          cmpi    PUM_PASS,a7
         00010b30     fff5  
    2861 00010b40     cacf          jrz     int_control
    2862 00010b50     0b47          cmpi    PUM_TPASS,a7
         00010b60     fff4  
    2863 00010b70     cacc          jrz     int_control
    2864 00010b80           def_control1
    2865 00010b80     1827          movk    1,a7
    2866 00010b90     c02b          jruc    mrodt
    2867 00010ba0           off_control2
    2868 00010ba0     05a7          move    @PUCK_MODE,a7
         00010bb0 00000000! 
    2869 00010bd0     0b47          cmpi    PUM_PASS,a7
         00010be0     fff5  
    2870 00010bf0     cac4          jrz     int_control
    2871 00010c00     0b47          cmpi    PUM_TPASS,a7
         00010c10     fff4  
    2872 00010c20     cac1          jrz     int_control
    2873 00010c30           def_control2
    2874 00010c30     1847          movk    2,a7
    2875 00010c40     c020          jruc    mrodt
    2876 00010c50           off_control3
    2877 00010c50     05a7          move    @PUCK_MODE,a7
         00010c60 00000000! 
    2878 00010c80     0b47          cmpi    PUM_PASS,a7
         00010c90     fff5  
    2879 00010ca0     cab9          jrz     int_control
    2880 00010cb0     0b47          cmpi    PUM_TPASS,a7
         00010cc0     fff4  
    2881 00010cd0     cab6          jrz     int_control
    2882 00010ce0           def_control3
    2883 00010ce0     1867          movk    3,a7
    2884 00010cf0     c015          jruc    mrodt
    2885 00010d00           off_control4
    2886 00010d00     05a7          move    @PUCK_MODE,a7
         00010d10 00000000! 
    2887 00010d30     0b47          cmpi    PUM_PASS,a7
         00010d40     fff5  
    2888 00010d50     caae          jrz     int_control
    2889 00010d60     0b47          cmpi    PUM_TPASS,a7
         00010d70     fff4  
    2890 00010d80     caab          jrz     int_control
    2891 00010d90           def_control4
    2892 00010d90     1887          movk    4,a7
    2893 00010da0     c00a          jruc    mrodt
    2894 00010db0           off_control5
    2895 00010db0     05a7          move    @PUCK_MODE,a7
         00010dc0 00000000! 
    2896 00010de0     0b47          cmpi    PUM_PASS,a7
         00010df0     fff5  
    2897 00010e00     caa3          jrz     int_control
    2898 00010e10     0b47          cmpi    PUM_TPASS,a7
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   76

         00010e20     fff4  
    2899 00010e30     caa0          jrz     int_control
    2900 00010e40           def_control5
    2901 00010e40     18a7          movk    5,a7
    2902 00010e50     0b44  mrodt   cmpi    50,a4
         00010e60     ffcd  
    2903 00010e70     c900          jrhs    ctrl_0
         00010e80     00a7  
    2904 00010e90     05ae          move    @PUCK_MODE,a14,W
         00010ea0 00000000! 
    2905 00010ec0     0b4e          cmpi    PUM_FACE,a14                    ;face off?
         00010ed0     fffe  
    2906 00010ee0     ca00          jrz     ctrl_3                  ;then we always control
         00010ef0     00ae  
    2907 00010f00     b4ce          move    *a6(POF_MODE),a14,W
         00010f10     0210  
    2908 00010f20     0b4e          cmpi    PM_BLOCK,a14
         00010f30     ffed  
    2909 00010f40     ca00          jrz     ctrl_2                  ;blocking, always deflect
         00010f50     009f  
    2910 00010f60     0b4e          cmpi    PM_SHOOT,a14
         00010f70     fffc  
    2911 00010f80     ca00          jrz     ctrl_0
         00010f90     0096  
    2912 00010fa0     b500          move    *a8(ODT_VEL+010h),a0,W
         00010fb0     04e0  
    2913 00010fc0     0b40          cmpi    5,a0
         00010fd0     fffa  
    2914 00010fe0     c204          jrls    dc_p                    ;if puck is stopped, within 50 else 35
    2915 00010ff0     0b44          cmpi    35,a4
         00011000     ffdc  
    2916 00011010     c900          jrhs    ctrl_0
         00011020     008d  
    2917 00011030     b6c9  dc_p    move    *a6(POF_OBJECT),a9,L
         00011040     0280  
    2918 00011050     0d5f          calla   find_closest_distance
         00011060 00000000! 
    2919 00011080     b501          move    *a8(ODT_VEL+010H),a1,W  ;velocity
         00011090     04e0  
    2920 000110a0     b503          move    *a8(OYPOS),a3,W
         000110b0     0170  
    2921 000110c0     03a3          neg     a3
    2922 000110d0     b6c5          move    *a6(POF_OBJECT),a5,L
         000110e0     0280  
    2923 000110f0     b4a5          move    *a5(OSIZEY),a5,W
         00011100     0270  
    2924 00011110     48a3          cmp     a5,a3
    2925 00011120     c97d          jrhs    ctrl_0
    2926 00011130     0b43          cmpi    15,a3
         00011140     fff0  
    2927 00011150     c907          jrhs    dc_air
    2928 00011160     09e5          movi    defense_dist_table-32,a5
         00011170 00011c10' 
    2929 00011190     24a7          sll     5,a7
    2930 000111a0     40e5          add     a7,a5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   77

    2931 000111b0     86a5          move    *a5,a5,L
    2932 000111c0     c057          jruc    table_from_distance
    2933 000111d0     09e5  dc_air  movi    defense_dist_air_table-32,a5
         000111e0 00011cb0' 
    2934 00011200     24a7          sll     5,a7
    2935 00011210     40e5          add     a7,a5
    2936 00011220     86a5          move    *a5,a5,L
    2937 00011230     c050          jruc    table_from_distance
    2938                    
    2939                    **************************************************************************
    2940                    *                                                                        *
    2941                    * GOFF_CONTROL                                                           *
    2942                    * GDEF_CONTROL                                                           *
    2943                    *                                                                        *
    2944                    **************************************************************************
    2945                    
    2946 00011240           GOFF_CONTROL
    2947 00011240           GDEF_CONTROL
    2948 00011240     b4ce          MOVE    *A6(POF_D_COLL),A14,W
         00011250     0690  
    2949 00011260     49c4          CMP     A14,A4 ;40 ;30
    2950 00011270     c968          JRHS    ctrl_0                          ;BR=OUTSIDE CHECK RANGE
    2951                    
    2952 00011280     05a0          MOVE    @PUCK_INTENDED,A0,W
         00011290 00000000! 
    2953 000112b0     ca08          JRZ     GDC_GO                          ;BR=NOT A PASS
    2954 000112c0     aec1          MOVB    *A6(POF_NUMBER),A1
         000112d0     0000  
    2955 000112e0                   EQTEAM  A0,A1
    2956 00011330     ca5c          JRZ     ctrl_0                          ;BR=GOALIES'S TEAM PASSIN'
    2957 00011340           GDC_GO
    2958                    
    2959                            ;CHECK FETCHING THE PUCK FLAG?
    2960                    
    2961                    ;       MOVE    *A6(POF_OBJECT),A5,L
    2962                    ;       MOVE    *A5(OXVAL),A0,L                 ;GOALIE POSITION
    2963                    ;       MOVE    *A5(OZVAL),A1,L
    2964                    ;       MOVE    *A8(OXVAL),A2,L                 ;PUCK POSITION
    2965                    ;       MOVE    *A8(OZVAL),A3,L
    2966                    ;
    2967                    ;       CALLA   find_dir_to_point               ;DIRECTION FROM PUCK TO GOALIE
    2968                    ;
    2969                    ;       MOVE    *A8(ODT_DIR),A1,L               ;PUCK DIRECTION
    2970                    ;       SUB     A0,A1
    2971                    ;       ABS     A1
    2972                    ;       CMPI    XD0900,A1
    2973                    ;       LOCKON  GT
    2974                    ;       JRGT    ctrl_0                          ;BR=NOT HEADING TOWARD GOALIE
    2975                    
    2976 00011340     b4ce          MOVE    *A6(POF_MODE),A14,W
         00011350     0210  
    2977 00011360     0b4e          CMPI    PM_GCHECKED,A14
         00011370     ffeb  
    2978 00011380     ca57          JREQ    ctrl_0                          ;BR=GETTIN' CHECKED
    2979                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   78

    2980 00011390     b6c5          MOVE    *A6(POF_OBJECT),A5,L
         000113a0     0280  
    2981                    
    2982 000113b0     b4ae          MOVE    *A5(ODT_GSAVETIME),A14,W
         000113c0     0640  
    2983 000113d0     cb52          JRNZ    ctrl_0                          ;BR=IN A SAVE
    2984                    
    2985                    ;       MOVE    *A5(ODT_GFLAGS),A14,W
    2986                    ;       BTST    B_MISSSAVE,A14
    2987                    ;       JRNZ    ctrl_0                          ;BR=MISSIN' PUCK
    2988                    
    2989 000113e0     b500          MOVE    *A8(ODT_VEL+010H),A0,W
         000113f0     04e0  
    2990 00011400     4804          CMP     A0,A4
    2991                    ;       JRGE    ctrl_0                          ;BR=NO INTERSECTION
    2992 00011410     c621          JRLE    GDC_P                           ;BR=POTENTIAL IMPACT
    2993                    
    2994                    ;       JRUC    ctrl_0
    2995                    
    2996 00011420     b4c0          MOVE    *A6(POF_D_PUCK),A0,W
         00011430     0680  
    2997 00011440     b6c3          MOVE    *A6(POF_D_LASTPUCK0),A3,L
         00011450     06a0  
    2998 00011460     4c6e          MOVE    A3,A14
    2999 00011470     2a0e          SRA     16,A14
    3000 00011480     480e          CMP     A0,A14                          ;CHECK AGAINST PREVIOUS
    3001 00011490     c546          JRGE    ctrl_0                          ;BR=COMING CLOSER
    3002 000114a0     0503          SEXT    A3,W
    3003 000114b0     486e          CMP     A3,A14
    3004 000114c0     c743          JRGT    ctrl_0                          ;BR=GOING AWAY
    3005                    
    3006 000114d0     b503          move    *a8(OYPOS),a3,W
         000114e0     0170  
    3007 000114f0     03a3          neg     a3
    3008 00011500     b4ae          move    *a5(OSIZEY),a14,W
         00011510     0270  
    3009 00011520     49c3          cmp     a14,a3
    3010 00011530     c93c          jrhs    ctrl_0                          ;BR=OVER YOUR HEAD (IGNORE)
    3011                    
    3012 00011540     b70e          MOVE    *A8(OXVEL),A14,L
         00011550     0100  
    3013 00011560     b700          MOVE    *A8(OXVAL),A0,L
         00011570     0140  
    3014 00011580     45c0          SUB     A14,A0
    3015 00011590     b208          MOVE    A0,*A8(OXVAL),L
         000115a0     0140  
    3016                    
    3017 000115b0     b70e          MOVE    *A8(OZVEL),A14,L
         000115c0     00e0  
    3018 000115d0     b700          MOVE    *A8(OZVAL),A0,L
         000115e0     0180  
    3019 000115f0     45c0          SUB     A14,A0
    3020 00011600     b208          MOVE    A0,*A8(OZVAL),L
         00011610     0180  
    3021                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   79

    3022 00011620     c007          JRUC    GDC_2
    3023                    
    3024 00011630           GDC_P
    3025                    ;       move    *a6(POF_OBJECT),a9,L
    3026                    ;       calla   find_closest_distance
    3027                    ;       move    *a8(ODT_VEL+010H),a1,W  ;velocity
    3028                    
    3029 00011630     b503          move    *a8(OYPOS),a3,W
         00011640     0170  
    3030 00011650     03a3          neg     a3
    3031 00011660     b4ae          move    *a5(OSIZEY),a14,W
         00011670     0270  
    3032 00011680     49c3          cmp     a14,a3
    3033 00011690     c926          jrhs    ctrl_0                          ;BR=OVER YOUR HEAD (IGNORE)
    3034                    
    3035                    ;       MOVK    GS_REBOUND,A0
    3036                    ;       CALLA   GOALIE_SPEECH
    3037                    
    3038                    ;       JRUC    ctrl_2                          ;REBOUND OTHERWISE
    3039                    
    3040                    ;       MOVE    *A8(OXVAL),A0,L
    3041                    ;       MOVE    *A8(OXVEL),A14,L
    3042                    ;       ADD     A14,A0
    3043                    ;       MOVE    A0,*A8(OXVAL),L
    3044                    ;
    3045                    ;       MOVE    *A8(OZVAL),A0,L
    3046                    ;       MOVE    *A8(OZVEL),A14,L
    3047                    ;       ADD     A14,A0
    3048                    ;       MOVE    A0,*A8(OZVAL),L
    3049                    ;
    3050                    ;       MOVE    *A8(OFLAGS),A14,W
    3051                    ;       ORI     M_FVELADD,A14
    3052                    ;       MOVE    A14,*A8(OFLAGS),W
    3053                    
    3054 000116a0           GDC_2
    3055                    
    3056                    ;ctrl_2 WITH IGNORE TIME SHORTENED.
    3057                    
    3058 000116a0     1840          movk    2,a0                            ;2 = we deflect it
    3059 000116b0     b701          move    *a8(ODT_VEL),a1,L               ;velocity
         000116c0     04d0  
    3060 000116d0     ca22          JRZ     ctrl_0                          ;BR=NOT MOVING
    3061 000116e0     2bc1          sra     2,a1                            ; / 4
    3062 000116f0     1942          movk    10,a2
    3063 00011700     0d5f          calla   puck_rebound_sound
         00011710 00000000! 
    3064 00011730     0960          rets
    3065                    
    3066                    ;;      cmpi    15,a3
    3067                    ;;      jrhs    GCD_AIR
    3068                    ;       MOVI    GDEFENSE_DIST_TABLE,A5
    3069                    ;       jruc    table_from_distance
    3070                    ;;GDC_AIR
    3071                    ;;      MOVI    GDEFENSE_DIST_AIR_TABLE,A5
    3072                    ;;      jruc    table_from_distance
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   80

    3073                    
    3074 00011740           table_from_distance             ;a5 = table, a1 = puck speed, a0 = closest distance
    3075 00011740     84a2  tfd1    move    *a5,a2,W
    3076 00011750     4840          cmp     a2,a0           ;CHECK DISTANCE
    3077 00011760     c203          jrls    tfd2            ;BR=FOUND SPEED TABLE
    3078 00011770     0b05          addi    48,a5
         00011780     0030  
    3079 00011790     c0fa          jruc    tfd1
    3080 000117a0     b6a5  tfd2    move    *a5(16),a5,L    ;SPEED TABLE
         000117b0     0010  
    3081                            ;fall through
    3082 000117c0           control_from_speed_table        ;a5 = table, a1 = puck speed
    3083 000117c0     09c0          movi    100,a0
         000117d0     0064  
    3084 000117e0     0d5f          calla   RAND0           ;GET RANDOM EVENT
         000117f0 00000000! 
    3085 00011810     84a2  cfst1   move    *a5,a2,W
    3086 00011820     4841          cmp     a2,a1           ;CHECK SPEED
    3087 00011830     c203          jrls    cfst2           ;BR=FOUND SPEED TABLE ENTRY
    3088 00011840     0b05          addi    48,a5
         00011850     0030  
    3089 00011860     c0fa          jruc    cfst1
    3090 00011870     b4a2  cfst2   move    *a5(16),a2,W    ;GET MISS (LOWER) LIMIT
         00011880     0010  
    3091 00011890     4840          cmp     a2,a0           ;CHECK IF MISS
    3092 000118a0     c807          jrlo    ctrl_1
    3093 000118b0     b4a2          move    *a5(32),a2,W    ;GET REBOUND (UPPER) LIMIT
         000118c0     0020  
    3094 000118d0     4840          cmp     a2,a0           ;CHECK IF REBOUND
    3095 000118e0     c806          jrlo    ctrl_2
    3096 000118f0     c00e          jruc    ctrl_3
    3097                    
    3098 00011900     5600  ctrl_0  clr     a0                              ;0 = we are too far away, or other ignore condition
    3099 00011910     0960          rets
    3100 00011920     1820  ctrl_1  movk    1,a0                            ;1 = we missed it
    3101 00011930     1bc2          movk    30,a2
    3102 00011940     0960          rets
    3103 00011950     1840  ctrl_2  movk    2,a0                            ;2 = we deflect it
    3104 00011960     b701          move    *a8(ODT_VEL),a1,L               ;velocity
         00011970     04d0  
    3105 00011980     2bc1          sra     2,a1                            ; / 4
    3106 00011990     1bc2          movk    30,a2
    3107 000119a0     0d5f          calla   puck_rebound_sound
         000119b0 00000000! 
    3108 000119d0     0960          rets
    3109 000119e0           ctrl_3
    3110 000119e0     aec0          movb    *a6(POF_NUMBER),a0
         000119f0     0000  
    3111 00011a00     05ae          move    @PUCK_INTENDED,a14
         00011a10 00000000! 
    3112 00011a30     480e          cmp     a0,a14
    3113 00011a40     cb04          jrnz    ct3x
    3114 00011a50     0d5f          calla   spx_pass_2
         00011a60 00000000! 
    3115 00011a80     c003          jruc    ct_4x
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   81

    3116 00011a90     0d5f  ct3x    calla   spx_intercept_control
         00011aa0 00000000! 
    3117 00011ac0     1860  ct_4x   movk    3,a0                            ;3 = we control it
    3118 00011ad0     0d5f          calla   puck_stop_sound
         00011ae0 00000000! 
    3119 00011b00     0960          rets
    3120                    
    3121 00011b10           intended_dist_table
    3122 00011b10                   WL      5,intended_speed_c_table
    3123 00011b40                   WL      15,intended_speed_1_table
    3124 00011b70                   WL      32767,intended_speed_2_table
    3125 00011ba0           intended_dist_air_table
    3126 00011ba0                   WL      5,intended_air_c_table
    3127 00011bd0                   WL      15,intended_air_1_table
    3128 00011c00                   WL      32767,intended_air_2_table
    3129                    
    3130 00011c30           defense_dist_table
    3131 00011c30 00011d70'         .long   defense1_dist_table
    3132 00011c50 00011e30'         .long   defense2_dist_table
    3133 00011c70 00011ef0'         .long   defense3_dist_table
    3134 00011c90 00011fb0'         .long   defense4_dist_table
    3135 00011cb0 00012070'         .long   defense5_dist_table
    3136 00011cd0           defense_dist_air_table
    3137 00011cd0 00011dd0'         .long   defense1_dist_air_table
    3138 00011cf0 00011e90'         .long   defense2_dist_air_table
    3139 00011d10 00011f50'         .long   defense3_dist_air_table
    3140 00011d30 00012010'         .long   defense4_dist_air_table
    3141 00011d50 000120d0'         .long   defense5_dist_air_table
    3142 00011d70           defense1_dist_table
    3143 00011d70                   WL      10,defense_speed1_1_table
    3144 00011da0                   WL      32767,defense_speed1_2_table
    3145 00011dd0           defense1_dist_air_table
    3146 00011dd0                   WL      10,defense_air1_1_table
    3147 00011e00                   WL      32767,defense_air1_2_table
    3148                    
    3149 00011e30           defense2_dist_table
    3150 00011e30                   WL      10,defense_speed2_1_table
    3151 00011e60                   WL      32767,defense_speed2_2_table
    3152 00011e90           defense2_dist_air_table
    3153 00011e90                   WL      10,defense_air2_1_table
    3154 00011ec0                   WL      32767,defense_air2_2_table
    3155                    
    3156 00011ef0           defense3_dist_table
    3157 00011ef0                   WL      10,defense_speed3_1_table
    3158 00011f20                   WL      32767,defense_speed3_2_table
    3159 00011f50           defense3_dist_air_table
    3160 00011f50                   WL      10,defense_air3_1_table
    3161 00011f80                   WL      32767,defense_air3_2_table
    3162                    
    3163 00011fb0           defense4_dist_table
    3164 00011fb0                   WL      10,defense_speed4_1_table
    3165 00011fe0                   WL      32767,defense_speed4_2_table
    3166 00012010           defense4_dist_air_table
    3167 00012010                   WL      10,defense_air4_1_table
    3168 00012040                   WL      32767,defense_air4_2_table
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   82

    3169                    
    3170 00012070           defense5_dist_table
    3171 00012070                   WL      10,defense_speed5_1_table
    3172 000120a0                   WL      32767,defense_speed5_2_table
    3173 000120d0           defense5_dist_air_table
    3174 000120d0                   WL      10,defense_air5_1_table
    3175 00012100                   WL      32767,defense_air5_2_table
    3176                    
    3177                    ;GDEFENSE_DIST_TABLE
    3178                    ;       WL      10,GDEFENSE_SPEED_1_TABLE
    3179                    ;       WL      32767,GDEFENSE_SPEED_2_TABLE
    3180                    ;GDEFENSE_DIST_AIR_TABLE
    3181                    ;       WL      10,GDEFENSE_AIR_1_TABLE
    3182                    ;       WL      32767,GDEFENSE_AIR_2_TABLE
    3183                    
    3184                    ;       .word   speed,%1,%2     ;3 is by default
    3185 00012130           intended_speed_c_table
    3186 00012130     7fff          .word   32767,0,0
    3187 00012160           intended_speed_1_table
    3188 00012160     7fff          .word   32767,0,0
    3189 00012190           intended_speed_2_table
    3190 00012190     7fff          .word   32767,0,0
    3191                    
    3192 000121c0           intended_air_c_table
    3193 000121c0     7fff          .word   32767,0,0
    3194 000121f0           intended_air_1_table
    3195 000121f0     7fff          .word   32767,0,0
    3196 00012220           intended_air_2_table
    3197 00012220     7fff          .word   32767,0,0
    3198                    
    3199 00012250           defense_speed1_1_table
    3200 00012250     0005          .word   5,0,0
    3201 00012280     0006          .word   6,1,2
    3202 000122b0     0007          .word   7,1,7
    3203 000122e0     0008          .word   8,2,12
    3204 00012310     0009          .word   9,3,19
    3205 00012340     000a          .word   10,5,27
    3206 00012370     000b          .word   11,8,38
    3207 000123a0     000c          .word   12,9,49
    3208 000123d0     000d          .word   13,10,71
    3209 00012400     000e          .word   14,11,82
    3210 00012430     7fff          .word   32767,12,93
    3211 00012460           defense_speed1_2_table
    3212 00012460     0005          .word   5,0,0
    3213 00012490     0006          .word   6,3,7
    3214 000124c0     0007          .word   7,3,11
    3215 000124f0     0008          .word   8,4,16
    3216 00012520     0009          .word   9,5,23
    3217 00012550     000a          .word   10,8,32
    3218 00012580     000b          .word   11,10,43
    3219 000125b0     000c          .word   12,11,54
    3220 000125e0     000d          .word   13,12,76
    3221 00012610     000e          .word   14,13,87
    3222 00012640     7fff          .word   32767,14,98
    3223                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   83

    3224 00012670           defense_speed2_1_table
    3225 00012670     0005          .word   5,0,0
    3226 000126a0     0006          .word   6,1,2
    3227 000126d0     0007          .word   7,1,6
    3228 00012700     0008          .word   8,2,12
    3229 00012730     0009          .word   9,3,18
    3230 00012760     000a          .word   10,5,26
    3231 00012790     000b          .word   11,7,37
    3232 000127c0     000c          .word   12,8,47
    3233 000127f0     000d          .word   13,9,68
    3234 00012820     000e          .word   14,10,79
    3235 00012850     7fff          .word   32767,12,89
    3236 00012880           defense_speed2_2_table
    3237 00012880     0005          .word   5,0,0
    3238 000128b0     0006          .word   6,3,6
    3239 000128e0     0007          .word   7,3,10
    3240 00012910     0008          .word   8,4,16
    3241 00012940     0009          .word   9,5,22
    3242 00012970     000a          .word   10,7,30
    3243 000129a0     000b          .word   11,9,41
    3244 000129d0     000c          .word   12,10,51
    3245 00012a00     000d          .word   13,12,72
    3246 00012a30     000e          .word   14,13,83
    3247 00012a60     7fff          .word   32767,14,93
    3248                    
    3249 00012a90           defense_speed3_1_table
    3250 00012a90     0005          .word   5,0,0
    3251 00012ac0     0006          .word   6,1,2
    3252 00012af0     0007          .word   7,1,6
    3253 00012b20     0008          .word   8,2,11
    3254 00012b50     0009          .word   9,3,17
    3255 00012b80     000a          .word   10,5,25
    3256 00012bb0     000b          .word   11,7,35
    3257 00012be0     000c          .word   12,8,45
    3258 00012c10     000d          .word   13,9,65
    3259 00012c40     000e          .word   14,10,75
    3260 00012c70     7fff          .word   32767,11,85
    3261 00012ca0           defense_speed3_2_table
    3262 00012ca0     0005          .word   5,0,0
    3263 00012cd0     0006          .word   6,3,6
    3264 00012d00     0007          .word   7,3,10
    3265 00012d30     0008          .word   8,4,15
    3266 00012d60     0009          .word   9,5,21
    3267 00012d90     000a          .word   10,7,29
    3268 00012dc0     000b          .word   11,9,39
    3269 00012df0     000c          .word   12,10,49
    3270 00012e20     000d          .word   13,11,69
    3271 00012e50     000e          .word   14,12,79
    3272 00012e80     7fff          .word   32767,13,89
    3273                    
    3274 00012eb0           defense_speed4_1_table
    3275 00012eb0     0005          .word   5,0,0
    3276 00012ee0     0006          .word   6,1,2
    3277 00012f10     0007          .word   7,1,6
    3278 00012f40     0008          .word   8,2,10
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   84

    3279 00012f70     0009          .word   9,3,16
    3280 00012fa0     000a          .word   10,5,24
    3281 00012fd0     000b          .word   11,7,33
    3282 00013000     000c          .word   12,8,43
    3283 00013030     000d          .word   13,9,62
    3284 00013060     000e          .word   14,9,71
    3285 00013090     7fff          .word   32767,10,81
    3286 000130c0           defense_speed4_2_table
    3287 000130c0     0005          .word   5,0,0
    3288 000130f0     0006          .word   6,3,6
    3289 00013120     0007          .word   7,3,9
    3290 00013150     0008          .word   8,4,14
    3291 00013180     0009          .word   9,5,20
    3292 000131b0     000a          .word   10,7,28
    3293 000131e0     000b          .word   11,9,37
    3294 00013210     000c          .word   12,9,47
    3295 00013240     000d          .word   13,9,63
    3296 00013270     000e          .word   14,11,75
    3297 000132a0     7fff          .word   32767,12,85
    3298                    
    3299 000132d0           defense_speed5_1_table
    3300 000132d0     0005          .word   5,0,0
    3301 00013300     0006          .word   6,1,2
    3302 00013330     0007          .word   7,1,5
    3303 00013360     0008          .word   8,2,10
    3304 00013390     0009          .word   9,3,15
    3305 000133c0     000a          .word   10,4,22
    3306 000133f0     000b          .word   11,6,31
    3307 00013420     000c          .word   12,7,40
    3308 00013450     000d          .word   13,8,58
    3309 00013480     000e          .word   14,9,67
    3310 000134b0     7fff          .word   32767,10,76
    3311 000134e0           defense_speed5_2_table
    3312 000134e0     0005          .word   5,0,0
    3313 00013510     0006          .word   6,3,5
    3314 00013540     0007          .word   7,3,9
    3315 00013570     0008          .word   8,4,13
    3316 000135a0     0009          .word   9,4,19
    3317 000135d0     000a          .word   10,6,26
    3318 00013600     000b          .word   11,8,35
    3319 00013630     000c          .word   12,9,44
    3320 00013660     000d          .word   13,10,62
    3321 00013690     000e          .word   14,11,71
    3322 000136c0     7fff          .word   32767,12,80
    3323                    
    3324                    ;GDEFENSE_SPEED_1_TABLE
    3325                    ;       .word   5,0,100      ;0
    3326                    ;       .word   6,1,100      ;2
    3327                    ;       .word   7,1,100      ;6
    3328                    ;       .word   8,2,100      ;11
    3329                    ;       .word   9,3,100      ;17
    3330                    ;       .word   10,5,100     ;25
    3331                    ;       .word   11,7,100     ;35
    3332                    ;       .word   12,8,100     ;45
    3333                    ;       .word   13,9,100     ;65
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   85

    3334                    ;       .word   14,10,100    ;75
    3335                    ;       .word   32767,11,100 ;85
    3336                    ;GDEFENSE_SPEED_2_TABLE
    3337                    ;       .word   5,0,100      ;0
    3338                    ;       .word   6,3,100      ;6
    3339                    ;       .word   7,3,100      ;10
    3340                    ;       .word   8,4,100      ;15
    3341                    ;       .word   9,5,100      ;21
    3342                    ;       .word   10,7,100     ;29
    3343                    ;       .word   11,9,100     ;39
    3344                    ;       .word   12,10,100    ;49
    3345                    ;       .word   13,11,100    ;69
    3346                    ;       .word   14,12,100    ;79
    3347                    ;       .word   32767,13,100 ;89
    3348                    
    3349 000136f0           defense_air1_1_table
    3350 000136f0     0005          .word   5,5,11
    3351 00013720     0006          .word   6,7,14
    3352 00013750     0007          .word   7,9,18
    3353 00013780     0008          .word   8,11,21
    3354 000137b0     0009          .word   9,13,33
    3355 000137e0     000a          .word   10,15,44
    3356 00013810     000b          .word   11,19,55
    3357 00013840     000c          .word   12,22,71
    3358 00013870     000d          .word   13,25,82
    3359 000138a0     000e          .word   14,31,88
    3360 000138d0     7fff          .word   32767,44,93
    3361                    
    3362 00013900           defense_air1_2_table
    3363 00013900     0005          .word   5,8,15
    3364 00013930     0006          .word   6,9,19
    3365 00013960     0007          .word   7,11,22
    3366 00013990     0008          .word   8,13,25
    3367 000139c0     0009          .word   9,15,37
    3368 000139f0     000a          .word   10,18,48
    3369 00013a20     000b          .word   11,21,59
    3370 00013a50     000c          .word   12,24,76
    3371 00013a80     000d          .word   13,27,87
    3372 00013ab0     000e          .word   14,33,92
    3373 00013ae0     7fff          .word   32767,46,98
    3374                    
    3375 00013b10           defense_air2_1_table
    3376 00013b10     0005          .word   5,5,10
    3377 00013b40     0006          .word   6,6,14
    3378 00013b70     0007          .word   7,8,17
    3379 00013ba0     0008          .word   8,10,20
    3380 00013bd0     0009          .word   9,13,31
    3381 00013c00     000a          .word   10,15,42
    3382 00013c30     000b          .word   11,18,52
    3383 00013c60     000c          .word   12,21,68
    3384 00013c90     000d          .word   13,24,79
    3385 00013cc0     000e          .word   14,29,84
    3386 00013cf0     7fff          .word   32767,42,89
    3387                    
    3388 00013d20           defense_air2_2_table
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   86

    3389 00013d20     0005          .word   5,7,15
    3390 00013d50     0006          .word   6,8,18
    3391 00013d80     0007          .word   7,10,21
    3392 00013db0     0008          .word   8,13,24
    3393 00013de0     0009          .word   9,15,36
    3394 00013e10     000a          .word   10,17,46
    3395 00013e40     000b          .word   11,20,57
    3396 00013e70     000c          .word   12,23,72
    3397 00013ea0     000d          .word   13,26,83
    3398 00013ed0     000e          .word   14,31,88
    3399 00013f00     7fff          .word   32767,44,93
    3400                    
    3401 00013f30           defense_air3_1_table
    3402 00013f30     0005          .word   5,5,10
    3403 00013f60     0006          .word   6,6,13
    3404 00013f90     0007          .word   7,8,16
    3405 00013fc0     0008          .word   8,10,19
    3406 00013ff0     0009          .word   9,12,30
    3407 00014020     000a          .word   10,14,40
    3408 00014050     000b          .word   11,17,50
    3409 00014080     000c          .word   12,20,65
    3410 000140b0     000d          .word   13,23,75
    3411 000140e0     000e          .word   14,28,80
    3412 00014110     7fff          .word   32767,40,85
    3413 00014140           defense_air3_2_table
    3414 00014140     0005          .word   5,7,14
    3415 00014170     0006          .word   6,8,17
    3416 000141a0     0007          .word   7,10,20
    3417 000141d0     0008          .word   8,12,23
    3418 00014200     0009          .word   9,14,34
    3419 00014230     000a          .word   10,16,44
    3420 00014260     000b          .word   11,19,54
    3421 00014290     000c          .word   12,22,69
    3422 000142c0     000d          .word   13,25,79
    3423 000142f0     000e          .word   14,30,84
    3424 00014320     7fff          .word   32767,42,89
    3425                    
    3426 00014350           defense_air4_1_table
    3427 00014350     0005          .word   5,5,9
    3428 00014380     0006          .word   6,6,12
    3429 000143b0     0007          .word   7,8,15
    3430 000143e0     0008          .word   8,9,18
    3431 00014410     0009          .word   9,11,28
    3432 00014440     000a          .word   10,13,38
    3433 00014470     000b          .word   11,16,47
    3434 000144a0     000c          .word   12,19,62
    3435 000144d0     000d          .word   13,22,71
    3436 00014500     000e          .word   14,27,76
    3437 00014530     7fff          .word   32767,38,81
    3438                    
    3439 00014560           defense_air4_2_table
    3440 00014560     0005          .word   5,7,13
    3441 00014590     0006          .word   6,8,16
    3442 000145c0     0007          .word   7,9,19
    3443 000145f0     0008          .word   8,11,22
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   87

    3444 00014620     0009          .word   9,13,32
    3445 00014650     000a          .word   10,15,42
    3446 00014680     000b          .word   11,18,51
    3447 000146b0     000c          .word   12,21,66
    3448 000146e0     000d          .word   13,24,75
    3449 00014710     000e          .word   14,28,80
    3450 00014740     7fff          .word   32767,40,85
    3451                    
    3452 00014770           defense_air5_1_table
    3453 00014770     0005          .word   5,4,9
    3454 000147a0     0006          .word   6,5,12
    3455 000147d0     0007          .word   7,7,14
    3456 00014800     0008          .word   8,9,17
    3457 00014830     0009          .word   9,11,27
    3458 00014860     000a          .word   10,13,36
    3459 00014890     000b          .word   11,15,45
    3460 000148c0     000c          .word   12,18,58
    3461 000148f0     000d          .word   13,21,67
    3462 00014920     000e          .word   14,25,72
    3463 00014950     7fff          .word   32767,36,76
    3464                    
    3465 00014980           defense_air5_2_table
    3466 00014980     0005          .word   5,6,13
    3467 000149b0     0006          .word   6,7,15
    3468 000149e0     0007          .word   7,9,18
    3469 00014a10     0008          .word   8,11,21
    3470 00014a40     0009          .word   9,13,31
    3471 00014a70     000a          .word   10,14,40
    3472 00014aa0     000b          .word   11,17,49
    3473 00014ad0     000c          .word   12,20,62
    3474 00014b00     000d          .word   13,22,71
    3475 00014b30     000e          .word   14,27,76
    3476 00014b60     7fff          .word   32767,38,80
    3477                    
    3478 00014b90           clean_up_my_signals     ;(my team)
    3479 00014b90     098f          mmtm    sp,a0,a1
         00014ba0     c000  
    3480 00014bb0     5621          clr     a1
    3481 00014bc0     aece          movb    *a6(POF_NUMBER),a14
         00014bd0     0000  
    3482 00014be0     142e          dec     a14
    3483 00014bf0     2fce          srl     2,a14
    3484 00014c00     244e          sll     2,a14
    3485 00014c10     102e          inc     a14
    3486 00014c20                   GBLOCK  a14,a14
    3487 00014c60     b5c0          move    *a14(POF_FLAGS),a0,W
         00014c70     0200  
    3488 00014c80     0b80          andni   M_PF_SIG_SHOOT|M_PF_SIG_PASS,a0
         00014c90 000000c0  
    3489 00014cb0     b00e          move    a0,*a14(POF_FLAGS),W
         00014cc0     0200  
    3490 00014cd0     b02e          move    a1,*a14(POF_DRONE_BUTTONS),W
         00014ce0     09d0  
    3491 00014cf0     b5c0          move    *a14(PLAYER_BLOCK_SIZE+POF_FLAGS),a0,W
         00014d00     1200  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   88

    3492 00014d10     0b80          andni   M_PF_SIG_SHOOT|M_PF_SIG_PASS,a0
         00014d20 000000c0  
    3493 00014d40     b00e          move    a0,*a14(PLAYER_BLOCK_SIZE+POF_FLAGS),W
         00014d50     1200  
    3494 00014d60     b02e          move    a1,*a14(PLAYER_BLOCK_SIZE+POF_DRONE_BUTTONS),W
         00014d70     19d0  
    3495 00014d80     b5c0          move    *a14((3*PLAYER_BLOCK_SIZE)+POF_FLAGS),a0,W
         00014d90     3200  
    3496 00014da0     0b80          andni   M_PF_SIG_SHOOT|M_PF_SIG_PASS,a0
         00014db0 000000c0  
    3497 00014dd0     b00e          move    a0,*a14((3*PLAYER_BLOCK_SIZE)+POF_FLAGS),W
         00014de0     3200  
    3498 00014df0     b02e          move    a1,*a14((3*PLAYER_BLOCK_SIZE)+POF_DRONE_BUTTONS),W
         00014e00     39d0  
    3499 00014e10     09af          mmfm    sp,a0,a1
         00014e20     0003  
    3500 00014e30     0960          rets
    3501                    
    3502 00014e40           clear_all_signals
    3503 00014e40     098f          mmtm    sp,a0,a1,a2
         00014e50     e000  
    3504 00014e60     1900          movk    8,a0
    3505 00014e70     5642          clr     a2
    3506 00014e80     09e1          movi    PLAYER_1_BLOCK,a1
         00014e90 00000000! 
    3507 00014eb0     b42e  casl    move    *a1(POF_FLAGS),a14,W
         00014ec0     0200  
    3508 00014ed0     0b8e          andni   (M_PF_SIG_SHOOT|M_PF_SIG_PASS),a14
         00014ee0 000000c0  
    3509 00014f00     b1c1          move    a14,*a1(POF_FLAGS),W
         00014f10     0200  
    3510 00014f20     b041          move    a2,*a1(POF_DRONE_BUTTONS),W
         00014f30     09d0  
    3511 00014f40     0b01          addi    PLAYER_BLOCK_SIZE,a1
         00014f50     1000  
    3512 00014f60     3d80          dsjs    a0,casl
    3513 00014f70     09af          mmfm    sp,a0,a1,a2
         00014f80     0007  
    3514 00014f90     0960          rets
    3515                    
    3516 00014fa0           fix_all_signals
    3517 00014fa0     098f          mmtm    sp,a0,a1,a2,a6
         00014fb0     e200  
    3518 00014fc0     07a1          move    @WAVEIRQS,a1,L
         00014fd0 00000000! 
    3519 00014ff0     07ae          move    @faceoff_time,a14,L
         00015000 00000000! 
    3520 00015020     45c1          sub     a14,a1
    3521 00015030     0b41          cmpi    40,a1
         00015040     ffd7  
    3522 00015050     c20c          jrls    fas99
    3523 00015060     1820          movk    1,a0
    3524 00015070     0d3f          callr   fas
         00015080     000c  
    3525 00015090     1840          movk    2,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   89

    3526 000150a0     0d3f          callr   fas
         000150b0     0009  
    3527 000150c0     18a0          movk    5,a0
    3528 000150d0     0d3f          callr   fas
         000150e0     0006  
    3529 000150f0     18c0          movk    6,a0
    3530 00015100     0d3f          callr   fas
         00015110     0003  
    3531 00015120     09af  fas99   mmfm    sp,a0,a1,a2,a6
         00015130     0047  
    3532 00015140     0960          rets
    3533 00015150           fas     GBLOCK  a0,a6
    3534 000151a0     b4c1          move    *a6(POF_FLAGS),a1,W
         000151b0     0200  
    3535 000151c0     b4c2          move    *a6(POF_BUTTONS),a2,W
         000151d0     0380  
    3536 000151e0     1fe1          btst    B_PF_HUMAN,a1
    3537 000151f0     ca0a          jrz     fas3
    3538 00015200     1fe2          btst    0,a2
    3539 00015210     ca08          jrz     fas3
    3540 00015220     b4c2          move    *a6(POF_TURBO_MODE),a2,W
         00015230     0580  
    3541 00015240     cb05          jrnz    fas3
    3542 00015250     0ba1          ori     M_PF_SIG_SHOOT,a1
         00015260 00000040  
    3543 00015280     b026          move    a1,*a6(POF_FLAGS),W
         00015290     0200  
    3544 000152a0     0960  fas3    rets
    3545                    
    3546 000152b0           signal_to_pass
    3547 000152b0     098f          mmtm    sp,a1
         000152c0     4000  
    3548 000152d0     07a1          move    @WAVEIRQS,a1,L
         000152e0 00000000! 
    3549 00015300     07ae          move    @faceoff_time,a14,L
         00015310 00000000! 
    3550 00015330     45c1          sub     a14,a1
    3551 00015340     0b41          cmpi    28,a1
         00015350     ffe3  
    3552 00015360     c207          jrls    stp_9
    3553 00015370     b4ce          move    *a6(POF_FLAGS),a14,W
         00015380     0200  
    3554 00015390     0bae          ori     M_PF_SIG_PASS,a14
         000153a0 00000080  
    3555 000153c0     b1c6          move    a14,*a6(POF_FLAGS),W
         000153d0     0200  
    3556 000153e0     09af  stp_9   mmfm    sp,a1
         000153f0     0002  
    3557 00015400     0960          rets
    3558                    
    3559 00015410           signal_to_shoot
    3560 00015410     098f          mmtm    sp,a1
         00015420     4000  
    3561 00015430     07a1          move    @WAVEIRQS,a1,L
         00015440 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   90

    3562 00015460     07ae          move    @faceoff_time,a14,L
         00015470 00000000! 
    3563 00015490     45c1          sub     a14,a1
    3564 000154a0     0b41          cmpi    40,a1
         000154b0     ffd7  
    3565 000154c0     c207          jrls    sts_9
    3566 000154d0     b4ce          move    *a6(POF_FLAGS),a14,W
         000154e0     0200  
    3567 000154f0     0bae          ori     M_PF_SIG_SHOOT,a14
         00015500 00000040  
    3568 00015520     b1c6          move    a14,*a6(POF_FLAGS),W
         00015530     0200  
    3569 00015540     09af  sts_9   mmfm    sp,a1
         00015550     0002  
    3570 00015560     0960          rets
    3571                    
    3572 00015570           read_joystick
    3573 00015570     098f          mmtm    sp,a0,a1,a2,a3
         00015580     f000  
    3574 00015590                   KITN    2
    3575 000155d0     cb06          jrnz    rjva_a
    3576 000155e0     4c0e          move    a0,a14
    3577 000155f0     24ce          sll     6,a14
    3578 00015600     0b2e          addi    joystick_shift_table_2p-64,a14
         00015610 00015e20' 
    3579 00015630     c005          jruc    rjva_b
    3580 00015640     4c0e  rjva_a  move    a0,a14
    3581 00015650     24ce          sll     6,a14
    3582 00015660     0b2e          addi    joystick_shift_table-64,a14
         00015670 00015c20' 
    3583 00015690     97c1  rjva_b  move    *a14+,a1,L              ;get stick address to read
    3584 000156a0     85ce          move    *a14,a14,W              ;get shift amount
    3585 000156b0     8421          move    *a1,a1,W
    3586 000156c0     4c22          move    a1,a2
    3587 000156d0     2f82          srl     4,a2
    3588 000156e0     67c2          srl     a14,a2
    3589 000156f0     03e2          not     a2
    3590 00015700     2702          sll     24,a2
    3591 00015710     2d02          srl     24,a2
    3592 00015720     b046          move    a2,*a6(POF_BUTTONS),W   ;buttons read
         00015730     0380  
    3593 00015740     67c1          srl     a14,a1
    3594 00015750     2781          sll     28,a1
    3595 00015760     2d01          srl     24,a1
    3596 00015770     0b21          addi    joystick_pos_table,a1
         00015780 00016060' 
    3597 000157a0     842e          move    *a1,a14,W               ;convert bits to joystick direction
    3598 000157b0     aec1          movb    *a6(POF_I_JOY),a1       ;remove our corner check if on
         000157c0     03a0  
    3599 000157d0     482e          cmp     a1,a14
    3600 000157e0     cb02          jrnz    rjjj
    3601 000157f0     57ce          clr     a14                     ;we are at corner, joystick is 0
    3602 00015800     c003          jruc    rjjk
    3603 00015810     5621  rjjj    clr     a1
    3604 00015820     ac26          movb    a1,*a6(POF_I_JOY)       ;clear out corner check, we are not there
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   91

         00015830     03a0  
    3605 00015840     adc6  rjjk    movb    a14,*a6(POF_JOY)        ;store raw stick direction
         00015850     0398  
    3606 00015860     0d3f          callr   player_rink_check       ;modify based on rink position  - TRASHES A3
         00015870     008e  
    3607 00015880     ac06          movb    a0,*a6(POF_M_JOY)       ;store modified direction
         00015890     03a8  
    3608 000158a0     09af          mmfm    sp,a0,a1,a2,a3
         000158b0     000f  
    3609 000158c0     0960          rets
    3610                    
    3611 000158d0           read_joystick_short
    3612 000158d0     098f          mmtm    sp,a0,a1,a2,a3
         000158e0     f000  
    3613 000158f0                   KITN    2
    3614 00015930     cb06          jrnz    rjsa_a
    3615 00015940     4c0e          move    a0,a14
    3616 00015950     24ce          sll     6,a14
    3617 00015960     0b2e          addi    joystick_shift_table_2p-64,a14
         00015970 00015e20' 
    3618 00015990     c005          jruc    rjsa_b
    3619 000159a0     4c0e  rjsa_a  move    a0,a14
    3620 000159b0     24ce          sll     6,a14
    3621 000159c0     0b2e          addi    joystick_shift_table-64,a14
         000159d0 00015c20' 
    3622 000159f0     97c1  rjsa_b  move    *a14+,a1,L              ;get stick address to read
    3623 00015a00     85ce          move    *a14,a14,W              ;get shift amount
    3624 00015a10     8421          move    *a1,a1,W
    3625 00015a20     4c22          move    a1,a2
    3626 00015a30     2f82          srl     4,a2
    3627 00015a40     67c2          srl     a14,a2
    3628 00015a50     03e2          not     a2
    3629 00015a60     2702          sll     24,a2
    3630 00015a70     2d02          srl     24,a2
    3631 00015a80     b046          move    a2,*a6(POF_BUTTONS),W   ;buttons read
         00015a90     0380  
    3632 00015aa0     67c1          srl     a14,a1
    3633 00015ab0     2781          sll     28,a1
    3634 00015ac0     2d01          srl     24,a1
    3635 00015ad0     0b21          addi    joystick_pos_table,a1
         00015ae0 00016060' 
    3636 00015b00     842e          move    *a1,a14,W               ;convert bits to joystick direction
    3637 00015b10     adc6          movb    a14,*a6(POF_JOY)        ;store raw stick direction
         00015b20     0398  
    3638 00015b30     adc6          movb    a14,*a6(POF_M_JOY)      ;store modified direction
         00015b40     03a8  
    3639 00015b50     09af          mmfm    sp,a0,a1,a2,a3
         00015b60     000f  
    3640 00015b70     0960          rets
    3641                    
    3642 00015b80           read_just_buttons       ;in on a9, out on a2
    3643 00015b80     4d2e          move    a9,a14
    3644 00015b90     24ce          sll     6,a14
    3645 00015ba0     0b2e          addi    joystick_shift_table-64,a14
         00015bb0 00015c20' 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   92

    3646 00015bd0     97c2          move    *a14+,a2,L              ;get stick address to read
    3647 00015be0     85ce          move    *a14,a14,W              ;get shift amount
    3648 00015bf0     8442          move    *a2,a2,W
    3649 00015c00     2f82          srl     4,a2
    3650 00015c10     67c2          srl     a14,a2
    3651 00015c20     03e2          not     a2
    3652 00015c30     2702          sll     24,a2
    3653 00015c40     2d02          srl     24,a2
    3654 00015c50     0960          rets
    3655                    
    3656 00015c60           joystick_shift_table
    3657 00015c60 01860000          .long   SWITCH,0
    3658 00015ca0 01860000          .long   SWITCH,-8
    3659 00015ce0 00000000          .long   0,0
    3660 00015d20 00000000          .long   0,0
    3661 00015d60 01860010          .long   SWITCH2,0
    3662 00015da0 01860010          .long   SWITCH2,-8
    3663 00015de0 00000000          .long   0,0
    3664 00015e20 00000000          .long   0,0
    3665                    
    3666 00015e60           joystick_shift_table_2p
    3667 00015e60 01860000          .long   SWITCH,0
    3668 00015ea0 00000000          .long   0,0
    3669 00015ee0 00000000          .long   0,0
    3670 00015f20 00000000          .long   0,0
    3671 00015f60 00000000          .long   0,0
    3672 00015fa0 01860000          .long   SWITCH,-8
    3673 00015fe0 00000000          .long   0,0
    3674 00016020 00000000          .long   0,0
    3675                    
    3676 00016060           joystick_pos_table
    3677 00016060     0000          .word   0
    3678 00016070     0000          .word   0
    3679 00016080     0000          .word   0
    3680 00016090     0000          .word   0
    3681 000160a0     0000          .word   0
    3682 000160b0     0002          .word   2
    3683 000160c0     0004          .word   4
    3684 000160d0     0003          .word   3
    3685 000160e0     0000          .word   0
    3686 000160f0     0008          .word   8
    3687 00016100     0006          .word   6
    3688 00016110     0007          .word   7
    3689 00016120     0000          .word   0
    3690 00016130     0001          .word   1
    3691 00016140     0005          .word   5
    3692 00016150     0000          .word   0
    3693                    
    3694 00016160           player_rink_check
    3695 00016160     aec0          movb    *a6(POF_JOY),a0
         00016170     0398  
    3696 00016180     098f          mmtm    sp,a0
         00016190     8000  
    3697 000161a0     0d3f          callr   drone_rink_check
         000161b0     0054  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   93

    3698 000161c0     09af          mmfm    sp,a14
         000161d0     4000  
    3699 000161e0     480e          cmp     a0,a14
    3700 000161f0     ca0c          jrz     prc_9
    3701 00016200     4c00          move    a0,a0
    3702 00016210     cb0a          jrnz    prc_9
    3703                    
    3704 00016220     b700          move    *a8(OXVEL),a0,L
         00016230     0100  
    3705 00016240     b701          move    *a8(OZVEL),a1,L
         00016250     00e0  
    3706 00016260     24ae          sll     5,a14
    3707 00016270     0b2e          addi    prc_rrx,a14
         00016280 000162d0' 
    3708 000162a0     87ce          move    *a14,a14,L
    3709 000162b0     016e          jump    a14
    3710 000162c0     0960  prc_9   rets
    3711                    
    3712 000162d0 000163f0' prc_rrx .long   rrx0
    3713 000162f0 00016400'         .long   rrx1
    3714 00016310 00016410'         .long   rrx2
    3715 00016330 00016440'         .long   rrx3
    3716 00016350 00016450'         .long   rrx4
    3717 00016370 00016480'         .long   rrx5
    3718 00016390 00016490'         .long   rrx6
    3719 000163b0 000164c0'         .long   rrx7
    3720 000163d0 000164d0'         .long   rrx8
    3721                    
    3722 000163f0     0960  rrx0    rets
    3723 00016400     c018  rrx1    jruc    rznx
    3724 00016410     0d3f  rrx2    callr   rxp
         00016420     001b  
    3725 00016430     c015          jruc    rznx
    3726 00016440     c00b  rrx3    jruc    rxpx
    3727 00016450     0d3f  rrx4    callr   rxp
         00016460     0017  
    3728 00016470     c00e          jruc    rzpx
    3729 00016480     c00d  rrx5    jruc    rzpx
    3730 00016490     0d3f  rrx6    callr   rxn
         000164a0     0018  
    3731 000164b0     c00a          jruc    rzpx
    3732 000164c0     c006  rrx7    jruc    rxnx
    3733 000164d0     0d3f  rrx8    callr   rxn
         000164e0     0014  
    3734 000164f0     c009          jruc    rznx
    3735                    
    3736 00016500     0d3f  rxpx    callr   rxp
         00016510     000c  
    3737 00016520     c008          jruc    rxzx
    3738 00016530     0d3f  rxnx    callr   rxn
         00016540     000e  
    3739 00016550     c005          jruc    rxzx
    3740 00016560     0d3f  rzpx    callr   rzp
         00016570     000f  
    3741 00016580     c002          jruc    rxzx
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   94

    3742 00016590     0d3f  rznx    callr   rzn
         000165a0     0011  
    3743 000165b0     c080  rxzx    jauc    set_obj_to_rect
         000165c0 00000000! 
    3744                    
    3745 000165e0     4c00  rxp     move    a0,a0
    3746 000165f0     ca02          jrz     rxp9
    3747 00016600     ce01          jrn     rxp9
    3748 00016610     5600          clr     a0
    3749 00016620     0960  rxp9    rets
    3750 00016630     4c00  rxn     move    a0,a0
    3751 00016640     cf01          jrnn    rxn9
    3752 00016650     5600          clr     a0
    3753 00016660     0960  rxn9    rets
    3754                    
    3755 00016670     4c21  rzp     move    a1,a1
    3756 00016680     ca02          jrz     rzp9
    3757 00016690     ce01          jrn     rzp9
    3758 000166a0     5621          clr     a1
    3759 000166b0     0960  rzp9    rets
    3760 000166c0     4c21  rzn     move    a1,a1
    3761 000166d0     cf01          jrnn    rzn9
    3762 000166e0     5621          clr     a1
    3763 000166f0     0960  rzn9    rets
    3764                    
    3765 00016700           drone_rink_check
    3766                    ;       mmtm    sp,a0
    3767                    ;       calla   get_players_puck_point_o
    3768                    ;       mmtm    sp,a0,a1
    3769                    ;       srl     16,a0
    3770                    ;       move    a0,a14
    3771                    ;       movy    a1,a14
    3772                    ;       callr   pcl_fnd
    3773                    ;       mmfm    sp,a9,a11
    3774                    ;       mmfm    sp,a0
    3775                    ;       call    a1
    3776                    ;       mmtm    sp,a0
    3777                    ;       move    a9,a0
    3778                    ;       move    a11,a1
    3779                    ;       calla   move_player_to_puckpoint
    3780                    ;       mmfm    sp,a0
    3781                    
    3782 00016700     b70e          move    *a8(OXVAL),a14,L
         00016710     0140  
    3783 00016720     0b2e          addi    [0,08000h],a14
         00016730 00008000  
    3784 00016750     2a0e          sra     16,a14
    3785                    ;       move    *a8(OXPOS),a14,W        ;half
    3786                    
    3787 00016760     b501          move    *a8(OZPOS),a1,W
         00016770     0190  
    3788 00016780     2601          sll     16,a1
    3789 00016790     ee2e          movy    a1,a14                  ;a14 = [z,x] of puck
    3790 000167a0     0d3f          callr   pcl_fnd
         000167b0     00e5  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   95

    3791 000167c0     b709          move    *a8(OXVAL),a9,L
         000167d0     0140  
    3792 000167e0     b70b          move    *a8(OZVAL),a11,L
         000167f0     0180  
    3793 00016800     0921          call    a1                      ;go to address for further checks
    3794 00016810     0d3f          callr   blue_line_check         ;keep player from going too far into zone
         00016820     006d  
    3795 00016830     0d3f          callr   close_area_check
         00016840     002d  
    3796 00016850     b328          move    a9,*a8(OXVAL),L
         00016860     0140  
    3797 00016870     b368          move    a11,*a8(OZVAL),L
         00016880     0180  
    3798 00016890     0960          rets
    3799                    
    3800 000168a0           goalie_rink_check
    3801 000168a0     098f          mmtm    sp,a0
         000168b0     8000  
    3802 000168c0     b70e          move    *a8(OXVAL),a14,L
         000168d0     0140  
    3803 000168e0     0b2e          addi    [0,08000h],a14
         000168f0 00008000  
    3804 00016910     2a0e          sra     16,a14
    3805 00016920     b501          move    *a8(OZPOS),a1,W
         00016930     0190  
    3806 00016940     2601          sll     16,a1
    3807 00016950     ee2e          movy    a1,a14                  ;a14 = [z,x] of puck
    3808 00016960     0d3f          callr   pcl_gfd
         00016970     00c5  
    3809 00016980     b709          move    *a8(OXVAL),a9,L
         00016990     0140  
    3810 000169a0     b70b          move    *a8(OZVAL),a11,L
         000169b0     0180  
    3811 000169c0     098f          mmtm    sp,a9,a11
         000169d0     0050  
    3812 000169e0     0921          call    a1                      ;go to address for further checks
    3813 000169f0     09af          mmfm    sp,a0,a1
         00016a00     0003  
    3814 00016a10     4809          cmp     a0,a9
    3815 00016a20     cb05          jrnz    grc_stp
    3816 00016a30     482b          cmp     a1,a11
    3817 00016a40     cb03          jrnz    grc_stp
    3818 00016a50     09af          mmfm    sp,a0
         00016a60     0001  
    3819 00016a70     0960          rets
    3820 00016a80           grc_stp LOCKUP
    3821 00016ab0     09af          mmfm    sp,a0
         00016ac0     0001  
    3822 00016ad0     b328          move    a9,*a8(OXVAL),L
         00016ae0     0140  
    3823 00016af0     b368          move    a11,*a8(OZVAL),L
         00016b00     0180  
    3824 00016b10     0960          rets
    3825                    
    3826 00016b20           close_area_check
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   96

    3827 00016b20     5621          clr     a1
    3828 00016b30     b70e          move    *a8(OXVAL),a14,L
         00016b40     0140  
    3829 00016b50     0b2e          addi    [0,08000h],a14
         00016b60 00008000  
    3830 00016b80     2a0e          sra     16,a14
    3831 00016b90     0b4e          cmpi    705,a14
         00016ba0     fd3e  
    3832 00016bb0     c404          jrlt    cac1
    3833 00016bc0     0ba1          ori     11100b,a1               ;no face 2,3,4
         00016bd0 0000001c  
    3834 00016bf0     c006          jruc    cac2
    3835 00016c00     0b4e  cac1    cmpi    -705,a14
         00016c10     02c0  
    3836 00016c20     c703          jrgt    cac2
    3837 00016c30     0ba1          ori     111000000b,a1           ;no face 6,7,8
         00016c40 000001c0  
    3838 00016c60     b502  cac2    move    *a8(OZPOS),a2,W
         00016c70     0190  
    3839 00016c80     0b42          cmpi    420,a2
         00016c90     fe5b  
    3840 00016ca0     c90c          jrhs    cac3
    3841 00016cb0     0b42          cmpi    258,a2
         00016cc0     fefd  
    3842 00016cd0     c209          jrls    cac3
    3843 00016ce0     0b4e          cmpi    730,a14
         00016cf0     fd25  
    3844 00016d00     c703          jrgt    cac4
    3845 00016d10     0b4e          cmpi    -730,a14
         00016d20     02d9  
    3846 00016d30     c503          jrge    cac3
    3847 00016d40     0ba1  cac4    ori     111011100b,a1
         00016d50 000001dc  
    3848 00016d70     b026  cac3    move    a1,*a6(POF_NOFACE),W
         00016d80     09c0  
    3849                    
    3850 00016d90     5621          clr     a1
    3851 00016da0     b703          move    *a8(OZVAL),a3,L
         00016db0     0180  
    3852 00016dc0     0b63          cmpi    TOP_GOALPOST_Z+[10,0],a3
         00016dd0 fe6cffff  
    3853 00016df0     c70d          jrgt    dfbg8
    3854 00016e00     0b63          cmpi    BOT_GOALPOST_Z-[10,0],a3
         00016e10 feebffff  
    3855 00016e30     c409          jrlt    dfbg8
    3856 00016e40     b704          move    *a8(OXVAL),a4,L
         00016e50     0140  
    3857 00016e60     4c8e          move    a4,a14
    3858 00016e70     038e          abs     a14
    3859 00016e80     0b6e          cmpi    02800000h,a14
         00016e90 fd7fffff  
    3860 00016eb0     c401          jrlt    dfbg8
    3861 00016ec0     1861          movk    3,a1            ;right and left
    3862 00016ed0     b026  dfbg8   move    a1,*a6(POF_PPMOD),W
         00016ee0     03c0  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   97

    3863 00016ef0     0960          rets
    3864                    
    3865                    ;;      mmtm    sp,a0
    3866                    ;       movk    1,a4    ;right
    3867                    ;       movk    2,a5    ;left
    3868                    ;;      movk    4,a0    ;up
    3869                    ;;      movk    8,a3    ;down
    3870                    ;       clr     a1
    3871                    ;       move    *a8(OXVAL),a14,L
    3872                    ;       addi    [0,08000h],a14
    3873                    ;       sra     16,a14
    3874                    ;
    3875                    ;       cmpi    705,a14
    3876                    ;       jrlt    cac1
    3877                    ;       or      a4,a1
    3878                    ;cac1   cmpi    -705,a14
    3879                    ;       jrgt    cac2
    3880                    ;       or      a5,a1
    3881                    ;cac2   move    *a8(OZPOS),a14,W
    3882                    ;       cmpi    420,a14
    3883                    ;       jrhs    cac3
    3884                    ;       cmpi    258,a14
    3885                    ;       jrls    cac3
    3886                    ;       move    *a8(OXVAL),a14,L
    3887                    ;       addi    [0,08000h],a14
    3888                    ;       sra     16,a14
    3889                    ;
    3890                    ;       cmpi    730,a14
    3891                    ;       jrgt    cac4
    3892                    ;       cmpi    -730,a14
    3893                    ;       jrge    cac3
    3894                    ;cac4   or      a4,a1
    3895                    ;       or      a5,a1
    3896                    ;cac3   move    a1,*a6(POF_PPMOD),W
    3897                    ;;      mmfm    sp,a0
    3898                    ;       rets
    3899                    
    3900 00016f00           blue_line_check
    3901 00016f00     b50e          move    *a8(OFLAGS),a14
         00016f10     0420  
    3902 00016f20     1f0e          btst    B_OFSCRN,a14
    3903 00016f30     ca16          jrz     blc_9                   ;still on screen, ok
    3904 00016f40     b4ce          move    *a6(POF_FLAGS),a14,W
         00016f50     0200  
    3905 00016f60     1e6e          btst    B_PF_CELEBRATE,a14
    3906 00016f70     cb12          jrnz    blc_9
    3907 00016f80     aec1          movb    *a6(POF_NUMBER),a1
         00016f90     0000  
    3908 00016fa0     05ae          move    @PUCK_CONTROL,a14,W
         00016fb0 00000000! 
    3909 00016fd0     49c1          cmp     a14,a1
    3910 00016fe0     ca0b          jrz     blc_9                   ;if for some reason, we have puck, but are off screen
    3911 00016ff0     0d3f          callr   are_we_intended
         00017000     ed48  
    3912 00017010     c808          jrc     blc_9
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   98

    3913 00017020     1421          dec     a1
    3914 00017030     2fc1          srl     2,a1                    ;0 - team one, 1 - team 2
    3915 00017040     24a1          sll     5,a1
    3916 00017050     0b21          addi    blc_l,a1
         00017060 000170b0' 
    3917 00017080     8621          move    *a1,a1,L
    3918 00017090     0161          jump    a1
    3919 000170a0     0960  blc_9   rets
    3920 000170b0 000170f0' blc_l   .long   blc_team_1
    3921 000170d0 00017360'         .long   blc_team_2
    3922                    
    3923 000170f0           blc_team_1
    3924 000170f0     098f          mmtm    sp,a0
         00017100     8000  
    3925 00017110     07a0          move    @PUCK_OBJECT,a0,L
         00017120 00000000! 
    3926 00017140     b600          move    *a0(OXVAL),a0,L
         00017150     0140  
    3927 00017160     0b20          addi    [0,08000h],a0
         00017170 00008000  
    3928 00017190     2a00          sra     16,a0
    3929                    ;       move    *a0(OXPOS),a0,W         ;half
    3930                    
    3931 000171a0     0b40          cmpi    220,a0                  ;if the puck is over the blue line, we can go anywhere
         000171b0     ff23  
    3932 000171c0     c516          jrge    bt1_d
    3933 000171d0     4d62          move    a11,a2
    3934 000171e0     2a02          sra     16,a2
    3935 000171f0     0d5f          calla   find_rworld_from_z
         00017200 00000000! 
    3936 00017220     0b20          addi    [60,0],a0
         00017230 003c0000  
    3937 00017250     0b60          cmpi    [235,0],a0
         00017260 ff14ffff  
    3938 00017280     c703          jrgt    bt1_c
    3939 00017290     09e0          movi    [235,0],a0
         000172a0 00eb0000  
    3940 000172c0     4809  bt1_c   cmp     a0,a9
    3941 000172d0     c605          jrle    bt1_d
    3942 000172e0     4c09          move    a0,a9
    3943 000172f0     09af          mmfm    sp,a0
         00017300     0001  
    3944 00017310     c000          jruc    remove_right
         00017320     038a  
    3945 00017330     09af  bt1_d   mmfm    sp,a0
         00017340     0001  
    3946 00017350     0960          rets
    3947                    
    3948 00017360           blc_team_2
    3949 00017360     098f          mmtm    sp,a0
         00017370     8000  
    3950 00017380     07a0          move    @PUCK_OBJECT,a0,L
         00017390 00000000! 
    3951 000173b0     b600          move    *a0(OXVAL),a0,L
         000173c0     0140  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   99

    3952 000173d0     0b20          addi    [0,08000h],a0
         000173e0 00008000  
    3953 00017400     2a00          sra     16,a0
    3954                    ;       move    *a0(OXPOS),a0,W         ;half
    3955                    
    3956 00017410     0b40          cmpi    -220,a0                 ;if the puck is over the blue line, we can go anywhere
         00017420     00db  
    3957 00017430     c616          jrle    bt2_d
    3958 00017440     4d62          move    a11,a2
    3959 00017450     2a02          sra     16,a2
    3960 00017460     0d5f          calla   find_lworld_from_z
         00017470 00000000! 
    3961 00017490     0d00          subi    [60,0],a0
         000174a0 ffc3ffff  
    3962 000174c0     0b60          cmpi    [-235,0],a0
         000174d0 00eaffff  
    3963 000174f0     c403          jrlt    bt2_c
    3964 00017500     09e0          movi    [-235,0],a0
         00017510 ff150000  
    3965 00017530     4809  bt2_c   cmp     a0,a9
    3966 00017540     c505          jrge    bt2_d
    3967 00017550     4c09          move    a0,a9
    3968 00017560     09af          mmfm    sp,a0
         00017570     0001  
    3969 00017580     c000          jruc    remove_left
         00017590     0271  
    3970 000175a0     09af  bt2_d   mmfm    sp,a0
         000175b0     0001  
    3971 000175c0     0960          rets
    3972                    
    3973 000175d0     09e4  pcl_gfd movi    goalie_check_table,a4
         000175e0 00017810' 
    3974 00017600     c003          jruc    plc_1
    3975 00017610     09e4  pcl_fnd movi    player_check_table,a4
         00017620 00017750' 
    3976 00017640     09a4  plc_1   mmfm    a4,a1,a2,a3             ;a3 = lowerleft, a2 = upperright, a1 = address
         00017650     000e  
    3977 00017660     4c63          move    a3,a3
    3978 00017670     ca0a          jrz     plc_err                 ;we hit end of table, something is wrong
    3979 00017680     0d03          subi    [1,1],a3                ;sub 1 pixel over so we check like xge, yge
         00017690 fffefffe  
    3980 000176b0     e46e          cmpxy   a3,a14
    3981 000176c0     c2f7          jryle   plc_1                   ;br= outside lower
    3982 000176d0     c4f6          jrxle   plc_1                   ;br= outside left
    3983 000176e0     e44e          cmpxy   a2,a14
    3984 000176f0     c3f4          jrygt   plc_1                   ;br= outside top
    3985 00017700     c5f3          jrxgt   plc_1                   ;br= outside right
    3986 00017710     0960          rets
    3987 00017720           plc_err LOCKUP                          ;we hit end of table without match
    3988                    
    3989                    **************************************************************************
    3990                    *                                                                        *
    3991                    * player_check_table                                                     *
    3992                    *       table in format .long   bottom_left,upper_right,routine          *
    3993                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  100

    3994                    **************************************************************************
    3995 00017750           player_check_table
    3996 00017750 011bfd22          .long   [283,-734],[398,-684+8],p_lgoal_check
    3997 000177b0 011b02a4          .long   [283,684-8],[398,734],p_rgoal_check
    3998 00017810           goalie_check_table
    3999 00017810 000afd5a          .long   [10,-798+radius],[669,798-radius],p_no_coll
    4000 00017870 fe0cfd5a          .long   [-500,-798+radius],[20,798-radius],p_bottom_wall
    4001 000178d0 027ffd5a          .long   [639,-798+radius],[8000,798-radius],p_top_wall
    4002 00017930 0078fcec          .long   [radius,-788],[679-radius,788],p_no_coll
    4003 00017990 0078e0c0          .long   [radius,-8000],[679-radius,-730],p_left_wall
    4004 000179f0 007802da          .long   [radius,730],[679-radius,8000],p_right_wall
    4005 00017a50 0024e0c0          .long   [radius-(radius*7071/10000),-8000],[229,-798+radius-(radius*7071/10000)],p_corner_lll
    4006 00017ab0 e0c0fcf2          .long   [-8000,-798+radius-(radius*7071/10000)-20],[radius-(radius*7071/10000)+20,-570],p_corner
    4007 00017b10 e0c0e0c0          .long   [-8000,-8000],[radius,-798+radius],p_corner_ll
    4008 00017b70 01c2e0c0          .long   [450,-8000],[679-radius+(radius*7071/10000),-798+radius-(radius*7071/10000)],p_corner_ul
    4009 00017bd0 026ffcf2          .long   [679-radius+(radius*7071/10000)-20,-798+radius-(radius*7071/10000)-20],[8000,-570],p_cor
    4010 00017c30 022fe0c0          .long   [679-radius,-8000],[8000,-798+radius],p_corner_ul
    4011 00017c90 002402fa          .long   [radius-(radius*7071/10000),798-radius+(radius*7071/10000)],[229,8000],p_corner_lrr
    4012 00017cf0 e0c0023a          .long   [-8000,570],[radius-(radius*7071/10000)+20,798-radius+(radius*7071/10000)+20],p_corner_l
    4013 00017d50 e0c002a6          .long   [-8000,798-radius],[radius,8000],p_corner_lr
    4014 00017db0 01c202fa          .long   [450,798-radius+(radius*7071/10000)],[679-radius+(radius*7071/10000),8000],p_corner_urr
    4015 00017e10 026f023a          .long   [679-radius+(radius*7071/10000)-20,570],[8000,798-radius+(radius*7071/10000)+20],p_corne
    4016 00017e70 022f02a6          .long   [679-radius,798-radius],[8000,8000],p_corner_ur
    4017 00017ed0 fc18fc18          .long   [-1000,-1000],[1000,1000],p_no_coll
    4018 00017f30 00000000          .long   0,0,0                                   ;end of table
    4019                    
    4020 00017f90           p_no_coll
    4021 00017f90     57ce          clr     a14
    4022 00017fa0     b1c6          move    a14,*a6(POF_PPMOD),W            ;no point collision
         00017fb0     03c0  
    4023 00017fc0     adc6          movb    a14,*a6(POF_CORNER_TEMP)        ;remove corner check
         00017fd0     03b0  
    4024 00017fe0     b3c6          move    a14,*a6(POF_LAST_BOARD_CVEL),L
         00017ff0     0520  
    4025 00018000     098f          mmtm    sp,a0,a1
         00018010     c000  
    4026 00018020     4d20          move    a9,a0
    4027 00018030     4d61          move    a11,a1
    4028 00018040     0d5f          calla   put_point_in_rink
         00018050 00000000! 
    4029 00018070     4c09          move    a0,a9
    4030 00018080     4c2b          move    a1,a11
    4031 00018090     09af          mmfm    sp,a0,a1
         000180a0     0003  
    4032 000180b0     0960          rets
    4033 000180c0           p_bottom_wall
    4034 000180c0     0b6b          cmpi    [7,0],a11
         000180d0 fff8ffff  
    4035 000180f0     c503          jrge    pbw1
    4036 00018100     09eb          movi    [7,0],a11                               ;keep player in rink
         00018110 00070000  
    4037 00018130     0d5f  pbw1    calla   down_check_sound
         00018140 00000000! 
    4038 00018160     0d3f          callr   drone_wall_coll_90
         00018170     02db  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  101

    4039 00018180     c000          jruc    remove_down
         00018190     02c1  
    4040 000181a0           p_top_wall
    4041 000181a0     0b6b          cmpi    [671,0],a11
         000181b0 fd60ffff  
    4042 000181d0     c603          jrle    ptw1
    4043 000181e0     09eb          movi    [671,0],a11                             ;keep player in rink
         000181f0 029f0000  
    4044 00018210     0d5f  ptw1    calla   up_check_sound
         00018220 00000000! 
    4045 00018240     0d3f          callr   drone_wall_coll_270
         00018250     02e1  
    4046 00018260     c000          jruc    remove_up
         00018270     02a4  
    4047                    
    4048 00018280           p_lgoal_check
    4049 00018280     b504          move    *a8(OFLAGS),a4,W
         00018290     0420  
    4050 000182a0     1f04          btst    B_OFSCRN,a4
    4051 000182b0     cb1d          jrnz    plg9
    4052 000182c0     0d3f          callr   drone_wall_coll
         000182d0     02e3  
    4053 000182e0     4d24          move    a9,a4
    4054 000182f0     4c81          move    a4,a1
    4055 00018300     0d04          subi    [-734,0],a4
         00018310 02ddffff  
    4056 00018330     0d01          subi    [-684+8,0],a1
         00018340 02a3ffff  
    4057 00018360     0384          abs     a4
    4058 00018370     0381          abs     a1
    4059 00018380     4d62          move    a11,a2
    4060 00018390     4c43          move    a2,a3
    4061 000183a0     0d02          subi    [283,0],a2
         000183b0 fee4ffff  
    4062 000183d0     0d03          subi    [398,0],a3
         000183e0 fe71ffff  
    4063 00018400     0382          abs     a2
    4064 00018410     0383          abs     a3
    4065 00018420     0d3f          callr   mina03
         00018430     0056  
    4066 00018440     0b2e          addi    plgc,a14
         00018450 000184a0' 
    4067 00018470     87ce          move    *a14,a14,L
    4068 00018480     016e          jump    a14
    4069 00018490     0960  plg9    rets
    4070 000184a0 000187c0' plgc    .long   pm736
    4071 000184c0 00018810'         .long   pm694
    4072 000184e0 00018860'         .long   p293
    4073 00018500 000188b0'         .long   p388
    4074                    
    4075 00018520           p_rgoal_check
    4076 00018520     b504          move    *a8(OFLAGS),a4,W
         00018530     0420  
    4077 00018540     1f04          btst    B_OFSCRN,a4
    4078 00018550     cb1d          jrnz    prg9
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  102

    4079 00018560     0d3f          callr   drone_wall_coll
         00018570     02b9  
    4080 00018580     4d24          move    a9,a4
    4081 00018590     4c81          move    a4,a1
    4082 000185a0     0d04          subi    [734,0],a4
         000185b0 fd21ffff  
    4083 000185d0     0d01          subi    [684-8,0],a1
         000185e0 fd5bffff  
    4084 00018600     0384          abs     a4
    4085 00018610     0381          abs     a1
    4086 00018620     4d62          move    a11,a2
    4087 00018630     4c43          move    a2,a3
    4088 00018640     0d02          subi    [283,0],a2
         00018650 fee4ffff  
    4089 00018670     0d03          subi    [398,0],a3
         00018680 fe71ffff  
    4090 000186a0     0382          abs     a2
    4091 000186b0     0383          abs     a3
    4092 000186c0     0d3f          callr   mina03
         000186d0     002c  
    4093 000186e0     0b2e          addi    prgc,a14
         000186f0 00018740' 
    4094 00018710     87ce          move    *a14,a14,L
    4095 00018720     016e          jump    a14
    4096 00018730     0960  prg9    rets
    4097 00018740 00018900' prgc    .long   p736
    4098 00018760 00018950'         .long   p694
    4099 00018780 00018860'         .long   p293
    4100 000187a0 000188b0'         .long   p388
    4101 000187c0     09e9  pm736   movi    [-734,0],a9
         000187d0 fd220000  
    4102 000187f0     c000          jruc    remove_right
         00018800     023c  
    4103 00018810     09e9  pm694   movi    [-684+8,0],a9
         00018820 fd5c0000  
    4104 00018840     c000          jruc    remove_left
         00018850     0145  
    4105 00018860     09eb  p293    movi    [283,0],a11
         00018870 011b0000  
    4106 00018890     c000          jruc    remove_up
         000188a0     0241  
    4107 000188b0     09eb  p388    movi    [398,0],a11
         000188c0 018e0000  
    4108 000188e0     c000          jruc    remove_down
         000188f0     024b  
    4109 00018900     09e9  p736    movi    [734,0],a9
         00018910 02de0000  
    4110 00018930     c000          jruc    remove_left
         00018940     0136  
    4111 00018950     09e9  p694    movi    [684-8,0],a9
         00018960 02a40000  
    4112 00018980     c000          jruc    remove_right
         00018990     0223  
    4113                    
    4114 000189a0     098f  mina03  mmtm    sp,a4           ;return # corresponding minimum of a1-a4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  103

         000189b0     0800  
    4115 000189c0     57ce          clr     a14
    4116 000189d0     4824          cmp     a1,a4
    4117 000189e0     c202          jrls    pkl1
    4118 000189f0     182e          movk    1,a14
    4119 00018a00     4c24          move    a1,a4
    4120 00018a10     4844  pkl1    cmp     a2,a4
    4121 00018a20     c202          jrls    pkl2
    4122 00018a30     184e          movk    2,a14
    4123 00018a40     4c24          move    a1,a4
    4124 00018a50     4864  pkl2    cmp     a3,a4
    4125 00018a60     c201          jrls    pkl3
    4126 00018a70     186e          movk    3,a14
    4127 00018a80     24ae  pkl3    sll     5,a14
    4128 00018a90     09af          mmfm    sp,a4
         00018aa0     0010  
    4129 00018ab0     0960          rets
    4130                    
    4131 00018ac0           p_left_wall
    4132 00018ac0     0b69          cmpi    [-790,0],a9
         00018ad0 0315ffff  
    4133 00018af0     c703          jrgt    plw1
    4134 00018b00     09e9          movi    [-790,0],a9                             ;keep player in rink
         00018b10 fcea0000  
    4135 00018b30     0d5f  plw1    calla   left_check_sound
         00018b40 00000000! 
    4136 00018b60     0d3f          callr   drone_wall_coll_0
         00018b70     0232  
    4137 00018b80     c000          jruc    remove_left
         00018b90     0111  
    4138 00018ba0           p_right_wall
    4139 00018ba0     0b69          cmpi    [790,0],a9
         00018bb0 fce9ffff  
    4140 00018bd0     c603          jrle    prw1
    4141 00018be0     09e9          movi    [790,0],a9                              ;keep player in rink
         00018bf0 03160000  
    4142 00018c10     0d5f  prw1    calla   right_check_sound
         00018c20 00000000! 
    4143 00018c40     0d3f          callr   drone_wall_coll_180
         00018c50     0237  
    4144 00018c60     c000          jruc    remove_right
         00018c70     01f5  
    4145 00018c80           p_corner_lll
    4146 00018c80     09e0          movi    [-798+radius,0],a0
         00018c90 fd5a0000  
    4147 00018cb0     09e1          movi    [radius,0],a1
         00018cc0 00780000  
    4148 00018ce0     0d3f          callr   p_corner_check
         00018cf0     00da  
    4149 00018d00     c907          jrnc    p_lll_1
    4150 00018d10     0d3f          callr   drone_wall_coll_45
         00018d20     021b  
    4151 00018d30     0d5f          calla   ll_check_sound
         00018d40 00000000! 
    4152 00018d60     0d3f          callr   ra_lll
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  104

         00018d70     0173  
    4153 00018d80     0b40  p_lll_1 cmpi    6,a0            ;this check fixes a corner bounce problem for direction
         00018d90     fff9  
    4154 00018da0     cad1          jrz     p_left_wall
    4155 00018db0     0960          rets
    4156 00018dc0           p_corner_llr
    4157 00018dc0     09e0          movi    [-798+radius,0],a0
         00018dd0 fd5a0000  
    4158 00018df0     09e1          movi    [radius,0],a1
         00018e00 00780000  
    4159 00018e20     0d3f          callr   p_corner_check
         00018e30     00c6  
    4160 00018e40     c907          jrnc    p_llr_1
    4161 00018e50     0d3f          callr   drone_wall_coll_45
         00018e60     0207  
    4162 00018e70     0d5f          calla   ll_check_sound
         00018e80 00000000! 
    4163 00018ea0     0d3f          callr   ra_llr
         00018eb0     017d  
    4164 00018ec0     0b40  p_llr_1 cmpi    6,a0            ;this check fixes a corner bounce problem for direction
         00018ed0     fff9  
    4165 00018ee0     ca00          jrz     p_bottom_wall
         00018ef0     ff1c  
    4166 00018f00     0960          rets
    4167 00018f10           p_corner_ll                             ;failsafe for corner
    4168 00018f10     09e0          movi    [-798+radius,0],a0
         00018f20 fd5a0000  
    4169 00018f40     09e1          movi    [radius,0],a1
         00018f50 00780000  
    4170 00018f70     0d3f          callr   p_corner_check
         00018f80     00b1  
    4171 00018f90     c909          jrnc    pll9
    4172 00018fa0     0d5f          calla   ll_check_sound
         00018fb0 00000000! 
    4173 00018fd0     0d3f          callr   drone_wall_coll_45
         00018fe0     01ef  
    4174 00018ff0     0d3f          callr   remove_down
         00019000     01da  
    4175 00019010     c000          jruc    remove_left
         00019020     00c8  
    4176 00019030     0960  pll9    rets
    4177 00019040           p_corner_ull
    4178 00019040     09e0          movi    [-798+radius,0],a0
         00019050 fd5a0000  
    4179 00019070     09e1          movi    [679-radius,0],a1
         00019080 022f0000  
    4180 000190a0     0d3f          callr   p_corner_check
         000190b0     009e  
    4181 000190c0     c907          jrnc    p_ull_1
    4182 000190d0     0d3f          callr   drone_wall_coll_315
         000190e0     01fd  
    4183 000190f0     0d5f          calla   ul_check_sound
         00019100 00000000! 
    4184 00019120     0d3f          callr   ra_ull
         00019130     00c6  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  105

    4185 00019140     0b40  p_ull_1 cmpi    8,a0            ;this check fixes a corner bounce problem for direction
         00019150     fff7  
    4186 00019160     ca95          jrz     p_left_wall
    4187 00019170     0960          rets
    4188 00019180           p_corner_ulr
    4189 00019180     09e0          movi    [-798+radius,0],a0
         00019190 fd5a0000  
    4190 000191b0     09e1          movi    [679-radius,0],a1
         000191c0 022f0000  
    4191 000191e0     0d3f          callr   p_corner_check
         000191f0     008a  
    4192 00019200     c907          jrnc    pultr
    4193 00019210     0d3f          callr   drone_wall_coll_315
         00019220     01e9  
    4194 00019230     0d5f          calla   ul_check_sound
         00019240 00000000! 
    4195 00019260     0d3f          callr   ra_ulr
         00019270     00cf  
    4196 00019280     0960  pultr   rets
    4197 00019290           p_corner_ul                             ;failsafe for corner
    4198 00019290     09e0          movi    [-798+radius,0],a0
         000192a0 fd5a0000  
    4199 000192c0     09e1          movi    [679-radius,0],a1
         000192d0 022f0000  
    4200 000192f0     0d3f          callr   p_corner_check
         00019300     0079  
    4201 00019310     c909          jrnc    pul9
    4202 00019320     0d5f          calla   ul_check_sound
         00019330 00000000! 
    4203 00019350     0d3f          callr   drone_wall_coll_315
         00019360     01d5  
    4204 00019370     0d3f          callr   remove_up
         00019380     0193  
    4205 00019390     c000          jruc    remove_left
         000193a0     0090  
    4206 000193b0     0960  pul9    rets
    4207 000193c0           p_corner_lrr
    4208 000193c0     09e0          movi    [798-radius,0],a0
         000193d0 02a60000  
    4209 000193f0     09e1          movi    [radius,0],a1
         00019400 00780000  
    4210 00019420     0d3f          callr   p_corner_check
         00019430     0066  
    4211 00019440     c907          jrnc    pulty
    4212 00019450     0d3f          callr   drone_wall_coll_135
         00019460     01b1  
    4213 00019470     0d5f          calla   lr_check_sound
         00019480 00000000! 
    4214 000194a0     0d3f          callr   ra_lrr
         000194b0     0155  
    4215 000194c0     0960  pulty   rets
    4216 000194d0           p_corner_lrl
    4217 000194d0     09e0          movi    [798-radius,0],a0
         000194e0 02a60000  
    4218 00019500     09e1          movi    [radius,0],a1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  106

         00019510 00780000  
    4219 00019530     0d3f          callr   p_corner_check
         00019540     0055  
    4220 00019550     c907          jrnc    p_lrl_1
    4221 00019560     0d3f          callr   drone_wall_coll_135
         00019570     01a0  
    4222 00019580     0d5f          calla   lr_check_sound
         00019590 00000000! 
    4223 000195b0     0d3f          callr   ra_lrl
         000195c0     0128  
    4224 000195d0     0b40  p_lrl_1 cmpi    4,a0            ;this check fixes a corner bounce problem for direction
         000195e0     fffb  
    4225 000195f0     ca00          jrz     p_bottom_wall
         00019600     feab  
    4226 00019610     0960          rets
    4227 00019620           p_corner_lr                             ;failsafe for corner
    4228 00019620     09e0          movi    [798-radius,0],a0
         00019630 02a60000  
    4229 00019650     09e1          movi    [radius,0],a1
         00019660 00780000  
    4230 00019680     0d3f          callr   p_corner_check
         00019690     0040  
    4231 000196a0     c909          jrnc    plr9
    4232 000196b0     0d5f          calla   lr_check_sound
         000196c0 00000000! 
    4233 000196e0     0d3f          callr   drone_wall_coll_135
         000196f0     0188  
    4234 00019700     0d3f          callr   remove_down
         00019710     0169  
    4235 00019720     c000          jruc    remove_right
         00019730     0149  
    4236 00019740     0960  plr9    rets
    4237 00019750           p_corner_urr
    4238 00019750     09e0          movi    [798-radius,0],a0
         00019760 02a60000  
    4239 00019780     09e1          movi    [679-radius,0],a1
         00019790 022f0000  
    4240 000197b0     0d3f          callr   p_corner_check
         000197c0     002d  
    4241 000197d0     c907          jrnc    pmf
    4242 000197e0     0d3f          callr   drone_wall_coll_225
         000197f0     0182  
    4243 00019800     0d5f          calla   ur_check_sound
         00019810 00000000! 
    4244 00019830     0d3f          callr   ra_urr
         00019840     00aa  
    4245 00019850     0960  pmf     rets
    4246 00019860           p_corner_url
    4247 00019860     09e0          movi    [798-radius,0],a0
         00019870 02a60000  
    4248 00019890     09e1          movi    [679-radius,0],a1
         000198a0 022f0000  
    4249 000198c0     0d3f          callr   p_corner_check
         000198d0     001c  
    4250 000198e0     c907          jrnc    pmf1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  107

    4251 000198f0     0d3f          callr   drone_wall_coll_225
         00019900     0171  
    4252 00019910     0d5f          calla   ur_check_sound
         00019920 00000000! 
    4253 00019940     0d3f          callr   ra_url
         00019950     007d  
    4254 00019960     0960  pmf1    rets
    4255 00019970           p_corner_ur                             ;failsafe for corner
    4256 00019970     09e0          movi    [798-radius,0],a0
         00019980 02a60000  
    4257 000199a0     09e1          movi    [679-radius,0],a1
         000199b0 022f0000  
    4258 000199d0     0d3f          callr   p_corner_check
         000199e0     000b  
    4259 000199f0     c909          jrnc    pur9
    4260 00019a00     0d5f          calla   ur_check_sound
         00019a10 00000000! 
    4261 00019a30     0d3f          callr   drone_wall_coll_225
         00019a40     015d  
    4262 00019a50     0d3f          callr   remove_up
         00019a60     0125  
    4263 00019a70     c000          jruc    remove_right
         00019a80     0114  
    4264 00019a90     0960  pur9    rets
    4265 00019aa0           p_corner_check
    4266 00019aa0     4c04          move    a0,a4
    4267 00019ab0     4c25          move    a1,a5
    4268 00019ac0     4d22          move    a9,a2
    4269 00019ad0     4d63          move    a11,a3
    4270 00019ae0     0d5f          calla   find_dsquared_to_point_whole_a1
         00019af0 00000000! 
    4271 00019b10     0b41          cmpi    (radius-8)*(radius-8-5),a1
         00019b20     d12f  
    4272 00019b30     c213          jrls    pcc_nfd
    4273 00019b40     4ca1          move    a5,a1
    4274 00019b50     0d5f          calla   find_dir_to_point
         00019b60 00000000! 
    4275 00019b80     09e1          movi    [radius-8,0],a1
         00019b90 00700000  
    4276 00019bb0     4c02          move    a0,a2
    4277 00019bc0     0d5f          calla   polar_to_rect
         00019bd0 00000000! 
    4278 00019bf0     4404          sub     a0,a4
    4279 00019c00     4425          sub     a1,a5
    4280 00019c10     4c89          move    a4,a9
    4281 00019c20     4cab          move    a5,a11
    4282 00019c30     aec0          movb    *a6(POF_JOY),a0
         00019c40     0398  
    4283 00019c50     0de0          setc
    4284 00019c60     0960          rets
    4285 00019c70     aec0  pcc_nfd movb    *a6(POF_JOY),a0
         00019c80     0398  
    4286 00019c90     0320          clrc
    4287 00019ca0     0960          rets
    4288                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  108

    4289 00019cb0           remove_left
    4290 00019cb0     2480          sll     4,a0
    4291 00019cc0     0b20          addi    remove_left_table,a0
         00019cd0 00019d10' 
    4292 00019cf0     8400          move    *a0,a0,W
    4293 00019d00     0960          rets
    4294 00019d10           remove_left_table
    4295 00019d10     0000          .word   0
    4296 00019d20     0001          .word   1
    4297 00019d30     0002          .word   2
    4298 00019d40     0003          .word   3
    4299 00019d50     0004          .word   4
    4300 00019d60     0005          .word   5
    4301 00019d70     0005          .word   5
    4302 00019d80     0000          .word   0
    4303 00019d90     0001          .word   1
    4304                    
    4305 00019da0     aece  ra_ull  movb    *a6(POF_CORNER_TEMP),a14
         00019db0     03b0  
    4306 00019dc0     0b4e          cmpi    3,a14
         00019dd0     fffc  
    4307 00019de0     cb06          jrnz    rull1
    4308 00019df0     18ce          movk    6,a14
    4309 00019e00     adc6          movb    a14,*a6(POF_I_JOY)
         00019e10     03a0  
    4310 00019e20     49c0          cmp     a14,a0
    4311 00019e30     ca00          jrz     ra_zero
         00019e40     0082  
    4312 00019e50     188e  rull1   movk    4,a14
    4313 00019e60     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         00019e70     03b0  
    4314 00019e80     2480          sll     4,a0
    4315 00019e90     0b20          addi    ra_ull_table,a0
         00019ea0 00019ee0' 
    4316 00019ec0     8400          move    *a0,a0,W
    4317 00019ed0     0960          rets
    4318 00019ee0           ra_ull_table
    4319 00019ee0     0000          .word   0
    4320 00019ef0     0001          .word   1
    4321 00019f00     0002          .word   2
    4322 00019f10     0003          .word   3
    4323 00019f20     0004          .word   4
    4324 00019f30     0005          .word   5
    4325 00019f40     0005          .word   5
    4326 00019f50     0008          .word   8
    4327 00019f60     0008          .word   8
    4328                    
    4329 00019f70     aece  ra_ulr  movb    *a6(POF_CORNER_TEMP),a14
         00019f80     03b0  
    4330 00019f90     0b4e          cmpi    4,a14
         00019fa0     fffb  
    4331 00019fb0     cb05          jrnz    rulr1
    4332 00019fc0     18ce          movk    6,a14
    4333 00019fd0     adc6          movb    a14,*a6(POF_I_JOY)
         00019fe0     03a0  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  109

    4334 00019ff0     49c0          cmp     a14,a0
    4335 0001a000     ca66          jrz     ra_zero
    4336 0001a010     186e  rulr1   movk    3,a14
    4337 0001a020     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         0001a030     03b0  
    4338 0001a040     2480          sll     4,a0
    4339 0001a050     0b20          addi    ra_ulr_table,a0
         0001a060 0001a0a0' 
    4340 0001a080     8400          move    *a0,a0,W
    4341 0001a090     0960          rets
    4342 0001a0a0           ra_ulr_table
    4343 0001a0a0     0000          .word   0
    4344 0001a0b0     0001          .word   1
    4345 0001a0c0     0002          .word   2
    4346 0001a0d0     0003          .word   3
    4347 0001a0e0     0004          .word   4
    4348 0001a0f0     0004          .word   4
    4349 0001a100     0007          .word   7
    4350 0001a110     0007          .word   7
    4351 0001a120     0008          .word   8
    4352                    
    4353 0001a130     aece  ra_url  movb    *a6(POF_CORNER_TEMP),a14
         0001a140     03b0  
    4354 0001a150     0b4e          cmpi    1,a14
         0001a160     fffe  
    4355 0001a170     cb05          jrnz    rurl1
    4356 0001a180     188e          movk    4,a14
    4357 0001a190     adc6          movb    a14,*a6(POF_I_JOY)
         0001a1a0     03a0  
    4358 0001a1b0     49c0          cmp     a14,a0
    4359 0001a1c0     ca4a          jrz     ra_zero
    4360 0001a1d0     184e  rurl1   movk    2,a14
    4361 0001a1e0     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         0001a1f0     03b0  
    4362 0001a200     2480          sll     4,a0
    4363 0001a210     0b20          addi    ra_url_table,a0
         0001a220 0001a260' 
    4364 0001a240     8400          move    *a0,a0,W
    4365 0001a250     0960          rets
    4366 0001a260           ra_url_table
    4367 0001a260     0000          .word   0
    4368 0001a270     0001          .word   1
    4369 0001a280     0002          .word   2
    4370 0001a290     0003          .word   3
    4371 0001a2a0     0003          .word   3
    4372 0001a2b0     0006          .word   6
    4373 0001a2c0     0006          .word   6
    4374 0001a2d0     0007          .word   7
    4375 0001a2e0     0008          .word   8
    4376                    
    4377 0001a2f0     aece  ra_urr  movb    *a6(POF_CORNER_TEMP),a14
         0001a300     03b0  
    4378 0001a310     0b4e          cmpi    2,a14
         0001a320     fffd  
    4379 0001a330     cb05          jrnz    rurr1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  110

    4380 0001a340     188e          movk    4,a14
    4381 0001a350     adc6          movb    a14,*a6(POF_I_JOY)
         0001a360     03a0  
    4382 0001a370     49c0          cmp     a14,a0
    4383 0001a380     ca2e          jrz     ra_zero
    4384 0001a390     182e  rurr1   movk    1,a14
    4385 0001a3a0     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         0001a3b0     03b0  
    4386 0001a3c0     2480          sll     4,a0
    4387 0001a3d0     0b20          addi    ra_urr_table,a0
         0001a3e0 0001a420' 
    4388 0001a400     8400          move    *a0,a0,W
    4389 0001a410     0960          rets
    4390 0001a420           ra_urr_table
    4391 0001a420     0000          .word   0
    4392 0001a430     0001          .word   1
    4393 0001a440     0002          .word   2
    4394 0001a450     0002          .word   2
    4395 0001a460     0005          .word   5
    4396 0001a470     0005          .word   5
    4397 0001a480     0006          .word   6
    4398 0001a490     0007          .word   7
    4399 0001a4a0     0008          .word   8
    4400                    
    4401 0001a4b0     aece  ra_lll  movb    *a6(POF_CORNER_TEMP),a14
         0001a4c0     03b0  
    4402 0001a4d0     0b4e          cmpi    6,a14
         0001a4e0     fff9  
    4403 0001a4f0     cb05          jrnz    rlll1
    4404 0001a500     190e          movk    8,a14
    4405 0001a510     adc6          movb    a14,*a6(POF_I_JOY)
         0001a520     03a0  
    4406 0001a530     49c0          cmp     a14,a0
    4407 0001a540     ca12          jrz     ra_zero
    4408 0001a550     18ae  rlll1   movk    5,a14
    4409 0001a560     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         0001a570     03b0  
    4410 0001a580     2480          sll     4,a0
    4411 0001a590     0b20          addi    ra_lll_table,a0
         0001a5a0 0001a5e0' 
    4412 0001a5c0     8400          move    *a0,a0,W
    4413 0001a5d0     0960          rets
    4414 0001a5e0           ra_lll_table
    4415 0001a5e0     0000          .word   0
    4416 0001a5f0     0001          .word   1
    4417 0001a600     0002          .word   2
    4418 0001a610     0003          .word   3
    4419 0001a620     0004          .word   4
    4420 0001a630     0005          .word   5
    4421 0001a640     0006          .word   6
    4422 0001a650     0006          .word   6
    4423 0001a660     0001          .word   1
    4424                    
    4425 0001a670     5600  ra_zero clr     a0
    4426 0001a680     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  111

    4427                    
    4428 0001a690     aece  ra_llr  movb    *a6(POF_CORNER_TEMP),a14
         0001a6a0     03b0  
    4429 0001a6b0     0b4e          cmpi    5,a14
         0001a6c0     fffa  
    4430 0001a6d0     cb05          jrnz    rllr1
    4431 0001a6e0     190e          movk    8,a14
    4432 0001a6f0     adc6          movb    a14,*a6(POF_I_JOY)
         0001a700     03a0  
    4433 0001a710     49c0          cmp     a14,a0
    4434 0001a720     caf4          jrz     ra_zero
    4435 0001a730     18ce  rllr1   movk    6,a14
    4436 0001a740     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         0001a750     03b0  
    4437 0001a760     2480          sll     4,a0
    4438 0001a770     0b20          addi    ra_llr_table,a0
         0001a780 0001a7c0' 
    4439 0001a7a0     8400          move    *a0,a0,W
    4440 0001a7b0     0960          rets
    4441 0001a7c0           ra_llr_table
    4442 0001a7c0     0000          .word   0
    4443 0001a7d0     0002          .word   2
    4444 0001a7e0     0002          .word   2
    4445 0001a7f0     0003          .word   3
    4446 0001a800     0004          .word   4
    4447 0001a810     0005          .word   5
    4448 0001a820     0006          .word   6
    4449 0001a830     0007          .word   7
    4450 0001a840     0007          .word   7
    4451                    
    4452 0001a850     aece  ra_lrl  movb    *a6(POF_CORNER_TEMP),a14
         0001a860     03b0  
    4453 0001a870     0b4e          cmpi    8,a14
         0001a880     fff7  
    4454 0001a890     cb05          jrnz    rlrl1
    4455 0001a8a0     184e          movk    2,a14
    4456 0001a8b0     adc6          movb    a14,*a6(POF_I_JOY)
         0001a8c0     03a0  
    4457 0001a8d0     49c0          cmp     a14,a0
    4458 0001a8e0     cad8          jrz     ra_zero
    4459 0001a8f0     18ee  rlrl1   movk    7,a14
    4460 0001a900     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         0001a910     03b0  
    4461 0001a920     2480          sll     4,a0
    4462 0001a930     0b20          addi    ra_lrl_table,a0
         0001a940 0001a980' 
    4463 0001a960     8400          move    *a0,a0,W
    4464 0001a970     0960          rets
    4465 0001a980           ra_lrl_table
    4466 0001a980     0000          .word   0
    4467 0001a990     0008          .word   8
    4468 0001a9a0     0003          .word   3
    4469 0001a9b0     0003          .word   3
    4470 0001a9c0     0004          .word   4
    4471 0001a9d0     0005          .word   5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  112

    4472 0001a9e0     0006          .word   6
    4473 0001a9f0     0007          .word   7
    4474 0001aa00     0008          .word   8
    4475                    
    4476 0001aa10     aece  ra_lrr  movb    *a6(POF_CORNER_TEMP),a14
         0001aa20     03b0  
    4477 0001aa30     0b4e          cmpi    7,a14
         0001aa40     fff8  
    4478 0001aa50     cb05          jrnz    rlrr1
    4479 0001aa60     184e          movk    2,a14
    4480 0001aa70     adc6          movb    a14,*a6(POF_I_JOY)
         0001aa80     03a0  
    4481 0001aa90     49c0          cmp     a14,a0
    4482 0001aaa0     cabc          jrz     ra_zero
    4483 0001aab0     190e  rlrr1   movk    8,a14
    4484 0001aac0     adc6          movb    a14,*a6(POF_CORNER_TEMP)
         0001aad0     03b0  
    4485 0001aae0     2480          sll     4,a0
    4486 0001aaf0     0b20          addi    ra_lrr_table,a0
         0001ab00 0001ab40' 
    4487 0001ab20     8400          move    *a0,a0,W
    4488 0001ab30     0960          rets
    4489 0001ab40           ra_lrr_table
    4490 0001ab40     0000          .word   0
    4491 0001ab50     0001          .word   1
    4492 0001ab60     0001          .word   1
    4493 0001ab70     0004          .word   4
    4494 0001ab80     0004          .word   4
    4495 0001ab90     0005          .word   5
    4496 0001aba0     0006          .word   6
    4497 0001abb0     0007          .word   7
    4498 0001abc0     0008          .word   8
    4499                    
    4500 0001abd0           remove_right
    4501 0001abd0     2480          sll     4,a0
    4502 0001abe0     0b20          addi    remove_right_table,a0
         0001abf0 0001ac30' 
    4503 0001ac10     8400          move    *a0,a0,W
    4504 0001ac20     0960          rets
    4505 0001ac30           remove_right_table
    4506 0001ac30     0000          .word   0
    4507 0001ac40     0001          .word   1
    4508 0001ac50     0001          .word   1
    4509 0001ac60     0000          .word   0
    4510 0001ac70     0005          .word   5
    4511 0001ac80     0005          .word   5
    4512 0001ac90     0006          .word   6
    4513 0001aca0     0007          .word   7
    4514 0001acb0     0008          .word   8
    4515                    
    4516 0001acc0           remove_up
    4517 0001acc0     2480          sll     4,a0
    4518 0001acd0     0b20          addi    remove_up_table,a0
         0001ace0 0001ad20' 
    4519 0001ad00     8400          move    *a0,a0,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  113

    4520 0001ad10     0960          rets
    4521 0001ad20           remove_up_table
    4522 0001ad20     0000          .word   0
    4523 0001ad30     0001          .word   1
    4524 0001ad40     0002          .word   2
    4525 0001ad50     0003          .word   3
    4526 0001ad60     0003          .word   3
    4527 0001ad70     0000          .word   0
    4528 0001ad80     0007          .word   7
    4529 0001ad90     0007          .word   7
    4530 0001ada0     0008          .word   8
    4531                    
    4532 0001adb0           remove_down
    4533 0001adb0     2480          sll     4,a0
    4534 0001adc0     0b20          addi    remove_down_table,a0
         0001add0 0001ae10' 
    4535 0001adf0     8400          move    *a0,a0,W
    4536 0001ae00     0960          rets
    4537 0001ae10           remove_down_table
    4538 0001ae10     0000          .word   0
    4539 0001ae20     0000          .word   0
    4540 0001ae30     0003          .word   3
    4541 0001ae40     0003          .word   3
    4542 0001ae50     0004          .word   4
    4543 0001ae60     0005          .word   5
    4544 0001ae70     0006          .word   6
    4545 0001ae80     0007          .word   7
    4546 0001ae90     0007          .word   7
    4547                    
    4548 0001aea0           drone_wall_coll_0
    4549 0001aea0     098f          mmtm    sp,a0
         0001aeb0     8000  
    4550 0001aec0     5600          clr     a0
    4551 0001aed0     c027          jruc    dwc_c
    4552 0001aee0           drone_wall_coll_45
    4553 0001aee0     098f          mmtm    sp,a0
         0001aef0     8000  
    4554 0001af00     09c0          movi    45,a0
         0001af10     002d  
    4555 0001af20     c022          jruc    dwc_c
    4556 0001af30           drone_wall_coll_90
    4557 0001af30     098f          mmtm    sp,a0
         0001af40     8000  
    4558 0001af50     09c0          movi    90,a0
         0001af60     005a  
    4559 0001af70     c01d          jruc    dwc_c
    4560 0001af80           drone_wall_coll_135
    4561 0001af80     098f          mmtm    sp,a0
         0001af90     8000  
    4562 0001afa0     09c0          movi    135,a0
         0001afb0     0087  
    4563 0001afc0     c018          jruc    dwc_c
    4564 0001afd0           drone_wall_coll_180
    4565 0001afd0     098f          mmtm    sp,a0
         0001afe0     8000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  114

    4566 0001aff0     09c0          movi    180,a0
         0001b000     00b4  
    4567 0001b010     c013          jruc    dwc_c
    4568 0001b020           drone_wall_coll_225
    4569 0001b020     098f          mmtm    sp,a0
         0001b030     8000  
    4570 0001b040     09c0          movi    225,a0
         0001b050     00e1  
    4571 0001b060     c00e          jruc    dwc_c
    4572 0001b070           drone_wall_coll_270
    4573 0001b070     098f          mmtm    sp,a0
         0001b080     8000  
    4574 0001b090     09c0          movi    270,a0
         0001b0a0     010e  
    4575 0001b0b0     c009          jruc    dwc_c
    4576 0001b0c0           drone_wall_coll_315
    4577 0001b0c0     098f          mmtm    sp,a0
         0001b0d0     8000  
    4578 0001b0e0     09c0          movi    315,a0
         0001b0f0     013b  
    4579 0001b100     c004          jruc    dwc_c
    4580 0001b110           drone_wall_coll
    4581 0001b110     098f          mmtm    sp,a0
         0001b120     8000  
    4582 0001b130     5600          clr     a0
    4583 0001b140     1420          dec     a0
    4584 0001b150     b006  dwc_c   move    a0,*a6(POF_HIT_BOARDS_A),W
         0001b160     0dd0  
    4585 0001b170     1820          movk    1,a0
    4586 0001b180     b006          move    a0,*a6(POF_DRONEC),W
         0001b190     0720  
    4587 0001b1a0     b006          move    a0,*a6(POF_HIT_BOARDS),W
         0001b1b0     0d30  
    4588 0001b1c0     09af          mmfm    sp,a0
         0001b1d0     0001  
    4589 0001b1e0     0960          rets
    4590                    
    4591 0001b1f0           one_timer_check
    4592 0001b1f0     098f          mmtm    sp,a0,a10
         0001b200     8020  
    4593 0001b210     05ae          move    @PUCK_CONTROL,a14,W
         0001b220 00000000! 
    4594 0001b240     cb6c          jrnz    otc_86
    4595 0001b250     05ae          move    @PUCK_MODE,a14,W
         0001b260 00000000! 
    4596 0001b280     0b4e          cmpi    PUM_PASS,a14
         0001b290     fff5  
    4597 0001b2a0     ca03          jrz     otc_2
    4598 0001b2b0     0b4e          cmpi    PUM_TPASS,a14
         0001b2c0     fff4  
    4599 0001b2d0     cb60          jrnz    otc_8
    4600 0001b2e0     05ae  otc_2   move    @PUCK_INTENDED,a14,W
         0001b2f0 00000000! 
    4601 0001b310     aec0          movb    *a6(POF_NUMBER),a0
         0001b320     0000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  115

    4602 0001b330     480e          cmp     a0,a14
    4603 0001b340     cb59          jrnz    otc_8
    4604 0001b350     b4c0          move    *a6(POF_BUTTONS),a0,W
         0001b360     0380  
    4605 0001b370     1fe0          btst    0,a0
    4606 0001b380     cb04          jrnz    otcgg
    4607 0001b390     b4c0          move    *a6(POF_DRONE_BUTTONS),a0,W
         0001b3a0     09d0  
    4608 0001b3b0     1fe0          btst    0,a0
    4609 0001b3c0     ca51          jrz     otc_8
    4610 0001b3d0     b4c0  otcgg   move    *a6(POF_MODE),a0,W
         0001b3e0     0210  
    4611 0001b3f0     0b40          cmpi    PM_STAND,a0
         0001b400     ffff  
    4612 0001b410     ca06          jrz     otc_ok
    4613 0001b420     0b40          cmpi    PM_SKID,a0
         0001b430     fffb  
    4614 0001b440     ca03          jrz     otc_ok
    4615 0001b450     0b40          cmpi    PM_SKATE,a0
         0001b460     fffe  
    4616 0001b470     cb46          jrnz    otc_8
    4617 0001b480     0d3f  otc_ok  callr   subpp1
         0001b490     006c  
    4618 0001b4a0     0b44          cmpi    17,a4
         0001b4b0     ffee  
    4619 0001b4c0     c341          jrhi    otc_8
    4620 0001b4d0     09ea          movi    set_onetime_script,a10
         0001b4e0 00000000! 
    4621 0001b500     0b44          cmpi    14,a4
         0001b510     fff1  
    4622 0001b520     c325          jrhi    otc_f
    4623 0001b530     09ea          movi    set_faster_onetime_script,a10
         0001b540 00000000! 
    4624 0001b560     0b44          cmpi    11,a4
         0001b570     fff4  
    4625 0001b580     c335          jrhi    otc_8
    4626 0001b590     0b44          cmpi    8,a4
         0001b5a0     fff7  
    4627 0001b5b0     c31c          jrhi    otc_f
    4628 0001b5c0     09ea          movi    set_a_fastest_onetime_script,a10
         0001b5d0 00000000! 
    4629 0001b5f0     0b44          cmpi    4,a4
         0001b600     fffb  
    4630 0001b610     c316          jrhi    otc_f
    4631 0001b620     09ea          movi    set_fastest_onetime_script,a10
         0001b630 00000000! 
    4632 0001b650     0b44          cmpi    3,a4
         0001b660     fffc  
    4633 0001b670     c301          jrhi    otc_fns
    4634 0001b680     c025          jruc    otc_8
    4635                    
    4636 0001b690     0d3f  otc_fns callr   subpp3
         0001b6a0     003c  
    4637 0001b6b0     0d5f          calla   zero_a8_y
         0001b6c0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  116

    4638 0001b6e0     0d5f          calla   spx_one_timer           ;do tip in
         0001b6f0 00000000! 
    4639 0001b710     57ce          clr     a14                     ;skip all direction settings (not enough time)
    4640 0001b720     adc6          movb    a14,*a6(POF_BDIRECTION)
         0001b730     03d0  
    4641 0001b740     092a          call    a10                     ;set correct onetime script
    4642 0001b750     09af          mmfm    sp,a0,a10
         0001b760     0401  
    4643 0001b770     0960          rets
    4644                    
    4645 0001b780     0d3f  otc_f   callr   subpp3
         0001b790     002d  
    4646 0001b7a0     0d5f          calla   spx_one_timer
         0001b7b0 00000000! 
    4647 0001b7d0     aec0          movb    *a6(POF_NUMBER),a0
         0001b7e0     0000  
    4648 0001b7f0     0d3f          callr   get_quick_shot_point
         0001b800     f32d  
    4649 0001b810     b702          move    *a8(OXVAL),a2,L
         0001b820     0140  
    4650 0001b830     b703          move    *a8(OZVAL),a3,L
         0001b840     0180  
    4651 0001b850     0d5f          calla   find_dir_to_point_18
         0001b860 00000000! 
    4652 0001b880     ac06          movb    a0,*a6(POF_DIRECTION)
         0001b890     0390  
    4653 0001b8a0     57ce          clr     a14
    4654 0001b8b0     adc6          movb    a14,*a6(POF_BDIRECTION)
         0001b8c0     03d0  
    4655 0001b8d0     092a          call    a10                     ;set correct onetime script
    4656 0001b8e0     09af  otc_8   mmfm    sp,a0,a10
         0001b8f0     0401  
    4657 0001b900     0960          rets
    4658                    
    4659 0001b910     aec0  otc_86  movb    *a6(POF_NUMBER),a0
         0001b920     0000  
    4660 0001b930     480e          cmp     a0,a14
    4661 0001b940     cbf9          jrnz    otc_8
    4662 0001b950     b4c0          move    *a6(POF_MODE),a0
         0001b960     0210  
    4663 0001b970     0b40          cmpi    PM_ONETIME,a0
         0001b980     fff2  
    4664 0001b990     cbf4          jrnz    otc_8
    4665 0001b9a0     0d3f          callr   subpp1
         0001b9b0     001a  
    4666 0001b9c0     0d3f          callr   subpp2
         0001b9d0     0028  
    4667 0001b9e0     09af          mmfm    sp,a0,a10
         0001b9f0     0401  
    4668 0001ba00     0960          rets
    4669                    
    4670 0001ba10           line_up_for_pass
    4671 0001ba10     0d3f          callr   subpp1
         0001ba20     0013  
    4672 0001ba30     0b44          cmpi    5,a4
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  117

         0001ba40     fffa  
    4673 0001ba50     c720          jrgt    subpp2
    4674 0001ba60     0960          rets
    4675                    
    4676 0001ba70     bb08  subpp3  move    *a8(ODT_VEL),*a8(ODT_SAVEVEL),L
         0001ba80     04d0  
         0001ba90     0560  
    4677 0001baa0     bb08          move    *a8(ODT_DIR),*a8(ODT_SAVEDIR),L
         0001bab0     04b0  
         0001bac0     0580  
    4678 0001bad0     0d3f          callr   subpp2
         0001bae0     0017  
    4679 0001baf0     0d5f          calla   take_player_control
         0001bb00 0000e7b0' 
    4680 0001bb20     19a0          movk    PM_ONETIME,a0
    4681 0001bb30     b006          move    a0,*a6(POF_MODE),W
         0001bb40     0210  
    4682 0001bb50     0960          rets
    4683                    
    4684 0001bb60     07a9  subpp1  move    @PUCK_OBJECT,a9,L
         0001bb70 00000000! 
    4685 0001bb90     b720          move    *a9(OXVAL),a0,L
         0001bba0     0140  
    4686 0001bbb0     b721          move    *a9(OZVAL),a1,L
         0001bbc0     0180  
    4687 0001bbd0     b722          move    *a9(ODT_XDEST),a2,L
         0001bbe0     0550  
    4688 0001bbf0     b723          move    *a9(ODT_ZDEST),a3,L
         0001bc00     0570  
    4689 0001bc10     b727          move    *a9(ODT_VEL),a7,L
         0001bc20     04d0  
    4690 0001bc30     c080          jauc    find_time_to_get_to_point_okb
         0001bc40 00000000! 
    4691                    
    4692 0001bc60     0d5f  subpp2  calla   get_players_puck_point_o
         0001bc70 00000000! 
    4693 0001bc90     4c0e          move    a0,a14
    4694 0001bca0     444e          sub     a2,a14
    4695 0001bcb0     038e          abs     a14
    4696 0001bcc0     0b6e          cmpi    [1,0],a14
         0001bcd0 fffeffff  
    4697 0001bcf0     c901          jrhs    sbpt1
    4698 0001bd00     4c40          move    a2,a0
    4699 0001bd10     2a00  sbpt1   sra     16,a0
    4700 0001bd20     4c2e          move    a1,a14
    4701 0001bd30     446e          sub     a3,a14
    4702 0001bd40     038e          abs     a14
    4703 0001bd50     0b6e          cmpi    [1,0],a14
         0001bd60 fffeffff  
    4704 0001bd80     c901          jrhs    sbpt2
    4705 0001bd90     4c61          move    a3,a1
    4706 0001bda0     2a02  sbpt2   sra     16,a2
    4707 0001bdb0     ec43          movx    a2,a3
    4708 0001bdc0     4c02          move    a0,a2
    4709 0001bdd0     ee22          movy    a1,a2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  118

    4710 0001bde0     0d5f          calla   SLINEVEL
         0001bdf0 00000000! 
    4711 0001be10     4c20          move    a1,a0
    4712 0001be20     4c41          move    a2,a1
    4713 0001be30     4c02          move    a0,a2
    4714 0001be40     4c23          move    a1,a3
    4715 0001be50     0d5f          calla   rect_to_polar
         0001be60 00000000! 
    4716 0001be80     b705          move    *a8(ODT_DIR),a5,L
         0001be90     04b0  
    4717 0001bea0     4cae          move    a5,a14
    4718 0001beb0     440e          sub     a0,a14
    4719 0001bec0                   THETA_H a14
    4720 0001bfd0     038e          abs     a14
    4721 0001bfe0     0b6e          cmpi    XD0030,a14
         0001bff0 fffcffff  
    4722 0001c010     c301          jrhi    sbge2
    4723 0001c020     4ca0          move    a5,a0
    4724 0001c030     b4c9  sbge2   move    *a6(POF_PUP_FLAGS),a9,W
         0001c040     0c50  
    4725 0001c050     1f29          btst    B_PUP_SPEED,a9
    4726 0001c060     ca04          jrz     nop4ps
    4727 0001c070     09e9          movi    pspeed_data_powered,a9
         0001c080 00000000! 
    4728 0001c0a0     c002          jruc    ysp4ps                  ;power up speed
    4729 0001c0b0     b6c9  nop4ps  move    *a6(POF_S_SPED),a9,L
         0001c0c0     00e0  
    4730 0001c0d0     b724  ysp4ps  move    *a9(PS_SP_TURBO_2),a4,L         ;keep us going at less than our maximum speed
         0001c0e0     00e0  
    4731 0001c0f0     0b24          addi    [3,0],a4                        ;boost our max a little
         0001c100 00030000  
    4732 0001c120     4881          cmp     a4,a1
    4733 0001c130     c204          jrls    spp5e
    4734 0001c140     4c81          move    a4,a1
    4735 0001c150     c080          jauc    set_obj_to_polar
         0001c160 00000000! 
    4736 0001c180     b208  spp5e   move    a0,*a8(ODT_DIR),L       ;we already have all the data
         0001c190     04b0  
    4737 0001c1a0     b228          move    a1,*a8(ODT_VEL),L
         0001c1b0     04d0  
    4738 0001c1c0     b248          move    a2,*a8(OXVEL),L
         0001c1d0     0100  
    4739 0001c1e0     b248          move    a2,*a8(ODT_REALXVEL),L
         0001c1f0     04f0  
    4740 0001c200     b268          move    a3,*a8(OZVEL),L
         0001c210     00e0  
    4741 0001c220     c000          jruc    drone_rink_check        ;keep us in the rink
         0001c230     fa4c  
    4742                    
    4743                    ;gdebug_script
    4744                    ;       LWL     GAA13F02,AFUNC|1,adf_f
    4745                    ;       LWL     GSJ64F05,AFUNC|1,adf_f
    4746                    ;       .long   0
    4747                    ;
    4748                    ;
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:31:15 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  119

    4749                    ;       .bss    clb,16
    4750                    ;
    4751                    ;
    4752                    ;adf_f
    4753                    ;       move    *a8(ODT_PBK),a6,L
    4754                    ;       movb    *a6(POF_NUMBER),a0
    4755                    ;       cmpi    8,a0
    4756                    ;       jrnz    adf_f9
    4757                    ;       move    @clb,a14,W
    4758                    ;       jrz     adf_f8
    4759                    ;       clr     a14
    4760                    ;       move    a14,@clb,W
    4761                    ;adf_f9 rets
    4762                    ;adf_f8 move    *a8(ANIMFRM),a14,L
    4763                    ;       subi    050h,a14
    4764                    ;       move    a14,*a8(ANIMFRM),L
    4765                    ;       rets
    4766                    
    4767                            .end

 No Errors,  No Warnings
