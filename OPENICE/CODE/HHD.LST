TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .MLIB   "HHMACS.LIB"
       2                            .FILE   "HHD.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    
       7                    **************************************************************************
       8                    *                                                                        *
       9                    *       COPYRIGHT (C) 1994 MIDWAY MANUFACTURING COMPANY.                 *
      10                    *                      ALL RIGHTS RESERVED.                              *
      11                    *                                                                        *
      12                    **************************************************************************
      13                    
      14                            .include        "HH.INC"
      15                            .include        "HHD.TBL"
      16                            .include        "hhd.e"
      17                            .include        "hhram.g"
      18                            .include        "hhc.g"
      19                            .include        "hhpall.g"
      20                            .include        "hhproc.g"
      21                            .include        "hhutil.g"
      22                            .include        "hhmisc.g"
      23                            .include        "hhtables.g"
      24                            .include        "hhpuck.g"
      25                            .include        "hhrt.g"
      26                            .include        "hhgame.g"
      27                    
      28                    ; end of include files
      29                    
      30                            .if     DEBUG
      31                            .def    CkOFREE
      32                            .endif
      33                    
      34 00000000                   .bss    rink_on,16
      35 00000010                   .bss    anipllist,32            ;PLAYER (AND GOALIE) ANIMATION LIST
      36 00000030                   .bss    panim_ok,16
      37 00000040                   .bss    panim_list1,32*8        ;list of objects to animate
      38 00000140                   .bss    panim_list2,32*8        ;different order for each list
      39                    
      40 00000240                   .bss    stupid,16
      41                    ;
      42                    *       GLOBAL VARIABLES
      43                    *
      44 00000000                   .sect   "OFIXED"
      45                    
      46 00000000           FGLIST
      47 00000000 00000000          .long   0,0
      48 00000040           FGLISTX
      49                    
      50 00000040           BGLISTSX
      51                    
      52                    ;# OF ENTRIES MUST = 2**#bits of SUPP field in OID
      53 00000040           SUPPLSTS
      54 00000040 00000000          .long   0,0,0,0,0,0,0,0
      55 00000140 00000000          .long   0,0,0,0,0,0,0,0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    2

      56 00000240 00000000          .long   0,0,0,0,0,0,0,0
      57 00000340 00000000          .long   0,0,0,0,0,0,0,0
      58 00000440           SUPPLSTSX
      59                    
      60 00000440 00000000  OFREE           .long   0       ;LIST OF FREE OBJECTS
      61 00000460 00000000  ENDOFREE        .long   0       ;PTR TO LAST OBJ ON FREE LIST
      62 00000480 00000000  ANIOBJS         .long   0       ;LIST OF OBJECTS for ANIM PROCESS
      63 00000250                   .BSS    ANIFUNCS,040h*NOBJ+020h,1 ;list of ANIM FUNCTIONS TO BE CALLED
      64                                                            ;+020h for list terminating 0
      65 00006670                   .BSS    ANIFUNCSX,0
      66                    
      67                    
      68                            .IF DEBUG
      69                    
      70                            .REF    NOVELADD
      71                    
      72                            .def    CPUCHK1,CPUCHK2,CPUCHK3,CPUCHK4,CPUCHK5
      73                            .def    CLIPTIM,VELTIM,SCALETIM,PROCTIM
      74                            .ENDIF
      75                    *
      76 00006670                   .bss    DMATMP,16               ; VLINE at which DMA is done for frame
      77 00006680                   .bss    DMALFT,16               ; % of DMA TIME left (0-1000)
      78 00006690                   .bss    DMAAVG,16               ; Average % DMA TIME left
      79 000066a0                   .bss    xxxx2,16                ;fill space to 32 bits
      80                            .IF DEBUG
      81                            .bss    CLIPTIM,16              ; % of screen time for clip loop
      82                            .bss    VELTIM,16               ; % of screen time for vel loop
      83                            .bss    SCALETIM,16             ; % of screen time for scale
      84                            .bss    PROCTIM,16              ; % of screen time for processes
      85                            .bss    CPUCHK1,16              ; VLINE @ start of clip
      86                            .bss    CPUCHK2,16              ; VLINE @ end of clip/start of VELADD
      87                            .bss    CPUCHK3,16              ; VLINE @ end of VELADD
      88                            .bss    CPUCHK4,16              ; VLINE @ start of SCALE_MAMA
      89                            .bss    CPUCHK5,16              ; VLINE @ end of SCALE_MAMA
      90                            .bss    xxxx3,16                ;fill space to 32 bits
      91                            .ENDIF
      92 000066b0                   .BSS    SCROLLX,32              ;X SCROLL VALUE
      93 000066d0                   .BSS    SCROLLY,32              ;Y SCROLL VALUE
      94 000066f0                   .BSS    WORLDX,32               ;world coordinates
      95 00006710                   .BSS    WORLDY,32               ;world coordinates
      96 00006730                   .BSS    SCRNTL,32               ;TOP LEFT [Y,X] SCREEN (SCRN COORD.)
      97 00006750                   .BSS    SCRNBR,32               ;LOWER RIGHT [Y,X] SCREEN (SCRN COORD.)
      98 00006770                   .BSS    OFREECNT,16             ;# objects on free list
      99 00006780                   .bss    xxxx4,16                ;fill space to 32 bits
     100 00006790                   .BSS    OBJSTR,NOBJ*OBSIZ       ;OBJECT SPACE START
     101 000cce90                   .BSS    OBJSTRX,0               ;OBJECT SPACE END
     102 000cce90                   .BSS    DMAQCUR,32              ;CURRENT DMAQ
     103          00012c00  QSIZE   .SET    NOBJ*BQCELL             ;SIZE OF A QUEUE
     104 000cceb0                   .BSS    DMAQ,QSIZE              ;MISC. NON-SYNC DMA QUEUE
     105 000dfab0                   .BSS    QDMAFLG,16              ;SPECIAL DMAQ BEING UPDATED=1
     106 000dfac0                   .BSS    DISPLAYON,16            ;DO DISPLAY PROCESSING WHEN != 0
     107 000dfad0                   .BSS    DMAIQSTR,(NOBJ+300)*6*020h      ;SPACE TO STORE DMAINT Q
     108 001007d0                   .BSS    DMAIQBOT,0              ;
     109                    ;       .BSS    DMAIQSTR2,(NOBJ+300)*6*020h     ;SPACE TO STORE DMAINT Q
     110                    ;       .BSS    DMAIQBOT2,0             ;
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    3

     111                    ;       .BSS    DMAIQACT,32             ;ACTIVE DMA Q
     112                    
     113 001007d0                   .BSS    INVELADD,16             ;we're VELADDing or we just did
     114 001007e0                   .bss    rinkpal,16
     115                    *LOCAL VARS
     116                    
     117 00000000                   .text
     118                    
     119                    **************************************************************************
     120 00000000           CLRDMAQ
     121                            ;*** GET STUFF READY FOR DMAINTS ***
     122 00000000     01e0          PUSHST
     123 00000010     0360          DINT
     124 00000020     09fb          movi    DMAREGS,B11
         00000030 01a000c0  
     125                    ;       movi    DMAIQBOT2,B13   ;DMAQTL Assume Q2
     126                    ;       MOVE    @DMAIQACT,B12,L ;DMAQHD
     127                    ;       CMPI    DMAIQBOT,B12
     128                    ;       JRHI    DIS_THE_INT
     129 00000050     09fd          movi    DMAIQBOT,B13    ;DMAQTL
         00000060 001007d0- 
     130 00000080     4dbc          MOVE    B13,B12
     131 00000090           DIS_THE_INT
     132 00000090     0541          setf    1,0,0
     133 000000a0     57de          clr     B14
     134 000000b0     059e          move    B14,@(INTENB+B_X1E),0   ;disable interrupt no that we're done
         000000c0 c0000111  
     135 000000e0     01c0          POPST
     136 000000f0     0960          rets
     137                    
     138                    **************************************************************************
     139                    *                                                                        *
     140                    *  DISPLAY                                                               *
     141                    *                                                                        *
     142                    *       DO MANUAL DMAs                                                   *
     143                    *       PLOT ROAD                                                        *
     144                    *       ADD VELOCITIES, GRAVITY                                          *
     145                    *       DISPLAY THE FOREGROUND & BACKGROUND PLANES                       *
     146                    *                                                                        *
     147                    *       CALLED AT END OF SCREEN INTERRUPT                                *
     148                    *                                                                        *
     149                    * NOTE: IT IS ASSUMED THAT THE DMA IS STOPPED UPON ENTRY                 *
     150                    *                                                                        *
     151                    * DOUBLE NOTE: A14 IS USED THROUGHOUT THIS ROUTINE AS SCREEN TOP/LEFT,   *
     152                    *               THEREFORE, DO NOT USE MACROS THAT TRASH A14!!            *
     153                    *                                                                        *
     154                    **************************************************************************
     155 00000100           DISPLAY:
     156 00000100     05a0          MOVE    @DISPLAYON,A0,W
         00000110 000dfac0- 
     157 00000130     ca00          JREQ    DISPX   ;BR = STOP ALL NEW DISPLAY PROCESSING
         00000140     00a1  
     158                    
     159 00000150     0d3f          callr   CLRDMAQ
         00000160     ffe9  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    4

     160                    
     161 00000170     07ae          MOVE    @SCRNTL,A14,L   ;GET SCREEN BOUNDARIES
         00000180 00006730- 
     162 000001a0     07ad          MOVE    @SCRNBR,A13,L   ;THESE MUST STAY VALID FROM HERE THRU CLIP
         000001b0 00006750- 
     163                    
     164 000001d0     09f1          movi    DMAGOREG,B1
         000001e0 01a00000  
     165                    *
     166                    * Dump the MANUAL DMA Queue.  The DMA clip window will be opened all of
     167                    * the way.  Therefore these DMAs do not heed the normal object world
     168                    * constraints.
     169                    *
     170 00000200     05a2          MOVE    @QDMAFLG,A2             ;Q BEING MODIFIED?
         00000210 000dfab0- 
     171 00000230     cb36          JRNE    DISPMANX                ;YES, DON'T SCREW WITH IT
     172 00000240     07a8          MOVE    @DMAQCUR,A8,L
         00000250 000cce90- 
     173 00000270     09e1          MOVI    DMAQ+QSIZE,A1
         00000280 000dfab0- 
     174 000002a0     4828          CMP     A1,A8                   ;ANYTHING IN THE QUEUE?
     175 000002b0     ca2e          JREQ    DISPMANX                ;NONE
     176 000002c0     0781          MOVE    A1,@DMAQCUR,L           ;RESET TOP OF QUEUE
         000002d0 000cce90- 
     177 000002f0     09e2          MOVI    [2*SCRHGHT,0],A2
         00000300 01fc0000  
     178 00000320     0782          MOVE    A2,@DMAWINDOW,L         ;FULL HEIGHT WINDOW
         00000330 01a000c0  
     179 00000350     07a2          MOVE    @DMACFIGCOPY,A2,L       ; XUNIT
         00000360 00000000! 
     180 00000380     0b82          ANDNI   DMAWIN,A2
         00000390 00200000  
     181 000003b0     0782          MOVE    A2,@DMACONFIG,L         ; XUNIT CONFIGURE DMA TO ADJUST WINDOW WIDTH
         000003c0 01a000e0  
     182 000003e0     09e0          MOVI    [511,SCRLFT],A0
         000003f0 01ff0000  
     183 00000410     0780          MOVE    A0,@DMAWINDOW,L         ;FULL WIDTH
         00000420 01a000c0  
     184 00000440     0ba2          ORI     DMAWIN,A2
         00000450 00200000  
     185 00000470     0782          MOVE    A2,@DMACONFIG,L         ; XUNIT LEAVE CONFIG'D FOR TOP/BOT ADJUSTMENT
         00000480 01a000e0  
     186 000004a0     0be1  DMANLP  subi    32*6,A1
         000004b0     ff3f  
     187 000004c0     4c20          move    A1,A0
     188 000004d0     09a0          mmfm    A0,A9,A6,A5,A4,A3,A2
         000004e0     027c  
     189 000004f0     09e7          movi    DMAREGS,A7
         00000500 01a000c0  
     190                            ;*** WAIT FOR DMA NOT BUSY ***
     191 00000520     863e  DMAWT1  MOVE    *B1,B14,L       ;DMA BUSY?
     192 00000530     cefe          JRN     DMAWT1          ;BR = YES
     193                            ;STUFF DMA REGS
     194 00000540     0987          mmtm    A7,A2,A3,A4,A5,A6,A9
         00000550     3e40  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    5

     195                                                    ;A2  Y-SCALE:X-SCALE
     196                                                    ;A3  CONST:PALETTE
     197                                                    ;A4  Y-SIZE:X-SIZE
     198                                                    ;A5  DAG
     199                                                    ;A6  SAG
     200                                                    ;A9 CONTROL:OFFSET
     201 00000560     863e  DMAWT2  MOVE    *B1,B14,L       ;DMA BUSY?
     202 00000570     cefe          JRN     DMAWT2          ;BR = YES
     203 00000580     4901          CMP     A8,A1           ;HAVE WE EMPTIED THE QUEUE?
     204 00000590     c3f0          JRHI    DMANLP          ;BR = NO, LET'S DO SOME MORE
     205 000005a0           DISPMANX
     206                    
     207                            .if     freeze_ok
     208 000005a0     05ae          move    @game_frozen,a14,W
         000005b0 00000000! 
     209 000005d0     cb22          jrnz    SkSCROLL
     210                            .endif
     211                            .if     DEBUG
     212                            MOVE    @NOVELADD,A14,W
     213                            JRNZ    SkSCROLL                ;BR=WE LOCKED UP!
     214                            .endif
     215                    
     216 000005e0     07a0          move    @SCROLLX,A0,L           ;ADJUST WORLD COORS FOR SCROLL
         000005f0 000066b0- 
     217 00000610     07a1          move    @WORLDX,A1,L
         00000620 000066f0- 
     218 00000640     4001          add     A0,A1
     219 00000650     0b61          cmpi    [585,0],a1              ;we in no way will go past our edge
         00000660 fdb6ffff  
     220 00000680     c603          jrle    aioo1
     221 00000690     09e1          movi    [585,0],a1
         000006a0 02490000  
     222 000006c0     0b61  aioo1   cmpi    [-585,0],a1
         000006d0 0248ffff  
     223 000006f0     c503          jrge    aioo2
     224 00000700     09e1          movi    [-585,0],a1
         00000710 fdb70000  
     225 00000730     0781  aioo2   move    A1,@WORLDX,L
         00000740 000066f0- 
     226 00000760     07a0          move    @SCROLLY,A0,L
         00000770 000066d0- 
     227 00000790     07a1          move    @WORLDY,A1,L
         000007a0 00006710- 
     228 000007c0     4001          add     A0,A1
     229 000007d0     0781          move    A1,@WORLDY,L
         000007e0 00006710- 
     230                    
     231 00000800           SkSCROLL
     232                    
     233                    ;*SET THE DMA WINDOW FOR OBJECT CLIPPING
     234 00000800     4dc0          MOVE    A14,A0                  ;GET THE SCREEN WINDOW TOP
     235 00000810     2e00          SRL     16,A0                   ;POSITION IT PROPERLY
     236 00000820     efa0          MOVY    A13,A0                  ;GET THE SCREEN WINDOW BOTTOM Y
     237 00000830     05a7          move    @PAGE,A7,W
         00000840 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    6

     238 00000860     ca03          jrz     DISP_DMA_WIN
     239 00000870     0b20          ADDI    [SCRHGHT,SCRHGHT],A0
         00000880 00fe00fe  
     240 000008a0           DISP_DMA_WIN
     241 000008a0     0780          MOVE    A0,@DMAWINDOW,L         ;SET WORLD HEIGHT
         000008b0 01a000c0  
     242 000008d0     07a7          MOVE    @DMACFIGCOPY,A7,L
         000008e0 00000000! 
     243 00000900     0b87          ANDNI   DMAWIN,A7
         00000910 00200000  
     244 00000930     0787          MOVE    A7,@DMACONFIG,L         ;CONFIGURE DMA TO ADJUST WINDOW WIDTH
         00000940 01a000e0  
     245 00000960     09e0          movi    [511,0],a0
         00000970 01ff0000  
     246 00000990     0780          move    a0,@DMAWINDOW,L
         000009a0 01a000c0  
     247 000009c0     0ba7          ORI     DMAWIN,A7
         000009d0 00200000  
     248 000009f0     0787          MOVE    A7,@DMACONFIG,L         ;LEAVE CONFIG'D FOR TOP/BOT ADJUSTMENT
         00000a00 01a000e0  
     249 00000a20     05a0          MOVE    @SKIPDISP,A0,W          ;IS THE DISPLAY TURNED OFF?
         00000a30 00000000! 
     250 00000a50     cb10          jrnz    DISPX                   ;BR = YES
     251                    
     252 00000a60     0d3f          callr   do_rink         ;**** NOTE also does veladd ****
         00000a70     000f  
     253                    ;       calla   debug_track_puck
     254 00000a80     0d3f          callr   SCALE_MAMA      ;mdp note: scale mama is here instead of hhc so we
         00000a90     00d3  
     255                                                    ;no longer run extra frame behind (slower this way)
     256                    ;       callr   shift_shadows           ;we fall into this now
     257                    
     258                    ***     MOVE    @SCRNTL,A14,L           ;GET SCREEN BOUNDARIES
     259                    ***     MOVE    @SCRNBR,A13,L
     260 00000aa0     07a5          move    @PAGEADDR,A5,L
         00000ab0 00000000! 
     261                    ;       movi    SCREEN_WIDTH-1,B10      ; for DCLIP_MIRROR
     262                    ;       MOVI    BOGUS_SCL,B6            ;This means scale_mama didn't do it (not needed with moved scale
     263 00000ad0     07ae          MOVE    @SCRNTL,A14,L   ;GET SCREEN BOUNDARIES
         00000ae0 00006730- 
     264 00000b00     09f1          movi    DMAGOREG,b1
         00000b10 01a00000  
     265 00000b30     c080          jauc    PutPlanes
         00000b40 00000000! 
     266 00000b60     0960  DISPX   rets
     267                    
     268                    ;       .IF DEBUG
     269                    ;       move    @VCOUNT,@CPUCHK1
     270                    ;       .ENDIF
     271                    
     272                    **************************************************************************
     273                    *                                                                        *
     274                    * 3D SYSTEM FOR RINK PERSPECTIVE                                         *
     275                    *                                                                        *
     276                    * constants that determine rink size/shape                               *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    7

     277                    *       h  = height of observer (in pixels)     (579)                    *
     278                    *       d1 = distance of observer from screen   (1379)                   *
     279                    *                                                                        *
     280                    * coordinate transformation                                              *
     281                    *       yn = y0-worldy-(z0*h)/(d1+z0)+HALFY     ;z maps to y             *
     282                    *       sc = d1/(d1+z0)                 ;scale based on z0               *
     283                    *       ds = ((d1+z0)/d1)*100h          ;dma scale is (inverse of scale) *
     284                    *                                       ; * 100h                         *
     285                    *       xn = ((x0-worldx)*sc)+HALFX     ;x maps to distance from center  *
     286                    *                                        * scale                         *
     287                    * rink formulas                                                          *
     288                    *       for each line going up                                           *
     289                    *        sagadd = -(x0-worldx))/h                                        *
     290                    *                                                                        *
     291                    **************************************************************************
     292                    
     293                    **************************************************************************
     294                    *                                                                        *
     295                    * do_rink        - dma's out the data for rink based on world coordinate *
     296                    *       goes line by line from bottom to top                             *
     297                    *       DAG is bottom left corner of rink (in WORLDXY)                   *
     298                    *       SAG is beginning of binary load + 350*8 (half image - half scree *
     299                    *                                                                        *
     300                    **************************************************************************
     301                    ;table_driven_rink      source is 3 860 pixel wide rink strips, (outside
     302                    ;                        strips adjusted for default shift of 404)
     303                    
     304 00000b70     05b4  do_rink move    @rink_on,b4,W
         00000b80 00000000- 
     305 00000ba0     ca6b          jrz     pw_exit
     306 00000bb0     09f2          movi    [100h,100h],b2          ;b2 = scale
         00000bc0 01000100  
     307 00000be0     05b3          move    @rinkpal,b3             ;b3 = const/pal
         00000bf0 001007e0- 
     308                    
     309                    ;       move    @stupid,b6,W
     310                    ;       or      b6,b3
     311                            
     312                    
     313 00000c10     07b6          move    @WORLDY,b6,L
         00000c20 00006710- 
     314 00000c40     56b5          clr     b5
     315 00000c50     44d5          sub     b6,b5
     316 00000c60     2a15          sra     16,b5
     317 00000c70     0b15          addi    HALFY+1,b5
         00000c80     0080  
     318 00000c90     2615          sll     16,b5
     319 00000ca0     07b6          move    @PAGEADDR,b6,L
         00000cb0 00000000! 
     320 00000cd0     40d5          add     b6,b5                   ;b5 = dag
     321 00000ce0     05b0          move    @WORLDX+010h,b0,W
         00000cf0 00006700- 
     322 00000d10     0b50          cmpi    585,b0
         00000d20     fdb6  
     323 00000d30     c602          jrle    dre1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    8

     324 00000d40     09d0          movi    585,b0
         00000d50     0249  
     325 00000d60     0b50  dre1    cmpi    -585,b0
         00000d70     0248  
     326 00000d80     c502          jrge    dre2
     327 00000d90     09d0          movi    -585,b0
         00000da0     fdb7  
     328 00000db0           dre2
     329 00000db0     4c18          move    b0,b8
     330 00000dc0     09f6          movi    (HALF1X+((798-HALFX)<<3))-2000000h,b6           ;sag over (1596 / 2) - 199
         00000dd0 01fa3028  
     331 00000df0     09d4          movi    404,b4
         00000e00     0194  
     332 00000e10     0b58          cmpi    -224,b8
         00000e20     00df  
     333 00000e30     c40c          jrlt    dr_got
     334 00000e40     09f6          movi    (HALF2X+((798-HALFX)<<3)-(736<<3))-2000000h,b6  ;sag over (1596 / 2) - 199
         00000e50 020e4128  
     335 00000e70     09d4          movi    -404,b4
         00000e80     fe6c  
     336 00000e90     0b58          cmpi    224,b8
         00000ea0     ff1f  
     337 00000eb0     c704          jrgt    dr_got
     338 00000ec0     09f6          movi    (HALF12+((798-HALFX)<<3)-(368<<3))-2000000h,b6  ;sag over (1596 / 2) - 199
         00000ed0 01e5fca8  
     339 00000ef0     5694          clr     b4
     340 00000f00     1917  dr_got  movk    8,b7                    ;1 pixel over is now default for offset2
     341 00000f10     4090          add     b4,b0
     342 00000f20     ce01          jrn     drgr
     343 00000f30     03b7          neg     b7
     344 00000f40     24b0  drgr    sll     5,b0
     345 00000f50     0b30          addi    rmg_list,b0
         00000f60 00000000! 
     346 00000f80     8610          move    *b0,b0,L                ;table start
     347 00000f90     2478          sll     3,b8
     348 00000fa0     4116          add     b8,b6
     349 00000fb0     09fe          movi    080000000h,b14
         00000fc0 80000000  
     350 00000fe0     09f4          movi    [2,400],b4
         00000ff0 00020190  
     351 00001010     0541          setf    1,0,0
     352 00001020     09e0          movi    (INTENB+B_X1E),a0       ;to enable dmaint
         00001030 c0000111  
     353 00001050     1821          movk    1,a1                    ;for dmaint enable
     354 00001060     4d71          move    b11,b1
     355 00001070     0991          mmtm    b1,b2,b3,b4,b5,b6,b14   ;dummy clear line
         00001080     3e02  
     356 00001090     8020          move    a1,*a0,0                ;**** ENABLE DMAINT ****
     357 000010a0     0548          setf    8,0,0                   ;for byte moves
     358 000010b0     0750          setf    16,0,1
     359 000010c0     09fe          movi    080230000h,b14
         000010d0 80230000  
     360 000010f0     9414          move    *b0+,b4,0               ;a1 = outer count
     361 00001100     1110          addk    8,b0                    ;get back on a word
     362 00001110     4e91          move    b4,a1                   ;a1 = outer count
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    9

     363 00001120     09d4          movi    860,b4                  ;b4 = offset1
         00001130     035c  
     364 00001140     ec9e          movx    b4,b14
     365 00001150     0bfe          subi    400,b14                 ;offset = xsize - 400
         00001160     fe6f  
     366 00001170     9411  kl1     move    *b0+,b1,0                ;get 1 byte
     367 00001180     9418          move    *b0+,b8,0                ;get 1 byte
     368 00001190     9619          move    *b0+,b9,1                ;get 1 word
     369 000011a0     24b9          sll     5,b9                    ;multiply it by 32 (so word instead of long fits in table)
     370 000011b0     40f9          add     b7,b9
     371 000011c0     2618          sll     16,b8
     372 000011d0     ef14          movy    b8,b4
     373 000011e0     099c  kl2     mmtm    b12,b2,b3,b4,b5,b6,b14
         000011f0     3e02  
     374 00001200     4515          sub     b8,b5                   ;next dag
     375 00001210     4136          add     b9,b6                   ;next sag
     376 00001220     3cb1          dsjs    b1,kl2
     377 00001230     3da1          dsjs    a1,kl1
     378 00001240     0570          setf    16,1,0
     379 00001250     0760          setf    32,1,1
     380                    
     381 00001260           pw_exit
     382                    ;       calla   CLRDMAQ
     383                    ;       clr     a0
     384                    ;       move    a0,@DMAGOREG,L
     385                    ;       move    a0,@DMAGOREG,L
     386                    
     387                            ;fall through to veladd
     388                    
     389                    **************************************************************************
     390                    *                                                                        *
     391                    * VELOCITY ADD AND SCREEN BOUNDARY CHECK                                 *
     392                    *                                                                        *
     393                    *       a0  = Obj Block                                                  *
     394                    *       a2  = End of Obj List                                            *
     395                    *       a3  = scratch                                                    *
     396                    *       a4  = ZMAX_REAL-800h (univ)                                      *
     397                    *       a5  = XBASE                                                      *
     398                    *       a6  = M_OFSCRN (const)                                           *
     399                    *       a7  = Multi part obj block                                       *
     400                    *       a8  = ZPOS                                                       *
     401                    *       a9  = YPOS                                                       *
     402                    *       a10 = XPOS                                                       *
     403                    *       a11 = YVEL                                                       *
     404                    *       a12 = XVEL                                                       *
     405                    *       a13 = ZVEL                                                       *
     406                    *       a14 = OFLAGS                                                     *
     407                    *                                                                        *
     408                    *       B0  = PRIMARY X LEFT SHIFT VALUE FOR UNIVERSE CHECK              *
     409                    *       B1  = PRIMARY Y LEFT SHIFT VALUE FOR UNIVERSE CHECK              *
     410                    *       B2  = SCRATCH                                                    *
     411                    *       B4  = SCRATCH                                                    *
     412                    *       b5  =   avail                                                    *
     413                    *       B6  = SCRATCH                                                    *
     414                    *       B7  = SECONDARY X LEFT SHIFT VALUE FOR UNIVERSE CHECK            *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   10

     415                    *       B8  = SECONDARY Y LEFT SHIFT VALUE FOR UNIVERSE CHECK            *
     416                    *       B9  = YBASE                                                      *
     417                    *       B14 = SCRATCH                                                    *
     418                    *                                                                        *
     419                    **************************************************************************
     420 00001260           VELADD
     421                            .if     freeze_ok
     422 00001260     05ae          move    @game_frozen,a14,W
         00001270 00000000! 
     423 00001290     cb3a          jrnz    vaddx
     424                            .endif
     425                            .if     DEBUG
     426                            MOVE    @NOVELADD,A14,W
     427                            JRNZ    vaddx                   ;BR=WE LOCKED UP!
     428                            .endif
     429                    
     430 000012a0     182e  vf0     MOVK    1,A14
     431 000012b0     058e          MOVE    A14,@INVELADD,W         ;we're VELADDing
         000012c0 001007d0- 
     432 000012e0     09e0          MOVI    FGLIST,A0
         000012f0 00000000+ 
     433 00001310     4c02          move    a0,a2
     434 00001320     09c6          movi    M_OFSCRN,a6
         00001330     0080  
     435 00001340     09c1          movi    M_FVELADD,a1
         00001350     0004  
     436 00001360     09c7          movi    OZVEL,a7                ;const in add below
         00001370     00e0  
     437 00001380     5684          clr     a4              ;use a4 to make 16 bit numbers positive
     438                    
     439 00001390     c027          jruc    VADD
     440                    
     441                            .align
     442                    
     443                    *LOAD A13:OZVEL, A12:OXVEL, A11:0YVEL, A10:OXPOS, A9:OYPOS, A8:OZPOS
     444 00001400     b40e  DVEL    move    *a0(OFLAGS),a14,W
         00001410     0420  
     445 00001420     52ce          andn    a6,a14          ; Assume onscreen first
     446 00001430     1eee          btst    B_NOVEL,a14
     447 00001440     cb1a          jrnz    gravb           ;do next object if we don't do this
     448 00001450     4c03          move    a0,a3                   ;get obj base in A3 for pull of vals
     449 00001460     40e3          add     a7,a3                   ;add in OZVEL
     450 00001470     09a3          mmfm    a3,a8,a9,a10,a11,a12,a13
         00001480     3f00  
     451 00001490     1fae          btst    B_FVELADD,a14   ;do we add this frame?
     452 000014a0     ca02          jrz     skyp
     453 000014b0     522e  vaddnok andn    a1,a14          ;turn bit off now
     454 000014c0     c005          jruc    skyvad0         ;and skip vadd
     455 000014d0     41a8  skyp    add     a13,a8          ;add z velocity to zval
     456 000014e0     418a          add     a12,a10         ;add x velocity to xval
     457 000014f0     4169          add     a11,a9          ;add y velocity to yval
     458 00001500     0983          mmtm    a3,a8,a9,a10
         00001510     00e0  
     459 00001520     1e0e  skyvad0 btst    B_SCRNOBJ,a14
     460 00001530     ca04          jrz     notscrn
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   11

     461 00001540     2e0a          srl     16,a10
     462 00001550     ef2a          movy    a9,a10
     463 00001560     b340          move    a10,*a0(ODAG),L
         00001570     0220  
     464 00001580     b403  notscrn move    *a0(OYACCEL),a3,W
         00001590     02f0  
     465 000015a0     ca04          jrz     gravb
     466 000015b0     ee83          movy    a4,a3
     467 000015c0     406b          add     A3,A11
     468 000015d0     b360          move    A11,*A0(OYVEL),L
         000015e0     0120  
     469 000015f0     b1c0  gravb   move    a14,*a0(OFLAGS),W
         00001600     0420  
     470 00001610     8600  VADD    move    *a0,a0,L        ;GET NEXT ONE FOLKS
     471 00001620     4802          cmp     a0,a2
     472 00001630     cbdc          jrnz    DVEL
     473 00001640     0960  vaddx   rets
     474                    
     475 00001650                   .text
     476                    
     477                    **************************************************************************
     478                    *                                                                        *
     479                    * game_set_worldy                                                        *
     480                    *       for game mode, to set world y (shake)                            *
     481                    *       input   a0 = new world y (word)                                  *
     482                    *                                                                        *
     483                    **************************************************************************
     484 00001650           game_set_worldy
     485 00001650     098f          mmtm    sp,a0,a8
         00001660     8080  
     486 00001670     05ae          move    @WORLDY+010h,a14,W
         00001680 00006720- 
     487 000016a0     440e          sub     a0,a14
     488 000016b0     0580          move    a0,@WORLDY+010h,W
         000016c0 00006720- 
     489 000016e0     07a8          move    @SUPPLSTS+3*20h,a8,L    ;now we set our back wall of boards
         000016f0 000000a0+ 
     490 00001710     ca08          jrz     gsw9
     491 00001720     b500  gsw2    move    *a8(ODAGY),a0,W
         00001730     0230  
     492 00001740     41c0          add     a14,a0
     493 00001750     b008          move    a0,*a8(ODAGY),W
         00001760     0230  
     494 00001770     b708          move    *a8(OSLINK),a8,L
         00001780     0040  
     495 00001790     cbf8          jrnz    gsw2
     496 000017a0     09af  gsw9    mmfm    sp,a0,a8
         000017b0     0101  
     497 000017c0     0960          rets
     498                    
     499                    **************************************************************************
     500                    *                                                                        *
     501                    * SCALE_MAMA - compute scale factor algorithmically, then Scrn Pos       *
     502                    *                                                                        *
     503                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   12

     504                    *
     505                    *       a0 = obj
     506                    *       a1 = scratch
     507                    *       a2 = new YSCALE
     508                    *       a3 = 10000h for inverse scale computation
     509                    *               B3 = OZVAL
     510                    *       a4 = start of FGLIST
     511                    *       a5 = SCRN TL
     512                    *               B5 = OYVAL
     513                    *       a6 = new XSCALE
     514                    *       a7 =
     515                    *               B7 = OXVAL
     516                    *               B8 = XBASE
     517                    *       a8 = OFLAGS
     518                    *       a9 = scratch, then ODAG
     519                    *               B10 = YBASE
     520                    *       a11 = scratch
     521                    *       a12 = Scrn BR
     522                    *       a13 = inverse scale
     523                    *       a14 = IHDRSIZ
     524 000017d0           SCALE_MAMA
     525 000017d0     09e0          MOVI    FGLIST,A0
         000017e0 00000000+ 
     526 00001800     4c04          MOVE    A0,A4
     527 00001810     09e3          movi    invscale_table,a3
         00001820 00000000! 
     528 00001840     09d0          movi    OXVAL,B0
         00001850     0140  
     529 00001860     09d4          movi    HALFX,B4
         00001870     00c7  
     530 00001880     09d6          MOVI    HALFY,B6
         00001890     007f  
     531                    ;       a10 is now open for use
     532 000018a0     09ce          movi    M_OFSCRN,a14
         000018b0     0080  
     533 000018c0     07b8          move    @WORLDX,b8,L
         000018d0 000066f0- 
     534 000018f0     07ba          move    @WORLDY,b10,L
         00001900 00006710- 
     535 00001920     07a5          MOVE    @SCRNTL,A5,L    ;GET SCREEN BOUNDARIES
         00001930 00006730- 
     536 00001950     07ac          MOVE    @SCRNBR,A12,L   ; FOR OFSCRN COMPUTATION in COMP_SCRN_POS
         00001960 00006750- 
     537 00001980     c077          JRUC    SCL_NXT_OBJ
     538                            .align
     539 00001a00           SCALE_LP
     540 00001a00     b408          MOVE    *A0(OFLAGS),A8,W
         00001a10     0420  
     541                    
     542                    ;       btst    B_OFSCRN,a8     ; if OFSCRN, do not scale or compute DEST
     543                    ;       jrnz    SCL_NXT_OBJ     ;we are always on screen here, because veladd just turned us on
     544                    
     545 00001a20     1e08          BTST    B_SCRNOBJ,A8
     546 00001a30     cb6c          JRNZ    SCL_NXT_OBJ
     547 00001a40     4e01          move    A0,B1           ;get obj base in b1 for pull of vals
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   13

     548 00001a50     4011          add     B0,B1           ; offset by OXVAL
     549 00001a60     09b1          MMFM    B1,B3,B5,B7     ;LOAD B7:OXPOS, B5:OYPOS, B3:OZPOS
         00001a70     00a8  
     550 00001a80     b607          MOVE    *A0(OSCALE),A7,L         ; previous scale in a7
         00001a90     02a0  
     551 00001aa0     1fe8          BTST    B_NOSCALE,A8
     552 00001ab0     cb0c          JRNZ    KEEP_OLD_SCALE
     553                    ;       BTST    B_MANSCALE,A8
     554                    ;       JRZ     SkpSclLod
     555                    ;       ORI     M_NOSCALE,a8    ; reset rescale signal
     556                    ;       move    a8,*a0(OFLAGS)
     557                    ;       move    *a0(ONuManScl),a6
     558                    ;       clr     a7              ; force new scale
     559                    ;       jruc    ManScaleSt
     560                    ;
     561                    ;SkpSclLod:
     562 00001ac0     b606          move    *a0(ODT_SC_OVERRIDE),a6,L
         00001ad0     0790  
     563 00001ae0     cb07          jrnz    ChkNxtScl
     564 00001af0     4e76          move    B3,a6           ; save ZPOS for DAG computation
     565 00001b00     29c6          sra     16+2,a6         ;new osctab
     566 00001b10     24a6          sll     5,a6
     567 00001b20     b60b          move    *a0(OSCTAB),a11,L
         00001b30     0470  
     568 00001b40     4166          add     a11,a6
     569 00001b50     86c6          move    *a6,a6,L
     570                    ;ManScaleSt:
     571 00001b60           ChkNxtScl:
     572 00001b60     48c7          cmp     a6,a7            ; new X scale in a6
     573 00001b70     cb05          JRNE    DO_NEW_SCALE
     574 00001b80           KEEP_OLD_SCALE
     575 00001b80     b609          MOVE    *A0(OSIZE),a9,L
         00001b90     0260  
     576 00001ba0     b601          MOVE    *A0(OANIOFF),a1,L
         00001bb0     01c0  
     577 00001bc0     c024          JRUC    COMP_SCRN_POS
     578                    
     579 00001bd0           DO_NEW_SCALE
     580 00001bd0     b2c0          MOVE    A6,*A0(OSCALE),L
         00001be0     02a0  
     581 00001bf0     b609          MOVE    *A0(OUSIZE),A9,L        ;Unscaled size in a1
         00001c00     0240  
     582 00001c10     b601          MOVE    *A0(OUANIOFF),A1,L      ;Unscaled animation pnt in A1
         00001c20     0440  
     583 00001c30     4cc7          move    a6,a7
     584 00001c40     2e07          srl     16,a7
     585 00001c50     2487          sll     4,a7
     586 00001c60     4067          add     a3,a7
     587 00001c70     84ed          move    *a7,a13,W
     588 00001c80     2606          sll     16,a6
     589 00001c90     2e86          srl     12,a6
     590 00001ca0     4066          add     a3,a6
     591 00001cb0     84c7          move    *a6,a7,W                ;fake some divides
     592 00001cc0           NORMAL_SCALE
     593 00001cc0     076c          setf    12,1,1          ; change FS1 to quicken multiplies
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   14

     594 00001cd0     576b          clr     a11
     595 00001ce0     ed2b          movx    A9,a11
     596 00001cf0     5eeb          mpyu    A7,A11            ; result in a11
     597 00001d00     2f0b          srl     8,a11
     598 00001d10     2f09          srl     8,A9
     599 00001d20     5fa9          mpyu    a13,A9
     600 00001d30     ed69          movx    a11,A9
     601 00001d40     4c2b          move    A1,A11
     602 00001d50     050b          sext    a11
     603 00001d60     5ceb          mpys    A7,A11            ; result in a11
     604 00001d70     2b0b          sra     8,a11
     605 00001d80     2a01          sra     16,A1
     606 00001d90     5da1          mpys    a13,A1
     607 00001da0           NORMAL_SCALE_FINISH
     608 00001da0     2501          sll     8,A1
     609 00001db0     ed61          movx    a11,A1
     610 00001dc0     0740          setf    32,0,1          ; restore FS1    !!!
     611 00001dd0     b220          MOVE    A1,*A0(OANIOFF),L
         00001de0     01c0  
     612 00001df0     b320          MOVE    A9,*A0(OSIZE),L
         00001e00     0260  
     613 00001e10           nochg
     614                    ;       ANIOFF is in A1
     615                    ;       SIZE is in a9
     616                    
     617 00001e10           COMP_SCRN_POS                   ; Compute Screen Position
     618 00001e10     4555          sub     B10,B5          ; Universe to World Y
     619                    
     620                    ;b3 = z,  b7 = xoff, b5 = yoff
     621 00001e20     2a15          sra     16,b5
     622 00001e30     2a13          sra     16,b3
     623 00001e40     2493          sll     4,b3
     624 00001e50     0b33          addi    zybase_table,b3
         00001e60 00000000! 
     625 00001e80     847e          move    *b3,b14
     626 00001e90     45d5          sub     b14,b5
     627 00001ea0     40d5          add     b6,b5
     628 00001eb0     2615          sll     16,b5
     629                    
     630 00001ec0     4517          sub     B8,B7           ; Universe to World X
     631 00001ed0     2a57          sra     14,b7           ;shift xval down 14 bits
     632 00001ee0     0b33          addi    xzy_offset,b3
         00001ef0 00000000! 
     633 00001f10     847e          move    *b3,b14         ;get scale of x
     634 00001f20     5dd7          mpys    b14,b7          ;multiply scale * x
     635 00001f30     2a17          sra     16,b7           ;move x to lower half
     636 00001f40     4097          add     b4,b7
     637 00001f50     4cf9          move    b7,b9
     638 00001f60     eeb9          movy    b5,b9
     639                    
     640                    ;       ANIOFF is in A1
     641                    ;       SIZE is in a9
     642                    ;
     643                    ;BIG NOTE: On 10/6/93 A slight change was made that requires
     644                    ;               A1 to be ANIOFF and A9 to be OSIZE at this point.
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   15

     645                    
     646 00001f70     1429          dec     a9
     647 00001f80     4d27          move    a9,a7           ; save for ofscrn check  12/22/93
     648 00001f90     e229          subxy   a1,a9           ; adjusted anioff in a9
     649 00001fa0     b406          move    *a0(OCTRL),a6
         00001fb0     01f0  
     650 00001fc0     576b          clr     a11             ;a11 is new flip fix register - mdp
     651 00001fd0     1f66          btst    B_FLIPH,a6
     652 00001fe0     ca02          jrz     noh
     653 00001ff0     ed21          movx    a9,a1
     654 00002000     eceb          movx    a7,a11          ;a11 is new flip fix register - mdp
     655 00002010     4f39  noh:    move    b9,a9
     656 00002020     e229          subxy   a1,a9
     657 00002030     412b          add     a9,a11          ;a11 is new flip fix register - mdp
     658 00002040     b360          move    a11,*a0(ODAG),L ;a11 is new flip fix register - mdp
         00002050     0220  
     659 00002060     e589          CMPXY   A12,A9                  ; IS IT LOWER THAN LOWER RT?
     660 00002070                   JRYGE   offs                    ; LOWER
     661 00002080                   JRXGE   offs                    ; TO THE RIGHT
     662 00002090     e127          addxy   a9,a7                   ; get lower right of obj in a7
     663 000020a0     e4a7          CMPXY   A5,A7
     664 000020b0     c201          JRYLE   offs                    ;ABOVE...
     665 000020c0     c503          jrxgt   SCL_NXT_OBJ             ;not to the left
     666                    ;       JRXLE   offs                    ;TO THE LEFT..
     667 000020d0     55c8  offs    or      a14,a8          ;m_ofscrn
     668 000020e0     b100          move    a8,*a0(OFLAGS)
         000020f0     0420  
     669 00002100           SCL_NXT_OBJ:
     670 00002100     8600          MOVE    *a0,a0,L                ; save a word MOVE *A0(OLINK),A0,L
     671 00002110     4804          CMP     A0,A4
     672 00002120     cb8d          JRNE    SCALE_LP
     673                    
     674 00002130     07a8          MOVE    @SUPPLSTS+6*20h,A8,L            ;SET REAR GOAL OBJECTS
         00002140 00000100+ 
     675 00002160     ca35          JRZ     SET_BACK_WALL                   ;BR=NO REAR GOAL OBJECTS
     676 00002170     b700          MOVE    *A8(OFRONT_OBJ),A0,L
         00002180     04b0  
     677 00002190     b601          MOVE    *A0(ODAG),A1,L
         000021a0     0220  
     678                    
     679 000021b0     b602          MOVE    *A0(OANIOFF),A2,L
         000021c0     01c0  
     680                    
     681 000021d0     5600          CLR     A0
     682 000021e0     ec40          MOVX    A2,A0
     683 000021f0     03a0          NEG     A0
     684 00002200     ec02          MOVX    A0,A2
     685                    
     686 00002210     e041          ADDXY   A2,A1
     687 00002220     b702          MOVE    *A8(OANIOFF),A2,L
         00002230     01c0  
     688                    
     689 00002240     5600          CLR     A0
     690 00002250     ec40          MOVX    A2,A0
     691 00002260     03a0          NEG     A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   16

     692 00002270     ec02          MOVX    A0,A2
     693                    
     694 00002280     e241          SUBXY   A2,A1
     695                    
     696                    ;       MOVE    *A8(OFRONT_OFFSET),A2,L
     697                    ;       ADDXY   A2,A1
     698 00002290     b228          MOVE    A1,*A8(ODAG),L
         000022a0     0220  
     699                    
     700 000022b0     09c2          MOVI    [0,399+35],A2
         000022c0     01b2  
     701 000022d0     e441          CMPXY   A2,A1
     702 000022e0     c405          JRXLE   SET_LEFT_REAR_GOAL              ;BR=GOAL ON SCREEN
     703 000022f0     b500          MOVE    *A8(OFLAGS),A0,W
         00002300     0420  
     704 00002310     55c0          OR      A14,A0                          ;SET M_OFSCRN
     705 00002320     b008          MOVE    A0,*A8(OFLAGS),W
         00002330     0420  
     706                    
     707 00002340           SET_LEFT_REAR_GOAL
     708 00002340     b708          MOVE    *A8(OSLINK),A8,L
         00002350     0040  
     709 00002360     b700          MOVE    *A8(OFRONT_OBJ),A0,L            ;LEFT SIDE
         00002370     04b0  
     710 00002380     b601          MOVE    *A0(ODAG),A1,L
         00002390     0220  
     711                    
     712 000023a0     b602          MOVE    *A0(OANIOFF),A2,L
         000023b0     01c0  
     713 000023c0     e041          ADDXY   A2,A1
     714 000023d0     b702          MOVE    *A8(OANIOFF),A2,L
         000023e0     01c0  
     715 000023f0     e241          SUBXY   A2,A1
     716                    
     717                    ;       MOVE    *A8(OFRONT_OFFSET),A2,L
     718                    ;       ADDXY   A2,A1
     719 00002400     b228          MOVE    A1,*A8(ODAG),L
         00002410     0220  
     720                    
     721 00002420     09e2          MOVI    [0,-36],A2
         00002430 0000ffdc  
     722 00002450     e441          CMPXY   A2,A1
     723 00002460     c505          JRXGT   SET_BACK_WALL                   ;BR=GOAL ON SCREEN
     724 00002470     b500          MOVE    *A8(OFLAGS),A0,W
         00002480     0420  
     725 00002490     55c0          OR      A14,A0                          ;SET M_OFSCRN
     726 000024a0     b008          MOVE    A0,*A8(OFLAGS),W
         000024b0     0420  
     727                    
     728 000024c0           SET_BACK_WALL
     729 000024c0     07a8          move    @SUPPLSTS+3*20h,a8,L    ;now we set our back wall of boards
         000024d0 000000a0+ 
     730 000024f0     ca1d          jrz     ssnb9
     731 00002500     05a1          move    @WORLDX+010h,a1,W
         00002510 00006700- 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   17

     732 00002530     0b01          addi    0184h,a1
         00002540     0184  
     733 00002550     03a1          neg     a1
     734 00002560     09e5          movi    02addh<<2,a5            ;this is our x multiplier for z = 680 (and we pre shift it)
         00002570 0000ab74  
     735 00002590     5ca1          mpys    a5,a1
     736 000025a0     2a01          sra     16,a1           ;a1 is now screen x of worldx = 0
     737 000025b0     b505          move    *a8(OFLAGS),a5,W
         000025c0     0420  
     738 000025d0     55c5          or      A14,A5          ;ready our oflags now
     739 000025e0     09c3          movi    56,a3
         000025f0     0038  
     740 00002600     09c4          movi    456,a4
         00002610     01c8  
     741                    
     742 00002620     b028  brd1    move    a1,*a8(ODAGX),W
         00002630     0220  
     743 00002640     4061          add     a3,a1
     744 00002650     ce02          jrn     brd2
     745 00002660     4881          cmp     a4,a1
     746 00002670     c602          jrle    brd3
     747                    ;brd2   move    a14,*a8(OFLAGS),W
     748 00002680     b0a8  brd2    move    a5,*a8(OFLAGS),W
         00002690     0420  
     749 000026a0     b708  brd3    move    *a8(OSLINK),a8,L
         000026b0     0040  
     750 000026c0     cbf5          jrnz    brd1
     751 000026d0           ssnb9   ;rets           ;fall to shift_shadows
     752                    
     753 000026d0           shift_shadows
     754 000026d0     07a8          move    @SUPPLSTS+4*20h,a8,L    ;first do the on/off guys
         000026e0 000000c0+ 
     755 00002700     ca1b          jrz     sssh_01
     756 00002710     09c1          movi    DMAWNZ-DMAGO,a1         ;just the nz part
         00002720     0002  
     757                            .if     freeze_ok
     758 00002730     05a0          move    @game_frozen,a0,W
         00002740 00000000! 
     759 00002760     cb03          jrnz    ssfg1
     760                            .endif
     761 00002770     05a0          move    @WAVEIRQS,a0,W          ;just get low
         00002780 00000000! 
     762 000027a0     2be0  ssfg1   sra     1,a0
     763 000027b0     c908          jrnc    ss4_2
     764 000027c0     b50e  ss4_1   move    *a8(OCTRL),a14,W
         000027d0     01f0  
     765 000027e0     542e          or      a1,a14
     766 000027f0     b1c8          move    a14,*a8(OCTRL),W
         00002800     01f0  
     767 00002810     b708          move    *a8(OSLINK),a8,L
         00002820     0040  
     768 00002830     ca08          jrz     sssh_01
     769 00002840     b50e  ss4_2   move    *a8(OCTRL),a14,W
         00002850     01f0  
     770 00002860     522e          andn    a1,a14
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   18

     771 00002870     b1c8          move    a14,*a8(OCTRL),W
         00002880     01f0  
     772 00002890     b708          move    *a8(OSLINK),a8,L
         000028a0     0040  
     773 000028b0     cbf0          jrnz    ss4_1
     774 000028c0     07a8  sssh_01 move    @SUPPLSTS+2*20h,a8,L
         000028d0 00000080+ 
     775 000028f0     ca25          jrz     sshd_9
     776 00002900     1821          movk    1,a1
     777                            .if     freeze_ok
     778 00002910     05a0          move    @game_frozen,a0,W
         00002920 00000000! 
     779 00002940     cb03          jrnz    ssfg2
     780                            .endif
     781 00002950     05a0          move    @WAVEIRQS,a0,W          ;just get low
         00002960 00000000! 
     782 00002980     2be0  ssfg2   sra     1,a0
     783 00002990     c80e          jrc     ssh_2
     784 000029a0     b700  ssh_1   move    *a8(ODAGX),a0,L
         000029b0     0220  
     785 000029c0     4c0e          move    a0,a14
     786 000029d0     2dee          srl     17,a14                  ;check bottom y bit
     787 000029e0     c802          jrc     ssh_11
     788 000029f0     5220          andn    a1,a0
     789 00002a00     c001          jruc    ssh_19
     790 00002a10     5420  ssh_11  or      a1,a0
     791 00002a20     b008  ssh_19  move    a0,*a8(ODAGX),W         ;just write the word back
         00002a30     0220  
     792 00002a40     b708          move    *a8(OSLINK),a8,L
         00002a50     0040  
     793 00002a60     cbf3          jrnz    ssh_1
     794 00002a70     0960          rets
     795 00002a80     b700  ssh_2   move    *a8(ODAGX),a0,L
         00002a90     0220  
     796 00002aa0     4c0e          move    a0,a14
     797 00002ab0     2dee          srl     17,a14                  ;check bottom y bit
     798 00002ac0     c802          jrc     ssh_21
     799 00002ad0     5420          or      a1,a0
     800 00002ae0     c001          jruc    ssh_29
     801 00002af0     5220  ssh_21  andn    a1,a0
     802 00002b00     b008  ssh_29  move    a0,*a8(ODAGX),W         ;just write the word back
         00002b10     0220  
     803 00002b20     b708          move    *a8(OSLINK),a8,L
         00002b30     0040  
     804 00002b40     cbf3          jrnz    ssh_2
     805 00002b50     0960  sshd_9  rets
     806                    
     807                    **************************************************************************
     808                    *                                                                        *
     809                    * SET_SCALE_SCRNOBJ - SET SCALE ON A SCREEN OBJECT AND KEEP IT'S POSITION*
     810                    * IN: A1, DA SCALE                                                       *
     811                    *     A6, [Y, X] POSITION                                                *
     812                    * OUT: NUTIN'                                                            *
     813                    *                                                                        *
     814                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   19

     815 00002b60           SET_SCALE_SCRNOBJ
     816 00002b60     098f          MMTM    SP,A2,A3,A4,A5,A6
         00002b70     3e00  
     817 00002b80     5642          CLR     A2
     818 00002b90     ec22          MOVX    A1,A2   ; XSCALE in A2
     819 00002ba0     4c23          MOVE    A1,A3
     820 00002bb0     2e03          SRL     16,A3   ; YSCALE IN A3
     821                    
     822 00002bc0     b228          MOVE    A1,*A8(OSCALE),L
         00002bd0     02a0  
     823 00002be0     b505          MOVE    *A8(OUSIZEX),A5,W
         00002bf0     0240  
     824 00002c00     2505          SLL     8,A5
     825 00002c10     5684          clr     a4
     826 00002c20     5a44          DIVU    A2,A4
     827 00002c30     b088          MOVE    A4,*A8(OSIZEX),W
         00002c40     0260  
     828 00002c50     b505          MOVE    *A8(OUANIOFFX),A5,W
         00002c60     0440  
     829 00002c70     2505          SLL     8,A5
     830 00002c80     5684          clr     a4
     831 00002c90     5844          divs    A2,A4
     832                    
     833 00002ca0     4cc5          MOVE    A6,A5
     834 00002cb0     0505          SEXT    A5,W
     835 00002cc0     4485          SUB     A4,A5
     836 00002cd0     b0a8          MOVE    A5,*A8(OXPOS),W
         00002ce0     0150  
     837 00002cf0     4ca2          MOVE    A5,A2
     838                    
     839 00002d00     b088          MOVE    A4,*A8(OANIOFFX),W
         00002d10     01c0  
     840 00002d20     b505          MOVE    *A8(OUSIZEY),A5,W
         00002d30     0250  
     841 00002d40     2505          SLL     8,A5
     842 00002d50     5684          clr     a4
     843 00002d60     5a64          divu    A3,A4
     844 00002d70     b088          MOVE    A4,*A8(OSIZEY),W
         00002d80     0270  
     845 00002d90     b505          MOVE    *A8(OUANIOFFY),A5,W
         00002da0     0450  
     846 00002db0     2505          SLL     8,A5
     847 00002dc0     5684          clr     a4
     848 00002dd0     5864          divs    A3,A4
     849                    
     850 00002de0     2a06          SRA     16,A6
     851 00002df0     4486          SUB     A4,A6
     852 00002e00     b0c8          MOVE    A6,*A8(OYPOS),W
         00002e10     0170  
     853                    
     854 00002e20     2606          SLL     16,A6
     855 00002e30     e0c2          ADDXY   A6,A2
     856 00002e40     b248          MOVE    A2,*A8(ODAG),L
         00002e50     0220  
     857                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   20

     858 00002e60     b088          MOVE    A4,*A8(OANIOFFY),W
         00002e70     01d0  
     859                    
     860 00002e80     09af          MMFM    SP,A2,A3,A4,A5,A6
         00002e90     007c  
     861 00002ea0     0960          RETS
     862                    
     863                    **************************************************************************
     864                    *                                                                        *
     865                    * SET_SCALEM - SCALE AN OBJECT                                           *
     866                    * IN: A1, DA SCALE                                                       *
     867                    * OUT: NUTIN'                                                            *
     868                    *                                                                        *
     869                    **************************************************************************
     870 00002eb0           SET_SCALEM
     871 00002eb0     098f          MMTM    SP,A2,A3,A4,A5,A8
         00002ec0     3c80  
     872 00002ed0     5642          CLR     A2
     873 00002ee0     ec22          MOVX    A1,A2   ; XSCALE in A2
     874 00002ef0     4c23          MOVE    A1,A3
     875 00002f00     2e03          SRL     16,A3   ; YSCALE IN A3
     876 00002f10           SET_PARTM
     877 00002f10     b228          MOVE    A1,*A8(OSCALE),L
         00002f20     02a0  
     878 00002f30     b505          MOVE    *A8(OUSIZEX),A5,W
         00002f40     0240  
     879 00002f50     2505          SLL     8,A5
     880 00002f60     5684          clr     a4
     881 00002f70     5a44          DIVU    A2,A4
     882 00002f80     b088          MOVE    A4,*A8(OSIZEX),W
         00002f90     0260  
     883 00002fa0     b505          MOVE    *A8(OUANIOFFX),A5,W
         00002fb0     0440  
     884 00002fc0     2505          SLL     8,A5
     885 00002fd0     5684          clr     a4
     886 00002fe0     5844          divs    A2,A4
     887 00002ff0     b088          MOVE    A4,*A8(OANIOFFX),W
         00003000     01c0  
     888 00003010     b505          MOVE    *A8(OUSIZEY),A5,W
         00003020     0250  
     889 00003030     2505          SLL     8,A5
     890 00003040     5684          clr     a4
     891 00003050     5a64          divu    A3,A4
     892 00003060     b088          MOVE    A4,*A8(OSIZEY),W
         00003070     0270  
     893 00003080     b505          MOVE    *A8(OUANIOFFY),A5,W
         00003090     0450  
     894 000030a0     2505          SLL     8,A5
     895 000030b0     5684          clr     a4
     896 000030c0     5864          divs    A3,A4
     897 000030d0     b088          MOVE    A4,*A8(OANIOFFY),W
         000030e0     01d0  
     898 000030f0     b708          MOVE    *A8(OPARTS),A8,L
         00003100     00c0  
     899 00003110     cbdf          JRNZ    SET_PARTM
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   21

     900 00003120     09af          MMFM    SP,A2,A3,A4,A5,A8
         00003130     013c  
     901 00003140     0960          RETS
     902                    
     903                    ;OB_GUNV        .set    0
     904              0001  OB_COLL         .set    1
     905              0002  OB_ANIM         .set    2
     906              0003  OB_CFUNC        .set    3
     907              0004  OB_POS          .set    4
     908                    ;OB_WPOS        .set    5
     909                    ;OB_SPOS        .set    6
     910                    ;OB_GRND        .set    7
     911              0008  OB_OID          .set    8
     912              0009  OB_DUMCOLL      .set    9
     913              000a  OB_PRVANIM      .set    10
     914              000b  OB_INSERT       .set    11
     915              000c  OB_OPARTS       .set    12
     916              000d  OB_SCTAB        .set    13
     917                    
     918                    ****************************************************************************
     919                    *    The  "NEW"  MULTIMAKE
     920                    *
     921                    *    Uses a Create Script to allocate and initialize obj(s)
     922                    *
     923                    *    B0 = ptr to Create Script w/ following format
     924                    *
     925                    *        .byte OBJCNT, PRCCNT, IMGPALCNT, PALCNT
     926                    *             PRCCNT must be >= # of procs that will be allocated in CFUNCS
     927                    *     FOR each IMGPALCNT...
     928                    *        .long IMG->PAL        ;PAL TO BE FOUND OR HAVE AVAILABLE SLOT FOR
     929                    *     FOR each PALCNT...
     930                    *        .long PAL                ;PAL TO BE FOUND OR HAVE AVAILABLE SLOT FOR
     931                    *        .word OID, GLOBAL_OPTIONS (OM_COLL | OM_DUMCOLL,
     932                    *                                   OM_POS ,OM_SCTAB
     933                    *                                   OM_INSERT )
     934                    *
     935                    *                   OM_COLL  to supply a default coll vector for all objects.
     936                    *                                otherwise, 0 is used.)
     937                    *                   OM_POS  if you want to supply a position (universe default).
     938                    *                   OM_DUMCOLL to use DUMCOLL as the default collision vector.
     939                    *                   OM_INSERT  to call INSERT_OBJ when completed
     940                    *                   OM_SCTAB   to specify a scale table
     941                    *                       (not implemented yet)
     942                    *     FOR each OBJCNT...
     943                    *        .long IMG
     944                    *        .word OCTRL, OFLAGS, OZOFF
     945                    *        .word OPTIONS
     946                    *               (OM_OID, OM_OPARTS, OM_COLL, OM_GUNV, OM_ANIM,
     947                    *                OM_PRVANIM, OM_PRVGUNV, OM_CFUNC)
     948                    *
     949                    *                OM_OID requires a word to follow the option word.
     950                    *                OM_OPARTS requires 2 words to follow (OPARTSX and Y)
     951                    *                OM_COLL, OM_GUNV, OM_ANIM, OM_CFUNC require a long word
     952                    *                         to follow the option word.
     953                    *                OM_PRVANIM requires that a previous object had OM_ANIM set.
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   22

     954                    *                OM_PRVGUNV requires that a previous GUN vect had OM_GUNV set.
     955                    *
     956                    *        NOTE:  DATA WHICH FOLLOWS THE OPTION WORD MUST APPEAR IN THE CORRECT
     957                    *               ORDER! (namely, OID, COLL, GUNV, ANIM, xPOS, SCTAB CFUNC)
     958                    *
     959                    * MULTIMAKE automatically links all objs together as multi-parter w/
     960                    * 1st obj as head obj
     961                    *
     962                    * A10-A11 passed to each PROC created unless they are modified by CFUNCS
     963                    *
     964                    * RETURNS
     965                    *   A8 = ptr to head obj of uninserted multi-parter.
     966                    *   Immediately follow with INSERT_OBJ to insert.
     967                    *   Zflag set if not enough OBJS, PROCS or PALS
     968                    * !!!!!!!!  assume ALL REGS (A&B) TRASHED but A9,A10,A11,A12,A13  !!!!!!!!!
     969                    *
     970                    *
     971                    * CFUNC - Create Functions
     972                    *   A0 = new obj , initialized and linked into MULTI-PARTER
     973                    *   A8 = ptr to first obj of script (head of MULTI-PARTER)
     974                    *   B0 = ptr to Create Script, must adjust B0 as CFUNC parms read.
     975                    *   Can trash all A regs but A8,A9,A10,A11,A12,A13
     976                    *   Must preserve ALL BREGS except B14 and B0 which must point
     977                    *                 after CFUNC parms
     978                    *
     979 00003150           MULTIMAKE:
     980 00003150     098f          mmtm    sp,a6,a7,A9,a10,a11
         00003160     0370  
     981 00003170     5708          clr     A8                      ;First Obj
     982                    
     983                            ;*** CHECK OBJCNT
     984 00003180     8e17          movb    *B0,B7                  ;B7 # objs to allocate
     985 00003190     4ef6          move    b7,a6
     986 000031a0     05ae          move    @OFREECNT,a14,W
         000031b0 00006770- 
     987 000031d0     49c6          cmp     a14,a6
     988 000031e0     c700          jrgt    MAKEX
         000031f0     00ba  
     989 00003200     1110          addk    8,B0
     990                    
     991                            ;*** CHECK PRCCNT
     992 00003210     8e11          movb    *B0,B1                  ;B1 >= # of procs to allocate
     993 00003220     05b2          move    @PFREECNT,B2,W
         00003230 00000000! 
     994 00003250     4851          cmp     B2,B1
     995 00003260     c700          jrgt    MAKEX
         00003270     00b2  
     996 00003280     1110          addk    8,B0
     997                    
     998 00003290     05b3          move    @FREEPALCNT,B3,W
         000032a0 00000000! 
     999                            ;FOR EACH PAL NOT FOUND, DEC FREEPALCNT - JRN MAKEX
    1000 000032c0     8e11          movb    *B0,B1                  ;IMGPALCNT
    1001 000032d0     1110          addk    8,B0
    1002 000032e0     8e12          movb    *B0,B2                  ;PALCNT
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   23

    1003 000032f0     1110          addk    8,B0
    1004                    
    1005 00003300     1031          inc     B1
    1006 00003310           ImgPalLp
    1007 00003310     1431          dec     B1
    1008 00003320     c60c          jrle    SkImgPalCk
    1009 00003330     9614          move    *B0+,B4,L
    1010 00003340     4e90          move    B4,A0
    1011 00003350     b600          move    *A0(ICMAP),A0,L
         00003360     0070  
    1012 00003370     0d5f          calla   FINDPAL
         00003380 00000000! 
    1013 000033a0     cbf6          jrnz    ImgPalLp
    1014                            ;*** PAL NOT FOUND ***
    1015 000033b0     1433          dec     B3
    1016 000033c0     ce00          jrn     MAKEX
         000033d0     009c  
    1017 000033e0     c0f2          jruc    ImgPalLp
    1018 000033f0           SkImgPalCk
    1019                    
    1020 000033f0     1032          inc     B2
    1021 00003400           PalLp
    1022 00003400     1432          dec     B2
    1023 00003410     c60a          jrle    SkPalCk
    1024 00003420     9614          move    *B0+,B4,L
    1025 00003430     4e90          move    B4,A0
    1026 00003440     0d5f          calla   FINDPAL
         00003450 00000000! 
    1027 00003470     cbf8          jrnz    PalLp
    1028                            ;*** PAL NOT FOUND ***
    1029 00003480     1433          dec     B3
    1030 00003490     ce00          jrn     MAKEX
         000034a0     008f  
    1031 000034b0     c0f4          jruc    PalLp
    1032 000034c0           SkPalCk
    1033 000034c0     941e          move    *B0+,B14,W              ;Load OID
    1034 000034d0     4fdb          move    b14,a11                 ; default OID
    1035                    *
    1036                    *       Process Options for All Parts of Multiparter (OID, COLL, POS)
    1037                    *
    1038 000034e0     575a          clr     b10             ; default collision vector
    1039 000034f0     9412          move    *b0+,b2         ; options for all objects
    1040 00003500     1ed2          btst    OB_DUMCOLL,b2
    1041 00003510     ca04          jrz     NxtGopt1X
    1042 00003520     09fa          movi    DUMCOLL,b10
         00003530 00000000! 
    1043 00003550     c003          jruc    NxtGopt1
    1044 00003560           NxtGopt1X:
    1045 00003560     1fd2          btst    OB_COLL,b2
    1046 00003570     ca01          jrz     NxtGopt1
    1047 00003580     961a          move    *b0+,b10,L      ; user-supplied default collision vector
    1048 00003590           NxtGopt1:
    1049 00003590     1f72          btst    OB_POS,b2
    1050 000035a0     ca04          jrz     NxtGopt2
    1051 000035b0     09b0          mmfm    b0,b4,b5,b6     ;b6=x,b5=y,b4=z
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   24

         000035c0     0070  
    1052 000035d0     2e16          srl     16,b6
    1053 000035e0     ecd5          movx    b6,b5           ;b5 = xy, b4 = z
    1054 000035f0           NxtGopt2
    1055                            ;THERE IS ENOUGH OBJS, PROCS AND PALS SO GO AHEAD AND ALLOCATE
    1056 000035f0     56e7          clr     a7              ;OBJECT #
    1057 00003600           MkObjLp
    1058 00003600     1027          inc     a7
    1059 00003610     9611          move    *B0+,B1,L
    1060 00003620     4e31          move    B1,A1
    1061 00003630     0d3f          callr   GETOBJ
         00003640     0237  
    1062 00003650     0d3f          callr   FPSTFOBJ0
         00003660     037f  
    1063 00003670     4e01          move    A0,B1
    1064 00003680     ace0          movb    a7,*A0(OPARTID)         ;store # of PART
         00003690     03c0  
    1065                    
    1066 000036a0     941e          move    *B0+,B14,W              ;Load OCTRL
    1067 000036b0     9419          MOVE    *B0+,B9,W               ;Load OFLAGS
    1068 000036c0     b131          MOVE    B9,*B1(OFLAGS),W
         000036d0     0420  
    1069 000036e0     1f7e          btst    B_FLIPH,B14
    1070 000036f0     ca08          jrz     SkMkFlp
    1071 00003700           MkFlp
    1072 00003700     4fd4          move    B14,A4
    1073 00003710                   PUSH    A8
    1074 00003720     4c08          move    A0,A8
    1075                            ;A1 still set from above
    1076 00003730     0d5f          calla   ANI
         00003740 00000000! 
    1077 00003760                   PULLQ   A8
    1078 00003770     c005          jruc    MkFlagsOk
    1079 00003780           SkMkFlp
    1080 00003780     b433          move    *B1(OCTRL),B3,W
         00003790     01f0  
    1081 000037a0     55d3          OR      B14,B3
    1082 000037b0     b071          move    B3,*B1(OCTRL),W
         000037c0     01f0  
    1083 000037d0           MkFlagsOk
    1084 000037d0     5673          clr     b3                      ; assume no OPARTSXY
    1085                    
    1086 000037e0     941e          MOVE    *B0+,B14,W              ; Load OZOFF
    1087 000037f0     add1          MOVB    B14,*B1(OZOFF)
         00003800     03c8  
    1088 00003810     261e          sll     16,b14
    1089 00003820     efd2          movy    b14,b2
    1090                    
    1091 00003830     4d08          move    A8,A8                   ; is first obj in a0?
    1092 00003840     cb02          jrnz    SkMkFirst               ; jump if no
    1093                    *
    1094                    *       First part only (b9 = OFLAGS, b2 = GBL OPTION flgs)
    1095                    *
    1096 00003850     4c08          move    A0,A8
    1097 00003860     c002          jruc    SkINSPART
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   25

    1098 00003870           SkMkFirst
    1099 00003870     b209          MOVE    A0,*A9(OPARTS),L        ;LINK NEW OBJECT AT END
         00003880     00c0  
    1100 00003890           SkINSPART
    1101 00003890     b300          MOVE    A8,*A0(OPART1),L        ;VALIDATE HEAD PTR
         000038a0     00a0  
    1102 000038b0     4c09          MOVE    A0,A9                   ;KEEP PREVIOUS PART FOR PART LINKUP
    1103                    *
    1104                    *       Process Optional parameters
    1105                    *
    1106 000038c0     9417          move    *b0+,b7         ; option flags
    1107                    
    1108 000038d0     4d6e          move    a11,a14
    1109 000038e0     1ef7          btst    OB_OID,b7               ; check for:  SUPPLIED OID
    1110 000038f0     ca02          jrz     NxtOpt6                 ; jump if default
    1111 00003900     941e          move    *b0+,b14                ; if not default
    1112 00003910     4fde          move    b14,a14
    1113 00003920           NxtOpt6:
    1114 00003920     b1c0          move    a14,*a0(OID)
         00003930     0430  
    1115                    
    1116 00003940     5673          clr     b3
    1117 00003950     1e77          btst    OB_OPARTS,b7
    1118 00003960     ca03          jrz     NxtOpt7
    1119 00003970     9613          move    *b0+,b3,L
    1120 00003980     b271          move    b3,*b1(OPARTSXY),L
         00003990     01a0  
    1121 000039a0           NxtOpt7:
    1122 000039a0     4d5e          move    b10,b14
    1123 000039b0     1fd7          btst    OB_COLL,b7              ; check for:  COLLISION VECTOR
    1124 000039c0     ca01          jrz     NxtOpt2                 ; jump if default
    1125 000039d0     961e          move    *b0+,b14,L              ; if not default
    1126 000039e0           NxtOpt2:
    1127 000039e0     b3d1          move    b14,*b1(OCVECT),L
         000039f0     0080  
    1128 00003a00           NxtOpt1:                                ;      switched with below
    1129 00003a00     1eb7          btst    OB_PRVANIM,b7           ; check for:  USE PREVIOUS ANIMATION
    1130 00003a10     cb04          jrnz    prev_anim
    1131 00003a20     1fb7          btst    OB_ANIM,b7              ; check for:  SUPPLIED ANIMATION
    1132 00003a30     ca05          jrz     NxtOpt3
    1133 00003a40     961e          move    *b0+,b14,L
    1134 00003a50     4fda          move    b14,a10
    1135 00003a60           prev_anim:
    1136 00003a60     4d41          move    a10,a1
    1137 00003a70     0d3f          callr   STRTANIM
         00003a80     05d5  
    1138 00003a90           NxtOpt3:
    1139 00003a90     1f72          btst    OB_POS,b2               ; was a position supplied?
    1140 00003aa0     ca20          jrz     NxtOpt4
    1141                    *
    1142                    *       adjust position based on OPARTSXY (b3) and OZOFF (MSW b2)
    1143                    *
    1144 00003ab0     1e19          btst    B_SCRNOBJ,b9    ; skip following if not screen obj
    1145 00003ac0     ca0d          jrz     pos_is_uni
    1146 00003ad0     4cb6          MOVE    B5,B6           ; Y:X IN B5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   26

    1147 00003ae0     e076          ADDXY   B3,B6
    1148 00003af0     b63e          move    *b1(OANIOFF),b14,L
         00003b00     01c0  
    1149 00003b10     e3d6          subxy   b14,b6
    1150 00003b20     b2d1          move    b6,*b1(ODAG),L
         00003b30     0220  
    1151                    ;
    1152                    ;       Future note:
    1153                    ;       The following should save the animation point adjusted by OPARTSXY
    1154                    ;       (b5) as the position of a screen obj, NOT THE DAG (b6)!
    1155                    ;
    1156 00003b40     b0d1          move    b6,*b1(OXPOS),W
         00003b50     0150  
    1157 00003b60     2e16          srl     16,b6
    1158 00003b70     b0d1          move    b6,*b1(OYPOS),W
         00003b80     0170  
    1159 00003b90     c00c          jruc    do_z
    1160 00003ba0           pos_is_uni
    1161 00003ba0           oparts_is_0
    1162 00003ba0     ec7e  nodoadj movx    b3,b14                  ; OPARTS X
    1163 00003bb0     051e          sext    b14
    1164 00003bc0     25fe          sll     15,b14
    1165 00003bd0     40de          add     b6,b14                  ; adjust X by OPARTSX
    1166 00003be0     b3d1          move    b14,*b1(OXVAL),L
         00003bf0     0140  
    1167 00003c00     4c7e          move    b3,b14
    1168 00003c10     2a1e          sra     16,b14                  ; OPARTS Y
    1169 00003c20     25fe          sll     15,b14
    1170 00003c30     40be          add     b5,b14                  ; adjust Y by OPARTSY
    1171 00003c40     b3d1          move    b14,*b1(OYVAL),L
         00003c50     0160  
    1172                    
    1173 00003c60     ee5e  do_z    movy    b2,b14
    1174 00003c70     2a1e          sra     16,b14                  ; OZOFF
    1175 00003c80     409e          add     b4,b14                  ; adjust Z by ZOFF
    1176 00003c90     b3d1          move    b14,*b1(OZVAL),L
         00003ca0     0180  
    1177                    
    1178 00003cb0           NxtOpt4:
    1179 00003cb0     1f97          btst    OB_CFUNC,b7             ; check for:  CREATE FUNCTION
    1180 00003cc0     ca05          jrz     NxtOpt5
    1181 00003cd0     9617          move    *B0+,B7,L               ; Load CFUNC
    1182 00003ce0     ca03          jrz     NxtOpt5
    1183 00003cf0                   PUSH    A8
    1184 00003d00     0937          call    B7                      ; DO CFUNC
    1185 00003d10                   PULLQ   A8
    1186 00003d20           NxtOpt5:
    1187                    
    1188 00003d20           MkNxtObj
    1189 00003d20     0d86          dsj     a6,MkObjLp
         00003d30     ff8c  
    1190                            .if XUNIT=1
    1191                            CMPK    1,a7            ;MORE THAN ONE OBJECT CREATED?
    1192                            .else
    1193 00003d40     0b47          cmpi    1,a7
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   27

         00003d50     fffe  
    1194                            .endif
    1195 00003d60     cb03          JRNE    MAKEX           ;BR = YES, IT IS MULTI
    1196 00003d70     57ce          CLR     A14
    1197 00003d80     b3c8          MOVE    A14,*A8(OPART1),L       ;MAKE IT LOOK SINGLE
         00003d90     00a0  
    1198 00003da0           MAKEX
    1199 00003da0     09af          mmfm    sp,a6,a7,a9,a10,a11
         00003db0     0ec0  
    1200 00003dc0     4d08          move    A8,A8           ;Set Z Flag
    1201 00003dd0     ca04          jrz     MM_ABT
    1202 00003de0     1e92          btst    OB_INSERT,b2
    1203 00003df0     cb00          jrnz    INSERT_OBJ
         00003e00     023d  
    1204 00003e10     102e          inc     a14             ; clr z flag
    1205 00003e20           MM_ABT:
    1206 00003e20     0960          rets
    1207                    
    1208                    ****************************************************************************
    1209                    *    EASYMAKE for single part objects
    1210                    *
    1211                    *    Uses a Create Script to allocate and initialize obj(s)
    1212                    *
    1213                    *    B0 = ptr to Create Script w/ following format
    1214                    *
    1215                    *        .long IMG
    1216                    *        .word OCTRL, OFLAGS
    1217                    *        .word OPTIONS
    1218                    *               (OM_OID,  OM_COLL, OM_ANIM,
    1219                    *                OM_POS, OM_GRND,
    1220                    *                OM_DUMCOLL, OM_INSERT)
    1221                    *
    1222                    *                OM_OID requires a word to follow the option word.
    1223                    *                OM_COLL, OM_GUNV, OM_ANIM require a long word
    1224                    *                         to follow the option word.
    1225                    *
    1226                    *               OM_OID     to supply an OID (otherwise, OID_JUNK is used)
    1227                    *               OM_COLL    to supply a coll vector.
    1228                    *               OM_DUMCOLL to use DUMCOLL as a coll. vector (if neither
    1229                    *                           OM_COLL or OM_DUMCOLL are specified, 0 is used.)
    1230                    *               OM_ANIM    to supply an animation script.
    1231                    *               OM_POS     to supply a position.
    1232                    *               OM_CFUNC   to call a special function.
    1233                    *               OM_INSERT  to call INSERT_OBJ when completed
    1234                    *               OM_SCTAB   to specify a scale table
    1235                    *
    1236                    *        NOTE:  DATA WHICH FOLLOWS THE OPTION WORD MUST APPEAR IN THE CORRECT
    1237                    *               ORDER! (namely, OID, POS, COLL, ANIM, SCTAB,CFUNC)
    1238                    *
    1239                    *
    1240                    * RETURNS
    1241                    *   A8 = ptr to obj
    1242                    *   Immediately follow with INSERT_OBJ to insert if OM_INSERT not specified.
    1243                    *
    1244                    * !!!!!!!!  assume ALL B REGS TRASHED
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   28

    1245                    * !!!!!!!!  also   A0, A1, and A14 TRASHED
    1246                    *
    1247                    * CFUNC - Create Functions
    1248                    *   gets new obj in A0, it is initialized.
    1249                    *   ptr to Create Script in B0, must inc B0 as CFUNC parms read.
    1250                    *   Is free to trash all A regs but A8 - A13
    1251                    *   Must preserve all BREGS except B14 and
    1252                    *   B0 which must point after CFUNC parms
    1253                    *
    1254 00003e30           EASYMAKE:
    1255 00003e30     9611          move    *B0+,B1,L       ; get IMG
    1256 00003e40     4e31          move    B1,A1
    1257 00003e50     0d3f          callr   GETOBJ
         00003e60     01b5  
    1258 00003e70     ca60          jrz     EASY_ABT
    1259 00003e80     0d3f          callr   FPSTFOBJ0
         00003e90     02fc  
    1260 00003ea0     098f          mmtm    sp,a4
         00003eb0     0800  
    1261 00003ec0     4e01          move    A0,B1
    1262 00003ed0     941e          move    *B0+,B14,W              ;Load OCTRL
    1263 00003ee0     9412          MOVE    *B0+,B2,W               ;Load OFLAGS
    1264 00003ef0     b051          MOVE    B2,*B1(OFLAGS),W
         00003f00     0420  
    1265 00003f10     1f7e          btst    B_FLIPH,B14
    1266 00003f20     ca06          jrz     ESkMkFlp
    1267 00003f30           EMkFlp
    1268 00003f30     4fd4          move    B14,A4
    1269 00003f40     4c08          move    A0,A8
    1270                            ;A1 still set from above
    1271 00003f50     0d5f          calla   ANI
         00003f60 00000000! 
    1272 00003f80     c005          jruc    EMkFlagsOk
    1273 00003f90           ESkMkFlp
    1274 00003f90     b433          move    *B1(OCTRL),B3,W
         00003fa0     01f0  
    1275 00003fb0     55d3          OR      B14,B3
    1276 00003fc0     b071          move    B3,*B1(OCTRL),W
         00003fd0     01f0  
    1277 00003fe0           EMkFlagsOk
    1278                    *
    1279                    *       Process Optional parameters
    1280                    *
    1281 00003fe0     9419          move    *b0+,b9         ; option flags
    1282                    
    1283 00003ff0     09ce          movi    OID_JUNK,a14
         00004000     07ff  
    1284 00004010     1ef9          btst    OB_OID,b9               ; check for:  SUPPLIED OID
    1285 00004020     ca02          jrz     ENxtOpt6                        ; jump if default
    1286 00004030     941e          move    *b0+,b14                ; if not default
    1287 00004040     4fde          move    b14,a14
    1288 00004050           ENxtOpt6:
    1289 00004050     b1c0          move    a14,*a0(OID)
         00004060     0430  
    1290                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   29

    1291 00004070     57de          clr     b14
    1292 00004080     1ed9          btst    OB_DUMCOLL,b9
    1293 00004090     ca04          jrz     ENxtOpt2A
    1294 000040a0     09fe          movi    DUMCOLL,b14
         000040b0 00000000! 
    1295 000040d0     c003          jruc    ENxtOpt2
    1296 000040e0           ENxtOpt2A:
    1297 000040e0     1fd9          btst    OB_COLL,b9              ; check for:  COLLISION VECTOR
    1298 000040f0     ca01          jrz     ENxtOpt2                        ; jump if default
    1299 00004100     961e          move    *b0+,b14,L              ; if not default
    1300 00004110           ENxtOpt2:
    1301 00004110     b3d1          move    b14,*b1(OCVECT),L
         00004120     0080  
    1302 00004130           ENxtOpt1:
    1303 00004130     1fb9          btst    OB_ANIM,b9              ; check for:  SUPPLIED ANIMATION
    1304 00004140     ca04          jrz     ENxtOpt3
    1305 00004150     961e          move    *b0+,b14,L
    1306 00004160     4fd1          move    b14,a1
    1307 00004170     0d3f          callr   STRTANIM
         00004180     0565  
    1308 00004190           ENxtOpt3:
    1309 00004190     1e59          btst    OB_SCTAB,b9
    1310 000041a0     ca04          jrz     ENxtOpt7
    1311 000041b0     961e          move    *b0+,b14,L
    1312 000041c0     4fde          move    b14,a14
    1313 000041d0     b3c0          move    a14,*a0(OSCTAB),L       ;scale table
         000041e0     0470  
    1314 000041f0           ENxtOpt7
    1315 000041f0     1f79          btst    OB_POS,b9       ; was a position supplied?
    1316 00004200     ca19          jrz     ENxtOpt4
    1317                    
    1318                    ******************************
    1319                    *                            *
    1320                    *    Get supplied position   *
    1321                    *                            *
    1322                    ******************************
    1323                    
    1324 00004210     09b0          mmfm    b0,b4,b5,b6     ;b6=x,b5=y,b4=z
         00004220     0070  
    1325 00004230     1e12          btst    B_SCRNOBJ,b2    ;
    1326 00004240     cb07          jrnz    E_do_scrnobj
    1327 00004250           world_b_free
    1328 00004250     b2d1          move    b6,*b1(OXVAL),L
         00004260     0140  
    1329 00004270     b2b1          move    b5,*b1(OYVAL),L
         00004280     0160  
    1330 00004290     b291          move    b4,*b1(OZVAL),L
         000042a0     0180  
    1331 000042b0     c00e          jruc    e_dont_z
    1332 000042c0           E_do_scrnobj
    1333 000042c0     2e16          srl     16,b6
    1334 000042d0     ecd5          movx    b6,b5
    1335 000042e0     b63e          move    *b1(OANIOFF),b14,L
         000042f0     01c0  
    1336 00004300     e3d5          subxy   b14,b5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   30

    1337 00004310     b2b1          move    b5,*b1(ODAG),L
         00004320     0220  
    1338 00004330     b0b1          move    b5,*b1(OXPOS),W
         00004340     0150  
    1339 00004350     2e15          srl     16,b5
    1340 00004360     b0b1          move    b5,*b1(OYPOS),W
         00004370     0170  
    1341 00004380     b291          move    b4,*b1(OZVAL),L
         00004390     0180  
    1342 000043a0           e_dont_z
    1343 000043a0           ENxtOpt4
    1344 000043a0     1f99          btst    OB_CFUNC,b9             ; check for:  CREATE FUNCTION
    1345 000043b0     ca05          jrz     ENxtOpt5
    1346 000043c0     9617          move    *B0+,B7,L               ; Load CFUNC
    1347 000043d0     ca03          jrz     ENxtOpt5
    1348 000043e0                   PUSH    A0
    1349 000043f0     0937          call    B7                      ; DO CFUNC
    1350 00004400                   PULLQ   A0
    1351 00004410           ENxtOpt5:
    1352 00004410     09af          mmfm    sp,a4
         00004420     0010  
    1353                    
    1354 00004430     1e99          btst    OB_INSERT,b9
    1355 00004440     ca02          JRZ     EM_NOINSERT
    1356 00004450     0d3f          CALLR   INSOBJ
         00004460     01f8  
    1357 00004470           EM_NOINSERT
    1358 00004470     4c08          MOVE    A0,A8                   ;Clear the Z flag
    1359 00004480           EASY_ABT
    1360 00004480     0960          rets
    1361                    
    1362                    **************************************************************************
    1363                    *                                                                        *
    1364                    * GET_SCALED_SIZE - RETURNS THE SCALED SIZE OF AN IMAGE.                 *
    1365                    * A0 = SCALE FACTOR [Y,X]                                                *
    1366                    * A2 = UNSCALED SIZE [Y,X]                                               *
    1367                    * RETURNS                                                                *
    1368                    *       A6 = [Y,X] SCALED SIZE                                           *
    1369                    *                                                                        *
    1370                    **************************************************************************
    1371 00004490           GET_SCALED_SIZE
    1372 00004490                   PUSH    A5
    1373                    
    1374 000044a0     ec0e          MOVX    A0,A14          ;GET X-SCALE FACTOR
    1375 000044b0     050e          SEXT    A14
    1376 000044c0     ec45          MOVX    A2,A5           ;GET UNSCALED X-SIZE
    1377 000044d0     0505          SEXT    A5
    1378 000044e0     2505          SLL     8,A5
    1379 000044f0     59c5          DIVS    A14,A5          ;(in case using for ani pts)
    1380 00004500     eca6          MOVX    A5,A6           ;SEND BACK SCALED X-SIZE
    1381                    
    1382 00004510     ee0e          MOVY    A0,A14          ;GET Y-SCALE FACTOR
    1383 00004520     2a0e          SRA     16,A14
    1384 00004530     ee45          MOVY    A2,A5           ;GET UNSCALED Y-SIZE
    1385 00004540     2a05          SRA     16,A5
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   31

    1386 00004550     2505          SLL     8,A5
    1387 00004560     59c5          DIVS    A14,A5          ;(in case using for ani pts)
    1388 00004570     2605          SLL     16,A5
    1389 00004580     eea6          MOVY    A5,A6           ;SEND BACK SCALED Y-SIZE
    1390                    
    1391 00004590                   PULLQ   A5
    1392 000045a0     0960          RETS
    1393                    
    1394                    **************************************************************************
    1395                    *                                                                        *
    1396                    *                       MANUAL DMA ROUTINES                              *
    1397                    *                       -------------------                              *
    1398                    *                                                                        *
    1399                    *               THESE ROUTINES ARE USED TO FIRE OFF A SINGLE DMA         *
    1400                    *               ALONG WITH THE NORMAL "OBJECTS" BEING DISPLAYED.         *
    1401                    *               THEY ARE USED AS FOLLOWS:                                *
    1402                    *                                                                        *
    1403                    *               QDMA (QDMA2) -                                           *
    1404                    *                       A1 = [CONSTANT COLOR,PALETTE]                    *
    1405                    *                       A3 = DESTINATION [Y,X]                           *
    1406                    *                       A5 = [CONTROL,OFFSET]                            *
    1407                    *                       A14= ADDRESS OF IMAGE HEADER (THE REST OF        *
    1408                    *                               THE INFO WILL BE TAKEN FROM HERE).       *
    1409                    *                                                                        *
    1410                    *                                                                        *
    1411                    *               QDMAN (QDMAN2) -                                         *
    1412                    *                       A0 = SCALE [Y,X]                                 *
    1413                    *                       A1 = [CONSTANT COLOR,PALETTE]                    *
    1414                    *                       A2 = [HEIGHT,WIDTH]                              *
    1415                    *                       A3 = DESTINATION [Y,X]                           *
    1416                    *                       A4 = SOURCE ADDRESS                              *
    1417                    *                       A5 = [CONTROL,OFFSET]                            *
    1418                    *                                                                        *
    1419                    *                                                                        *
    1420                    *               NOTE: QDMA2 AND QDMAN2 DMA TWICE, ONE TO EACH DISPLAY    *
    1421                    *                       PAGE.                                            *
    1422                    *                                                                        *
    1423                    **************************************************************************
    1424 000045b0     098f  QDMAN   MMTM    SP,A0,A2,A3,A4,A5,A6,A13
         000045c0     be04  
    1425 000045d0     c00d          JRUC    QDMANE
    1426 000045e0     098f  QDMA    MMTM    SP,A0,A2,A3,A4,A5,A6,A13
         000045f0     be04  
    1427 00004600     09e0          MOVI    [0100H,0100H],A0        ;SCALE IS 1:1
         00004610 01000100  
    1428 00004630     b7c2          MOVE    *A14(ISIZE),A2,L        ;GET VSIZE:HSIZE
         00004640     0010  
    1429 00004650     b7c4          MOVE    *A14(ISAG),A4,L         ;GET SAG
         00004660     0030  
    1430 00004670     b5cd          MOVE    *A14(ICTRL),A13,W
         00004680     0000  
    1431 00004690     260d          SLL     16,A13
    1432 000046a0     55a5          OR      A13,A5                  ;OR IN THE VITAL SHIT
    1433 000046b0     0d3f  QDMANE  CALLR   GET_SCALED_SIZE         ;GET THE SCALED SIZE FOR US
         000046c0     ffdc  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   32

    1434 000046d0           QDMANE_2
    1435 000046d0     57ad          CLR     A13
    1436 000046e0     1d65          BTST    B_FLIPH+16,A5
    1437 000046f0     ca02          JREQ    NOHF
    1438 00004700     eccd          MOVX    A6,A13
    1439 00004710     142d          DEC     A13
    1440 00004720     e1a3  NOHF    ADDXY   A13,A3
    1441 00004730     07ad          MOVE    @PAGEADDR,A13,L         ;GET THE CURRENT PAGE ADDRESS
         00004740 00000000! 
    1442 00004760     05a6          MOVE    @NOPGFLIP,A6,W          ;IS PAGE FLIPPING ACTIVE?
         00004770 00000000! 
    1443 00004790     cb03          JRNZ    QD_NOPFLP               ;BR = NO
    1444 000047a0     0bcd          XORI    TOGGLE_PAGE_XY,A13      ;XUNIT COMPENSATE FOR BEING 1 PAGE BEHIND
         000047b0 00fe0000  
    1445                    
    1446 000047d0           QD_NOPFLP
    1447 000047d0     e1a3          addxy   A13,A3                  ;DO PAGE OFFSET
    1448 000047e0     182d          MOVK    1,A13
    1449 000047f0     058d          MOVE    A13,@QDMAFLG,W          ;Q BEING MODIFIED
         00004800 000dfab0- 
    1450 00004820     07ad          MOVE    @DMAQCUR,A13,L
         00004830 000cce90- 
    1451 00004850     0b6d          CMPI    DMAQ,A13
         00004860 fff3314f- 
    1452 00004880     c205          JRLS    QDMAX                   ;Q OVERLOAD, CAN IT
    1453 00004890     098d          MMTM    A13,A0,A1,A2,A3,A4,A5
         000048a0     fc00  
    1454 000048b0     078d          MOVE    A13,@DMAQCUR,L
         000048c0 000cce90- 
    1455 000048e0     57ad  QDMAX   CLR     A13
    1456 000048f0     058d          MOVE    A13,@QDMAFLG,W
         00004900 000dfab0- 
    1457 00004920     09af          MMFM    SP,A0,A2,A3,A4,A5,A6,A13
         00004930     207d  
    1458 00004940     0960          RETS
    1459                    
    1460                    **************************************************************************
    1461                    *                                                                        *
    1462                    * THESE ARE THE DOUBLE-PAGE VERSIONS                                     *
    1463                    *                                                                        *
    1464                    **************************************************************************
    1465 00004950           QDMAN2
    1466 00004950     098f          MMTM    SP,A0,A2,A3,A4,A5,A6,A13
         00004960     be04  
    1467 00004970     c00d          JRUC    QDMANE2
    1468 00004980     098f  QDMA2   MMTM    SP,A0,A2,A3,A4,A5,A6,A13
         00004990     be04  
    1469 000049a0     09e0          MOVI    [0100H,0100H],A0        ;SCALE IS 1:1
         000049b0 01000100  
    1470 000049d0     b7c2          MOVE    *A14(ISIZE),A2,L        ;GET VSIZE:HSIZE
         000049e0     0010  
    1471 000049f0     b7c4          MOVE    *A14(ISAG),A4,L         ;GET SAG
         00004a00     0030  
    1472 00004a10     b5cd          MOVE    *A14(ICTRL),A13,W
         00004a20     0000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   33

    1473 00004a30     260d          SLL     16,A13
    1474 00004a40     55a5          OR      A13,A5                  ;OR IN THE VITAL SHIT
    1475 00004a50           QDMANE2
    1476 00004a50     0d3f          CALLR   GET_SCALED_SIZE         ;GET THE SCALED SIZE FOR US
         00004a60     ffa2  
    1477 00004a70           QDMANE2_2
    1478 00004a70     57ad          CLR     A13
    1479 00004a80     1d65          BTST    B_FLIPH+16,A5
    1480 00004a90     ca02          JREQ    NOHF2
    1481 00004aa0     eccd          MOVX    A6,A13
    1482 00004ab0     142d          DEC     A13
    1483 00004ac0     e1a3  NOHF2   ADDXY   A13,A3
    1484 00004ad0     182d          MOVK    1,A13
    1485 00004ae0     058d          MOVE    A13,@QDMAFLG,W          ;Q BEING MODIFIED
         00004af0 000dfab0- 
    1486 00004b10     07ad          MOVE    @DMAQCUR,A13,L
         00004b20 000cce90- 
    1487 00004b40     0b6d          CMPI    DMAQ,A13
         00004b50 fff3314f- 
    1488 00004b70     c210          JRLS    QDMA2X                  ;Q OVERLOAD, CAN IT
    1489 00004b80     0b03          ADDI    PAGE0ADR,A3
         00004b90     0038  
    1490 00004ba0     098d          MMTM    A13,A0,A1,A2,A3,A4,A5
         00004bb0     fc00  
    1491                            ;*** Q it for PAGE 2 also
    1492 00004bc0     0b23          ADDI    PAGE1ADR-PAGE0ADR,A3
         00004bd0 00fe0000  
    1493 00004bf0     0b6d          CMPI    DMAQ,A13
         00004c00 fff3314f- 
    1494 00004c20     c205          JRLS    QDMA2X                  ;Q OVERLOAD, CAN IT
    1495 00004c30     098d          MMTM    A13,A0,A1,A2,A3,A4,A5
         00004c40     fc00  
    1496 00004c50     078d          MOVE    A13,@DMAQCUR,L
         00004c60 000cce90- 
    1497 00004c80     57ad  QDMA2X  CLR     A13
    1498 00004c90     058d          MOVE    A13,@QDMAFLG,W
         00004ca0 000dfab0- 
    1499 00004cc0     09af          MMFM    SP,A0,A2,A3,A4,A5,A6,A13
         00004cd0     207d  
    1500 00004ce0     0960          RETS
    1501                    
    1502                    **************************************************************************
    1503                    
    1504                            .ALIGN
    1505                    
    1506                    **************************************************************************
    1507                    * YZSORT
    1508                    * SORT EACH SCREEN OBJECT LIST IN Z:Y PRIORITY
    1509                    * IF OBJ DOESN'T HAVE NOAUTOZ SET, MOVE FROM LIST TO LIST BASED ON Z COOR
    1510                    * CALL FROM EXEC LOOP
    1511 00004e00           YZSORT:
    1512                    
    1513                            .IF DEBUG
    1514                            callr   CkOFREE
    1515                            callr   CkAnim
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   34

    1516                            .ENDIF
    1517                    
    1518 00004e00           YZPlnLp
    1519 00004e00     09ea          movi    FGLIST,A10      ;NEW
         00004e10 00000000+ 
    1520 00004e30     4d40          move    A10,A0          ;A10 START OF LIST
    1521                    
    1522                            ;PRESTUFF Z,Y OF PREVIOUS OBJ
    1523 00004e40     09e6          MOVI    080000000H,A6   ;LOWEST POSSIBLE Z
         00004e50 80000000  
    1524 00004e70     09e5          MOVI    07FFFFFFFH,A5   ;HIGHEST POSSIBLE Y
         00004e80 7fffffff  
    1525 00004ea0     4ca4          MOVE    A5,A4
    1526 00004eb0     c022          JRUC    YZLP
    1527                    
    1528 00004ec0     b628  YZLP0   MOVE    *A1(OZVAL),A8,L         ;NEXT OBJ Z
         00004ed0     0180  
    1529 00004ee0     b627          MOVE    *A1(OYVAL),A7,L         ;NEXT OBJ Y
         00004ef0     0160  
    1530 00004f00     48c8          CMP     A6,A8
    1531 00004f10     c718          jrgt    priok
    1532 00004f20     c402          jrlt    PRISWAP
    1533 00004f30     48a7          CMP     A5,A7
    1534 00004f40     c615          jrle    priok
    1535 00004f50     01e0  PRISWAP PUSHST
    1536 00004f60     0360          dint
    1537 00004f70     05ae          MOVE    @INVELADD,A14,W
         00004f80 001007d0- 
    1538 00004fa0     cb17          JRNZ    YZ_ABORT                ;BR=we VELADDed, so get outta dodge
    1539                    
    1540 00004fb0           NOTIMER_CHECK
    1541                            ;unlink A0 from list
    1542 00004fb0     b60e          move    *A0(OBLINK),A14,L
         00004fc0     0020  
    1543 00004fd0     822e          move    A1,*A14,L               ;LINK FORWARD OVER A0
    1544 00004fe0     b3c1          move    A14,*A1(OBLINK),L       ;LINK BACKWARD OVER A0
         00004ff0     0020  
    1545 00005000     862e          move    *A1,A14,L
    1546 00005010     83c0          move    A14,*A0,L               ;INSERT A0 AFTER A1
    1547 00005020     8201          move    A0,*A1,L                ;
    1548 00005030     b220          move    A1,*A0(OBLINK),L        ;
         00005040     0020  
    1549 00005050     b20e          move    A0,*A14(OBLINK),L       ;
         00005060     0020  
    1550 00005070     01c0          POPST
    1551 00005080     4c85          MOVE    A4,A5
    1552 00005090     c004          JRUC    YZLP
    1553 000050a0     4cc9  priok   MOVE    A6,A9
    1554 000050b0     4c20          move    A1,A0
    1555 000050c0     4d06          move    A8,A6           ;Z
    1556 000050d0     4ce5          move    A7,A5           ;Y
    1557 000050e0     8601  YZLP    move    *A0,A1,L                ;next link in A1
    1558 000050f0     482a          cmp     A1,A10
    1559 00005100     cbdb          jrne    YZLP0
    1560 00005110     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   35

    1561 00005120           YZ_ABORT
    1562 00005120     01c0          POPST
    1563 00005130     0960          RETS
    1564                    
    1565                    **************************************************************************
    1566                    * END OF DISPLAY SYSTEM
    1567                    **************************************************************************
    1568                    
    1569                    **************************************************************************
    1570                    * DISPLAY UTILITY ROUTINES
    1571                    **************************************************************************
    1572                    
    1573                    ****************************************************************************
    1574                    * FINDOID
    1575                    * A0 - SUPP LIST
    1576                    * A1 - OID MASK
    1577                    * A2 - PATTERN TO MATCH
    1578                    * RETS  A0 pts to obj, else ZFLAG set
    1579 00005140           FINDOID:
    1580 00005140                   PUSH    A3
    1581 00005150     5022          and     A1,A2
    1582 00005160           FindLp:
    1583 00005160     b600          move    *A0(OSLINK),A0,L
         00005170     0040  
    1584 00005180     ca05          jrz     FindOidX
    1585 00005190     b403          move    *A0(OID),A3,W
         000051a0     0430  
    1586 000051b0     5023          and     A1,A3
    1587 000051c0     4843          cmp     A2,A3
    1588 000051d0     cbf8          jrne    FindLp
    1589 000051e0           FindOidX:
    1590 000051e0                   PULLQ   A3
    1591 000051f0     4c00          move    A0,A0
    1592 00005200     0960          rets
    1593                    
    1594                    
    1595                    **************************************************************************
    1596                    * OINIT
    1597                    * INITIALIZE FREE LIST, OBJ PLANES, ANIOBJS, QUEUES
    1598 00005210           OINIT:
    1599 00005210     098f          MMTM    SP,A0,A1,A2,A3  ;SAVE REG
         00005220     f000  
    1600                    
    1601 00005230     01e0          PUSHST
    1602 00005240     0360          DINT
    1603 00005250     05a0          MOVE    @INTENB,A0,W
         00005260 c0000110  
    1604 00005280     0b80          ANDNI   X1E,A0          ;NO MORE DMA INTERRUPTS
         00005290 00000002  
    1605 000052b0     0580          MOVE    A0,@INTENB,W
         000052c0 c0000110  
    1606 000052e0     01c0          POPST
    1607                    
    1608 000052f0     09e0          MOVI    SCRNST_FULL,A0,L        ;INIT SCREEN TOP LEFT [Y,X]
         00005300 00000000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   36

    1609 00005320     0780          MOVE    A0,@SCRNTL,L
         00005330 00006730- 
    1610 00005350     09e0          MOVI    SCRNEND,A0,L    ;INIT SCREEN LOWER RIGHT [Y,X]
         00005360 00fd018f  
    1611 00005380     0780          MOVE    A0,@SCRNBR,L
         00005390 00006750- 
    1612                    
    1613 000053b0     09fc          movi    DMAIQBOT,B12
         000053c0 001007d0- 
    1614                    
    1615 000053e0     4d9d          move    B12,B13         ;set dma Q to be clear so DMAWAIT won't hang
    1616                    ;       MOVE    B12,@DMAIQACT,L ;INIT ACTIVE DMA Q
    1617                    
    1618 000053f0     09e1          MOVI    DMAQ+QSIZE,A1
         00005400 000dfab0- 
    1619 00005420     0781          MOVE    A1,@DMAQCUR,L           ;INIT MISC DMA QUEUE
         00005430 000cce90- 
    1620                    
    1621 00005450     5600          CLR     A0
    1622 00005460     0780          MOVE    A0,@ANIOBJS,L
         00005470 00000480+ 
    1623 00005490     0580          MOVE    A0,@INVELADD,W  ;INIT VELADD FLAG
         000054a0 001007d0- 
    1624 000054c0     09e1          movi    nulplayerlist,a1
         000054d0 000057d0' 
    1625 000054f0     0781          move    a1,@anipllist,L
         00005500 00000010- 
    1626 00005520     0580          move    a0,@panim_ok,W
         00005530 00000030- 
    1627 00005550     01e0          PUSHST
    1628 00005560     0360          DINT
    1629                    
    1630                            ;*** INITIALIZE LINK FIELDS OF PLNS ***
    1631 00005570     09e1          movi    FGLIST,A1
         00005580 00000000+ 
    1632 000055a0           InitPlns
    1633 000055a0     8221          move    A1,*A1,L                ;Make P_LSTHD point at P_LSTHD
    1634 000055b0     b221          move    A1,*A1(020h),L          ;Make P_LSTTL point at P_LSTHD
         000055c0     0020  
    1635                    
    1636 000055d0     01c0          POPST
    1637                    
    1638                            ;*** CLEAR OUT OBJ SPACE ***
    1639 000055e0     09e1          movi    OBJSTR,A1
         000055f0 00006790- 
    1640 00005610     09e2          movi    NOBJ*OBSIZ/010h,A2
         00005620 0000c670  
    1641 00005640     9001  CLROBST move    A0,*A1+,W
    1642 00005650     3c42          dsjs    A2,CLROBST
    1643                    
    1644 00005660     09e1          MOVI    OBJSTR,A1,L
         00005670 00006790- 
    1645 00005690     0781          MOVE    A1,@OFREE,L     ;SETUP FREE LIST
         000056a0 00000440+ 
    1646 000056c0     09c3          movi    NOBJ,A3                 ;Init FREECNT to # of objs
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   37

         000056d0     0190  
    1647 000056e0     0583          move    A3,@OFREECNT            ;
         000056f0 00006770- 
    1648 00005710           oinitl:
    1649 00005710     4c22          MOVE    A1,A2
    1650 00005720     0b01          ADDI    OBSIZ,A1,W
         00005730     07f0  
    1651 00005740     8222          MOVE    A1,*A2,L                ;LINK EM UP
    1652 00005750     3ca3          DSJS    A3,oinitl               ;CONTINUE FOR NPROC
    1653 00005760     8202          MOVE    A0,*A2,L                ;ZERO LAST LINK
    1654 00005770     0782          move    A2,@ENDOFREE,L          ;keep ptr to last obj on free list
         00005780 00000460+ 
    1655 000057a0     09af          MMFM    SP,A0,A1,A2,A3  ;RESTORE REGS
         000057b0     000f  
    1656 000057c0     0960          RETS
    1657                    
    1658 000057d0           nulplayerlist
    1659 000057d0 00000000          .long   0
    1660 000057f0 000057d0'         .long   nulplayerlist
    1661                    
    1662                    **************************************************************************
    1663                    * CkOFREE
    1664                    * WALK FREE LIST, VERIFY LENGTH AND THAT EACH OBJ'S INUSE BIT IS CLEAR
    1665                    * LOCKUP ON ERROR
    1666                            .IF DEBUG
    1667                    CkOFREE:
    1668                            mmtm    SP,A0,A1,A2
    1669                            clr     A1
    1670                            move    @OFREE,A0,L
    1671                            jrz     GotFreCt
    1672                    CntFree inc     A1
    1673                            movb    *A0(OCTRL+B_INUSE-7),A2
    1674                            LOCKON  N
    1675                            move    *A0,A0,L
    1676                            jrnz    CntFree
    1677                    GotFreCt:
    1678                            move    @OFREECNT,A0,W
    1679                            cmp     A0,A1
    1680                            LOCKON  NE
    1681                            mmfm    SP,A0,A1,A2
    1682                            rets
    1683                            .ENDIF
    1684                    
    1685                    
    1686                    **************************************************************************
    1687                    * IsAnObj
    1688                    * CHECK A0 FOR BEING AN OBJECT PTR
    1689                    * LOCKS UP IF BAD OBJ
    1690 00005810           IsAnObj:
    1691 00005810                   PUSH    A0
    1692 00005820     0d00          subi    OBJSTR,A0
         00005830 ffff986f- 
    1693 00005850                   LOCKON  N
    1694 000058a0     0b60          cmpi    OBJSTRX,A0
         000058b0 fff3316f- 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   38

    1695 000058d0                   LOCKON  GE
    1696 00005920     09ce          movi    OBSIZ,A14
         00005930     07f0  
    1697 00005940     6fc0          modu    A14,A0
    1698 00005950                   LOCKON  NZ
    1699 000059a0                   PULLQ   A0
    1700 000059b0     0960          rets
    1701                    
    1702                    **************************************************************************
    1703                    * GETOBJ
    1704                    * GET A FREE OBJECT BLOCK FOR USE
    1705                    *
    1706                    * RETURNS A0 = PTR TO OBJECT BLOCK
    1707                    *    IF NO BLOCKS WERE AVAILABLE THEN THE Z FLAG IS SET
    1708 000059c0           GETOBJ:
    1709 000059c0     07a0          MOVE    @OFREE,A0,L     ; pointer to next available obj block
         000059d0 00000440+ 
    1710 000059f0     ca3a          jreq    getox
    1711                            .IF DEBUG
    1712                            callr   IsAnObj
    1713                            movb    *A0(OCTRL+B_INUSE-7),A14
    1714                            LOCKON  N
    1715                            .ENDIF
    1716 00005a00     05ae          move    @OFREECNT,A14,W ;dec obj free list count
         00005a10 00006770- 
    1717 00005a30     142e          dec     A14             ;
    1718 00005a40     058e          move    A14,@OFREECNT,W ;
         00005a50 00006770- 
    1719 00005a70                   LOCKON  N
    1720 00005ac0     c10d          jrp     SkClrEnd
    1721 00005ad0     07ae          move    @ENDOFREE,A14,L
         00005ae0 00000460+ 
    1722 00005b00     49c0          cmp     A14,A0
    1723 00005b10                   LOCKON  NE
    1724 00005b60     57ce          clr     A14
    1725 00005b70     078e          move    A14,@ENDOFREE,L
         00005b80 00000460+ 
    1726 00005ba0           SkClrEnd:
    1727 00005ba0     860e          move    *A0,A14,L
    1728 00005bb0     078e          move    A14,@OFREE,L    ; adjust pointer to free list
         00005bc0 00000440+ 
    1729                    
    1730                            ;*** CLEAR OUT THE VITAL PART OF THE OBJECT BLOCK ***
    1731 00005be0     57ce          clr     A14
    1732 00005bf0     09de          movi    OCLRSIZ,B14
         00005c00     04b0  
    1733 00005c10     2f7e          srl     5,B14
    1734 00005c20     c901          jrnc    SkObjWord
    1735 00005c30     91c0          move    A14,*A0+,W
    1736 00005c40           SkObjWord
    1737 00005c40     2ffe          srl     1,B14
    1738 00005c50     c901          jrnc    SkObjLong
    1739 00005c60     93c0          move    A14,*A0+,L
    1740 00005c70           SkObjLong
    1741 00005c70           ObjClrLp
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   39

    1742 00005c70     93c0          move    A14,*A0+,L
    1743 00005c80     93c0          move    A14,*A0+,L
    1744 00005c90     3c7e          dsjs    B14,ObjClrLp
    1745 00005ca0     0be0          subi    OCLRSIZ,A0
         00005cb0     fb4f  
    1746                    
    1747 00005cc0     09ee          movi    DMAWNZ|M_INUSE,A14
         00005cd0 00008002  
    1748 00005cf0     b3c0          move    A14,*A0(OCTRL),L        ;init offset:flags
         00005d00     01f0  
    1749 00005d10     09ee          movi    zscale_100_100_table,a14
         00005d20 00000000! 
    1750 00005d40     b3c0          move    a14,*a0(OSCTAB),L
         00005d50     0470  
    1751 00005d60     57ce          clr     a14
    1752 00005d70     b3c0          move    a14,*a0(ODT_SC_OVERRIDE),L
         00005d80     0790  
    1753 00005d90     4c00          move    A0,A0           ; clear Z flag
    1754 00005da0           getox:
    1755 00005da0     0960          rets
    1756                    
    1757                    **************************************************************************
    1758                    *                                                                        *
    1759                    * CLRODATA - ROUTINE TO CLEAR THE ODATA AREA OF AN OBJECT.               *
    1760                    *               A0 VERSION                                               *
    1761                    * A0 = PTR TO OBJECT                                                     *
    1762                    *                                                                        *
    1763                    **************************************************************************
    1764 00005db0           CLRODATA
    1765 00005db0                   PUSH    A8
    1766 00005dc0     4c08          MOVE    A0,A8
    1767 00005dd0     0d3f          CALLR   CLR_ODATA
         00005de0     0002  
    1768 00005df0                   PULLQ   A8
    1769 00005e00     0960          RETS
    1770                    
    1771                    **************************************************************************
    1772                    *                                                                        *
    1773                    * CLR_ODATA - ROUTINE TO CLEAR THE ODATA AREA OF AN OBJECT               *
    1774                    * A8 = PTR TO OBJECT                                                     *
    1775                    * RETURNS                                                                *
    1776                    *       Z bit Clear                                                      *
    1777                    *                                                                        *
    1778                    **************************************************************************
    1779 00005e10           CLR_ODATA
    1780 00005e10     098f          MMTM    SP,A1,A2
         00005e20     6000  
    1781 00005e30     4d01          MOVE    A8,A1
    1782 00005e40     4c22          MOVE    A1,A2
    1783 00005e50     0b01          ADDI    ODATA,A1
         00005e60     04b0  
    1784 00005e70     0b02          ADDI    ODATAX,A2
         00005e80     07f0  
    1785 00005e90     0d5f          CALLA   CLRBLOCK
         00005ea0 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   40

    1786 00005ec0                   CLRM    *A8(OPLAYER),L
    1787 00005ef0     4d08          MOVE    A8,A8                   ;Clear Z for compatability
    1788 00005f00     09af          MMFM    SP,A1,A2
         00005f10     0006  
    1789 00005f20     0960          RETS
    1790                    
    1791                    
    1792                    **************************************************************************
    1793                    *                                                                        *
    1794                    * INSERT_SCREEN_OBJ - If head of multi-parter, entire multi-parter inser *
    1795                    *            If sub-part of multi-parter, just sub-part inserted.        *
    1796                    *            OID is checked to insert object on supplemental list.       *
    1797                    * A8 = OBJ                                                               *
    1798                    * RETURNS                                                                *
    1799                    *       nothing                                                          *
    1800                    *                                                                        *
    1801                    **************************************************************************
    1802 00005f30           INSERT_SCREEN_OBJ_noani
    1803 00005f30     098f          mmtm    sp,a0,a1
         00005f40     c000  
    1804 00005f50     b500          move    *a8(OXPOS),a0,W
         00005f60     0150  
    1805 00005f70     b501          move    *a8(OYPOS),a1,W
         00005f80     0170  
    1806 00005f90     2601          sll     16,a1
    1807 00005fa0     ec01          movx    a0,a1
    1808 00005fb0     b228          move    a1,*a8(ODAG),L
         00005fc0     0220  
    1809 00005fd0     b028          move    a1,*a8(OXPOS),W
         00005fe0     0150  
    1810 00005ff0     2e01          srl     16,a1
    1811 00006000     b028          move    a1,*a8(OYPOS),W
         00006010     0170  
    1812 00006020     0d3f          callr   INSERT_OBJ
         00006030     001a  
    1813 00006040     09af          mmfm    sp,a0,a1
         00006050     0003  
    1814 00006060     0960          rets
    1815                    
    1816 00006070           INSERT_SCREEN_OBJ
    1817 00006070     098f          mmtm    sp,a0,a1
         00006080     c000  
    1818 00006090     b500          move    *a8(OXPOS),a0,W
         000060a0     0150  
    1819 000060b0     b501          move    *a8(OYPOS),a1,W
         000060c0     0170  
    1820 000060d0     2601          sll     16,a1
    1821 000060e0     ec01          movx    a0,a1
    1822 000060f0     b700          move    *a8(OANIOFF),a0,L
         00006100     01c0  
    1823 00006110     e201          subxy   a0,a1
    1824 00006120     b228          move    a1,*a8(ODAG),L
         00006130     0220  
    1825 00006140     b028          move    a1,*a8(OXPOS),W
         00006150     0150  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   41

    1826 00006160     2e01          srl     16,a1
    1827 00006170     b028          move    a1,*a8(OYPOS),W
         00006180     0170  
    1828 00006190     0d3f          callr   INSERT_OBJ
         000061a0     0003  
    1829 000061b0     09af          mmfm    sp,a0,a1
         000061c0     0003  
    1830 000061d0     0960          rets
    1831                    
    1832                    **************************************************************************
    1833                    *                                                                        *
    1834                    * INSERT_OBJ - If head of multi-parter, entire multi-parter inserted.    *
    1835                    *            If sub-part of multi-parter, just sub-part inserted.        *
    1836                    *            OID is checked to insert object on supplemental list.       *
    1837                    * A8 = OBJ                                                               *
    1838                    * RETURNS                                                                *
    1839                    *       nothing                                                          *
    1840                    *                                                                        *
    1841                    **************************************************************************
    1842 000061e0           INSERT_OBJ:
    1843 000061e0                   PUSH    A0
    1844 000061f0     b700          move    *A8(OPART1),A0,L
         00006200     00a0  
    1845 00006210     ca08          jrz     SkInsMulti
    1846 00006220     4808          cmp     A0,A8                   ;Is Part Head Obj
    1847 00006230     cb06          jrne    SkInsMulti
    1848                    
    1849 00006240           InsMulti
    1850                    ;* TO INSERT A HEAD OBJECT, INSERT SUBPARTS FIRST
    1851                    ;* THIS COULD BE MADE MORE EFFICIENT BY INSERTING ENTIRE MULTI-PARTER
    1852                    ;* TOGETHER INSTEAD OF CALLING INSOBJ FOR EACH PIECE
    1853 00006240     b600          move    *A0(OPARTS),A0,L
         00006250     00c0  
    1854 00006260     ca03          jrz     SkInsMulti
    1855 00006270     0d3f          callr   INSOBJ                  ;INSERT Sub-Part
         00006280     0016  
    1856 00006290     c0fa          jruc    InsMulti
    1857 000062a0           SkInsMulti
    1858 000062a0     4d00          move    A8,A0
    1859 000062b0     0d3f          callr   INSOBJ
         000062c0     0012  
    1860 000062d0                   PULLQ   A0
    1861 000062e0     0960          rets
    1862                    ****************************************************************************
    1863                    
    1864                    **************************************************************************
    1865                    *                                                                        *
    1866                    * INSERT_ON_OBJ - SAME AS INSERT_OBJ, EXCEPT, SUB-PARTS WILL ONLY BE     *
    1867                    *               INSERTED IF THEY ARE ON, I.E. DMA WILL WRITE.            *
    1868                    * A8 = PTR TO OBJ                                                        *
    1869                    *                                                                        *
    1870                    **************************************************************************
    1871 000062f0           INSERT_ON_OBJ
    1872 000062f0                   PUSH    A0
    1873 00006300     b700          MOVE    *A8(OPART1),A0,L        ;CHECK FOR HEAD
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   42

         00006310     00a0  
    1874 00006320     caf7          JRZ     SkInsMulti
    1875 00006330     4808          CMP     A0,A8                   ;IS IT?
    1876 00006340     cbf5          JRNE    SkInsMulti              ;BR = NO
    1877 00006350           IOO_LP
    1878                    ;* TO INSERT A HEAD OBJECT, INSERT SUBPARTS FIRST, IF THEY'RE ON.
    1879                    ;* THIS COULD BE MADE MORE EFFICIENT BY INSERTING ENTIRE MULTI-PARTER
    1880                    ;* TOGETHER INSTEAD OF CALLING INSOBJ FOR EACH PIECE
    1881 00006350     b600          MOVE    *A0(OPARTS),A0,L        ;GET SUB-PART
         00006360     00c0  
    1882 00006370     caf2          JRZ     SkInsMulti              ;BR = NO MORE
    1883 00006380     b40e          MOVE    *A0(OCTRL),A14,W
         00006390     01f0  
    1884 000063a0     278e          SLL     28,A14                  ;IS THIS OBJECT ON?
    1885 000063b0     caf9          JRZ     IOO_LP                  ;BR = NO, THEN DON'T INSERT YET
    1886 000063c0     0d3f          CALLR   INSOBJ                  ;INSERT LOS SUB-PART
         000063d0     0001  
    1887 000063e0     c0f6          JRUC    IOO_LP                  ;AND DO NEXT
    1888                    
    1889                    **************************************************************************
    1890                    *                                                                        *
    1891                    * INSOBJ - Insert obj into doubly linked object list                     *
    1892                    *        List is sorted by increasing Z and increasing Y                 *
    1893                    *        OID is checked to insert object on supplemental list            *
    1894                    * A0 = OBJ                                                               *
    1895                    * *A0(OPLANE) = Plane # if no AUTOZ                                      *
    1896                    * RETURNS                                                                *
    1897                    *       nothing                                                          *
    1898                    *                                                                        *
    1899                    **************************************************************************
    1900 000063f0           INSOBJ:
    1901 000063f0     098f          mmtm    SP,A1,A2,A3,A4,A5
         00006400     7c00  
    1902                            ;ERROR CHECKS
    1903 00006410     0d3f          callr   IsAnObj
         00006420     ff3e  
    1904                    
    1905 00006430     8604          move    *A0,A4,L
    1906 00006440     cb29          jrnz    INSOBJX         ;obj is already inserted
    1907                    
    1908 00006450     09e3          movi    FGLIST,A3
         00006460 00000000+ 
    1909 00006480           InsGotPln
    1910 00006480     4c64          move    A3,A4
    1911 00006490     b601          move    *A0(OZVAL),A1,L         ; GET Z POSITION
         000064a0     0180  
    1912 000064b0           ins_zloop:
    1913 000064b0     8663          move    *A3,A3,L
    1914 000064c0     4864          cmp     A3,A4
    1915 000064d0     ca13          jreq    do_ins                  ; bra if at end of list
    1916 000064e0     b662          move    *A3(OZVAL),A2,L         ; ZPOS in A3
         000064f0     0180  
    1917 00006500     4841          cmp     A2,A1
    1918 00006510     c7f9          jrgt    ins_zloop
    1919 00006520     c40e          jrlt    do_ins
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   43

    1920                    
    1921 00006530     b605          move    *A0(OYVAL),A5,L         ; GET Y POSITION
         00006540     0160  
    1922 00006550     c007          jruc    ins_ytest
    1923 00006560           ins_yloop
    1924 00006560     8663          move    *A3,A3,L
    1925 00006570     4864          cmp     A3,A4
    1926 00006580     ca08          jreq    do_ins                  ; bra if at end of list
    1927 00006590     b662          move    *A3(OZVAL),A2,L         ; ZPOS in A3
         000065a0     0180  
    1928 000065b0     4841          cmp     A2,A1
    1929 000065c0     c404          jrlt    do_ins
    1930 000065d0           ins_ytest
    1931 000065d0     b662          move    *A3(OYVAL),A2,L         ;TEST Y POSITION
         000065e0     0160  
    1932 000065f0     4845          cmp     A2,A5
    1933 00006600     c4f5          jrlt    ins_yloop
    1934 00006610           do_ins
    1935 00006610     01e0          PUSHST
    1936 00006620     0360          DINT
    1937 00006630     b662          move    *A3(OBLINK),A2,L        ; get ptr to previous
         00006640     0020  
    1938                    
    1939 00006650     8260          move    A3,*A0,L                ;IF BACK LINKS USED FROM INTERRUPT
    1940 00006660     8202          move    A0,*A2,L                ; THIS WILL NEED TO BE DINT
    1941 00006670     b203          move    A0,*A3(OBLINK),L        ;
         00006680     0020  
    1942 00006690     b240          move    A2,*A0(OBLINK),L        ;
         000066a0     0020  
    1943 000066b0     01c0          POPST
    1944                    
    1945 000066c0     0d3f          callr   INSSUPP                 ;INSERT ON SUPPLEMENTAL LIST
         000066d0     0426  
    1946 000066e0           INSOBJX
    1947 000066e0     09af          mmfm    SP,A1,A2,A3,A4,A5
         000066f0     003e  
    1948 00006700     0960          rets
    1949                    
    1950                    
    1951                    **************************************************************************
    1952                    * PULL_OBJ
    1953                    * PULLS OBJECT FROM A DOUBLY LINKED OBJECT LIST
    1954                    * MULTI-PART PIECES ARE NOT UNLINKED
    1955                    * IF HEAD OF MULTI-PARTER, ENTIRE MULTI-PARTER PULLED
    1956                    * IF SUB-PART OF MULTI-PARTER, JUST SUB-PART PULLED
    1957                    * OID IS CHECKED TO PULL OBJECT FROM SUPPLEMENTAL LIST
    1958                    *
    1959                    * A8 = OBJ to be pulled
    1960                    * RETS nothing
    1961 00006710           PULL_OBJ:
    1962 00006710                   PUSH    A0
    1963 00006720     b700          move    *A8(OPART1),A0,L
         00006730     00a0  
    1964 00006740     ca08          jrz     SkPullMulti
    1965 00006750     4808          cmp     A0,A8                   ;Is Part Head Obj
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   44

    1966 00006760     cb06          jrne    SkPullMulti
    1967                    
    1968 00006770           PullMulti ;* TO PULL A HEAD OBJECT, PULL ANY SUBPARTS FIRST
    1969 00006770     b600          move    *A0(OPARTS),A0,L
         00006780     00c0  
    1970 00006790     ca03          jrz     SkPullMulti
    1971 000067a0     0d3f          callr   PULLOBJ                 ;Pull Sub-Part
         000067b0     0006  
    1972 000067c0     c0fa          jruc    PullMulti
    1973 000067d0           SkPullMulti
    1974 000067d0     4d00          move    A8,A0
    1975 000067e0     0d3f          callr   PULLOBJ
         000067f0     0002  
    1976 00006800                   PULLQ   A0
    1977 00006810     0960          rets
    1978                    
    1979                    **************************************************************************
    1980                    *                                                                        *
    1981                    *       PULLOBJ                                                          *
    1982                    *                                                                        *
    1983                    *       Pull an object from the Doubly linked object list.               *
    1984                    *       If object is not inserted, then nothing is done.                 *
    1985                    *       Object is also pulled from the supplemental list                 *
    1986                    *       defined by its OID.                                              *
    1987                    *       OLINK is cleared to mark object as not inserted.                 *
    1988                    *                                                                        *
    1989                    *       A0 = Ptr to object                                               *
    1990                    *                                                                        *
    1991                    *       Returns:                                                         *
    1992                    *                                                                        *
    1993                    *               Nothing                                                  *
    1994                    *                                                                        *
    1995                    **************************************************************************
    1996 00006820           PULLOBJ:
    1997                            ;PULL OBJ OUT OF ACTIVE OBJ LIST
    1998                    ;No zero checks needed because there will always be ptrs from both ends
    1999 00006820     b60e          move    *A0(OLINK),A14,L        ;IS OBJ INSERTED?
         00006830     0000  
    2000 00006840     ca10          jrz     SkPULLOBJ
    2001 00006850                   PUSH    A1
    2002 00006860     01e0          PUSHST
    2003 00006870     0360          DINT                            ;Interrupts off now
    2004 00006880     b601          move    *A0(OBLINK),A1,L        ;A1 - Prev Obj
         00006890     0020  
    2005 000068a0     860e          move    *A0,A14,L               ;A14 - Next Obj
    2006 000068b0     83c1          move    A14,*A1,L               ;LINK FORWARD AROUND OBJ A0
    2007 000068c0     b22e          move    A1,*A14(OBLINK),L       ;LINK BACKWARD AROUND OBJ A0
         000068d0     0020  
    2008 000068e0     57ce          clr     A14
    2009 000068f0     b3c0          move    A14,*A0(OLINK),L        ;OBJ NOT INSERTED
         00006900     0000  
    2010 00006910     01c0          POPST
    2011 00006920     0d3f          callr   PULLSUPP        ;PULL FROM SUPPLEMENTAL LIST
         00006930     040f  
    2012 00006940                   PULLQ   A1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   45

    2013 00006950           SkPULLOBJ
    2014 00006950     0960          rets
    2015                    
    2016                    **************************************************************************
    2017                    *                                                                        *
    2018                    *       DELETE_OBJ                              @                *
    2019                    *                                                                        *
    2020                    *       Delete an object from the object list and put it on the          *
    2021                    *       end of the FREE list.                                            *
    2022                    *                                                                        *
    2023                    *       If object is HEAD of a multi-parter the entire multi-parter      *
    2024                    *       is pulled from the object list and put on the FREE list          *
    2025                    *       but it is not disassembled as a multi-parter.                    *
    2026                    *                                                                        *
    2027                    *       If object is a sub-part of a multi-parter, object is             *
    2028                    *       unlinked from the multi-parter, pulled from the object list      *
    2029                    *       and put on the FREE list.                                        *
    2030                    *                                                                        *
    2031                    *       If object is solo then it is pulled from the object list and     *
    2032                    *       put on the FREE list.                                            *
    2033                    *                                                                        *
    2034                    *       All objects:                                                     *
    2035                    *                                                                        *
    2036                    *               - Pulled from the Animation list, if Animating.          *
    2037                    *               - Shadow pulled and freed, if object has a shadow.       *
    2038                    *               - Palette is deallocated.                                *
    2039                    *                                                                        *
    2040                    *       Entrypoints:                                                     *
    2041                    *                                                                        *
    2042                    *               DELETE_OBJ_PROC - Kills controlling process.             *
    2043                    *               ZAP_OBJ - Skips the OPLINK safety check.                 *
    2044                    *                                                                        *
    2045                    *       A8 = Ptr to object to be freed                                   *
    2046                    *                                                                        *
    2047                    *       Returns:                                                         *
    2048                    *               Nothing                                                  *
    2049                    *                                                                        *
    2050                    **************************************************************************
    2051 00006960           DELETE_OBJ:
    2052                    ;;;     .IF DEBUG
    2053                    ;;;     move    *A8(OPLINK),A14,L
    2054                    ;;;     jrz     ZAP_OBJ
    2055                    ;;;     cmp     A14,A13
    2056                    ;;;     LOCKON  NE
    2057                    ;;;     .ENDIF
    2058                    ;       JRUC    ZAP_OBJ
    2059                    
    2060                    *
    2061                    *Entrypoint: Kills linked process before deleting
    2062                    *
    2063 00006960           DELETE_OBJ_PROC
    2064                    ;;;     CALLA   OBJPROC_KILL
    2065                    *
    2066                    *       Fall through to ZAP_OBJ!
    2067                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   46

    2068                    *
    2069                    *Entrypoint: If OPLINK should not be checked
    2070                    *
    2071 00006960           ZAP_OBJ:
    2072 00006960                   PUSH    A0
    2073 00006970     b700          move    *A8(OPART1),A0,L
         00006980     00a0  
    2074 00006990     ca0d          jrz     SkFreeMulti
    2075 000069a0     4808          cmp     A0,A8                   ;Is Part Head Obj
    2076 000069b0     ca03          jreq    FreeMulti
    2077 000069c0     0d3f          callr   PULL_PART               ;SubPart just gets unlinked
         000069d0     0234  
    2078 000069e0     c008          jruc    SkFreeMulti
    2079 000069f0           FreeMulti ;* TO FREE A HEAD OBJECT, FREE ANY SUBPARTS FIRST (don't unlink)
    2080 000069f0     b600          move    *A0(OPARTS),A0,L
         00006a00     00c0  
    2081 00006a10     ca05          jrz     SkFreeMulti
    2082 00006a20     b40e          MOVE    *A0(OFLAGS),A14,W
         00006a30     0420  
    2083 00006a40     0d3f          callr   ZAPOBJ                  ;Delete Sub-Part
         00006a50     0012  
    2084 00006a60     c0f8          jruc    FreeMulti
    2085 00006a70           SkFreeMulti
    2086 00006a70     4d00          move    A8,A0
    2087 00006a80     0d3f          callr   ZAPOBJ
         00006a90     000e  
    2088 00006aa0                   PULLQ   A0
    2089 00006ab0     0960          rets
    2090                    
    2091                    
    2092                    **************************************************************************
    2093                    * DELOBJ
    2094                    * FREEOBJ
    2095                    * FREEGOBJ
    2096                    * IF OPLINK SET, IT MUST POINT TO CURRENT PROCESS
    2097                    * OID IS CHECKED TO PULL OBJECT FROM SUPPLEMENTAL LIST
    2098                    * PUTS OBJ ON END OF FREE LIST
    2099                    * INUSE BIT CLEARED
    2100                    * FREEGOBJ (free garbage obj) Skips the following checks
    2101                    *   IF PART ON AN OBJLST, IT IS PULLED
    2102                    *   IF PART WAS ON ANIM, IT IS PULLED
    2103                    *   SHADOW OBJ IS FREED
    2104                    *   PALETTE IS DEALLOCATED
    2105                    * ERRORS if obj not valid ptr, obj is already free
    2106                    *
    2107                    * A0 = OBJ to be deleted/freed
    2108                    * RETS nothing
    2109                    **************************************************************************
    2110 00006ac0           FREEGOBJ:
    2111 00006ac0     0d3f          callr   IsAnObj
         00006ad0     fed3  
    2112 00006ae0     b40e          move    *A0(OCTRL),A14,W
         00006af0     01f0  
    2113 00006b00     0b8e          andni   M_INUSE,A14
         00006b10 00008000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   47

    2114 00006b30     b1c0          move    A14,*A0(OCTRL),W
         00006b40     01f0  
    2115 00006b50     57ce          clr     A14
    2116 00006b60     83c0          move    A14,*A0,L       ;OBJ GOES TO END OF FREE LIST, PTS AT NOTHING
    2117 00006b70     c01a          jruc    DOFREE
    2118                    **************************************************************************
    2119 00006b80           DELOBJ:
    2120 00006b80           FREEOBJ:
    2121                    ;;;     .IF DEBUG
    2122                    ;       MOVE    *A0(OID),A14,W
    2123                    ;       CMPI    OID_UNIV,A14
    2124                    ;       JREQ    ZAPOBJ
    2125                    ;;;     move    *A0(OPLINK),A14,L
    2126                    ;;;     jrz     ZAPOBJ
    2127                    ;;;     cmp     A14,A13
    2128                    ;;;     LOCKON  NE
    2129                    ;;;     .ENDIF
    2130 00006b80           ZAPOBJ:
    2131                    * ENTRY POINT IF PLINK SHOULD NOT BE CHECKED
    2132                    
    2133 00006b80     0d3f          callr   IsAnObj
         00006b90     fec7  
    2134                    
    2135                            ;CLEAR INUSE BIT TO MARK OBJ AS ON FREE LIST
    2136 00006ba0     b40e          move    *A0(OCTRL),A14,W
         00006bb0     01f0  
    2137 00006bc0     1e0e          btst    B_INUSE,A14
    2138 00006bd0                   LOCKON  Z
    2139 00006c20     0b8e          andni   M_INUSE,A14
         00006c30 00008000  
    2140 00006c50     b1c0          move    A14,*A0(OCTRL),W
         00006c60     01f0  
    2141 00006c70     b40e          move    *A0(OFLAGS),A14,W
         00006c80     0420  
    2142                            ;PULL FROM ANIM IF NECESSARY
    2143 00006c90     1e2e          btst    B_ANIM,A14
    2144 00006ca0     ca02          jrz     NoAnim
    2145 00006cb0     0d3f          callr   PULLANIM
         00006cc0     0325  
    2146 00006cd0           NoAnim
    2147 00006cd0     0d3f          callr   PULLOBJ
         00006ce0     ffb3  
    2148 00006cf0     0d5f          calla   DELPAL
         00006d00 00000000! 
    2149                    
    2150 00006d20           DOFREE
    2151                            ;PUT OBJ ON FREE LIST
    2152 00006d20     05ae          move    @OFREECNT,A14,W ;inc obj free list count
         00006d30 00006770- 
    2153 00006d50     102e          inc     A14             ;
    2154 00006d60     058e          move    A14,@OFREECNT,W ;
         00006d70 00006770- 
    2155                    
    2156 00006d90     07ae          move    @ENDOFREE,A14,L
         00006da0 00000460+ 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   48

    2157 00006dc0     ca02          jrz     HdLink1
    2158 00006dd0     820e          move    A0,*A14,L
    2159 00006de0     c003          jruc    DidLink1
    2160 00006df0           HdLink1
    2161 00006df0     0780          move    A0,@OFREE,L
         00006e00 00000440+ 
    2162 00006e20           DidLink1
    2163 00006e20     0780          move    A0,@ENDOFREE,L
         00006e30 00000460+ 
    2164 00006e50     0960          rets
    2165                    
    2166                    
    2167                    
    2168                    
    2169                    
    2170                    ;6/17
    2171                    **************************************************************************
    2172                    *                                                                        *
    2173                    * FPSTFOBJ0                                                              *
    2174                    * FIND PAL AND THEN..                                                    *
    2175                    * STFOBJ0                                                                *
    2176                    * INIT OBJ W/ STARTING FRAME                                             *
    2177                    * A0 = PTR TO THE OBJ                                                    *
    2178                    * A1 = PTR TO 1st Frame                                                  *
    2179                    *                                                                        *
    2180                    *         Z = FAILURE IN SOME WAY OR ANOTHER.                            *
    2181                    *        NZ = SUCCESS                                                    *
    2182                    *                                                                        *
    2183                    **************************************************************************
    2184 00006e60           FPSTFOBJ0:
    2185 00006e60                   PUSH    A2
    2186 00006e70     4c02          move    A0,A2
    2187 00006e80     b620          move    *A1(ICMAP),A0,L
         00006e90     0070  
    2188 00006ea0     0d5f          calla   GETFPAL
         00006eb0 00000000! 
    2189 00006ed0     cb03          JRNZ    STFOBJ_PAL              ;BR = WE HAVE PALETTE!
    2190 00006ee0     4c40          MOVE    A2,A0                   ;ERROR CONDITION, RESTORE OBJECT
    2191 00006ef0                   SETZ                            ;Z TO FLAG ERROR
    2192 00006f00     c025          JRUC    STFOBJX                 ;RETURN
    2193 00006f10           STFOBJ_PAL
    2194 00006f10     b002          move    A0,*A2(OPAL),W
         00006f20     0280  
    2195 00006f30     4c40          move    A2,A0
    2196 00006f40     c001          jruc    STFOBJE
    2197 00006f50           STFOBJ0
    2198 00006f50                   PUSH    A2
    2199 00006f60           STFOBJE
    2200 00006f60     b220          move    A1,*A0(OIMG),L
         00006f70     02c0  
    2201 00006f80     b62e          move    *A1(ISIZE),A14,L
         00006f90     0010  
    2202 00006fa0     b3c0          move    A14,*A0(OSIZE),L
         00006fb0     0260  
    2203 00006fc0     b3c0          MOVE    A14,*A0(OUSIZE),L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   49

         00006fd0     0240  
    2204 00006fe0     ba20          move    *A1(ISAG),*A0(OSAG),L
         00006ff0     0030  
         00007000     0200  
    2205 00007010     b820          MOVE    *A1(ICTRL),*A0(OCTRL),W
         00007020     0000  
         00007030     01f0  
    2206                    
    2207 00007040     b62e          MOVE    *A1(IANIOFF),A14,L
         00007050     0050  
    2208 00007060     b3c0          MOVE    A14,*A0(OANIOFF),L
         00007070     01c0  
    2209 00007080     b3c0          move    A14,*A0(OUANIOFF),L
         00007090     0440  
    2210 000070a0     57ce          clr     a14
    2211 000070b0     b3c0          move    A14,*A0(OPARTSXY),L
         000070c0     01a0  
    2212                    
    2213 000070d0     09ee          MOVI    01000100H,A14
         000070e0 01000100  
    2214 00007100     b3c0          MOVE    A14,*A0(OSCALE),L
         00007110     02a0  
    2215 00007120     242e          sll     1,a14
    2216 00007130     b3c0          move    a14,*a0(ODAG),L         ; place offscreen
         00007140     0220  
    2217                    
    2218 00007150     4c00          MOVE    A0,A0
    2219 00007160           STFOBJX
    2220 00007160                   PULL    A2
    2221 00007180     0960          RETS
    2222                    
    2223                    ****************************************************************************
    2224                    * CFUNCS (creation funcs) for MULTIMAKE
    2225                    ****************************************************************************
    2226                    
    2227                    
    2228                    ****************************************************************************
    2229                    * C_GETPRC
    2230                    * MULTIMAKE CFUNC - GET A PROCESS AND LINK IT TO THE OBJECT JUST MADE
    2231                    * REQUIRES
    2232                    *  .word  PROCID
    2233                    *  .long  WAKEUP
    2234                    * After CFUNC entry of MULTIMAKE script
    2235 00007190           C_GETPRC
    2236                    ;;;     move    *B0+,B14,W      ;PROCID
    2237                    ;;;     move    B14,A1
    2238                    ;;;     move    *B0+,B14,L      ;WAKEUP
    2239                    ;;;     move    B14,A7
    2240                    ;;;     PUSH    A8
    2241                    ;;;     move    A0,A8
    2242                    ;;;     calla   GETPRC
    2243                    ;;;     move    A0,*A8(OPLINK),L
    2244                    ;;;     PULLQ   A8
    2245 00007190     0960          rets
    2246                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   50

    2247                    ****************************************************************************
    2248                    * C_ANIM
    2249                    * MULTIMAKE CFUNC - PUT OBJ JUST MADE ON ANIM
    2250                    *
    2251                    * REQUIRES
    2252                    *  .long  ANIM_INIT_TABLE w/ format of
    2253                    * After CFUNC entry of MULTIMAKE script
    2254 000071a0           C_ANIM
    2255 000071a0     961e          move    *B0+,B14,L      ;ANIM_INIT_TABLE
    2256 000071b0     4fd1          move    B14,A1
    2257 000071c0     0d3f          callr   STFANIM
         000071d0     0278  
    2258 000071e0     0960          rets
    2259                    
    2260                    **************************************************************************
    2261                    *                                                                        *
    2262                    * C_STRTANIM - OBJECT CREATE CFUNC TO DO A QUICK START OF AN ANIM.       *
    2263                    *               CLEARS STUFFS SCRIPT AND LOOP BACK THE SAME. CLEARS      *
    2264                    *               ANISLP.                                                  *
    2265                    * REQUIRES                                                               *
    2266                    *       .LONG   ANIM SCRIPT PTR                                          *
    2267                    *                                                                        *
    2268                    **************************************************************************
    2269 000071f0           C_STRTANIM
    2270 000071f0     961e          MOVE    *B0+,B14,L
    2271 00007200     4fd1          MOVE    B14,A1
    2272 00007210     0d3f          CALLR   STRTANIM
         00007220     025b  
    2273 00007230     0960          RETS
    2274                    
    2275                    **************************************************************************
    2276                    *                                                                        *
    2277                    * C_CHANGE_PAL - CHANGE PALETTE CFUNC                                    *
    2278                    *                                                                        *
    2279                    * REQUIRES                                                               *
    2280                    *       .LONG   PALETTE ADDRESS                                          *
    2281                    *                                                                        *
    2282                    **************************************************************************
    2283                    
    2284 00007240           C_CHANGE_PAL
    2285 00007240                   PUSH    A8
    2286 00007250     4c08          MOVE    A0,A8
    2287                    
    2288 00007260     961e          MOVE    *B0+,B14,L                      ;GET PALETTE
    2289 00007270     4fd0          MOVE    B14,A0
    2290 00007280     0d5f          CALLA   CHANGE_PAL
         00007290 00000000! 
    2291                    
    2292 000072b0                   PULLQ   A8
    2293 000072c0     0960          RETS
    2294                    
    2295                    **************************************************************************
    2296                    *                                                                        *
    2297                    * SET_FLIP - SET THE FLIP BITS                                           *
    2298                    * A8 = PTR TO OBJECT                                                     *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   51

    2299                    * A0 = NEW FLIP BITS                                                     *
    2300                    *                                                                        *
    2301                    **************************************************************************
    2302 000072d0           SET_FLIP
    2303 000072d0                   PUSH    A4
    2304 000072e0     b70e          MOVE    *A8(OPART1),A14,L
         000072f0     00a0  
    2305 00007300     cb01          JRNZ    SF_LUPE                         ;BR=NOT A MULTIPARTER
    2306 00007310     4d0e          MOVE    A8,A14
    2307 00007320           SF_LUPE
    2308 00007320     b5c4          MOVE    *A14(OCTRL),A4,W
         00007330     01f0  
    2309 00007340     5404          OR      A0,A4
    2310 00007350     b08e          MOVE    A4,*A14(OCTRL),W
         00007360     01f0  
    2311 00007370     b7ce          MOVE    *A14(OPARTS),A14,L
         00007380     00c0  
    2312 00007390     cbf8          JRNZ    SF_LUPE                         ;BR=NEXT PART
    2313 000073a0                   PULLQ   A4
    2314 000073b0     0960          RETS
    2315                    
    2316                    **************************************************************************
    2317                    *                                                                        *
    2318                    * TOGGLE_FLIP - ROUTINE TO TOGGLE THE SPECIFIED FLIP BITS OF AN OBJECT.  *
    2319                    * A0 = FLIP BITS TO TOGGLE                                               *
    2320                    * A8 = PTR TO OBJECT                                                     *
    2321                    *                                                                        *
    2322                    **************************************************************************
    2323 000073c0           TOGGLE_FLIP
    2324 000073c0                   PUSH    A4
    2325 000073d0     b704          MOVE    *A8(OCTRL),A4,L
         000073e0     01f0  
    2326 000073f0     5604          XOR     A0,A4
    2327 00007400     0d3f          CALLR   SET_OCTRL_OPARTSXY
         00007410     0002  
    2328 00007420                   PULLQ   A4
    2329 00007430     0960          RETS
    2330                    
    2331                    
    2332                    **************************************************************************
    2333                    *                                                                        *
    2334                    * SET_OCTRL_OPARTSXY - SET NEW OCTRL AND ADJUST OPARTSXY FOR FLIPPING    *
    2335                    * PASS:                                                                  *
    2336                    * A4 = NEW OCTRL                                                         *
    2337                    * RETURNS:                                                               *
    2338                    * NUTIN'                                                                 *
    2339                    *                                                                        *
    2340                    **************************************************************************
    2341                    
    2342 00007440           SET_OCTRL_OPARTSXY
    2343 00007440                   PUSH    A0
    2344 00007450     b500          move    *A8(OCTRL),A0,W
         00007460     01f0  
    2345 00007470     5680          xor     A4,A0
    2346                    ;       btst    B_FLIPH,A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   52

    2347                    ;       jrz     SOO_NOX
    2348                    ;
    2349                    ;       move    *A8(OPARTSXY),A14,W
    2350                    ;       NEG     A14
    2351                    ;       move    A14,*A8(OPARTSXY),W
    2352                    ;SOO_NOX
    2353 00007480     b088          MOVE    A4,*A8(OCTRL),W
         00007490     01f0  
    2354 000074a0                   PULLQ   A0
    2355 000074b0     0960          RETS
    2356                    
    2357                    
    2358                    ****************************************************************************
    2359                    * CNTRANIP
    2360                    * Stuff ANIOFF W/ center point of object
    2361                    * A0 = OBJ
    2362 000074c0           CNTRANIP
    2363 000074c0     b40e          move    *A0(OSIZEX),A14,W
         000074d0     0260  
    2364 000074e0     2fee          srl     1,A14
    2365 000074f0     b1c0          move    A14,*A0(OANIOFFX),W
         00007500     01c0  
    2366 00007510     b40e          move    *A0(OSIZEY),A14,W
         00007520     0270  
    2367 00007530     2fee          srl     1,A14
    2368 00007540     b1c0          move    A14,*A0(OANIOFFY),W
         00007550     01d0  
    2369 00007560     0960          rets
    2370                    
    2371                    
    2372                    **************************************************************************
    2373                    * GETANIXY
    2374                    * GET THE X AND Y POSITIONS OF AN OBJECTS ANIMATION PT.
    2375                    * A8 = OBJ
    2376                    * RETS  A2=ANI OYPOS (16), A3=ANI OXPOS (16)
    2377 00007570           GETANIXY
    2378 00007570     b502          move    *A8(OYPOS),A2,W
         00007580     0170  
    2379 00007590     2602          sll     16,A2
    2380 000075a0     b503          move    *A8(OXPOS),A3,W
         000075b0     0150  
    2381 000075c0     ec62          movx    A3,A2
    2382 000075d0     b703          move    *A8(OANIOFF),A3,L
         000075e0     01c0  
    2383 000075f0     e062          addxy   A3,A2
    2384 00007600     4c43          move    A2,A3
    2385 00007610     2a02          sra     16,A2
    2386 00007620     0503          sext    A3,W
    2387 00007630     0960          rets
    2388                    
    2389                    **************************************************************************
    2390                    * GETANIXYL
    2391                    * GET THE X AND Y LONG POSITIONS OF AN OBJECTS ANIMATION PT.
    2392                    * A8 = OBJ
    2393                    * RETS  A2=ANI OYPOS (16.16), A3=ANI OXPOS (16.16)
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   53

    2394 00007640           GETANIXYL
    2395 00007640     b50e          move    *A8(OANIOFFX),A14,W
         00007650     01c0  
    2396 00007660     260e          sll     16,A14
    2397 00007670     b703          move    *A8(OXVAL),A3,L
         00007680     0140  
    2398 00007690     41c3          add     A14,A3
    2399 000076a0     b50e          move    *A8(OANIOFFY),A14,W
         000076b0     01d0  
    2400 000076c0     260e          sll     16,A14
    2401 000076d0     b702          move    *A8(OYVAL),A2,L
         000076e0     0160  
    2402 000076f0     41c2          add     A14,A2
    2403 00007700     0960          rets
    2404                    
    2405                    **************************************************************************
    2406                    * GETANIXL
    2407                    * GET THE X ANIMATION PT OF AN OBJ (16.16).
    2408                    * A8 = OBJ
    2409                    * RETS  A0=ANI OXPOS (16.16)
    2410 00007710           GETANIXL
    2411 00007710     b700          move    *A8(OXVAL),A0,L
         00007720     0140  
    2412 00007730     b50e          move    *A8(OANIOFFX),A14,W
         00007740     01c0  
    2413 00007750     260e          sll     16,A14
    2414 00007760     41c0          add     A14,A0
    2415 00007770     0960          rets
    2416                    
    2417                    **************************************************************************
    2418                    * GETANIX
    2419                    * GET ANIMATION POINT X COOR (16)
    2420                    * A8 = OBJ
    2421                    * RETS  A0=ANI OXPOS (16)
    2422 00007780           GETANIX
    2423 00007780     b500          move    *A8(OXPOS),A0,W
         00007790     0150  
    2424 000077a0     b50e          move    *A8(OANIOFFX),A14,W
         000077b0     01c0  
    2425 000077c0     41c0          add     A14,A0
    2426 000077d0     0960          rets
    2427                    
    2428                    **************************************************************************
    2429                    * GETANIYL
    2430                    * GET THE Y ANIMATION PT OF AN OBJ (16.16).
    2431                    * A8 = OBJ
    2432                    * RETS  A0=ANI OYPOS (16.16)
    2433 000077e0           GETANIYL
    2434 000077e0     b700          move    *A8(OYVAL),A0,L
         000077f0     0160  
    2435 00007800     b50e          move    *A8(OANIOFFY),A14,W
         00007810     01d0  
    2436 00007820     260e          sll     16,A14
    2437 00007830     41c0          add     A14,A0
    2438 00007840     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   54

    2439                    
    2440                    **************************************************************************
    2441                    * GETANIY
    2442                    * GET ANIMATION POINT Y COOR (16)
    2443                    * A8 = OBJ
    2444                    * RETS  A0=ANI OYPOS (16)
    2445 00007850           GETANIY
    2446 00007850     b500          move    *A8(OYPOS),A0,W
         00007860     0170  
    2447 00007870     b50e          move    *A8(OANIOFFY),A14,W
         00007880     01d0  
    2448 00007890     41c0          add     A14,A0
    2449 000078a0     0960          rets
    2450                    
    2451                    **************************************************************************
    2452                    * MATCHOPARTSXY
    2453                    * Parms
    2454                    * A8 ptr to BASE OBJ
    2455                    * A0 ptr to obj which is to have its OPARTSXY set so that its offset pt
    2456                    * is at the same point as the BASE OBJ
    2457 000078b0           MATCHOPARTSXY
    2458 000078b0                   PUSH    A1
    2459 000078c0     b501          move    *A8(OPARTSXY),A1,W
         000078d0     01a0  
    2460 000078e0     b40e          move    *A0(OXPOS),A14,W
         000078f0     0150  
    2461 00007900     45c1          sub     A14,A1
    2462 00007910     b50e          move    *A8(OXPOS),A14,W
         00007920     0150  
    2463 00007930     41c1          add     A14,A1
    2464 00007940     b020          move    A1,*A0(OPARTSXY),W
         00007950     01a0  
    2465                    
    2466 00007960     b501          move    *A8(OPARTSXY+010h),A1,W
         00007970     01b0  
    2467 00007980     b40e          move    *A0(OYPOS),A14,W
         00007990     0170  
    2468 000079a0     45c1          sub     A14,A1
    2469 000079b0     b50e          move    *A8(OYPOS),A14,W
         000079c0     0170  
    2470 000079d0     41c1          add     A14,A1
    2471 000079e0     b020          move    A1,*A0(OPARTSXY+010h),W
         000079f0     01b0  
    2472 00007a00                   PULLQ   A1
    2473 00007a10     0960          rets
    2474                    
    2475                    **************************************************************************
    2476                    * MATCHANIP
    2477                    * Parms
    2478                    * A8 ptr to BASE OBJ
    2479                    * A0 ptr to obj which is to have its position set so that its anim pt
    2480                    * is at the same coors as the BASE OBJ
    2481 00007a20           MATCHANIP:
    2482 00007a20                   PUSH    A1
    2483 00007a30     b701          move    *A8(OANIOFF),A1,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   55

         00007a40     01c0  
    2484 00007a50     b60e          move    *A0(OANIOFF),A14,L
         00007a60     01c0  
    2485 00007a70     e3c1          subxy   A14,A1
    2486 00007a80     b50e          move    *A8(OYPOS),A14,W
         00007a90     0170  
    2487 00007aa0     3201          rl      16,A1
    2488 00007ab0     e02e          addxy   A1,A14
    2489 00007ac0     b1c0          move    A14,*A0(OYPOS),W
         00007ad0     0170  
    2490 00007ae0     3201          rl      16,A1
    2491                    
    2492 00007af0     b50e          move    *A8(OXPOS),A14,W
         00007b00     0150  
    2493 00007b10     e02e          addxy   A1,A14
    2494 00007b20     b1c0          move    A14,*A0(OXPOS),W
         00007b30     0150  
    2495                    
    2496                            ;UPDATE FRACTIONAL PORTIONS TOO!
    2497 00007b40     b900          move    *A8(OXVAL),*A0(OXVAL),W
         00007b50     0140  
         00007b60     0140  
    2498 00007b70     b900          move    *A8(OYVAL),*A0(OYVAL),W
         00007b80     0160  
         00007b90     0160  
    2499 00007ba0                   PULLQ   A1
    2500 00007bb0     0960          rets
    2501                    
    2502                    **************************************************************************
    2503                    * GETANIP
    2504                    * A0 PTR TO OBJ
    2505                    * RETURNS  A1 = Y:X ANI POINT
    2506 00007bc0           GETANIP:
    2507 00007bc0     b601          MOVE    *A0(ODAG),A1,L
         00007bd0     0220  
    2508 00007be0     b60e          move    *A0(OANIOFF),A14,L
         00007bf0     01c0  
    2509 00007c00     e1c1          addxy   A14,A1
    2510 00007c10     0960          rets
    2511                    
    2512                    **************************************************************************
    2513                    * GET_ANIP
    2514                    * A8 PTR TO OBJ
    2515                    * RETURNS  A1 = Y:X ANI POINT
    2516 00007c20           GET_ANIP:
    2517 00007c20     b701          MOVE    *A8(ODAG),A1,L
         00007c30     0220  
    2518 00007c40     b70e          move    *A8(OANIOFF),A14,L
         00007c50     01c0  
    2519 00007c60     e1c1          addxy   A14,A1
    2520 00007c70     0960          rets
    2521                    
    2522                    **************************************************************************
    2523                    *                                                                        *
    2524                    * ADD_OFF2ANIP - ROUTINE TO ADD A GIVEN OFFSET TO THE ANIMATION PNT      *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   56

    2525                    *               OF AN OBJECT, AND RETURN THAT POINT.  FLIPS ARE          *
    2526                    *               ACCOUNTED FOR.                                           *
    2527                    * A4 = [Y,X] OFFSET POINT                                                *
    2528                    * A8 = PTR TO OBJECT WE ARE OFFSETING FROM                               *
    2529                    * RETURNS                                                                *
    2530                    *       A3 = [Y,X] POINT                                                 *
    2531                    *                                                                        *
    2532                    **************************************************************************
    2533 00007c80           ADD_OFF2ANIP
    2534 00007c80     098f          MMTM    SP,A1,A4
         00007c90     4800  
    2535 00007ca0     b501          MOVE    *A8(OCTRL),A1,W         ;ADJUST LAUNCH OFFSET IF NECESSARY
         00007cb0     01f0  
    2536 00007cc0     1f61          BTST    B_FLIPH,A1
    2537 00007cd0     ca04          JREQ    AO_CKV
    2538 00007ce0                   NEGX    A4
    2539 00007d20     0d5f  AO_CKV  CALLA   GET_ANIP
         00007d30 00007c20' 
    2540 00007d50     4c23          MOVE    A1,A3
    2541 00007d60     e083          ADDXY   A4,A3
    2542 00007d70     09af          MMFM    SP,A1,A4
         00007d80     0012  
    2543 00007d90     0960          RETS
    2544                    
    2545                    **************************************************************************
    2546                    * GETOFFP
    2547                    * Get object's position using offset point.
    2548                    * Uses OPARTSXY if M_OPARTSXY of OFLAGS2 set.
    2549                    * Else uses OANIOFF (GETANIP).
    2550                    * A0 OBJ
    2551                    * RETURNS  A1 = Y:X OBJECT OFFSET POINT
    2552 00007da0           GETOFFP:
    2553 00007da0     ae0e          movb    *A0(OFLAGS+B_OPARTSXY-7),A14
         00007db0     0422  
    2554 00007dc0     cfdf          jrnn    GETANIP
    2555                    
    2556                            ;USE OPARTSXY
    2557 00007dd0     b401          move    *A0(OYPOS),A1,W
         00007de0     0170  
    2558 00007df0     2601          sll     16,A1
    2559 00007e00     b40e          move    *A0(OXPOS),A14,W
         00007e10     0150  
    2560 00007e20     edc1          movx    A14,A1
    2561 00007e30     b60e          move    *A0(OPARTSXY),A14,L
         00007e40     01a0  
    2562 00007e50     e1c1          addxy   A14,A1
    2563 00007e60     0960          rets
    2564                    
    2565                    **************************************************************************
    2566                    * SET_OPARTSXY
    2567                    * A8 obj
    2568                    * A1 OPARTSXY OFFSET
    2569                    * ADJUSTS OFFSET FOR CURRENT FLIP
    2570 00007e70           SET_OPARTSXY
    2571 00007e70                   PUSH    A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   57

    2572 00007e80     4d00          move    A8,A0
    2573 00007e90     0d3f          callr   SETOPARTSXY
         00007ea0     0002  
    2574 00007eb0                   PULLQ   A0
    2575 00007ec0     0960          rets
    2576                    
    2577                    **************************************************************************
    2578                    * SETOPARTSXY
    2579                    * A0 obj
    2580                    * A1 OPARTSXY OFFSET
    2581                    * ADJUSTS OFFSET FOR CURRENT FLIP
    2582                    * RETURNS
    2583                    *       A1 = *A0(OPARTSXY),L = OPARTSXY ADJUSTED FOR FLIP
    2584                    *
    2585 00007ed0           SETOPARTSXY:
    2586 00007ed0     ae0e          movb    *A0(OCTRL+B_FLIPH-7),A14
         00007ee0     01ed  
    2587 00007ef0     cf05          jrnn    SkHFlpOf
    2588 00007f00     b40e          move    *A0(OSIZEX),A14,W       ;THS-1-OPARTSX FOR H-FLIP
         00007f10     0260  
    2589 00007f20     142e          dec     A14
    2590 00007f30     e22e          subxy   A1,A14
    2591 00007f40     edc1          movx    A14,A1
    2592 00007f50           SkHFlpOf
    2593 00007f50     b220          move    A1,*A0(OPARTSXY),L
         00007f60     01a0  
    2594 00007f70     0960          rets
    2595                    
    2596                    
    2597                    **************************************************************************
    2598                    * GET_OFFP
    2599                    * Get object's position using offset point.
    2600                    * Uses OPARTSXY if M_OPARTSXY of OFLAGS2 set.
    2601                    * Else uses OANIOFF (GETANIP).
    2602                    * A8 OBJ
    2603                    * RETURNS  A1 = Y:X OBJECT OFFSET POINT
    2604 00007f80           GET_OFFP:
    2605 00007f80                   PUSH    A0
    2606 00007f90     4d00          move    A8,A0
    2607 00007fa0     0d3f          callr   GETOFFP
         00007fb0     ffde  
    2608 00007fc0                   PULLQ   A0
    2609 00007fd0     0960          rets
    2610                    
    2611                    **************************************************************************
    2612                    * SETANIP
    2613                    * SET OBJ POSITION SO ANIPT IS ON A POINT.
    2614                    *
    2615                    * A1 = Y:X POINT
    2616                    * A0 = PTR TO OBJECT
    2617 00007fe0           SETANIP:
    2618 00007fe0                   PUSH    A1
    2619 00007ff0     b60e          move    *A0(OANIOFF),A14,L
         00008000     01c0  
    2620 00008010     e3c1          subxy   A14,A1
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   58

    2621 00008020     b020          move    A1,*A0(OXPOS),W
         00008030     0150  
    2622 00008040     2e01          srl     16,A1
    2623 00008050     b020          move    A1,*A0(OYPOS),W
         00008060     0170  
    2624 00008070                   PULLQ   A1
    2625 00008080     0960          rets
    2626                    
    2627                    **************************************************************************
    2628                    *                                                                        *
    2629                    * SET_ANIXP - SET OBJ POSITION SO ANIPT IS ON AN X POINT.                *
    2630                    *           WILL ADJUST ENTIRE MULTI-PARTER.                             *
    2631                    * A1 = X POINT                                                           *
    2632                    * A8 = PTR TO OBJECT                                                     *
    2633                    * RETURNS                                                                *
    2634                    *       A1 = [Y,X] WORLD ANIMATION POINT                                 *
    2635                    *                                                                        *
    2636                    **************************************************************************
    2637 00008090           SET_ANIXP:
    2638 00008090                   PUSH    A0
    2639 000080a0     0d3f          callr   GETANIY ;A0 ANI OYPOS
         000080b0     ff79  
    2640 000080c0     2600          sll     16,A0
    2641 000080d0     ee01          movy    A0,A1
    2642 000080e0     c007          jruc    SET_ANIPe
    2643                    
    2644                    **************************************************************************
    2645                    *                                                                        *
    2646                    * SET_ANIYP - SET OBJ POSITION SO ANIPT IS ON A Y POINT.                 *
    2647                    *           WILL ADJUST ENTIRE MULTI-PARTER.                             *
    2648                    * A1 = Y POINT                                                           *
    2649                    * A8 = PTR TO OBJECT                                                     *
    2650                    * RETURNS                                                                *
    2651                    *       A1 = [Y,X] WORLD ANIMATION POINT                                 *
    2652                    *                                                                        *
    2653                    **************************************************************************
    2654 000080f0           SET_ANIYP:
    2655 000080f0                   PUSH    A0
    2656 00008100     0d3f          CALLR   GETANIX         ;A0 ANI OXPOS
         00008110     ff66  
    2657 00008120     2601          SLL     16,A1
    2658 00008130     ec01          MOVX    A0,A1
    2659 00008140     c001          JRUC    SET_ANIPe
    2660                    
    2661                    **************************************************************************
    2662                    * SET_ANIP
    2663                    * SET OBJ POSITION SO ANIPT IS ON A POINT.
    2664                    * WILL ADJUST ENTIRE MULTI-PARTER.
    2665                    *
    2666                    * A1 = Y:X POINT
    2667                    * A8 = PTR TO OBJECT
    2668 00008150           SET_ANIP:
    2669 00008150                   PUSH    A0
    2670 00008160           SET_ANIPe
    2671 00008160     4d00          move    A8,A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   59

    2672 00008170     0d3f          callr   SETANIP
         00008180     ffe5  
    2673 00008190     0d3f          callr   SETOBJS
         000081a0     0028  
    2674 000081b0                   PULLQ   A0
    2675 000081c0     0960          rets
    2676                    
    2677                    **************************************************************************
    2678                    * MATCHOFFP
    2679                    * Parms
    2680                    * A8 ptr to BASE OBJ
    2681                    * A0 ptr to obj which is to have its position set so that its anim pt
    2682                    * is at the same coors as the BASE OBJ
    2683 000081d0           MATCHOFFP:
    2684 000081d0                   PUSH    A1
    2685 000081e0     0d3f          callr   GET_OFFP
         000081f0     ffd8  
    2686 00008200     0d3f          callr   SETOFFP
         00008210     0008  
    2687                    
    2688                            ;UPDATE FRACTIONAL PORTIONS TOO!
    2689 00008220     b900          move    *A8(OXVAL),*A0(OXVAL),W
         00008230     0140  
         00008240     0140  
    2690 00008250     b900          move    *A8(OYVAL),*A0(OYVAL),W
         00008260     0160  
         00008270     0160  
    2691 00008280                   PULLQ   A1
    2692 00008290     0960          rets
    2693                    
    2694                    **************************************************************************
    2695                    * SETOFFP
    2696                    * Set object's position using offset point.
    2697                    * Uses OPARTSXY if M_OPARTSXY of OFLAGS2 set.
    2698                    * Else uses OANIOFF (SETANIP).
    2699                    * A0 OBJ
    2700                    * A1 = Y:X OBJECT OFFSET POINT
    2701                    * RETURNS nothing
    2702 000082a0           SETOFFP:
    2703 000082a0     ae0e          movb    *A0(OFLAGS+B_OPARTSXY-7),A14
         000082b0     0422  
    2704 000082c0     cfd1          jrnn    SETANIP
    2705                    
    2706 000082d0                   PUSH    A1
    2707                            ;USE OPARTSXY
    2708 000082e0     b60e          move    *A0(OPARTSXY),A14,L
         000082f0     01a0  
    2709 00008300     e3c1          subxy   A14,A1
    2710 00008310     b020          move    A1,*A0(OXPOS),W
         00008320     0150  
    2711 00008330     2e01          srl     16,A1
    2712 00008340     b020          move    A1,*A0(OYPOS),W
         00008350     0170  
    2713 00008360                   PULLQ   A1
    2714 00008370     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   60

    2715                    
    2716                    **************************************************************************
    2717                    * SET_OFFP
    2718                    * Set object's position using offset point.
    2719                    * Uses OPARTSXY if M_OPARTSXY of OFLAGS2 set.
    2720                    * Else uses OANIOFF (SETANIP).
    2721                    * A8 OBJ
    2722                    * A1 = Y:X OBJECT OFFSET POINT
    2723                    * RETURNS nothing
    2724 00008380           SET_OFFP:
    2725 00008380                   PUSH    A0
    2726 00008390     4d00          move    A8,A0
    2727 000083a0     0d3f          callr   SETOFFP
         000083b0     ffee  
    2728 000083c0     0d3f          callr   SETOBJS
         000083d0     0005  
    2729 000083e0                   PULLQ   A0
    2730 000083f0     0960          rets
    2731                    
    2732                    
    2733                    **************************************************************************
    2734 00008400           SET_OBJS:
    2735                    ;UPDATE POS AMONG PARTS OF A MULTI-PART OBJ
    2736                    ;A8 ptr to an obj
    2737 00008400     098f          mmtm    SP,A0,A1,A8
         00008410     c080  
    2738 00008420     c003          jruc    SetObjE
    2739 00008430           SETOBJS:
    2740                    ;UPDATE POS AMONG PARTS OF A MULTI-PART OBJ
    2741                    ;A0 ptr to an obj
    2742 00008430     098f          mmtm    SP,A0,A1,A8
         00008440     c080  
    2743 00008450     4c08          move    A0,A8
    2744                    
    2745 00008460           SetObjE
    2746 00008460     0d3f          callr   GET_OFFP                ;A1 OBJ OFFSET OF A8
         00008470     ffb0  
    2747 00008480     b700          move    *A8(OPART1),A0,L
         00008490     00a0  
    2748 000084a0     c002          jruc    Part1
    2749                    
    2750 000084b0           PartsLp:
    2751 000084b0     b600          move    *A0(OPARTS),A0,L
         000084c0     00c0  
    2752 000084d0           Part1:
    2753 000084d0     ca0b          jrz     PartsX
    2754 000084e0     4808          cmp     A0,A8
    2755 000084f0     cafb          jreq    PartsLp
    2756                    
    2757                            ;* UPDATE THE POSITIONS
    2758 00008500     0d3f          callr   SETOFFP
         00008510     ffd8  
    2759                            ;UPDATE FRACTIONAL PORTIONS TOO!
    2760 00008520     b900          move    *A8(OXVAL),*A0(OXVAL),W
         00008530     0140  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   61

         00008540     0140  
    2761 00008550     b900          move    *A8(OYVAL),*A0(OYVAL),W
         00008560     0160  
         00008570     0160  
    2762 00008580     c0f2          jruc    PartsLp
    2763                    
    2764 00008590           PartsX:
    2765 00008590     09af          mmfm    SP,A0,A1,A8
         000085a0     0103  
    2766 000085b0     0960          rets
    2767                    **************************************************************************
    2768                    
    2769                    
    2770                    **************************************************************************
    2771                    **************************************************************************
    2772                    **************************************************************************
    2773                    
    2774                    **************************************************************************
    2775                    **************************************************************************
    2776                    
    2777                    **************************************************************************
    2778                    *                                                                        *
    2779                    * SETANIPU                                                               *
    2780                    * SET OBJ POSITION'S ANIMATION POINT IN THE UNIVERSE                     *
    2781                    *                                                                        *
    2782                    * PASS:                                                                  *
    2783                    * A0 = OBJECT                                                            *
    2784                    * A1 = UNIVERSE X                                                        *
    2785                    * A2 = UNIVERSE Y                                                        *
    2786                    * A3 = UNIVERSE Z                                                        *
    2787                    *                                                                        *
    2788                    **************************************************************************
    2789 000085c0           SETANIPU
    2790 000085c0     b220          move    A1,*A0(OXVAL),L
         000085d0     0140  
    2791 000085e0     b240          move    A2,*A0(OYVAL),L
         000085f0     0160  
    2792 00008600     b260          move    A3,*A0(OZVAL),L
         00008610     0180  
    2793 00008620     0960          rets
    2794                    
    2795                    **************************************************************************
    2796                    * GET_ANIPU
    2797                    * GET_OFFPU
    2798                    * Get object's UNIVERSE position (USES OPARTSXY IF SET IN OFLAGS)
    2799                    * A8 OBJ
    2800                    * RETURNS
    2801                    * A1 = UNIVERSE X                                                        *
    2802                    * A2 = UNIVERSE Y                                                        *
    2803                    * A3 = UNIVERSE Z                                                        *
    2804 00008630           GET_ANIPU:
    2805 00008630           GET_OFFPU:
    2806 00008630                   PUSH    A0
    2807 00008640     4d00          move    A8,A0
    2808 00008650     0d3f          callr   GETOFFPU
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   62

         00008660     0002  
    2809 00008670                   PULLQ   A0
    2810 00008680     0960          rets
    2811                    
    2812                    **************************************************************************
    2813                    * GETANIPU
    2814                    * GETOFFPU
    2815                    * Get object's UNIVERSE position (USES OPARTSXY IF SET IN OFLAGS)
    2816                    * A0 OBJ
    2817                    * RETURNS
    2818                    * A1 = UNIVERSE X                                                        *
    2819                    * A2 = UNIVERSE Y                                                        *
    2820                    * A3 = UNIVERSE Z                                                        *
    2821 00008690           GETANIPU:
    2822 00008690           GETOFFPU:
    2823 00008690     b601          move    *A0(OXVAL),A1,L
         000086a0     0140  
    2824 000086b0     b602          move    *A0(OYVAL),A2,L
         000086c0     0160  
    2825 000086d0     b603          move    *A0(OZVAL),A3,L
         000086e0     0180  
    2826 000086f0     ae0e          MOVB    *A0(OZOFF),A14
         00008700     03c8  
    2827 00008710     45c3          SUB     A14,A3
    2828                    
    2829 00008720     ae0e          movb    *A0(OFLAGS+B_OPARTSXY-7),A14
         00008730     0422  
    2830 00008740     cf0a          jrnn    GET_U_DONE
    2831                    
    2832 00008750     b60e          move    *A0(OPARTSXY),A14,L
         00008760     01a0  
    2833                    
    2834 00008770     050e          SEXT    A14,W
    2835 00008780     25ee          SLL     15,A14
    2836 00008790     45c1          SUB     A14,A1
    2837                    
    2838 000087a0     b60e          move    *A0(OPARTSXY+010H),A14,L
         000087b0     01b0  
    2839                    
    2840 000087c0     050e          SEXT    A14,W
    2841 000087d0     25ee          SLL     15,A14
    2842 000087e0     45c2          SUB     A14,A2
    2843                    
    2844 000087f0           GET_U_DONE
    2845 000087f0     0960          rets
    2846                    
    2847                    **************************************************************************
    2848                    **************************************************************************
    2849                    **************************************************************************
    2850                    
    2851                    
    2852                    **************************************************************************
    2853                    * INITPART
    2854                    * Makes obj a multi-parter w/ self
    2855                    * A8 = OBJ to be made the head object of a multi-parter
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   63

    2856 00008800           INITPART
    2857 00008800     57ce          clr     A14
    2858 00008810     b3c8          move    A14,*A8(OPARTS),L
         00008820     00c0  
    2859 00008830     b308          move    A8,*A8(OPART1),L
         00008840     00a0  
    2860 00008850     0960          rets
    2861                    
    2862                    **************************************************************************
    2863                    *                                                                        *
    2864                    * CNTMPART - COUNT THE NUMBER OF PARTS CONTAINED IN THIS                 *
    2865                    *               MULTI-PARTER. RETURNS 0 IF NOT A MULTI-PARTER.           *
    2866                    * A0 = PTR TO ANY PART                                                   *
    2867                    * RETURNS                                                                *
    2868                    *        Z = NOT A MULTI-PARTER                                          *
    2869                    *               A1 = 0                                                   *
    2870                    *       NZ = MULTI-PARTER                                                *
    2871                    *               A1 = NUMBER OF PARTS                                     *
    2872                    *                                                                        *
    2873                    **************************************************************************
    2874 00008860           CNTMPART:
    2875 00008860                   PUSH    A0
    2876 00008870     5621          clr     A1
    2877 00008880     b600          move    *A0(OPART1),A0,L
         00008890     00a0  
    2878 000088a0     ca04          jrz     CntPartsX
    2879 000088b0           CntParts:
    2880 000088b0     1021          inc     A1
    2881 000088c0     b600          move    *A0(OPARTS),A0,L
         000088d0     00c0  
    2882 000088e0     cbfc          jrnz    CntParts
    2883 000088f0           CntPartsX
    2884 000088f0     4c21          MOVE    A1,A1
    2885 00008900                   PULL    A0
    2886 00008920     0960          rets
    2887                    **************************************************************************
    2888                    
    2889                    **************************************************************************
    2890                    * INSPART
    2891                    * A0 ptr to an obj (or multi-parter) to be added to a multi-parter
    2892                    * A8 obj to be head or obj in a multiparter, which contains head obj
    2893 00008930           INSPART:
    2894 00008930     098f          mmtm    SP,A0,A1,A2,A3,A8
         00008940     f080  
    2895 00008950     b701          move    *A8(OPART1),A1,L
         00008960     00a0  
    2896 00008970     cb03          jrnz    SkMkHd
    2897 00008980     0d3f          callr   INITPART
         00008990     ffe6  
    2898 000089a0     c001          jruc    IGotHd
    2899 000089b0           SkMkHd
    2900 000089b0     4c28          move    A1,A8
    2901 000089c0           IGotHd
    2902                            .IF     DEBUG
    2903                            callr   CkMPART
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   64

    2904                            .ENDIF
    2905                    
    2906 000089c0     b701          move    *A8(OPART1),A1,L
         000089d0     00a0  
    2907 000089e0     b602          move    *A0(OPART1),A2,L
         000089f0     00a0  
    2908 00008a00     cb01          jrnz    InsParts
    2909 00008a10     4c02          move    A0,A2
    2910                    
    2911 00008a20           InsParts
    2912                            ;*** ADD A LIST OF OBJS TO ANOTHER LIST ***
    2913 00008a20     4c43          move    A2,A3
    2914 00008a30           InsPLp
    2915 00008a30     4c40          move    A2,A0
    2916 00008a40     b220          move    A1,*A0(OPART1),L
         00008a50     00a0  
    2917 00008a60     b602          move    *A0(OPARTS),A2,L
         00008a70     00c0  
    2918 00008a80     cbfa          jrnz    InsPLp
    2919                    *THIS MAKES ANY NEWLY INSERTED PARTS GO TO THE END OF THE MULTI-PARTER
    2920 00008a90           INS_TO_END_LP
    2921 00008a90     4c22          MOVE    A1,A2                           ;KEEP PREVIOUS PART
    2922 00008aa0     b621          MOVE    *A1(OPARTS),A1,L                ;ANY MORE PARTS?
         00008ab0     00c0  
    2923 00008ac0     cbfc          JRNZ    INS_TO_END_LP                   ;BR = YES
    2924                    ****    move    *A1(OPARTS),*A0(OPARTS),L
    2925                    ****    move    A3,*A1(OPARTS),L
    2926 00008ad0     b262          MOVE    A3,*A2(OPARTS),L                ;WE KNOW WE'RE AT THE END
         00008ae0     00c0  
    2927                    
    2928                            .IF     DEBUG
    2929                            callr   CkMPART
    2930                            .ENDIF
    2931                    
    2932 00008af0     09af          mmfm    SP,A0,A1,A2,A3,A8
         00008b00     010f  
    2933 00008b10     0960          rets
    2934                    **************************************************************************
    2935                    
    2936                    **************************************************************************
    2937                    * CkMPART1
    2938                    * Checks if obj is part of invalid multi-parter
    2939                    * checks that obj is valid head obj
    2940                    *
    2941                    * A8 = OBJ to be checked
    2942 00008b20           CkMPART1
    2943 00008b20     098f          mmtm    SP,A6,A7,A8
         00008b30     0380  
    2944 00008b40     b707          move    *A8(OPART1),A7,L
         00008b50     00a0  
    2945 00008b60     ca18          jrz     CkMPARTX
    2946 00008b70     4907          cmp     A8,A7
    2947 00008b80                   LOCKON  NZ
    2948 00008bd0     c005          jruc    CkMPARTE
    2949                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   65

    2950                    * CkMPART
    2951                    * Checks if obj is part of invalid multi-parter
    2952                    *
    2953                    * A0 = OBJ to be checked
    2954 00008be0           CkMPART:
    2955 00008be0     098f          mmtm    SP,A6,A7,A8
         00008bf0     0380  
    2956 00008c00     b607          move    *A0(OPART1),A7,L
         00008c10     00a0  
    2957 00008c20     ca0c          jrz     CkMPARTX                ;NOT IN MULTI-PARTER -> OK
    2958 00008c30           CkMPARTE:
    2959 00008c30     4ce8          move    A7,A8
    2960 00008c40           CkMPLp
    2961 00008c40     b706          move    *A8(OPART1),A6,L
         00008c50     00a0  
    2962 00008c60     48c7          cmp     A6,A7
    2963 00008c70                   LOCKON  NE
    2964 00008cc0     b708          move    *A8(OPARTS),A8,L
         00008cd0     00c0  
    2965 00008ce0     cbf5          jrnz    CkMPLp
    2966 00008cf0           CkMPARTX
    2967 00008cf0     09af          mmfm    SP,A6,A7,A8
         00008d00     01c0  
    2968 00008d10     0960          rets
    2969                    
    2970                    **************************************************************************
    2971                    * PULL_PART
    2972                    * REMOVE OBJ FROM A MULTI PARTER
    2973                    * A8 = piece of a multi-part obj
    2974                    * PULLPART
    2975                    * A0 = piece of a multi-part obj
    2976 00008d20           PULL_PART:
    2977 00008d20                   PUSH    A0
    2978 00008d30     4d00          move    A8,A0
    2979 00008d40     0d3f          callr   PULLPART
         00008d50     0002  
    2980 00008d60                   PULLQ   A0
    2981 00008d70     0960          rets
    2982 00008d80           PULLPART:
    2983                    ;A0 ptr to a piece of a multi-part obj
    2984 00008d80                   PUSH    A2
    2985 00008d90     b60e          move    *A0(OPART1),A14,L
         00008da0     00a0  
    2986 00008db0                   LOCKON  Z
    2987 00008e00     49c0          cmp     A14,A0          ;CAN'T USE TO PULL HEAD
    2988 00008e10                   LOCKON  EQ
    2989 00008e60     0d3f          callr   CkMPART
         00008e70     ffd6  
    2990                    
    2991 00008e80           FindPrev
    2992 00008e80     4dc2          move    A14,A2
    2993 00008e90     b64e          move    *A2(OPARTS),A14,L
         00008ea0     00c0  
    2994 00008eb0                   LOCKON  Z
    2995 00008f00     ca15          jrz     PullPrtX
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   66

    2996 00008f10     49c0          cmp     A14,A0
    2997 00008f20     cbf5          jrne    FindPrev
    2998                    
    2999                            ;*** GOT THE PTR TO THE PREVIOUS OBJ IN A2
    3000 00008f30     ba02          move    *A0(OPARTS),*A2(OPARTS),L       ;link around A0
         00008f40     00c0  
         00008f50     00c0  
    3001                    
    3002 00008f60     b60e          move    *A0(OPART1),A14,L
         00008f70     00a0  
    3003 00008f80     bbc0          move    *A14(OXVEL),*A0(OXVEL),L
         00008f90     0100  
         00008fa0     0100  
    3004 00008fb0     bbc0          move    *A14(OYVEL),*A0(OYVEL),L
         00008fc0     0120  
         00008fd0     0120  
    3005 00008fe0     bbc0          move    *A14(OZVEL),*A0(OZVEL),L
         00008ff0     00e0  
         00009000     00e0  
    3006 00009010     57ce          clr     A14
    3007 00009020     b3c0          move    A14,*A0(OPART1),L
         00009030     00a0  
    3008 00009040     b3c0          move    A14,*A0(OPARTS),L
         00009050     00c0  
    3009                    
    3010 00009060           PullPrtX
    3011 00009060                   PULLQ   A2
    3012 00009070     0960          rets
    3013                    
    3014                    **************************************************************************
    3015                    * PULL_PART1
    3016                    * PULLS HEAD OBJ FROM MULTI-PARTER, MAKES NEXT OBJ NEW HEAD
    3017                    * A8 = Head obj of a multi-part obj
    3018                    * RETS A0 new Head Obj
    3019 00009080           PULL_PART1:
    3020 00009080                   PUSH    A2
    3021                            .IF DEBUG
    3022                            callr   CkMPART1
    3023                            .ENDIF
    3024 00009090     4d00          move    A8,A0
    3025                    
    3026 000090a0     b60e          move    *A0(OPARTS),A14,L
         000090b0     00c0  
    3027 000090c0     ca06          jrz     NoPull1
    3028 000090d0     4dc2          move    A14,A2
    3029 000090e0           HdLnks
    3030 000090e0     b3c2          move    A14,*A2(OPART1),L
         000090f0     00a0  
    3031 00009100     b642          move    *A2(OPARTS),A2,L
         00009110     00c0  
    3032 00009120     cbfb          jrnz    HdLnks
    3033                    
    3034 00009130           NoPull1
    3035 00009130     5642          clr     A2
    3036 00009140     b240          move    A2,*A0(OPART1),L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   67

         00009150     00a0  
    3037 00009160     b240          move    A2,*A0(OPARTS),L
         00009170     00c0  
    3038                    
    3039 00009180     4dc0          move    A14,A0
    3040 00009190                   PULL    A2
    3041 000091b0     0960          rets
    3042                    
    3043                    ****************************************************************************
    3044                    * FINDPART
    3045                    * A1 # of part to be found
    3046                    * A8 ptr to obj in multiparter
    3047                    * RETS A0 if part found, Z set if not
    3048 000091c0           FINDPART:
    3049 000091c0     0b81          andi    0FFh,A1
         000091d0 ffffff00  
    3050 000091f0     b700          move    *A8(OPART1),A0,L
         00009200     00a0  
    3051 00009210           FindMPLp
    3052 00009210     ae0e          movb    *A0(OPARTID),A14
         00009220     03c0  
    3053 00009230     0b8e          andi    0FFh,A14
         00009240 ffffff00  
    3054 00009260     49c1          cmp     A14,A1
    3055 00009270     ca03          jreq    FoundMP
    3056 00009280     b600          move    *A0(OPARTS),A0,L
         00009290     00c0  
    3057 000092a0     cbf6          jrnz    FindMPLp
    3058 000092b0           FoundMP
    3059 000092b0     4c00          move    A0,A0
    3060 000092c0     0960          rets
    3061                    
    3062                    **************************************************************************
    3063                    *                                                                        *
    3064                    * GET_HEAD_PART - ROUTINE TO GET THE PTR TO THE HEAD OBJECT OF A         *
    3065                    *               MULTI-PARTER, IF THE OBJECT IS SOLO THEN NOTHING         *
    3066                    *               CHANGES.                                                 *
    3067                    * A8 = PTR TO PART                                                       *
    3068                    * RETURNS                                                                *
    3069                    *        Z = NOT A MULTI-PARTER                                          *
    3070                    *               A8 = SAME                                                *
    3071                    *       NZ = MULTI-PARTER                                                *
    3072                    *               A8 = PTR TO HEAD OBJECT                                  *
    3073                    *                                                                        *
    3074                    **************************************************************************
    3075 000092d0           GET_HEAD_PART
    3076 000092d0     b70e          MOVE    *A8(OPART1),A14,L       ;GET HEAD PART
         000092e0     00a0  
    3077 000092f0     ca01          JRZ     GHP_X                   ;BR = SOLO OBJECT
    3078 00009300     4dc8          MOVE    A14,A8                  ;RETURN PART
    3079 00009310           GHP_X
    3080 00009310     0960          RETS
    3081                    
    3082                    **************************************************************************
    3083                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   68

    3084                    * GETHEADPART - A0 Version of GET_HEAD_PART                              *
    3085                    * A0 = Ptr to part                                                       *
    3086                    * Returns:                                                               *
    3087                    *        Z = Not a Multi-Parter                                          *
    3088                    *               A0 = Same                                                *
    3089                    *       NZ = Object is part of a Multi-Parter                            *
    3090                    *               A0 = Ptr to HEAD object                                  *
    3091                    *                                                                        *
    3092                    **************************************************************************
    3093 00009320           GETHEADPART
    3094 00009320     b60e          MOVE    *A0(OPART1),A14,L       ;GET HEAD PART
         00009330     00a0  
    3095 00009340     ca01          JRZ     GHPA0_X                 ;BR = SOLO OBJECT
    3096 00009350     4dc0          MOVE    A14,A0                  ;RETURN PART
    3097 00009360           GHPA0_X
    3098 00009360     0960          RETS
    3099                    
    3100                    **************************************************************************
    3101                    *                                                                        *
    3102                    * GET_HEAD_PART_A0 - ROUTINE TO GET THE PTR TO THE HEAD OBJECT OF A      *
    3103                    *               MULTI-PARTER, IF THE OBJECT IS SOLO THEN NOTHING         *
    3104                    *               CHANGES.                                                 *
    3105                    * A8 = PTR TO PART                                                       *
    3106                    * RETURNS                                                                *
    3107                    *       A0 = PTR TO HEAD OBJECT                                          *
    3108                    *                                                                        *
    3109                    **************************************************************************
    3110 00009370           GET_HEAD_PART_A0
    3111 00009370     b70e          MOVE    *A8(OPART1),A14,L       ;GET HEAD PART
         00009380     00a0  
    3112 00009390     ca02          JRZ     GHPA_NOMULTI            ;BR = SOLO OBJECT
    3113 000093a0     4dc0          MOVE    A14,A0                  ;RETURN PART
    3114 000093b0     0960          RETS
    3115 000093c0           GHPA_NOMULTI
    3116 000093c0     4d00          MOVE    A8,A0                   ;RETURN "HEAD" PART REGARDLESS
    3117 000093d0                   SETZ                            ;FLAG IT.
    3118 000093e0     0960          RETS
    3119                    
    3120                    
    3121                    
    3122                            .align          ;This replaces the old CACHE4 section
    3123                    
    3124                    **************************************************************************
    3125                    *                                                                        *
    3126                    * GANIOF - RETURN ANIMATION PNT. OF GIVEN IMAGE                          *
    3127                    * A2 = [HEIGHT,WIDTH]                                                    *
    3128                    * A5 = OFLAGS                                                            *
    3129                    * GARBOF - SAME AS GANIOF EXCEPT YOU PROVIDE                             *
    3130                    * A6 = OFFSET                                                            *
    3131                    * RETURNS                                                                *
    3132                    *       A6 = X ANIMATION OFFSET (32 BIT)                                 *
    3133                    *       A7 = Y ANIMATION OFFSET (32 BIT)                                 *
    3134                    *                                                                        *
    3135                    **************************************************************************
    3136 00009400           GANIOF:
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   69

    3137 00009400     098f          MMTM    SP,A2,A3
         00009410     3000  
    3138 00009420     b626          MOVE    *A1(IANIOFF),A6,L
         00009430     0050  
    3139 00009440     c002          jruc    GotOf
    3140 00009450           GARBOF:
    3141                    ;A6 has offset from TL
    3142 00009450     098f          MMTM    SP,A2,A3
         00009460     3000  
    3143 00009470     56e7  GotOf   CLR     A7              ;MAKE SURE A7 IS 0
    3144 00009480     eec7          MOVY    A6,A7
    3145 00009490     2606          SLL     16,A6           ;MOVE TO UPPER WORD
    3146 000094a0     0d02          SUBI    00010001h,A2    ;ADJUST FOR -1
         000094b0 fffefffe  
    3147 000094d0     5663          CLR     A3
    3148 000094e0     ee43          MOVY    A2,A3
    3149 000094f0     2602          SLL     16,A2           ;MOVE TO UPPER WORD
    3150 00009500     1f65          BTST    B_FLIPH,A5
    3151 00009510     ca02          JRZ     GANI1
    3152 00009520     03a6          NEG     A6
    3153 00009530     4046          ADD     A2,A6           ;SUB THS-1 FOR H-FLIP
    3154 00009540     09af  GANI1:  MMFM    SP,A2,A3
         00009550     000c  
    3155 00009560     0960          RETS
    3156                    
    3157                    **************************************************************************
    3158                    * SetArbP
    3159                    * A8 ptr to BASE OBJ
    3160                    * A7 BASE OBJ TL offset
    3161                    * A0 ptr to obj which is to have its position set so that its offset pt
    3162                    *       is at the same coors as the BASE OBJ offset pt
    3163                    * A1 SUBORDINATE OBJ TL offset
    3164 00009570           SetArbP:
    3165 00009570     098f          mmtm    SP,A2,A3,A4,A5,A6,A7
         00009580     3f00  
    3166                    ;* get POSITION from first obj..
    3167 00009590     b702          move    *A8(OSIZE),A2,L
         000095a0     0260  
    3168 000095b0     b504          move    *A8(OCTRL),A4,W
         000095c0     01f0  
    3169                    *GARBOF: A6=ANIOFF, A2=H:W, A4=OCTRL -> A6=X ANIOFF<<16, A7=Y ANIOFF<<16
    3170 000095d0     4ce6          move    A7,A6
    3171 000095e0     0d3f          callr   GARBOF
         000095f0     ffe5  
    3172 00009600     4cc3          move    A6,A3
    3173 00009610     4ce5          move    A7,A5
    3174                    
    3175 00009620     b602          move    *A0(OSIZE),A2,L
         00009630     0260  
    3176 00009640     b504          move    *A8(OCTRL),A4,W
         00009650     01f0  
    3177                    *GARBOF: A6=ANIOFF, A2=H:W, A4=OCTRL -> A6=X ANIOFF<<16, A7=Y ANIOFF<<16
    3178 00009660     4c26          move    A1,A6
    3179 00009670     0d3f          callr   GARBOF
         00009680     ffdc  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   70

    3180 00009690     44e5          sub     A7,A5
    3181 000096a0     44c3          sub     A6,A3
    3182                    
    3183 000096b0     b707          move    *A8(OYVAL),A7,L
         000096c0     0160  
    3184 000096d0     40e5          add     A7,A5
    3185 000096e0     b2a0          move    A5,*A0(OYVAL),L
         000096f0     0160  
    3186 00009700     b706          move    *A8(OXVAL),A6,L
         00009710     0140  
    3187 00009720     40c3          add     A6,A3
    3188 00009730     b260          move    A3,*A0(OXVAL),L
         00009740     0140  
    3189 00009750     09af          mmfm    SP,A2,A3,A4,A5,A6,A7
         00009760     00fc  
    3190 00009770     0960          rets
    3191                    
    3192                    
    3193                    
    3194                    **************************************************************************
    3195                    * STRT_ANIM
    3196                    * A1 SCRIPT PTR
    3197                    * A8 OBJ TO BE STARTED ON ANIM
    3198 00009780           STRT_ANIM:
    3199 00009780                   PUSH    A0
    3200 00009790     4d00          move    A8,A0
    3201 000097a0     0d3f          callr   STRTANIM
         000097b0     0002  
    3202 000097c0                   PULLQ   A0
    3203 000097d0     0960          rets
    3204                    * STRTANIM
    3205                    * A1 SCRIPT PTR
    3206                    * A0 OBJ TO BE STARTED ON ANIM
    3207                    
    3208                    
    3209                    
    3210 000097e0           STRTANIM:
    3211 000097e0                   PUSH    A1
    3212 000097f0     b220          move    A1,*A0(ANIMFRM),L
         00009800     0320  
    3213 00009810     b220          move    A1,*A0(ANIMSCR),L
         00009820     0340  
    3214 00009830     5621          clr     A1
    3215 00009840     ac20          movb    A1,*A0(ANISLP)
         00009850     0368  
    3216 00009860     0d3f          callr   CKINSANI
         00009870     001b  
    3217 00009880                   PULLQ   A1
    3218 00009890     0960          rets
    3219                    
    3220                    *
    3221                    * Same as STRTANIM, but starts in middle of sequence
    3222                    * A1 START FRAME
    3223                    * A14 SCRIPT PTR
    3224                    * A0 OBJ TO BE STARTED ON ANIM
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   71

    3225                    *
    3226 000098a0           STRTANIM_OFF:
    3227 000098a0                   PUSH    A1
    3228 000098b0     b3c0          move    A14,*A0(ANIMSCR),L
         000098c0     0340  
    3229 000098d0     b220          move    A1,*A0(ANIMFRM),L
         000098e0     0320  
    3230 000098f0     5621          clr     A1
    3231 00009900     ac20          movb    A1,*A0(ANISLP)
         00009910     0368  
    3232 00009920     0d3f          callr   CKINSANI
         00009930     000f  
    3233 00009940                   PULLQ   A1
    3234 00009950     0960          rets
    3235                    
    3236                    **************************************************************************
    3237                    * STFANIM
    3238                    * A1 = Ptr to ANIM Structure (see below)
    3239                    * A0 = Ptr to Object to be inserted
    3240                    *   STRUCT .long FRAME (ptr), SCRIPT (reset)
    3241                    *          .byte ANIMSLP (reset), ANISLP (ctr)
    3242                    *          .word RESERVED (set to 0)
    3243                    *
    3244 00009960           STFANIM:
    3245 00009960     098f          mmtm    SP,A1,A2
         00009970     6000  
    3246 00009980     4c02          move    A0,A2
    3247 00009990     0b02          addi    ANIMFRM,A2
         000099a0     0320  
    3248 000099b0     9a22          move    *A1+,*A2+,L
    3249 000099c0     9a22          move    *A1+,*A2+,L
    3250 000099d0     9a22          move    *A1+,*A2+,L
    3251 000099e0     0d3f          callr   CKINSANI
         000099f0     0003  
    3252 00009a00     09af          mmfm    SP,A1,A2
         00009a10     0006  
    3253 00009a20     0960          rets
    3254                    
    3255                    ****************************************************************************
    3256                    * INSANIM - errors if already on
    3257                    * CKINSANI - only inserts if not already on
    3258                    * A0 = OBJ to be Animated/Flown by ANIMP
    3259                    * ***NOTE***
    3260                    * the following obj fields must be appropriately initialized before insertion.
    3261                    * ANIMSCR       -ptr to longnull terminated animation script w/ format of
    3262                    *  .long        frame           ;if Bit 0 of frame ptr = '1' don't animate..
    3263                    *  .word (FlipFlag.1:unusedFlag.1:FuncFlag.1:MultiFlag.1:0.4 : SleepTime.8)
    3264                    *  [.word FlipBits] if FlipFlag set
    3265                    *  [.long Function|# of ARG words (0-15)] if FuncFlag set
    3266                    *       !!!!! WARNING WARNING WARNING WARNING WARNING WARNING !!!!!
    3267                    *       !!!!!                                                 !!!!!
    3268                    *       !!!!! The low four bits of the animation function     !!!!!
    3269                    *       !!!!! Address are used to indicate the number of      !!!!!
    3270                    *       !!!!! WORD arguments used by this function.           !!!!!
    3271                    *       !!!!! ALWAYS use GETAFARG_xxxx to grab arguments.     !!!!!
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   72

    3272                    *       !!!!!                                                 !!!!!
    3273                    *       !!!!! WARNING WARNING WARNING WARNING WARNING WARNING !!!!!
    3274                    *  if MultiFlag Set, loop on OPARTS & process another script entry
    3275                    *    this causes stuffing of sleep time to be skipped, thus sleep value of
    3276                    *    last entry of multiscript will be used.
    3277                    *       If the NOPARTANI Bit of OFLAGS is set for a subpart, that
    3278                    *       part will not be processed during the Multi-Script.
    3279                    *       Function can clobber all but A12,A13
    3280                    *       !!!!! WARNING WARNING WARNING WARNING WARNING WARNING !!!!!
    3281                    *          A12 must stay untouched throughout anim func because a call
    3282                    *          to DELOBJ or PULLANIM will scan to pull QUEUED(A12) Anim func.
    3283                    *       !!!!! WARNING WARNING WARNING WARNING WARNING WARNING !!!!!
    3284                    * ANIMFRM       -ptr to current entry in animation script
    3285                    * ANISLP        -byte, # tiks before next ani
    3286                    * ANIMSLP -byte, overlayed on ANIMSCR, resets ANISLP when SleepTime=0
    3287                    * AnimGrv       -word, amount to add to Yvel each tik
    3288                    *
    3289                    * ANIMARG       -set by AnimP, used by GETAFARG_xxxx
    3290                    
    3291 00009a30           CKINSANI:
    3292                    ;*** ONLY INSERT OBJ IF IT ISN'T ALREADY ON ***
    3293 00009a30     ae0e          movb    *A0(OFLAGS+B_ANIM-7),A14
         00009a40     0427  
    3294 00009a50     ce1a          jrn     SkInsAni
    3295 00009a60           INSANIM:
    3296                            .IF     DEBUG
    3297                            callr   IsAnObj
    3298                            callr   CkAnim
    3299                            callr   OnAnim
    3300                            .ENDIF
    3301                    
    3302 00009a60                   PUSH    A1
    3303                    
    3304                            ;**** MARK OBJ AS BEING ON ANIM LIST ****
    3305 00009a70     01e0          PUSHST
    3306 00009a80     0360          DINT
    3307                    
    3308 00009a90     b401          move    *A0(OFLAGS),A1,W
         00009aa0     0420  
    3309 00009ab0     1e21          btst    B_ANIM,A1
    3310 00009ac0                   LOCKON  NZ
    3311 00009b10     0ba1          ori     M_ANIM,A1
         00009b20 00004000  
    3312 00009b40     b020          move    A1,*A0(OFLAGS),W
         00009b50     0420  
    3313                    
    3314                            ;LINK OBJ INTO HEAD OF ANIOBJS LIST
    3315 00009b60     07a1          move    @ANIOBJS,A1,L
         00009b70 00000480+ 
    3316 00009b90     b220          move    A1,*A0(ANIMNXT),L
         00009ba0     0300  
    3317 00009bb0     0780          move    A0,@ANIOBJS,L
         00009bc0 00000480+ 
    3318 00009be0     01c0          POPST
    3319                    ****    EINT
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   73

    3320                    
    3321 00009bf0                   PULLQ   A1
    3322                            .IF     DEBUG
    3323                    ;       callr   CkAnim
    3324                            .ENDIF
    3325 00009c00           SkInsAni
    3326 00009c00     0960          rets
    3327                    
    3328                    **************************************************************************
    3329                    *                                                                        *
    3330                    * kill_all_animations                                                    *
    3331                    *                                                                        *
    3332                    **************************************************************************
    3333 00009c10           kill_all_animations
    3334 00009c10     098f          mmtm    sp,a0
         00009c20     8000  
    3335 00009c30     07a0  kal_1   move    @ANIOBJS,a0,L
         00009c40 00000480+ 
    3336 00009c60     ca04          jrz     kal_9
    3337 00009c70     0d5f          calla   PULLANIM
         00009c80 00009f20' 
    3338 00009ca0     c0f8          jruc    kal_1
    3339 00009cb0     09af  kal_9   mmfm    sp,a0
         00009cc0     0001  
    3340 00009cd0     0960          rets
    3341                    
    3342                    **************************************************************************
    3343                    * PULL_ANIM
    3344                    * A8 = OBJ to be pulled from ANIOBJS
    3345                    * NOTE, CURRENTLY DOESN'T PULL ALL OF MULTI-PARTER IF HEAD
    3346 00009ce0           PULL_ANIM:
    3347 00009ce0                   PUSH    A0
    3348 00009cf0     4d00          move    A8,A0
    3349 00009d00     0d3f          callr   PULLANIM
         00009d10     0020  
    3350 00009d20                   PULLQ   A0
    3351 00009d30     0960          rets
    3352                    
    3353                    **************************************************************************
    3354                    *                                                                        *
    3355                    * PULL_ANIM_ALL - PULL OBJECT FROM ANIOBJS ALONG WITH ALL OF ITS         *
    3356                    *               PARTS.                                                   *
    3357                    * A8 = PTR TO HEAD OBJECT OF MULTI-PARTER                                *
    3358                    *                                                                        *
    3359                    **************************************************************************
    3360 00009d40           PULL_ANIM_ALL
    3361 00009d40                   PUSH    A1
    3362 00009d50     5621          CLR     A1
    3363 00009d60     0d3f          CALLR   PULL_ANIM_MULTI
         00009d70     0002  
    3364 00009d80                   PULLQ   A1
    3365 00009d90     0960          RETS
    3366                    
    3367                    **************************************************************************
    3368                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   74

    3369                    * PULL_ANIM_MULTI - PULL GIVEN NUMBER OF OBJECTS OF A MULTI-PARTER       *
    3370                    *                       STARTING WITH THE GIVEN OBJECT.                  *
    3371                    *                       THE NOPARTANI FLAG OF EACH OBJECT WILL           *
    3372                    *                       BE CLEARED AT THIS POINT.                        *
    3373                    * A1 = # OF OBJECTS TO PULL (IF A1 IS 0 PULL ALL FROM THIS POINT)        *
    3374                    * A8 = PTR TO PART OF MULTI-PARTER                                       *
    3375                    * RETURNS                                                                *
    3376                    *       A1 = DECREMENTED TO REFLECT NUMBER OF PARTS PULLED               *
    3377                    *                                                                        *
    3378                    **************************************************************************
    3379 00009da0           PULL_ANIM_MULTI
    3380 00009da0                   PUSH    A0
    3381 00009db0     4d00          MOVE    A8,A0                   ;PULL THE FIRST OBJECT
    3382 00009dc0           PAM_LP
    3383                    ****    MOVB    *A0(OFLAGS+B_DEAD-7),A14        ;IS THIS OBJECT DEAD?
    3384                    ****    JRN     PAM_SKIP_NOPART                 ;BR = YES, DO NOT FOOL AROUND
    3385 00009dc0     ae0e          MOVB    *A0(OFLAGS+B_ANIM-7),A14        ;IS HE ON ANIOBJS?
         00009dd0     0427  
    3386 00009de0     cf02          JRNN    PAM_SKIP                ;BR = NO
    3387 00009df0     0d3f          CALLR   PULLANIM
         00009e00     0011  
    3388 00009e10           PAM_SKIP
    3389                    ****    MOVB    *A0(OFLAGS2+B_DEAD-7),A14       ;IS THIS OBJECT DEAD?
    3390                    ****    JRN     PAM_SKIP_NOPART                 ;BR = YES, DO NOT FOOL AROUND
    3391 00009e10                   ANDNIM  M_NOPARTANI,*A0(OFLAGS),W       ;REVOKE HIS INDEPENDENCE
    3392 00009e80           PAM_SKIP_NOPART
    3393 00009e80     1421          DEC     A1                      ;ARE WE FINISHED?
    3394 00009e90     ca03          JRZ     PAM_X                   ;BR = YES
    3395 00009ea0     b600          MOVE    *A0(OPARTS),A0,L        ;GET THE NEXT OBJECT TO PULL
         00009eb0     00c0  
    3396 00009ec0     cbef          JRNZ    PAM_LP                  ;IF THERE ARE NO MORE, EXIT
    3397 00009ed0           PAM_X
    3398 00009ed0                   PULLQ   A0
    3399 00009ee0     0960          RETS
    3400                    
    3401                    **************************************************************************
    3402                    * PULLANIM
    3403                    * A0 = OBJ to be pulled from ANIOBJS
    3404                    ;A12 if IN_ANIM, A12 must be pointing to ANIM FUNC QUEUE
    3405 00009ef0           CKPULLANIM      ;PULL FROM ANIM IF NECESSARY
    3406 00009ef0     ae0e          movb    *A0(OFLAGS+B_ANIM-7),A14
         00009f00     0427  
    3407 00009f10     cf2a          jrnn    SkPullAnim
    3408 00009f20           PULLANIM:
    3409 00009f20                   PUSH    A2
    3410                            .IF     DEBUG
    3411                    ;       callr   CkAnim
    3412                            .ENDIF
    3413                    
    3414                            ;**** MARK OBJ AS BEING OFF ANIM LIST ****
    3415 00009f30     b402          move    *A0(OFLAGS),A2,W
         00009f40     0420  
    3416 00009f50     1e22          btst    B_ANIM,A2
    3417 00009f60                   LOCKON  Z
    3418 00009fb0     0b82          andni   M_ANIM,A2
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   75

         00009fc0 00004000  
    3419 00009fe0     b040          move    A2,*A0(OFLAGS),W
         00009ff0     0420  
    3420                    
    3421 0000a000     0d5f          calla   PULLANIMFUNC    ;stop any queued anim func
         0000a010 00000000! 
    3422                    
    3423 0000a030     07ae          MOVE    @ANIOBJS,A14,L
         0000a040 00000480+ 
    3424 0000a060     480e          cmp     A0,A14
    3425 0000a070     cb06          jrne    PullLp
    3426                            ;*** PULLING FIRST OBJ ***
    3427 0000a080     b60e          move    *A0(ANIMNXT),A14,L
         0000a090     0300  
    3428 0000a0a0     078e          MOVE    A14,@ANIOBJS,L
         0000a0b0 00000480+ 
    3429 0000a0d0     c00d          jruc    NoPull
    3430                    
    3431 0000a0e0           PullLp:
    3432 0000a0e0     4dc2          MOVE    A14,A2                  ;PTR TO PREVIOUS IN A2
    3433 0000a0f0     b64e          MOVE    *A2(ANIMNXT),A14,L      ;PTR TO NEXT IN A14
         0000a100     0300  
    3434 0000a110                   LOCKON  Z
    3435 0000a160     49c0          CMP     A14,A0                  ;IS THIS THE GUY?
    3436 0000a170     cbf6          JRNE    PullLp
    3437 0000a180     ba02          MOVE    *A0(ANIMNXT),*A2(ANIMNXT),L     ;LINK AROUND THIS OBJECT
         0000a190     0300  
         0000a1a0     0300  
    3438                    
    3439 0000a1b0           NoPull:
    3440                    
    3441                            .IF     DEBUG
    3442                            callr   CkAnim
    3443                            .ENDIF
    3444 0000a1b0                   PULLQ   A2
    3445 0000a1c0           SkPullAnim
    3446 0000a1c0     0960          RETS
    3447                    
    3448                    **************************************************************************
    3449                    * CkAnim
    3450                    * Walk ANIOBJS list, hang if anything is wrong
    3451                            .IF DEBUG
    3452                    CkAnim:
    3453                            mmtm    SP,A0,A2
    3454                            move    @ANIOBJS,A0,L
    3455                            jrz     AniCkLpX
    3456                    AniCkLp:
    3457                            move    *A0(OFLAGS),A2,W
    3458                            btst    B_ANIM,A2
    3459                            LOCKON  Z
    3460                            move    *A0(OCTRL),A2,W
    3461                            btst    B_INUSE,A2
    3462                            LOCKON  Z
    3463                    
    3464                    ;       callr   IsAnObj
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   76

    3465                    
    3466                            move    *A0(ANIMNXT),A0,L
    3467                            jrnz    AniCkLp
    3468                    AniCkLpX:
    3469                            mmfm    SP,A0,A2
    3470                            rets
    3471                            .ENDIF
    3472                    
    3473                    **************************************************************************
    3474                    * OnAnim
    3475                    * hang if A0 is on ANIOBJS LIST
    3476                            .IF DEBUG
    3477                    OnAnim:
    3478                            move    @ANIOBJS,A14,L
    3479                            jrz     AniOnLpX
    3480                    AniOnLp:
    3481                            cmp     A0,A14
    3482                            LOCKON  Z
    3483                            move    *A14(ANIMNXT),A14,L
    3484                            jrnz    AniOnLp
    3485                    AniOnLpX:
    3486                            rets
    3487                            .ENDIF
    3488                    
    3489                    **************************************************************************
    3490                    *                                                                        *
    3491                    * GETAFARG_WORD - GET A WORD ARGUMENT FOR AFUNC, IT IS PULLED FROM THE   *
    3492                    *               ANIM SCRIPT.                                             *
    3493                    * A8 = PTR TO OBJECT ANIMATING                                           *
    3494                    * *A8(ANIMARG),L = PTR TO ARGUMENT TO BE PULLED                          *
    3495                    * RETURNS                                                                *
    3496                    *       A0 = ARGUMENT                                                    *
    3497                    *       N & Z = SET TO REFLECT ARGUMENT                                  *
    3498                    *       *A8(ANIMARG),L = POINTING TO NEXT                                *
    3499                    *                                                                        *
    3500                    **************************************************************************
    3501 0000a1d0           GETAFARG_WORD
    3502 0000a1d0     b70e          MOVE    *A8(ANIMARG),A14,L
         0000a1e0     03e0  
    3503 0000a1f0     95c0          MOVE    *A14+,A0,W
    3504 0000a200     b3c8          MOVE    A14,*A8(ANIMARG),L
         0000a210     03e0  
    3505 0000a220     0960          RETS
    3506                    
    3507                    **************************************************************************
    3508                    *                                                                        *
    3509                    * GETAFARG_LONG - GET A LONG ARGUMENT FOR AFUNC, IT IS PULLED FROM THE   *
    3510                    *               ANIM SCRIPT.                                             *
    3511                    * A8 = PTR TO OBJECT ANIMATING                                           *
    3512                    * *A8(ANIMARG),L = PTR TO ARGUMENT TO BE PULLED                          *
    3513                    * RETURNS                                                                *
    3514                    *       A0 = ARGUMENT                                                    *
    3515                    *       N & Z = SET TO REFLECT ARGUMENT                                  *
    3516                    *       *A8(ANIMARG),L = POINTING TO NEXT                                *
    3517                    *                                                                        *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   77

    3518                    **************************************************************************
    3519 0000a230           GETAFARG_LONG
    3520 0000a230     b70e          MOVE    *A8(ANIMARG),A14,L
         0000a240     03e0  
    3521 0000a250     97c0          MOVE    *A14+,A0,L
    3522 0000a260     b3c8          MOVE    A14,*A8(ANIMARG),L
         0000a270     03e0  
    3523 0000a280     0960          RETS
    3524                    
    3525                    **************************************************************************
    3526                    * A_GOTO - Anim Func
    3527                    * takes two args from anim script
    3528                    * .long label to branch to.
    3529                    * .word %chance (RANDPER) to take branch
    3530 0000a290           A_GOTO
    3531 0000a290     0d3f          callr   GETAFARG_LONG   ;Arg in A0
         0000a2a0     fff8  
    3532 0000a2b0     4c01          move    A0,A1
    3533 0000a2c0     0d3f          callr   GETAFARG_WORD   ;Arg in A0
         0000a2d0     ffef  
    3534 0000a2e0     0d5f          calla   RANDPER
         0000a2f0 00000000! 
    3535 0000a310     c902          jrnc    A_GOTOX
    3536 0000a320     b228          move    A1,*A8(ANIMFRM),L
         0000a330     0320  
    3537 0000a340           A_GOTOX
    3538 0000a340     0960          rets
    3539                    
    3540                    
    3541                    **************************************************************************
    3542                    *                                                                        *
    3543                    * A_ANIMGO - ANIM FUNC TO GO TO NEW ANIM SCRIPT/FRAME                    *
    3544                    * A8 = PTR TO OBJECT                                                     *
    3545                    *                                                                        *
    3546                    **************************************************************************
    3547 0000a350           A_ANIMGO
    3548 0000a350     0d3f          CALLR   GETAFARG_LONG           ;GET NEW PTR OFF OF SCRIPT
         0000a360     ffec  
    3549 0000a370     b208          MOVE    A0,*A8(ANIMFRM),L
         0000a380     0320  
    3550 0000a390     b208          MOVE    A0,*A8(ANIMSCR),L
         0000a3a0     0340  
    3551 0000a3b0     0960          RETS
    3552                    
    3553                    **************************************************************************
    3554                    *                                                                        *
    3555                    * A_ANIMFRM - ANIM FUNC TO GO TO NEW ANIM FRAME                          *
    3556                    * A8 = PTR TO OBJECT                                                     *
    3557                    *                                                                        *
    3558                    **************************************************************************
    3559 0000a3c0           A_ANIMFRM
    3560 0000a3c0     0d3f          CALLR   GETAFARG_LONG           ;GET NEW PTR OFF OF SCRIPT
         0000a3d0     ffe5  
    3561 0000a3e0     b208          MOVE    A0,*A8(ANIMFRM),L
         0000a3f0     0320  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   78

    3562 0000a400     0960          RETS
    3563                    
    3564                    **************************************************************************
    3565                    *                                                                        *
    3566                    * A_ANIMSCR - ANIM FUNC TO SET A NEW LOOP BACK PTR FOR AN ANIMATION      *
    3567                    *               SCRIPT.                                                  *
    3568                    * A8 = PTR TO OBJECT                                                     *
    3569                    *                                                                        *
    3570                    **************************************************************************
    3571 0000a410           A_ANIMSCR
    3572 0000a410     0d3f          CALLR   GETAFARG_LONG           ;GET NEW PTR OFF OF SCRIPT
         0000a420     ffe0  
    3573 0000a430     b208          MOVE    A0,*A8(ANIMSCR),L
         0000a440     0340  
    3574 0000a450     0960          RETS
    3575                    
    3576                    **************************************************************************
    3577                    *                                                                        *
    3578                    * A_CHANGE_OID - ANIM FUNC TO STUFF A NEW OID INTO AN OBJECT             *
    3579                    * A8 = PTR TO OBJECT                                                     *
    3580                    * AARG+,W = NEW OID TO STUFF                                             *
    3581                    *                                                                        *
    3582                    **************************************************************************
    3583 0000a460           A_CHANGE_OID
    3584 0000a460     0d5f          CALLA   GETAFARG_WORD
         0000a470 0000a1d0' 
    3585 0000a490     4c01          MOVE    A0,A1
    3586 0000a4a0     c000          JRUC    CHANGE_OID
         0000a4b0     0149  
    3587                    
    3588                    **************************************************************************
    3589                    *                                                                        *
    3590                    * CREATE_OBJ - CREATE AN OBJECT AND STUFF IT, LEAVE IT UNINSERTED.       *
    3591                    *               USES THE "NEW" (11/15/90) INITIALIZATION TABLE.          *
    3592                    * A5 = PTR TO INIT TABLE                                                 *
    3593                    * RETURNS                                                                *
    3594                    *        Z = FAILURE TO CREATE EITHER OBJECT OR PALETTE.                 *
    3595                    *               A0 = 0                                                   *
    3596                    *       NZ = O.K.                                                        *
    3597                    *               A0 = POINTER TO OBJECT                                   *
    3598                    *               A5 = NEXT WORD AFTER INITIALIZATION                      *
    3599                    *                                                                        *
    3600                    **************************************************************************
    3601 0000a4c0           CREATE_OBJ
    3602 0000a4c0     0d3f          CALLR   GETOBJ
         0000a4d0     fb4e  
    3603 0000a4e0     ca06          JRZ     CO_X                    ;OBJECT BLOCK FAILURE
    3604 0000a4f0     0d3f          CALLR   INIT_OBJ
         0000a500     0005  
    3605 0000a510     cb03          JRNZ    CO_X
    3606 0000a520     0d3f          CALLR   FREEOBJ                 ;DO THIS ON MASTER PALETTE FAILURE
         0000a530     fc64  
    3607 0000a540     5600          CLR     A0                      ;SET THE Z FLAG
    3608 0000a550           CO_X:
    3609 0000a550     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   79

    3610                    **************************************************************************
    3611                    *                                                                        *
    3612                    * INIT_OBJ - INITIALIZE AN OBJECT BLOCK USING AN INITIALIZATION TABLE.   *
    3613                    * A0 = OBJECT BLOCK TO INITIALIZE                                        *
    3614                    * A5 = PTR TO "NEW" INITIALIZATION TABLE                                 *
    3615                    * A8 - A11 = MUST BE PASSED TO CREATE FUNC IF CALLED.                    *
    3616                    * RETURNS:                                                               *
    3617                    *        Z = PALETTE ALLOCATE FAILURE, OBJECT NOT STUFFED                *
    3618                    *       NZ = ALL IS WELL                                                 *
    3619                    * A5 = POINTING TO NEXT WORD AFTER INITIALIZATION TABLE                  *
    3620                    *                                                                        *
    3621                    *                INITIALIZATION TABLE                                    *
    3622                    *                --------------------                                    *
    3623                    *       .LONG   OIMG,OCVECT                                              *
    3624                    *       .WORD   OID,OCTRL,OFLAGS,OZOFF                                   *
    3625                    *       .LONG   CFUNC                                                    *
    3626                    *                                                                        *
    3627                    **************************************************************************
    3628 0000a560           INIT_OBJ
    3629 0000a560                   PUSH    A1
    3630 0000a570     099f          MMTM    SP,B0,B1,B2,B3
         0000a580     f000  
    3631                    
    3632 0000a590     96a1          MOVE    *A5+,A1,L
    3633 0000a5a0     0d3f          CALLR   FPSTFOBJ0
         0000a5b0     fc8a  
    3634 0000a5c0     ca24          JRZ     IO_X
    3635                    
    3636 0000a5d0     4ea0          MOVE    A5,B0
    3637 0000a5e0     4e01          move    A0,B1
    3638 0000a5f0     9612          move    *B0+,B2,L               ;Load OCVECT
    3639 0000a600     b251          move    B2,*B1(OCVECT),L
         0000a610     0080  
    3640 0000a620     9412          move    *B0+,B2,W               ;Load OID
    3641 0000a630     b051          move    B2,*B1(OID),W
         0000a640     0430  
    3642                    
    3643 0000a650     9412          move    *B0+,B2,W               ;Load OCTRL
    3644 0000a660     9413          MOVE    *B0+,B3,W               ;Load OFLAGS
    3645 0000a670     b071          MOVE    B3,*B1(OFLAGS),W
         0000a680     0420  
    3646 0000a690     1f72          btst    B_FLIPH,B2
    3647 0000a6a0     ca0a          jrz     IO_SKIPFLIP
    3648 0000a6b0           IO_FLIP
    3649 0000a6b0     098f          MMTM    SP,A4,A8
         0000a6c0     0880  
    3650 0000a6d0     4e54          move    B2,A4
    3651 0000a6e0     4c08          move    A0,A8
    3652                            ;A1 still set from above
    3653 0000a6f0     0d5f          calla   ANI
         0000a700 00000000! 
    3654 0000a720     09af          MMFM    SP,A4,A8
         0000a730     0110  
    3655 0000a740     c005          jruc    IO_FLAGSOK
    3656 0000a750           IO_SKIPFLIP
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   80

    3657 0000a750     b433          MOVE    *B1(OCTRL),B3,W
         0000a760     01f0  
    3658 0000a770     5453          OR      B2,B3
    3659 0000a780     b071          move    B3,*B1(OCTRL),W
         0000a790     01f0  
    3660 0000a7a0           IO_FLAGSOK
    3661 0000a7a0     9412          MOVE    *B0+,B2,W               ;Load OZOFF
    3662                    
    3663 0000a7b0     ac51          MOVB    B2,*B1(OZOFF)
         0000a7c0     03c8  
    3664                    
    3665 0000a7d0     9612          MOVE    *B0+,B2,L               ;GET THE CFUNC
    3666 0000a7e0     ca01          JRZ     IO_NOCFUNC
    3667 0000a7f0     0932          CALL    B2                      ;CALL IT
    3668 0000a800           IO_NOCFUNC
    3669 0000a800     4e15          MOVE    B0,A5
    3670 0000a810           IO_X
    3671 0000a810     09bf          MMFM    SP,B0,B1,B2,B3
         0000a820     000f  
    3672 0000a830                   PULL    A1
    3673 0000a850     0960          RETS
    3674                    
    3675                    **************************************************************************
    3676                    * GET_SUPP
    3677                    * Returns ptr to supplemental list header
    3678                    *
    3679                    * A8 = obj
    3680                    * RETURNS A0 = supp list header - OSLINK (Z set if not on any list)
    3681 0000a860           GET_SUPP:
    3682 0000a860     4d00          move    A8,A0
    3683 0000a870     0d3f          callr   GETSUPP
         0000a880     0002  
    3684 0000a890     4dc0          move    A14,A0
    3685 0000a8a0     0960          rets
    3686                    
    3687                    **************************************************************************
    3688                    * GETSUPP
    3689                    * GETSUPP_FROM_OID
    3690                    * Returns ptr to supplemental list header
    3691                    *
    3692                    * A0 = obj
    3693                    * A14 = OID FOR GETSUPP_FROM_OID
    3694                    * RETURNS A14 = supp list header - OSLINK (Z set if not on any list)
    3695 0000a8b0           GETSUPP
    3696 0000a8b0     b40e          move    *A0(OID),A14,W
         0000a8c0     0430  
    3697 0000a8d0           GETSUPP_FROM_OID
    3698 0000a8d0     2eae          srl     SR_SUPP,A14
    3699 0000a8e0     ca04          jrz     NoSupp
    3700 0000a8f0     24ae          sll     5,A14                   ;convert to offset, multiple of 020H
    3701 0000a900     0b2e          addi    SUPPLSTS-OSLINK,A14
         0000a910 00000000+ 
    3702 0000a930           NoSupp
    3703 0000a930     0960          rets
    3704                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   81

    3705                    **************************************************************************
    3706                    * INSSUPP
    3707                    * Inserts object onto a supplemental list
    3708                    * List is selected by the SUPP field of the OID
    3709                    *
    3710                    * A0 = OBJ to insert
    3711                    * RETURNS nothing
    3712 0000a940           INSSUPP:
    3713 0000a940     0d3f          callr   GETSUPP
         0000a950     fff5  
    3714 0000a960     ca05          jrz     SkInsSupp
    3715                    
    3716                            .IF DEBUG
    3717                            ;***** CHECK IF OBJECT IS ALREADY ON SUPPLEMENTAL LIST ******
    3718                            PUSH    A14
    3719                    CkSupp:
    3720                            cmp     A14,A0
    3721                            jreq    $
    3722                            move    *A14(OSLINK),A14,L
    3723                            jrnz    CkSupp
    3724                            PULLQ   A14
    3725                            .ENDIF
    3726                    
    3727 0000a970     bbc0          move    *A14(OSLINK),*A0(OSLINK),L
         0000a980     0040  
         0000a990     0040  
    3728 0000a9a0     b20e          move    A0,*A14(OSLINK),L
         0000a9b0     0040  
    3729 0000a9c0           SkInsSupp
    3730 0000a9c0     0960          rets
    3731                    
    3732                    
    3733                    **************************************************************************
    3734                    * INSERT_SUPP
    3735                    * Inserts object onto a supplemental list
    3736                    * List is selected by the SUPP field of the OID
    3737                    *
    3738                    * A8 = OBJ to insert
    3739 0000a9d0           INSERT_SUPP:
    3740 0000a9d0                   PUSH    A0
    3741 0000a9e0     4d00          move    A8,A0
    3742 0000a9f0     0d3f          callr   INSSUPP
         0000aa00     fff3  
    3743 0000aa10                   PULLQ   A0
    3744 0000aa20     0960          RETS
    3745                    
    3746                    
    3747                    **************************************************************************
    3748                    * PULLSUPP
    3749                    * pulls object from a supplemental list
    3750                    * List is selected by the SUPP field of the OID
    3751                    *
    3752                    * A0 = OBJ to pull
    3753                    * RETURNS nothing
    3754 0000aa30           PULLSUPP:
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   82

    3755 0000aa30                   PUSH    A1
    3756 0000aa40     0d3f          callr   GETSUPP
         0000aa50     ffe5  
    3757 0000aa60     ca10          jrz     SkPullSupp
    3758                    
    3759 0000aa70           PulSupLp
    3760 0000aa70     4dc1          move    A14,A1
    3761 0000aa80     b7ce          move    *A14(OSLINK),A14,L
         0000aa90     0040  
    3762 0000aaa0                   LOCKON  Z
    3763 0000aaf0     49c0          cmp     A14,A0
    3764 0000ab00     cbf6          jrne    PulSupLp
    3765                    
    3766 0000ab10     ba01          move    *A0(OSLINK),*A1(OSLINK),L       ;link around A0
         0000ab20     0040  
         0000ab30     0040  
    3767 0000ab40     5621          clr     A1
    3768 0000ab50     b220          move    A1,*A0(OSLINK),L
         0000ab60     0040  
    3769 0000ab70           SkPullSupp
    3770 0000ab70                   PULLQ   A1
    3771 0000ab80     0960          rets
    3772                    
    3773                    **************************************************************************
    3774                    * PULL_SUPP
    3775                    * pulls object from a supplemental list
    3776                    * List is selected by the SUPP field of the OID
    3777                    *
    3778                    * A8 = OBJ to insert
    3779 0000ab90           PULL_SUPP:
    3780 0000ab90                   PUSH    A0
    3781 0000aba0     4d00          move    A8,A0
    3782 0000abb0     0d3f          callr   PULLSUPP
         0000abc0     ffe6  
    3783 0000abd0                   PULLQ   A0
    3784 0000abe0     0960          RETS
    3785                    
    3786                    
    3787                    **************************************************************************
    3788                    * CNTSUPP
    3789                    * COUNT THE NUMBER OF OBJECTS ON GIVEN SUPPLEMENTAL LIST.
    3790                    *
    3791                    * A14 = SUPPLEMENTAL LIST HEADER - OSLINK
    3792                    * RETURNS A0 = OBJECT CNT (SETS THE Z BIT)
    3793                    *         A14 = TRASHED
    3794 0000abf0           CNTSUPP:
    3795 0000abf0     5600          clr     A0
    3796 0000ac00           CntSupLp
    3797 0000ac00     b7ce          move    *A14(OSLINK),A14,L
         0000ac10     0040  
    3798 0000ac20     ca09          jrz     CNTSUPPX
    3799 0000ac30     1020          inc     A0
    3800 0000ac40     0b40          cmpi    NOBJ,A0
         0000ac50     fe6f  
    3801 0000ac60                   LOCKON  GE              ;WE'VE MAXED, SOMETHING IS WRONG
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   83

    3802 0000acb0     c0f4          jruc    CntSupLp
    3803 0000acc0           CNTSUPPX
    3804 0000acc0     4c00          move    A0,A0
    3805 0000acd0     0960          rets
    3806                    
    3807                    
    3808                    **************************************************************************
    3809                    *                                                                        *
    3810                    * OBJ_OFF - TURN AN OBJECT "OFF" I.E. SET DMA OUTPUT = 0                 *
    3811                    * A8 = PTR TO OBJECT BLOCK                                               *
    3812                    *                                                                        *
    3813                    **************************************************************************
    3814 0000ace0           OBJ_OFF:
    3815 0000ace0     b50e          MOVE    *A8(OCTRL),A14,W
         0000acf0     01f0  
    3816 0000ad00     2f8e          SRL     4,A14
    3817 0000ad10     248e          SLL     4,A14
    3818 0000ad20     b1c8          MOVE    A14,*A8(OCTRL),W
         0000ad30     01f0  
    3819 0000ad40           OBJ_OFF_X
    3820 0000ad40     0960          RETS
    3821                    
    3822                    **************************************************************************
    3823                    *                                                                        *
    3824                    * OBJOFF - TURN AN OBJECT "OFF" I.E. SET DMA OUTPUT = 0                  *
    3825                    *        A0 VERSION                                                      *
    3826                    * A0 = PTR TO OBJECT                                                     *
    3827                    *                                                                        *
    3828                    **************************************************************************
    3829 0000ad50           OBJOFF
    3830 0000ad50                   PUSH    A8
    3831 0000ad60     4c08          MOVE    A0,A8
    3832 0000ad70     0d3f          CALLR   OBJ_OFF
         0000ad80     fff5  
    3833 0000ad90                   PULLQ   A8
    3834 0000ada0     0960          RETS
    3835                    
    3836                    **************************************************************************
    3837                    *                                                                        *
    3838                    * OBJ_ON - TURN AN OBJECT "ON" I.E. SET DMA OUTPUT TO WRITE <> 0         *
    3839                    * A8 = PTR TO OBJECT BLOCK                                               *
    3840                    *                                                                        *
    3841                    **************************************************************************
    3842 0000adb0           OBJ_ON:
    3843 0000adb0     b50e          MOVE    *A8(OCTRL),A14,W
         0000adc0     01f0  
    3844 0000add0     2f8e          SRL     4,A14
    3845 0000ade0     248e          SLL     4,A14
    3846 0000adf0     104e          ADDK    DMAWNZ&0FH,A14
    3847 0000ae00     b1c8          MOVE    A14,*A8(OCTRL),W
         0000ae10     01f0  
    3848 0000ae20           OON_X
    3849 0000ae20     0960          RETS
    3850                    
    3851                    **************************************************************************
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   84

    3852                    *                                                                        *
    3853                    * OBJON - TURN AN OBJECT "ON" I.E. SET DMA OUTPUT TO WRITE <> 0          *
    3854                    *        A0 VERSION                                                      *
    3855                    * A0 = PTR TO OBJECT                                                     *
    3856                    *                                                                        *
    3857                    **************************************************************************
    3858 0000ae30           OBJON
    3859 0000ae30                   PUSH    A8
    3860 0000ae40     4c08          MOVE    A0,A8
    3861 0000ae50     0d3f          CALLR   OBJ_ON
         0000ae60     fff4  
    3862 0000ae70                   PULLQ   A8
    3863 0000ae80     0960          RETS
    3864                    
    3865                    **************************************************************************
    3866                    *                                                                        *
    3867                    * OBJ_CONST - Turn an object to Constant on non-zero pixels.             *
    3868                    * A8 = Ptr to object                                                     *
    3869                    *                                                                        *
    3870                    **************************************************************************
    3871 0000ae90           OBJ_CONST
    3872 0000ae90     b50e          MOVE    *A8(OCTRL),A14,W
         0000aea0     01f0  
    3873 0000aeb0     2f8e          SRL     4,A14
    3874 0000aec0     248e          SLL     4,A14
    3875 0000aed0     110e          addk    DMACNZ&0Fh,A14
    3876 0000aee0     b1c8          MOVE    A14,*A8(OCTRL),W
         0000aef0     01f0  
    3877 0000af00     0960          RETS
    3878                    
    3879 0000af10           OBJ_CONST_ALL
    3880 0000af10     b50e          MOVE    *A8(OCTRL),A14,W
         0000af20     01f0  
    3881 0000af30     2f8e          SRL     4,A14
    3882 0000af40     248e          SLL     4,A14
    3883 0000af50     118e          addk    DMACAL&0FH,A14
    3884 0000af60     b1c8          MOVE    A14,*A8(OCTRL),W
         0000af70     01f0  
    3885 0000af80     0960          RETS
    3886                    
    3887                    **************************************************************************
    3888                    *                                                                        *
    3889                    *       OBJCONST                                                         *
    3890                    *                                                                        *
    3891                    *       Turn an object to Constant on non-zero pixels.                   *
    3892                    *       A0 Version.                                                      *
    3893                    *                                                                        *
    3894                    *       A0 = Ptr to object                                               *
    3895                    *                                                                        *
    3896                    **************************************************************************
    3897 0000af90           OBJCONST
    3898 0000af90                   PUSH    A8
    3899 0000afa0     4c08          MOVE    A0,A8
    3900 0000afb0     0d3f          CALLR   OBJ_CONST
         0000afc0     ffec  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   85

    3901 0000afd0                   PULLQ   A8
    3902 0000afe0     0960          RETS
    3903                    
    3904                    **************************************************************************
    3905                    *                                                                        *
    3906                    * OBJ_OFF_MULTI - TURN ALL OF THE PARTS OF A MULTI-PARTER "OFF" FROM     *
    3907                    *               THIS OBJECT ON DOWN.                                     *
    3908                    * A8 = PTR TO FIRST PART TO TURN "OFF"                                   *
    3909                    *                                                                        *
    3910                    **************************************************************************
    3911 0000aff0           OBJ_OFF_MULTI
    3912 0000aff0                   PUSH    A8
    3913 0000b000           OOFFM_LP
    3914 0000b000     0d3f          CALLR   OBJ_OFF
         0000b010     ffcc  
    3915 0000b020     b708          MOVE    *A8(OPARTS),A8,L
         0000b030     00c0  
    3916 0000b040     cbfb          JRNZ    OOFFM_LP
    3917 0000b050                   PULLQ   A8
    3918 0000b060     0960          RETS
    3919                    
    3920                    **************************************************************************
    3921                    *                                                                        *
    3922                    * OBJ_ON_MULTI - TURN ALL OF THE PARTS OF A MULTI-PARTER "ON" FROM       *
    3923                    *               THIS OBJECT ON DOWN.                                     *
    3924                    * A8 = PTR TO FIRST PART TO TURN "ON"                                    *
    3925                    *                                                                        *
    3926                    **************************************************************************
    3927 0000b070           OBJ_ON_MULTI
    3928 0000b070                   PUSH    A8
    3929 0000b080           OONM_LP
    3930 0000b080     0d3f          CALLR   OBJ_ON
         0000b090     ffd1  
    3931 0000b0a0     b708          MOVE    *A8(OPARTS),A8,L
         0000b0b0     00c0  
    3932 0000b0c0     cbfb          JRNZ    OONM_LP
    3933 0000b0d0                   PULLQ   A8
    3934 0000b0e0     0960          RETS
    3935                    
    3936                    **************************************************************************
    3937                    *                                                                        *
    3938                    * IS_OBJ_OFF - DETERMINE IF GIVEN OBJECT IS "TURNED OFF"                 *
    3939                    * A8 = PTR TO OBJECT                                                     *
    3940                    * RETURNS                                                                *
    3941                    *        Z = OBJECT IS OFF                                               *
    3942                    *       NZ = OBJECT IS ON                                                *
    3943                    * NOTE: TRASHES A14                                                      *
    3944                    *                                                                        *
    3945                    **************************************************************************
    3946 0000b0f0           IS_OBJ_OFF
    3947 0000b0f0     b50e          MOVE    *A8(OCTRL),A14,W
         0000b100     01f0  
    3948 0000b110     278e          SLL     28,A14
    3949 0000b120     0960          RETS
    3950                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   86

    3951                    **************************************************************************
    3952                    *                                                                        *
    3953                    * OBJECTS_ON - TURN A CLASS OF OBJECTS "ON"                              *
    3954                    * A0 = OID OF OBJECTS TO TURN ON                                         *
    3955                    * A1 = MASK (0 BITS = DON'T CARE)                                        *
    3956                    * A4 = DMA WRITE FLAGS (LOW FOUR BITS) TO USE.                           *
    3957                    * NOTE: TRASHES A14                                                      *
    3958                    *                                                                        *
    3959                    **************************************************************************
    3960 0000b130           OBJECTS_ON:
    3961 0000b130     098f          MMTM    SP,A2,A3,A4
         0000b140     3800  
    3962 0000b150     09e3          MOVI    FGLIST,A3
         0000b160 00000000+ 
    3963 0000b180     b662          MOVE    *A3(P_LSTHD),A2,L               ;GET THE OBJECT LIST
         0000b190     0000  
    3964 0000b1a0     4843          CMP     A2,A3
    3965 0000b1b0     ca11          JREQ    OBJSON_X
    3966 0000b1c0     0500          SEXT    A0
    3967 0000b1d0     5020          AND     A1,A0                           ;FORM MATCH
    3968 0000b1e0     2784          SLL     28,A4
    3969 0000b1f0     2c84          SRL     28,A4                           ;ONLY CONCERNED WITH WRITES
    3970 0000b200           OBJSON_LP:
    3971 0000b200     b44e          MOVE    *A2(OID),A14,W
         0000b210     0430  
    3972 0000b220     502e          AND     A1,A14                          ;MASK OFF THE DON'T CARES
    3973 0000b230     480e          CMP     A0,A14
    3974 0000b240     cb05          JRNE    OBJSON_NXT                      ;BR = THIS IS NOT ONE OF THEM
    3975 0000b250                   ORM     A4,*A2(OCTRL),W                 ;ON WITH YOU
    3976 0000b2a0           OBJSON_NXT:
    3977 0000b2a0     8642          MOVE    *A2,A2,L
    3978 0000b2b0     4843          CMP     A2,A3
    3979 0000b2c0     cbf3          JRNE    OBJSON_LP                       ;BR = NOT FINISHED YET
    3980 0000b2d0           OBJSON_X:
    3981 0000b2d0     09af          MMFM    SP,A2,A3,A4
         0000b2e0     001c  
    3982 0000b2f0     0960          RETS
    3983                    
    3984                    **************************************************************************
    3985                    *                                                                        *
    3986                    * OBJECTS_OFF - TURN A CLASS OF OBJECTS "OFF"                            *
    3987                    * A0 = OID OF OBJECTS TO TURN OFF                                        *
    3988                    * A1 = MASK (0 BITS = DON'T CARE)                                        *
    3989                    * NOTE: TRASHES A14                                                      *
    3990                    *                                                                        *
    3991                    **************************************************************************
    3992 0000b300           OBJECTS_OFF:
    3993 0000b300     098f          MMTM    SP,A2,A3
         0000b310     3000  
    3994                    
    3995 0000b320     09e3          MOVI    FGLIST,A3
         0000b330 00000000+ 
    3996 0000b350     b662          MOVE    *A3(P_LSTHD),A2,L               ;GET THE OBJECT LIST
         0000b360     0000  
    3997 0000b370     4843          CMP     A2,A3
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   87

    3998 0000b380     ca10          JREQ    OOFF_X
    3999 0000b390     0500          SEXT    A0
    4000 0000b3a0     5020          AND     A1,A0                           ;FORM MATCH
    4001 0000b3b0           OOFF_LP:
    4002 0000b3b0     b44e          MOVE    *A2(OID),A14,W
         0000b3c0     0430  
    4003 0000b3d0     502e          AND     A1,A14                          ;MASK OFF THE DON'T CARES
    4004 0000b3e0     480e          CMP     A0,A14
    4005 0000b3f0     cb06          JRNE    OOFF_NXT                        ;BR = THIS IS NOT ONE OF THEM
    4006 0000b400     b44e          MOVE    *A2(OCTRL),A14,W
         0000b410     01f0  
    4007 0000b420     2f8e          SRL     4,A14
    4008 0000b430     248e          SLL     4,A14                           ;OFLAGS SAY OFF!
    4009 0000b440     b1c2          MOVE    A14,*A2(OCTRL),W
         0000b450     01f0  
    4010 0000b460           OOFF_NXT:
    4011 0000b460     8642          MOVE    *A2,A2,L
    4012 0000b470     4843          CMP     A2,A3
    4013 0000b480     cbf2          JRNE    OOFF_LP                         ;BR = NOT FINISHED YET
    4014 0000b490           OOFF_X:
    4015 0000b490     09af          MMFM    SP,A2,A3
         0000b4a0     000c  
    4016 0000b4b0     0960          RETS
    4017                    
    4018                    **************************************************************************
    4019                    *                                                                        *
    4020                    * COPY_OBJ - COPIES THE CONTENTS OF ONE OBJECT BLOCK TO THE OTHER.       *
    4021                    * A0 = PTR TO DESTINATION BLOCK                                          *
    4022                    * A8 = PTR TO SOURCE BLOCK                                               *
    4023                    * NOTE: TRASHES A14                                                      *
    4024                    *                                                                        *
    4025                    **************************************************************************
    4026 0000b4c0           COPY_OBJ:
    4027 0000b4c0     099f          MMTM    SP,B0,B2,B7
         0000b4d0     a100  
    4028                    
    4029 0000b4e0     4e02          MOVE    A0,B2
    4030 0000b4f0     4f00          MOVE    A8,B0
    4031 0000b500     0b12          ADDI    OZVEL,B2
         0000b510     00e0  
    4032 0000b520     0b10          ADDI    OZVEL,B0
         0000b530     00e0  
    4033 0000b540     09d7          MOVI    OBSIZ-OZVEL,B7
         0000b550     0710  
    4034                    
    4035                            .if XUNIT=1
    4036                            BLMOVE  1,1
    4037                            .else
    4038 0000b560     2f77          srl     5,b7
    4039 0000b570           _omove:
    4040 0000b570     9a12          move    *b0+,*b2+,L
    4041 0000b580     3c57          dsjs    b7,_omove
    4042                            .endif
    4043                    
    4044 0000b590     b40e          MOVE    *A0(OFLAGS),A14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   88

         0000b5a0     0420  
    4045 0000b5b0     0b8e          ANDNI   M_ANIM,A14              ;CLEAR ANY IRRELEVANT FLAGS HERE
         0000b5c0 00004000  
    4046 0000b5e0     b1c0          MOVE    A14,*A0(OFLAGS),W
         0000b5f0     0420  
    4047                    
    4048 0000b600     09bf          MMFM    SP,B0,B2,B7
         0000b610     0085  
    4049 0000b620     0960          RETS
    4050                    
    4051                    **************************************************************************
    4052                    *                                                                        *
    4053                    *       CREATE_COPY                                                      *
    4054                    *                                                                        *
    4055                    *       Create an exact copy of the given object.                        *
    4056                    *                                                                        *
    4057                    *       A8 = Ptr to object to copy                                       *
    4058                    *                                                                        *
    4059                    *       Returns:                                                         *
    4060                    *                Z = Failure allocating copy, A0 = 0                     *
    4061                    *               NZ = Copy created successfully, A0 = Ptr to copy         *
    4062                    *                                                                        *
    4063                    **************************************************************************
    4064 0000b630           CREATE_COPY
    4065 0000b630     0d3f          CALLR   GETOBJ
         0000b640     fa37  
    4066 0000b650     ca0a          JRZ     CC_X
    4067 0000b660     0d3f          CALLR   COPY_OBJ
         0000b670     ffe4  
    4068 0000b680                   PUSH    A5
    4069 0000b690     b405          MOVE    *A0(OPAL),A5,W
         0000b6a0     0280  
    4070 0000b6b0     0d5f          CALLA   INC_PALCNT
         0000b6c0 00000000! 
    4071 0000b6e0                   PULLQ   A5
    4072 0000b6f0     4c00          MOVE    A0,A0
    4073 0000b700           CC_X
    4074 0000b700     0960          RETS
    4075                    
    4076                    **************************************************************************
    4077                    *                                                                        *
    4078                    * OBJ_TO_PNT - PUT AN OBJECT DIRECTLY ON A POINT.                        *
    4079                    *               WILL ALSO ADJUST THE SLAVE OBJECTS HANGING               *
    4080                    *               OFF OF THIS OBJECT.                                      *
    4081                    * A3 = [Y,X] POINT                                                       *
    4082                    * A8 = PTR TO OBJECT                                                     *
    4083                    *                                                                        *
    4084                    **************************************************************************
    4085 0000b710           OBJ_TO_PNT:
    4086 0000b710                   PUSH    A1
    4087 0000b720     4c61          MOVE    A3,A1
    4088 0000b730     0d3f          CALLR   SET_ANIP
         0000b740     fca0  
    4089 0000b750                   PULLQ   A1
    4090 0000b760     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   89

    4091                    
    4092                    **************************************************************************
    4093                    *                                                                        *
    4094                    * OBJTOPNT - PUT AN OBJECT DIRECTLY ON A POINT (A0 VERSION)              *
    4095                    * A0 = PTR TO OBJECT                                                     *
    4096                    * A3 = [Y,X] POINT                                                       *
    4097                    *                                                                        *
    4098                    **************************************************************************
    4099 0000b770           OBJTOPNT:
    4100 0000b770                   PUSH    A1
    4101 0000b780     4c61          MOVE    A3,A1
    4102 0000b790     0d3f          CALLR   SETANIP
         0000b7a0     fc83  
    4103 0000b7b0                   PULLQ   A1
    4104 0000b7c0     0960          RETS
    4105                    
    4106                    **************************************************************************
    4107                    *                                                                        *
    4108                    * CLEAR_OPLINKS - ROUTINE TO CLEAR THE OPLINKS FOR ALL ACTIVE OBJECTS    *
    4109                    *               ON ALL PLANES.                                           *
    4110                    *                                                                        *
    4111                    **************************************************************************
    4112                    ;;;CLEAR_OPLINKS
    4113                    ;;;     PUSH    A7
    4114                    ;;;     MOVI    CLEAR_OPLINK,A7
    4115                    ;;;     CALLR   FGPLANE_LP
    4116                    ;;;     PULLQ   A7
    4117                    ;;;     RETS
    4118                    
    4119                    ;;;CLEAR_OPLINK
    4120                    ;;;     CLR     A14
    4121                    ;;;     MOVE    A14,*A8(OPLINK),L
    4122                    ;;;     RETS
    4123                    
    4124                    **************************************************************************
    4125                    *                                                                        *
    4126                    * STOPOBJS - ROUTINE TO CLEAR VELOCITIES OF ALL OBJECTS ON ALL PLANES.   *
    4127                    *                                                                        *
    4128                    **************************************************************************
    4129 0000b7d0           STOPOBJS
    4130 0000b7d0                   PUSH    A7
    4131 0000b7e0     09e7          MOVI    STOPOBJ,A7
         0000b7f0 0000b850' 
    4132 0000b810     0d3f          CALLR   FGPLANE_LP
         0000b820     0039  
    4133 0000b830                   PULLQ   A7
    4134 0000b840     0960          RETS
    4135                    
    4136                    **************************************************************************
    4137                    *                                                                        *
    4138                    * CLR_VEL - CLEAR ALL VELOCITIES OF OBJECT                               *
    4139                    * A8 = PTR TO OBJECT                                                     *
    4140                    *                                                                        *
    4141                    **************************************************************************
    4142 0000b850           CLR_VEL
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   90

    4143 0000b850           STOPOBJ
    4144 0000b850     57ce          CLR     A14
    4145 0000b860     b1c8          MOVE    A14,*A8(OYACCEL),W
         0000b870     02f0  
    4146 0000b880     b3c8          MOVE    A14,*A8(OXVEL),L
         0000b890     0100  
    4147 0000b8a0     b3c8          MOVE    A14,*A8(OYVEL),L
         0000b8b0     0120  
    4148 0000b8c0     b3c8          MOVE    A14,*A8(OZVEL),L
         0000b8d0     00e0  
    4149 0000b8e0     0960          RETS
    4150                    
    4151                    **************************************************************************
    4152                    *                                                                        *
    4153                    * CLRVEL - CLEAR VELOCITIES OF OBJECT IN A0                              *
    4154                    * A0 = PTR TO OBJECT                                                     *
    4155                    *                                                                        *
    4156                    **************************************************************************
    4157 0000b8f0           CLRVEL
    4158 0000b8f0                   PUSH    A8
    4159 0000b900     4c08          MOVE    A0,A8
    4160 0000b910     0d3f          CALLR   CLR_VEL
         0000b920     fff2  
    4161 0000b930                   PULLQ   A8
    4162 0000b940     0960          RETS
    4163                    
    4164                    **************************************************************************
    4165                    *                                                                        *
    4166                    * CHANGE_OID - ROUTINE TO CHANGE THE OID OF AN ACTIVE OBJECT.  THIS      *
    4167                    *               MUST BE USED TO HANDLE CORRECT SUPP LIST                 *
    4168                    *               SWITCHING.                                               *
    4169                    * A1 = NEW OID                                                           *
    4170                    * A8 = PTR TO OBJECT                                                     *
    4171                    *                                                                        *
    4172                    **************************************************************************
    4173 0000b950           CHANGE_OID
    4174 0000b950     0d3f          CALLR   PULL_SUPP               ;GET IT OFF ITS CURRENT LIST
         0000b960     ff22  
    4175 0000b970     b028          MOVE    A1,*A8(OID),W           ;SHOW US THE WAY
         0000b980     0430  
    4176 0000b990     c000          JRUC    INSERT_SUPP             ;AND PUT IT ON THE NEW LIST
         0000b9a0     ff02  
    4177                    
    4178                    
    4179                    **************************************************************************
    4180                    *                                                                        *
    4181                    * CHANGE_OID_MULTI - Change the OID of every object in a Multiparter     *
    4182                    *                       including and after the given object.            *
    4183                    * A1 = New OID                                                           *
    4184                    * A8 = Ptr to first part to change                                       *
    4185                    *                                                                        *
    4186                    **************************************************************************
    4187 0000b9b0           CHANGE_OID_MULTI
    4188 0000b9b0                   PUSH    A8
    4189 0000b9c0           COM_LP
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   91

    4190 0000b9c0     0d3f          CALLR   CHANGE_OID
         0000b9d0     fff7  
    4191 0000b9e0     b708          MOVE    *A8(OPARTS),A8,L
         0000b9f0     00c0  
    4192 0000ba00     cbfb          JRNZ    COM_LP
    4193 0000ba10                   PULLQ   A8
    4194 0000ba20     0960          RETS
    4195                    
    4196                    **************************************************************************
    4197                    *                                                                        *
    4198                    * CHANGEOID - ROUTINE TO CHANGE THE OID OF AN ACTIVE OBJECT.  THIS       *
    4199                    *               MUST BE USED TO HANDLE CORRECT SUPP LIST                 *
    4200                    *               SWITCHING.                                               *
    4201                    *               A0 VERSION.                                              *
    4202                    * A0 = PTR TO OBJECT                                                     *
    4203                    * A1 = NEW OID                                                           *
    4204                    *                                                                        *
    4205                    **************************************************************************
    4206 0000ba30           CHANGEOID
    4207 0000ba30     0d3f          CALLR   PULLSUPP                ;GET IT OFF ITS CURRENT LIST
         0000ba40     fefe  
    4208 0000ba50     b020          MOVE    A1,*A0(OID),W           ;SHOW US THE WAY
         0000ba60     0430  
    4209 0000ba70     c000          JRUC    INSSUPP                 ;AND PUT IT ON THE NEW LIST
         0000ba80     feeb  
    4210                    
    4211                    **************************************************************************
    4212                    *                                                                        *
    4213                    * CHANGE_OIDS - CHANGE ALL MATCHING OID'S ON EVERY PLANE TO A NEW ONE.   *
    4214                    * A0 = OID TO CHANGE                                                     *
    4215                    * A1 = NEW OID                                                           *
    4216                    *                                                                        *
    4217                    **************************************************************************
    4218 0000ba90           CHANGE_OIDS
    4219 0000ba90                   PUSH    A7
    4220 0000baa0     09e7          MOVI    CHANGE1OID,A7
         0000bab0 0000bb10' 
    4221 0000bad0     0d3f          CALLR   FGPLANE_LP
         0000bae0     000d  
    4222 0000baf0                   PULLQ   A7
    4223 0000bb00     0960          RETS
    4224                    
    4225 0000bb10           CHANGE1OID
    4226 0000bb10     b50e          MOVE    *A8(OID),A14,W
         0000bb20     0430  
    4227 0000bb30     480e          CMP     A0,A14
    4228 0000bb40     cb06          JRNE    CHNG1X                  ;THIS IS NOT ONE OF THEM
    4229 0000bb50     0d3f          CALLR   PULL_SUPP
         0000bb60     ff02  
    4230 0000bb70     b028          MOVE    A1,*A8(OID),W           ;STUFF THE NEW ONE
         0000bb80     0430  
    4231 0000bb90     0d3f          CALLR   INSERT_SUPP
         0000bba0     fee2  
    4232 0000bbb0           CHNG1X
    4233 0000bbb0     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   92

    4234                    
    4235                    **************************************************************************
    4236                    *                                                                        *
    4237                    * FGPLANE_LP - VERY GENERIC ROUTINE TO APPLY A FUNCTION TO EVERY         *
    4238                    *               OBJECT ON THE FOREGROUND PLANE.                          *
    4239                    * A7 = PTR TO FUNCTION                                                   *
    4240                    *                                                                        *
    4241                    **************************************************************************
    4242 0000bbc0           FGPLANE_LP
    4243 0000bbc0     098f          MMTM    SP,A8,A9
         0000bbd0     00c0  
    4244 0000bbe0     09e8          MOVI    FGLIST,A8
         0000bbf0 00000000+ 
    4245 0000bc10     4d09          MOVE    A8,A9
    4246 0000bc20     c001          JRUC    FGP_TST
    4247 0000bc30           FGP_LP
    4248 0000bc30     0927          CALL    A7
    4249 0000bc40           FGP_TST
    4250 0000bc40     8708          MOVE    *A8,A8,L
    4251 0000bc50     4909          CMP     A8,A9
    4252 0000bc60     cbfc          JRNZ    FGP_LP
    4253                    
    4254 0000bc70     09af          MMFM    SP,A8,A9
         0000bc80     0300  
    4255 0000bc90     0960          RETS
    4256                    
    4257                    **************************************************************************
    4258                    *                                                                        *
    4259                    * STORE_ZVAL - STORE THE GIVEN 32 BIT Z VALUE IN THE OBJECT AND ALL      *
    4260                    *               OF ITS PARTS. PARTS WILL HAVE ZVAL CHANGED BY OZOFF.     *
    4261                    * A1 = ZVAL                                                              *
    4262                    * A8 = OBJECT (HEAD IF MULTI-PARTER)                                     *
    4263                    *                                                                        *
    4264                    **************************************************************************
    4265 0000bca0           STORE_ZVALH
    4266                    ;alternate entry point to use OZOFF for head obj
    4267 0000bca0                   PUSH    A8
    4268 0000bcb0     c006          jruc    SZ_LP
    4269 0000bcc0           STORE_ZVAL
    4270 0000bcc0                   PUSH    A8
    4271 0000bcd0     b228          MOVE    A1,*A8(OZVAL),L         ;SET HEAD OBJECT, NO OZOFF USED
         0000bce0     0180  
    4272 0000bcf0     b708          MOVE    *A8(OPARTS),A8,L        ;MORE PARTS?
         0000bd00     00c0  
    4273 0000bd10     ca08          JRZ     SZ_X                    ;BR = NO
    4274 0000bd20           SZ_LP
    4275 0000bd20     af0e          MOVB    *A8(OZOFF),A14
         0000bd30     03c8  
    4276 0000bd40     402e          ADD     A1,A14
    4277 0000bd50     b3c8          MOVE    A14,*A8(OZVAL),L
         0000bd60     0180  
    4278 0000bd70     b708          MOVE    *A8(OPARTS),A8,L        ;IS THERE ANOTHER PART?
         0000bd80     00c0  
    4279 0000bd90     cbf8          JRNZ    SZ_LP                   ;BR = YES
    4280 0000bda0           SZ_X
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   93

    4281 0000bda0                   PULLQ   A8
    4282 0000bdb0     0960          RETS
    4283                    
    4284                    **************************************************************************
    4285                    *                                                                        *
    4286                    * STOREZVAL - STORE THE GIVEN 32 BIT Z VALUE IN THE OBJECT AND ALL       *
    4287                    *               OF ITS PARTS. ALL WILL HAVE ZVAL CHANGED BY OZOFF.       *
    4288                    *               A0 VERSION                                               *
    4289                    * A0 = OBJECT (HEAD IF MULTI-PARTER)                                     *
    4290                    * A1 = ZVAL                                                              *
    4291                    *                                                                        *
    4292                    **************************************************************************
    4293 0000bdc0           STOREZVAL
    4294 0000bdc0                   PUSH    A8
    4295 0000bdd0     4c08          MOVE    A0,A8
    4296 0000bde0     0d3f          CALLR   STORE_ZVALH
         0000bdf0     ffea  
    4297 0000be00                   PULLQ   A8
    4298 0000be10     0960          RETS
    4299                    
    4300                    **************************************************************************
    4301                    *                                                                        *
    4302                    * KILOBJ_ALL - KILL ALL OBJECTS OF THE GIVEN I.D.                        *
    4303                    * A0 = OID (16 BITS)                                                     *
    4304                    *                                                                        *
    4305                    **************************************************************************
    4306 0000be20           KILOBJ_ALL:
    4307 0000be20                   PUSH    A1
    4308 0000be30     5621          CLR     A1
    4309 0000be40     03e1          NOT     A1
    4310 0000be50     0d3f          CALLR   KILOBJ
         0000be60     0002  
    4311 0000be70                   PULLQ   A1
    4312 0000be80     0960          RETS
    4313                    
    4314                    **************************************************************************
    4315                    *                                                                        *
    4316                    * KILOBJ - KILL A CLASS OF OBJECTS ON ALL FOREGROUND PLANES              *
    4317                    * A0 = OID (16 BITS)                                                     *
    4318                    * A1 = MASK: MASK BITS OF ZERO ARE DONT CARES (16 BITS)                  *
    4319                    *                                                                        *
    4320                    **************************************************************************
    4321 0000be90           KILOBJ
    4322 0000be90     098f          MMTM    SP,A0,A2,A3,A8
         0000bea0     b080  
    4323 0000beb0     09e8          MOVI    FGLIST,A8
         0000bec0 00000000+ 
    4324                    
    4325 0000bee0     4c02          MOVE    A0,A2
    4326 0000bef0     0502          SEXT    A2
    4327 0000bf00     5022          AND     A1,A2           ;FORM MATCH
    4328                    
    4329 0000bf10     4d00          MOVE    A8,A0
    4330 0000bf20     c00a          JRUC    KO_TST
    4331 0000bf30           KO_LP
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   94

    4332 0000bf30     b40e          MOVE    *A0(OID),A14,W
         0000bf40     0430  
    4333 0000bf50     502e          AND     A1,A14          ;CAN DONT CARE BITS
    4334 0000bf60     484e          CMP     A2,A14          ;MATCH?
    4335 0000bf70     cb05          JRNE    KO_TST          ;NO
    4336                    
    4337 0000bf80     8603          MOVE    *A0,A3,L
    4338 0000bf90     0d3f          CALLR   DELOBJ
         0000bfa0     fabd  
    4339 0000bfb0     4c60          MOVE    A3,A0
    4340 0000bfc0     c001          JRUC    KO_TST2
    4341 0000bfd0           KO_TST
    4342 0000bfd0     8600          MOVE    *A0,A0,L
    4343 0000bfe0           KO_TST2
    4344 0000bfe0     4808          CMP     A0,A8
    4345 0000bff0     cbf3          JRNE    KO_LP
    4346                    
    4347 0000c000     09af          MMFM    SP,A0,A2,A3,A8
         0000c010     010d  
    4348 0000c020     0960          RETS
    4349                    
    4350                    **************************************************************************
    4351                    *                                                                        *
    4352                    * EXISTOBJ_ALL - FIND ANY OCCURANCE OF AN OBJECT OF GIVEN I.D.           *
    4353                    * A0 = OID                                                               *
    4354                    * RETURNS:                                                               *
    4355                    *       Z BIT SET = NO OBJECT, A0 = 0                                    *
    4356                    *       Z BIT CLR = OBJECT, A0 = PTR TO OBJECT                           *
    4357                    *                                                                        *
    4358                    **************************************************************************
    4359 0000c030           EXISTOBJ_ALL
    4360 0000c030                   PUSH    A1
    4361 0000c040     5621          CLR     A1
    4362 0000c050     03e1          NOT     A1
    4363 0000c060     0d3f          CALLR   EXISTOBJ
         0000c070     001f  
    4364 0000c080                   PULL    A1
    4365 0000c0a0     0960          RETS
    4366                    
    4367                    **************************************************************************
    4368                    *                                                                        *
    4369                    *       EXIST_OBJ_ALL                                                    *
    4370                    *                                                                        *
    4371                    *       Find any occurance of an object of Given I.D.                    *
    4372                    *                                                                        *
    4373                    *       A0 = OID                                                         *
    4374                    *                                                                        *
    4375                    *       Returns:                                                         *
    4376                    *                Z = No object found, A8 = 0                             *
    4377                    *               NZ = Found match, A8 = Ptr to object                     *
    4378                    *                                                                        *
    4379                    **************************************************************************
    4380 0000c0b0           EXIST_OBJ_ALL
    4381 0000c0b0                   PUSH    A0
    4382 0000c0c0     0d5f          CALLA   EXISTOBJ_ALL
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   95

         0000c0d0 0000c030' 
    4383 0000c0f0     4c08          MOVE    A0,A8
    4384 0000c100                   PULL    A0
    4385 0000c120     0960          RETS
    4386                    
    4387                    **************************************************************************
    4388                    *                                                                        *
    4389                    *       RESUME_EXIST_OBJ_ALL                                             *
    4390                    *                                                                        *
    4391                    *       Resume search for objects of given I.D.                          *
    4392                    *                                                                        *
    4393                    *       A0 = OID                                                         *
    4394                    *       A8 = Last object found                                           *
    4395                    *                                                                        *
    4396                    *       Returns:                                                         *
    4397                    *                Z = No more objects found, A8 = 0                       *
    4398                    *               NZ = Found another one, A8 = Ptr to object               *
    4399                    *                                                                        *
    4400                    **************************************************************************
    4401 0000c130           RESUME_EXIST_OBJ_ALL
    4402 0000c130     098f          MMTM    SP,A0,A1
         0000c140     c000  
    4403 0000c150     5621          CLR     A1
    4404 0000c160     03e1          NOT     A1
    4405 0000c170     0d3f          CALLR   RESUME_EXIST_OBJ
         0000c180     0004  
    4406 0000c190     4c08          MOVE    A0,A8
    4407 0000c1a0     09af          MMFM    SP,A0,A1
         0000c1b0     0003  
    4408 0000c1c0     0960          RETS
    4409                    
    4410                    **************************************************************************
    4411                    *                                                                        *
    4412                    *       RESUME_EXISTOBJ                                                  *
    4413                    *                                                                        *
    4414                    *       Entrypoint to EXISTOBJ, where you give the starting              *
    4415                    *       point of the search.                                             *
    4416                    *                                                                        *
    4417                    *       A0 = OID to search for                                           *
    4418                    *       A1 = OID mask (0 bits mean "don't care")                         *
    4419                    *       A8 = Search entrypoint, non-inclusive                            *
    4420                    *                                                                        *
    4421                    *       Returns:                                                         *
    4422                    *                                                                        *
    4423                    *                Z = No object found, A0 = 0                             *
    4424                    *               NZ = Matching object found, A0 = Ptr to object           *
    4425                    *                                                                        *
    4426                    **************************************************************************
    4427 0000c1d0           RESUME_EXIST_OBJ
    4428 0000c1d0     098f          MMTM    SP,A2,A8
         0000c1e0     2080  
    4429 0000c1f0     4c02          MOVE    A0,A2
    4430 0000c200     0502          SEXT    A2
    4431 0000c210     5022          AND     A1,A2           ;FORM MATCH
    4432 0000c220     4d00          MOVE    A8,A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   96

    4433 0000c230     09e8          MOVI    FGLIST,A8
         0000c240 00000000+ 
    4434 0000c260     c00f          JRUC    EO_TST
    4435                    
    4436                    **************************************************************************
    4437                    *                                                                        *
    4438                    *       EXISTOBJ                                                         *
    4439                    *                                                                        *
    4440                    *       Search for an object of certain class on the foreground          *
    4441                    *       list.                                                            *
    4442                    *                                                                        *
    4443                    *       A0 = OID                                                         *
    4444                    *       A1 = OID Mask (0 bits mean "don't care")                         *
    4445                    *                                                                        *
    4446                    *       Returns:                                                         *
    4447                    *                                                                        *
    4448                    *                Z = No object found, A0 = 0                             *
    4449                    *               NZ = Matching object found, A0 = Ptr to object           *
    4450                    *                                                                        *
    4451                    **************************************************************************
    4452 0000c270           EXISTOBJ
    4453 0000c270     098f          MMTM    SP,A2,A8
         0000c280     2080  
    4454 0000c290     09e8          MOVI    FGLIST,A8
         0000c2a0 00000000+ 
    4455                    
    4456 0000c2c0     4c02          MOVE    A0,A2
    4457 0000c2d0     0502          SEXT    A2
    4458 0000c2e0     5022          AND     A1,A2           ;FORM MATCH
    4459                    
    4460 0000c2f0     4d00          MOVE    A8,A0
    4461 0000c300     c005          JRUC    EO_TST
    4462                    
    4463 0000c310           EO_LP
    4464 0000c310     b40e          MOVE    *A0(OID),A14,W
         0000c320     0430  
    4465 0000c330     502e          AND     A1,A14          ;CAN DONT CARE BITS
    4466 0000c340     484e          CMP     A2,A14          ;MATCH?
    4467 0000c350     ca04          JREQ    EO_X            ;YES!
    4468                    
    4469 0000c360           EO_TST
    4470 0000c360     8600          MOVE    *A0,A0,L        ;GET NEXT OBJECT
    4471 0000c370     4808          CMP     A0,A8           ;IS THAT ALL?
    4472 0000c380     cbf8          JRNE    EO_LP           ;BR = NO, TRY MORE
    4473 0000c390     5600          CLR     A0              ;FAILED
    4474 0000c3a0           EO_X
    4475 0000c3a0     4c00          MOVE    A0,A0
    4476                    
    4477 0000c3b0     09af          MMFM    SP,A2,A8
         0000c3c0     0104  
    4478 0000c3d0     0960          RETS
    4479                    
    4480                    **************************************************************************
    4481                    *                                                                        *
    4482                    * COUNT_HEADS - COUNT ONLY THE HEAD PARTS OF MULTI-PART OBJECTS.         *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   97

    4483                    * A0 = OID (16 BITS) TO COUNT                                            *
    4484                    * A1 = MASK: MASK BITS OF ZERO ARE DONT CARES (16 BITS)                  *
    4485                    * RETURNS                                                                *
    4486                    *       A6 = COUNT                                                       *
    4487                    *                                                                        *
    4488                    **************************************************************************
    4489 0000c3e0           COUNT_HEADS
    4490 0000c3e0     098f          MMTM    SP,A0,A2,A3
         0000c3f0     b000  
    4491                    
    4492 0000c400     4c03          MOVE    A0,A3
    4493 0000c410     0503          SEXT    A3
    4494 0000c420     5023          AND     A1,A3           ;FORM MATCH
    4495                    
    4496 0000c430     56c6          CLR     A6
    4497                    
    4498 0000c440     09e2          MOVI    FGLIST,A2
         0000c450 00000000+ 
    4499                    
    4500 0000c470     4c40          MOVE    A2,A0
    4501 0000c480     c00d          JRUC    CHP_TST
    4502                    
    4503 0000c490           CHP_LP
    4504 0000c490     b40e          MOVE    *A0(OID),A14
         0000c4a0     0430  
    4505 0000c4b0     502e          AND     A1,A14          ;CAN DONT CARE BITS
    4506 0000c4c0     486e          CMP     A3,A14          ;MATCH?
    4507 0000c4d0     cb08          JRNE    CHP_TST         ;NO
    4508                    
    4509 0000c4e0     b60e          MOVE    *A0(OPART1),A14,L
         0000c4f0     00a0  
    4510 0000c500     cb02          JRNZ    CHP_HEAD_TST    ;BR = A MULTI-PARTER
    4511 0000c510     1026          INC     A6              ;COUNT THE SOLO OBJECT
    4512 0000c520     c003          JRUC    CHP_TST
    4513 0000c530           CHP_HEAD_TST
    4514 0000c530     480e          CMP     A0,A14          ;IS THIS THE HEAD?
    4515 0000c540     cb01          JRNE    CHP_TST         ;BR = NO
    4516 0000c550     1026          INC     A6
    4517 0000c560           CHP_TST
    4518 0000c560     8600          MOVE    *A0,A0,L
    4519 0000c570     4802          CMP     A0,A2
    4520 0000c580     cbf0          JRNE    CHP_LP
    4521                    
    4522 0000c590     09af          MMFM    SP,A0,A2,A3
         0000c5a0     000d  
    4523 0000c5b0     0960          RETS
    4524                    
    4525                    **************************************************************************
    4526                    *                                                                        *
    4527                    * FIND_HEAD - FIND A HEAD PART ON A PLANE THAT MATCHES THE               *
    4528                    *                 GIVEN I.D.                                             *
    4529                    * A0 = OID (16 BITS) TO COUNT                                            *
    4530                    * A1 = MASK: MASK BITS OF ZERO ARE DONT CARES (16 BITS)                  *
    4531                    * RETURNS                                                                *
    4532                    *        Z = NONE FOUND                                                  *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   98

    4533                    *               A0 = 0                                                   *
    4534                    *       NZ = FOUND ONE                                                   *
    4535                    *               A0 = PTR TO OBJECT                                       *
    4536                    *                                                                        *
    4537                    **************************************************************************
    4538 0000c5c0           FIND_HEAD
    4539 0000c5c0     098f          MMTM    SP,A2,A3
         0000c5d0     3000  
    4540                    
    4541 0000c5e0     4c03          MOVE    A0,A3
    4542 0000c5f0     0503          SEXT    A3
    4543 0000c600     5023          AND     A1,A3           ;FORM MATCH
    4544 0000c610     09e2          MOVI    FGLIST,A2
         0000c620 00000000+ 
    4545 0000c640     4c40          MOVE    A2,A0
    4546 0000c650     c00c          JRUC    FHP_TST
    4547                    
    4548 0000c660           FHP_LP
    4549 0000c660     b40e          MOVE    *A0(OID),A14
         0000c670     0430  
    4550 0000c680     502e          AND     A1,A14          ;CAN DONT CARE BITS
    4551 0000c690     486e          CMP     A3,A14          ;MATCH?
    4552 0000c6a0     cb07          JRNE    FHP_TST         ;NO
    4553                    
    4554 0000c6b0     b60e          MOVE    *A0(OPART1),A14,L
         0000c6c0     00a0  
    4555 0000c6d0     ca04          JRZ     FHP_TST         ;BR = NOT A MULTI-PARTER
    4556 0000c6e0     480e          CMP     A0,A14          ;IS THIS THE HEAD?
    4557 0000c6f0     cb02          JRNE    FHP_TST         ;BR = NO
    4558 0000c700     4c00          MOVE    A0,A0
    4559 0000c710     c004          JRUC    FHP_X
    4560 0000c720           FHP_TST
    4561 0000c720     8600          MOVE    *A0,A0,L
    4562 0000c730     4802          CMP     A0,A2
    4563 0000c740     cbf1          JRNE    FHP_LP
    4564 0000c750     5600          CLR     A0
    4565 0000c760           FHP_X
    4566 0000c760     09af          MMFM    SP,A2,A3
         0000c770     000c  
    4567 0000c780     0960          RETS
    4568                    
    4569                    **************************************************************************
    4570                    *                                                                        *
    4571                    * SET_SCRNOBJ                                                            *
    4572                    * IN:  A1, [Y,X]                                                         *
    4573                    *      A2, long ZVAL                                                     *
    4574                    *      a8, object                                                        *
    4575                    * OUT: NUTN'                                                             *
    4576                    *                                                                        *
    4577                    **************************************************************************
    4578                    
    4579 0000c790           SET_SCRNOBJ
    4580 0000c790     098f          MMTM    SP,A0,A1,A2,A3,A4,A8
         0000c7a0     f880  
    4581 0000c7b0     4c20          MOVE    A1,A0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   99

    4582 0000c7c0           SS_PART_LUPE
    4583 0000c7c0     4c01          MOVE    A0,A1
    4584 0000c7d0     b70e          MOVE    *A8(OANIOFF),A14,L
         0000c7e0     01c0  
    4585                    
    4586 0000c7f0     b503          MOVE    *A8(OCTRL),A3,W
         0000c800     01f0  
    4587 0000c810     1f63          BTST    B_FLIPH,A3
    4588 0000c820     ca04          JRZ     SS_CHECK_FLIPV                  ;BR=NO FLIPH
    4589 0000c830     5684          CLR     A4
    4590 0000c840     edc4          MOVX    A14,A4
    4591 0000c850     03a4          NEG     A4
    4592 0000c860     ec8e          MOVX    A4,A14
    4593 0000c870           SS_CHECK_FLIPV
    4594 0000c870     1f43          BTST    B_FLIPV,A3
    4595 0000c880     ca04          JRZ     SS_COMP_DAG                     ;BR=NO FLIPV
    4596 0000c890     5684          CLR     A4
    4597 0000c8a0     efc4          MOVY    A14,A4
    4598 0000c8b0     03a4          NEG     A4
    4599 0000c8c0     ee8e          MOVY    A4,A14
    4600 0000c8d0           SS_COMP_DAG
    4601 0000c8d0     e3c1          SUBXY   A14,A1
    4602                    
    4603 0000c8e0     b70e          MOVE    *A8(OPARTSXY),A14,L
         0000c8f0     01a0  
    4604 0000c900     e1c1          ADDXY   A14,A1
    4605                    
    4606 0000c910     b228          MOVE    A1,*A8(ODAG),L
         0000c920     0220  
    4607 0000c930     b028          MOVE    A1,*A8(OXPOS),W
         0000c940     0150  
    4608 0000c950     2e01          SRL     16,A1
    4609 0000c960     b028          MOVE    A1,*A8(OYPOS),W
         0000c970     0170  
    4610                    
    4611 0000c980     4c41          MOVE    A2,A1
    4612 0000c990     af0e          MOVB    *A8(OZOFF),A14
         0000c9a0     03c8  
    4613 0000c9b0     e1c1          ADDXY   A14,A1
    4614                    
    4615 0000c9c0     b228          MOVE    A1,*A8(OZVAL),L
         0000c9d0     0180  
    4616                    
    4617 0000c9e0     b708          MOVE    *A8(OPARTS),A8,L
         0000c9f0     00c0  
    4618 0000ca00     cbdb          JRNZ    SS_PART_LUPE
    4619 0000ca10     09af          MMFM    SP,A0,A1,A2,A3,A4,A8
         0000ca20     011f  
    4620 0000ca30     0960          RETS
    4621                    
    4622                    ;**************************************************************************
    4623                    ;*                                                                       *
    4624                    ;* SET_MANSCALE                                                          *
    4625                    ;*  a1 = scale                                                           *
    4626                    ;*  a8 = object                                                          *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  100

    4627                    ;*                                                                       *
    4628                    ;**************************************************************************
    4629                    ;SET_MANSCALE
    4630                    ;       move    a8,a14
    4631                    ;sms1   move    a1,*a14(ONuManScl)
    4632                    ;       move    *a14(OPARTS),a14,L
    4633                    ;       jrnz    sms1
    4634                    ;       rets
    4635                    
    4636                    **************************************************************************
    4637                    *                                                                        *
    4638                    * find_screen_from_world                                                 *
    4639                    * find_screen_from_world_zero_y                                          *
    4640                    *       input  a0 = world x                                              *
    4641                    *              a1 = world z                                              *
    4642                    *              a2 = world y                                              *
    4643                    *       output a0 = screen x                                             *
    4644                    *              a1 = screen y                                             *
    4645                    *         Yscreen = y - (z * h) / (d1 + z) - worldy + HALFY              *
    4646                    *         Xscreen = ((x - worldx) * sc) + HALFX                          *
    4647                    *           where sc = scale for z = d1 / (d1 + z)                       *
    4648                    *                                                                        *
    4649                    **************************************************************************
    4650 0000ca40           find_screen_from_world_zero_y
    4651 0000ca40     5642          clr     a2
    4652 0000ca50           find_screen_from_world
    4653 0000ca50     0b20          addi    [0,08000h],a0
         0000ca60 00008000  
    4654 0000ca80     2a00          sra     16,a0
    4655 0000ca90     2a01          sra     16,a1
    4656 0000caa0     2a02          sra     16,a2
    4657 0000cab0     05a3          move    @WORLDX+010h,a3,W
         0000cac0 00006700- 
    4658 0000cae0     05a4          move    @WORLDY+010h,a4,W
         0000caf0 00006720- 
    4659 0000cb10     4403          sub     a0,a3
    4660 0000cb20     03a3          neg     a3
    4661 0000cb30     4482          sub     a4,a2
    4662 0000cb40     0b02          addi    HALFY,a2
         0000cb50     007f  
    4663 0000cb60     4c25          move    a1,a5
    4664 0000cb70     2485          sll     4,a5
    4665 0000cb80     0b25          addi    zybase_table,a5
         0000cb90 00000000! 
    4666 0000cbb0     84a1          move    *a5,a1,W
    4667 0000cbc0     4441          sub     a2,a1
    4668 0000cbd0     03a1          neg     a1
    4669 0000cbe0     0b25          addi    xzy_offset,a5
         0000cbf0 00000000! 
    4670 0000cc10     84a5          move    *a5,a5,W
    4671 0000cc20     5ca3          mpys    a5,a3
    4672 0000cc30     4c60          move    a3,a0
    4673 0000cc40     2440          sll     2,a0
    4674 0000cc50     0b20          addi    HALFX<<16,a0
         0000cc60 00c70000  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  101

    4675 0000cc80     2601          sll     16,a1
    4676 0000cc90     0960          rets
    4677                    
    4678                    **************************************************************************
    4679                    *                                                                        *
    4680                    * find_world_from_screen                                                 *
    4681                    *       input  a0 = screen x                                             *
    4682                    *              a1 = screen y                                             *
    4683                    *       output a0 = world x                                              *
    4684                    *              a1 = world z (assume we want a 0 world y)                 *
    4685                    *         first we take and get an adjusted y                            *
    4686                    *            Yk = Yscreen + worldy - halfy                               *
    4687                    *         then we compute z based on Yk                                  *
    4688                    *            z = (-d1 * yk) / (yk + h)  ;uses a table lookup for this    *
    4689                    *         then we compute x based on z and our old x                     *
    4690                    *            x = ((Xscreen - halfx) / sc) + worldx                       *
    4691                    *             where sc = scale for z = d1/(d1 + z)                       *
    4692                    *                we multiply by a table lookup for 1/sc                  *
    4693                    *                                                                        *
    4694                    **************************************************************************
    4695 0000cca0           find_rworld_from_z      ;a2 = z
    4696 0000cca0     09c0          movi    HALFX,a0
         0000ccb0     00c7  
    4697 0000ccc0     c014          jruc    fwfs
    4698 0000ccd0           find_lworld_from_z
    4699 0000ccd0     09c0          movi    -HALFX,a0
         0000cce0     ff39  
    4700 0000ccf0     c011          jruc    fwfs
    4701 0000cd00           find_world_from_screen
    4702 0000cd00     2a01          sra     16,a1           ;convert y down to short form
    4703 0000cd10     05a2          move    @WORLDY+010h,a2,W
         0000cd20 00006720- 
    4704 0000cd40     4041          add     a2,a1
    4705 0000cd50     0be1          subi    HALFY,a1
         0000cd60     ff80  
    4706 0000cd70     2481          sll     4,a1
    4707 0000cd80     0b21          addi    fws_table,a1
         0000cd90 00000000! 
    4708 0000cdb0     8421          move    *a1,a1,W
    4709 0000cdc0     4c22          move    a1,a2           ;save if for x calculation
    4710 0000cdd0     2601          sll     16,a1           ;convert it to long     ;now a1 = z
    4711 0000cde0     2a00          sra     16,a0           ;convert it down to short form
    4712 0000cdf0     0be0          subi    HALFX,a0
         0000ce00     ff38  
    4713 0000ce10     2fc2  fwfs    srl     2,a2            ;new osctab
    4714 0000ce20     24a2          sll     5,a2
    4715 0000ce30     0b22          addi    zscale_100_100_table,a2 ;we use dma scale for 100% because it is inv
         0000ce40 00000000! 
    4716 0000ce60     8442          move    *a2,a2,W
    4717 0000ce70     2502          sll     8,a2            ;if we shift now, we don't shift later
    4718 0000ce80     5c02          mpys    a0,a2
    4719 0000ce90     4c60          move    a3,a0
    4720 0000cea0     07a2          move    @WORLDX,a2,L
         0000ceb0 000066f0- 
    4721 0000ced0     4040          add     a2,a0
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  102

    4722 0000cee0     0960          rets
    4723                    
    4724                    **************************************************************************
    4725                    *                                                                        *
    4726                    * find_world_from_screen_z                                               *
    4727                    *      INPUT                                                             *
    4728                    *       a0 = x                                                           *
    4729                    *       a1 = ys                                                          *
    4730                    *       a2 = world z                                                     *
    4731                    *      OUTPUT                                                            *
    4732                    *       a0 = x                                                           *
    4733                    *       a1 = z                                                           *
    4734                    *       a2 = y                                                           *
    4735                    *                                                                        *
    4736                    **************************************************************************
    4737 0000cef0           find_world_from_screen_z
    4738 0000cef0     098f          mmtm    sp,a2
         0000cf00     2000  
    4739 0000cf10     2a01          sra     16,a1
    4740 0000cf20     2a02          sra     16,a2
    4741 0000cf30     05ae          move    @WORLDY+010h,a14,W
         0000cf40 00006720- 
    4742 0000cf60     41c1          add     a14,a1
    4743 0000cf70     0be1          subi    HALFY,a1
         0000cf80     ff80  
    4744 0000cf90     4c4e          move    a2,a14
    4745 0000cfa0     248e          sll     4,a14
    4746 0000cfb0     0b2e          addi    zybase_table,a14
         0000cfc0 00000000! 
    4747 0000cfe0     85ce          move    *a14,a14,W
    4748 0000cff0     41c1          add     a14,a1
    4749 0000d000     2601          sll     16,a1
    4750 0000d010     2a00          sra     16,a0
    4751 0000d020     0be0          subi    HALFX,a0
         0000d030     ff38  
    4752 0000d040     2fc2          srl     2,a2            ;new osctab
    4753 0000d050     24a2          sll     5,a2
    4754 0000d060     0b22          addi    zscale_100_100_table,a2
         0000d070 00000000! 
    4755 0000d090     8442          move    *a2,a2
    4756 0000d0a0     2502          sll     8,a2
    4757 0000d0b0     5c02          mpys    a0,a2
    4758 0000d0c0     4c60          move    a3,a0
    4759 0000d0d0     07a2          move    @WORLDX,a2,L
         0000d0e0 000066f0- 
    4760 0000d100     4040          add     a2,a0
    4761 0000d110     4c22          move    a1,a2
    4762 0000d120     09af          mmfm    sp,a1
         0000d130     0002  
    4763 0000d140     0960          rets
    4764                    
    4765 0000d150           set_scrnobj_to_pos_flips        ;a0 = xy
    4766 0000d150     b701          move    *a8(OIMG),a1,L
         0000d160     02c0  
    4767 0000d170     b50e          move    *a8(OCTRL),a14,W
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:30:49 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE  103

         0000d180     01f0  
    4768 0000d190     b621          move    *a1(IANIOFF),a1,L
         0000d1a0     0050  
    4769 0000d1b0     1f6e          btst    B_FLIPH,a14
    4770 0000d1c0     ca03          jrz     sstf1
    4771 0000d1d0     ec2e          movx    a1,a14
    4772 0000d1e0     03ae          neg     a14
    4773 0000d1f0     edc1          movx    a14,a1
    4774 0000d200     e220  sstf1   subxy   a1,a0
    4775 0000d210     b208          move    a0,*a8(ODAG),L
         0000d220     0220  
    4776 0000d230     0960          rets
    4777                    
    4778 0000d240           set_scrnobj_to_pos      ;a0 = xy
    4779                                            ;no flips
    4780 0000d240     b701          move    *a8(OIMG),a1,L
         0000d250     02c0  
    4781 0000d260     b621          move    *a1(IANIOFF),a1,L
         0000d270     0050  
    4782 0000d280     e220          subxy   a1,a0
    4783 0000d290     b208          move    a0,*a8(ODAG),L
         0000d2a0     0220  
    4784 0000d2b0     0960          rets

 No Errors,  No Warnings
