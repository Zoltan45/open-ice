TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .MLIB   "HHMACS.LIB"
       2                            .FILE   "HHPROC.ASM"
       3                            .WIDTH  132
       4                            .OPTION B,D,L,T
       5                            .MNOLIST
       6                    
       7                    **************************************************************************
       8                    *                                                                        *
       9                    *       COPYRIGHT (C) 1994 MIDWAY MANUFACTURING COMPANY.                 *
      10                    *                      ALL RIGHTS RESERVED.                              *
      11                    *                                                                        *
      12                    **************************************************************************
      13                    
      14                            .INCLUDE        "HH.INC"                ;SYSTEM EQUATES
      15                            .include        "hhproc.e"
      16                            .include        "hhcoin.g"
      17                            .include        "hhd.g"
      18                            .include        "hhc.g"
      19                            .include        "hhram.g"
      20                            .include        "hhmisc.g"
      21                    
      22                            .if     DEBUG
      23                            .ref    VC_DIRQ
      24                            .ref    VC_ANIM
      25                            .endif
      26                    
      27                    
      28                    ; end of include files
      29                    
      30                    *
      31                    *GSP MULTI-TASKING SYSTEM
      32                    *VERSION 1.0 BY EUGENE P. JARVIS
      33                    *VERSION 2.0 BY GEORGE N. PETRO
      34                    *
      35                    
      36                    *THE KIND OF RAM WE LIKE
      37 00000000                   .BSS    ACTIVE,32       ;regular process list
      38 00000020                   .BSS    FREE,32         ;FREE PROCESS POOL
      39 00000040                   .BSS    PACTIVE,32      ;priority process list
      40                    
      41                    *GLOBAL PROC VARS
      42                            .IF NOTFINAL
      43                            .DEF    THISPROC, LASTPROC, THISWAKE    ;FOR DEBUGGING
      44 00000060                   .BSS    LASTPROC,32
      45 00000080                   .BSS    THISPROC,32
      46 000000a0                   .BSS    THISWAKE,32
      47                            .ENDIF
      48                    
      49 000000c0                   .BSS    PRIORITY,16     ;current execution list of multi-tasker
      50 000000d0                   .bss    xxxx,16         ;fill space to 32 bits
      51              0000  PRI_ACTIVE      .set    0       ;checked with   JZ
      52              0001  PRI_PACTIVE     .set    1       ;               JP
      53              ffff  PRI_GOPACTIVE   .set    -1      ;               JN
      54 000000e0                   .BSS    NXTPRC,32       ;ptr to next process to be executed
      55                                                      ;when resuming from priority list
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    2

      56 00000100                   .BSS    PFREECNT,16     ;COUNT OF PROC FREE LIST
      57 00000110                   .BSS    TIME,16         ;TIME CTR
      58 00000120                   .BSS    TIMER,16        ;IRQ TIMER 16 MSEC.
      59 00000130                   .BSS    LAST_TIMER,16   ;TIMER VALUE AT END OF PROCESS DISPATCH
      60                    *LOCAL PROC VARS
      61 00000140                   .BSS    PRCSTR,NPROC*PRCSIZ     ;PROCESS STORE ALLOCATION
      62 00120140                   .BSS    PRCLSTND,0
      63                    
      64                    ;       .REF    CkOFREE         ;for debugging
      65                    
      66 00000000                   .TEXT
      67                    
      68                    
      69                    **************************************************************************
      70                    *PROCESS DISPATCH
      71                    **************************************************************************
      72                    *PROCESS DISPATCH
      73 00000000           PRCDSP:
      74 00000000     0d5f          CALLA   YZSORT     ;ALWAYS SORT THE DISPLAY LIST ONCE
         00000010 00000000! 
      75 00000030     05a0          MOVE    @TIMER,A0
         00000040 00000120- 
      76 00000060     caf9          JRZ     PRCDSP     ;BR = WAIT FOR DIRQ, SORT TO KILL TIME
      77 00000070           DOPRC:
      78                            .if     DEBUG
      79                            MOVE    @VCOUNT,@VC_DIRQ,W
      80                            .endif
      81                    
      82 00000070     57ce          CLR     A14
      83 00000080     058e          MOVE    A14,@INVELADD,W         ;reset VELADD flag
         00000090 00000000! 
      84                    
      85 000000b0     0d5f          CALLA   TIMEINT                 ;MUST DO THIS BEFORE TIMER
         000000c0 00000000! 
      86                    
      87                            .if     freeze_ok
      88 000000e0     05ae          move    @game_frozen,a14,W
         000000f0 00000000! 
      89 00000110     cb03          jrnz    noan
      90                            .endif
      91 00000120     0d5f          CALLA   ANIMP                   ;ANIMATE STUFF
         00000130 00000000! 
      92 00000150           noan
      93                            .if     DEBUG
      94                            MOVE    @VCOUNT,@VC_ANIM,W
      95                            .endif
      96                    
      97                    ;       .if     DEBUG
      98                    ;       MOVE    @FGLIST,A0,L
      99                    ;       CMPI    FGLIST,A0
     100                    ;       JREQ    SKIP_TEST0
     101                    ;       CALLA   IsAnObj
     102                    ;SKIP_TEST0
     103                    ;       .endif
     104                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    3

     105 00000150           NOSCALE
     106                    
     107                    ;WFD 8-8-94
     108                    ;*
     109                    ;* Global Overload check
     110                    ;*
     111                    ;       CLR     A0                      ;This is our overload flag
     112                    ;
     113                    ;       MOVE    @CPUAVG,A14,W
     114                    ;       CMPI    200,A14                 ;Are we low on CPU time?
     115                    ;       JRLS    PD_OVERLOAD             ;BR = Yes
     116                    ;       MOVE    @DMAAVG,A14,W
     117                    ;       CMPI    100,A14                 ;Are we low on DMA time?
     118                    ;       JRHI    PD_OVERLOAD_FLAG        ;BR = No
     119                    ;
     120                    ;PD_OVERLOAD
     121                    ;       MOVI    XSCROLL,A1              ;when scrolling.
     122                    ;       MOVE    *A1+,A14,L              ;Scrolling in X?
     123                    ;       JRNZ    PD_OVERLOADED           ;BR = Yes
     124                    ;       MOVE    *A1+,A14,L              ;Scrolling in Y?
     125                    ;       JRNZ    PD_OVERLOADED           ;BR = Yes
     126                    ;       MOVE    *A1,A14,L               ;Scrolling in Z?
     127                    ;       JRZ     PD_OVERLOAD_FLAG        ;BR = No, we must not be overloaded
     128                    ;PD_OVERLOADED
     129                    ;       INC     A0                      ;Set that flag
     130                    ;PD_OVERLOAD_FLAG
     131                    ;       MOVE    A0,@OVERLOADED,W        ;Make the flag global.
     132                    ;WFD 8-8-94
     133                    
     134 00000150     1820          movk    PRI_PACTIVE,A0  ;will be executing priority list
     135 00000160     0580          move    A0,@PRIORITY,W
         00000170 000000c0- 
     136 00000190     09ed          MOVI    ACTIVE,A13,L    ;Reg process list
         000001a0 00000000- 
     137 000001c0     078d          move    A13,@NXTPRC,L
         000001d0 000000e0- 
     138 000001f0     09ed          MOVI    PACTIVE,A13,L   ;priority process list
         00000200 00000040- 
     139 00000220     c007          JRUC    PRCD1
     140                    
     141                    *
     142                    *PROCESS SLEEP
     143                    *TOS IS WAKEUP ADDR, A0 = SLEEP TIME
     144 00000230           PRCSLP:
     145 00000230     97e7          move    *SP+,A7,L                      ;CALLING PC-0A7H
     146 00000240           PRCLSP:
     147                    ;       .IF DEBUG
     148                    ;       calla   CkOFREE
     149                    ;       .ENDIF
     150                    
     151 00000240     4da1          move    A13,A1
     152 00000250     0b01          addi    PDATA,A1
         00000260     0100  
     153 00000270     0981          mmtm    A1,A7,A8,A9,A10,A11,A12 ;wakeup, regs, stack ptr
         00000280     01f8  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    4

     154 00000290     a001          move    A0,-*A1,W               ;sleep
     155                    
     156                            .if DEBUG                       ;this is for DEBUG only
     157                            MOVE    A13,A0
     158                            ADDI    PSDATA,A0
     159                            CMP     A0,A12
     160                            JRLT    $                       ;Stick on Stack overflow
     161                            ADDI    PRCSIZ-PSDATA,A0
     162                            CMP     A0,A12
     163                            JRGT    $                       ;Stick on Stack underflow
     164                            .endif
     165                    
     166                    
     167 000002a0           PRCD1:
     168                            .if     DEBUG
     169                            MOVE    @THISPROC,@LASTPROC,L
     170                    
     171                            MOVE    @FGLIST,A0,L
     172                            CMPI    FGLIST,A0
     173                            JREQ    SKIP_TEST1
     174                            CALLA   IsAnObj
     175                    SKIP_TEST1
     176                            .endif
     177                    
     178 000002a0     05a0          move    @PRIORITY,A0,W
         000002b0 000000c0- 
     179 000002d0     cf0a          jrnn    SkPSwitch               ;Check for PRI_GOPACTIVE
     180                    
     181                            ;*** SWITCH TO PRIORITY PROCESS LIST ***
     182 000002e0     078d          move    A13,@NXTPRC,L
         000002f0 000000e0- 
     183 00000310     09ed          movi    PACTIVE,A13,L
         00000320 00000040- 
     184 00000340     1821          movk    PRI_PACTIVE,A1
     185 00000350     0581          move    A1,@PRIORITY,W
         00000360 000000c0- 
     186 00000380           SkPSwitch
     187                            ;*** FIND NEXT PROCESS READY TO GO (PTIME <= 0) ***
     188 00000380     05a1          MOVE    @LAST_TIMER,A1,W                ;DO IT BY TIMER
         00000390 00000130- 
     189                            .if     freeze_ok
     190 000003b0     05a0          move    @game_frozen,a0,W
         000003c0 00000000! 
     191 000003e0     cb14          jrnz    frozen_cknxtp
     192                            .endif
     193 000003f0           CkNxtP
     194 000003f0     87ad          MOVE    *A13,A13,L
     195 00000400     ca2a          JREQ    PRCDX
     196 00000410     b5a0          MOVE    *A13(PTIME),A0,W
         00000420     0030  
     197 00000430     4420          SUB     A1,A0
     198 00000440     b00d          MOVE    A0,*A13(PTIME),W
         00000450     0030  
     199 00000460     c1f8          JRP     CkNxtP          ;NOT READY, LOOP FOR NEXT
     200                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    5

     201                    *PROCESS IS READY FOR DISPATCH
     202                    
     203 00000470     4da1          move    A13,A1
     204 00000480     0b01          addi    40H,A1
         00000490     0040  
     205 000004a0     09a1          mmfm    A1,A7,A8,A9,A10,A11,A12 ;wake, regs, stack ptr
         000004b0     1f80  
     206                    
     207                            .if DEBUG                       ;this is for DEBUG only
     208                            MOVE    A13,A0
     209                            ADDI    PSDATA,A0
     210                            CMP     A0,A12
     211                            JRLT    $                       ;Stick on Stack overflow
     212                            ADDI    PRCSIZ-PSDATA,A0
     213                            CMP     A0,A12
     214                            JRGT    $                       ;Stick on Stack underflow
     215                            .endif
     216                    
     217                            .IF NOTFINAL
     218 000004c0     078d          MOVE    A13,@THISPROC,L
         000004d0 00000080- 
     219 000004f0     0787          MOVE    A7,@THISWAKE,L
         00000500 000000a0- 
     220                            .ENDIF
     221                    
     222 00000520     0167          jump    A7                      ;fire off proc
     223                    
     224 00000530           frozen_cknxtp
     225 00000530     87ad          MOVE    *A13,A13,L
     226 00000540     ca16          JREQ    PRCDX
     227 00000550     b5a0          move    *a13(PROCID),a0,W
         00000560     0020  
     228 00000570     1e00          btst    B_INDESTRUCT,a0
     229 00000580     cafa          jrz     frozen_cknxtp
     230 00000590     b5a0          MOVE    *A13(PTIME),A0,W
         000005a0     0030  
     231 000005b0     4420          SUB     A1,A0
     232 000005c0     b00d          MOVE    A0,*A13(PTIME),W
         000005d0     0030  
     233 000005e0     c1f4          JRP     frozen_cknxtp           ;NOT READY, LOOP FOR NEXT
     234 000005f0     4da1          move    A13,A1
     235 00000600     0b01          addi    40H,A1
         00000610     0040  
     236 00000620     09a1          mmfm    A1,A7,A8,A9,A10,A11,A12 ;wake, regs, stack ptr
         00000630     1f80  
     237                            .if DEBUG                       ;this is for DEBUG only
     238                            MOVE    A13,A0
     239                            ADDI    PSDATA,A0
     240                            CMP     A0,A12
     241                            JRLT    $                       ;Stick on Stack overflow
     242                            ADDI    PRCSIZ-PSDATA,A0
     243                            CMP     A0,A12
     244                            JRGT    $                       ;Stick on Stack underflow
     245                            .endif
     246                            .IF NOTFINAL
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    6

     247 00000640     078d          MOVE    A13,@THISPROC,L
         00000650 00000080- 
     248 00000670     0787          MOVE    A7,@THISWAKE,L
         00000680 000000a0- 
     249                            .ENDIF
     250 000006a0     0167          jump    A7                      ;fire off proc
     251                    
     252                    *DONE WITH THE SCAN
     253 000006b0           PRCDX:
     254 000006b0     05a0          move    @PRIORITY,A0,W          ;Check for PRI_PACTIVE
         000006c0 000000c0- 
     255 000006e0     c111          jrp     PRCCONT                 ;If finnishing priority, try regular
     256                    
     257                            .IF NOTFINAL
     258 000006f0     5600          CLR     A0
     259 00000700     0780          MOVE    A0,@THISPROC,L
         00000710 00000080- 
     260 00000730     0780          MOVE    A0,@THISWAKE,L
         00000740 000000a0- 
     261                            .ENDIF
     262                    
     263 00000760     05c0          MOVE    @TIMER,@LAST_TIMER,W    ;HOW LONG WAS IT?
         00000770 00000120- 
         00000790 00000130- 
     264 000007b0     5600          CLR     A0
     265 000007c0     0580          MOVE    A0,@TIMER
         000007d0 00000120- 
     266                    
     267 000007f0     0960          RETS            ;GO BACK TO EXEC LOOP
     268                    
     269 00000800           PRCCONT:
     270                            ;*** RESUME REGULAR PROCESS LIST ***
     271 00000800     07ad          move    @NXTPRC,A13,L
         00000810 000000e0- 
     272 00000830     5600          clr     A0                      ;PRI_ACTIVE
     273 00000840     0580          move    A0,@PRIORITY,W
         00000850 000000c0- 
     274 00000870     c0a2          jruc    PRCD1
     275                    
     276                    
     277                    *PROCESS SUICIDE
     278 00000880           SUCIDE:
     279                    
     280                            .IF DEBUG
     281                    ;       calla   CkOFREE
     282                    ;;;     callr   CkPlinks
     283                             .ENDIF
     284 00000880     09e1          MOVI    ACTIVE,A1,L
         00000890 00000000- 
     285 000008b0           SUCLP:
     286 000008b0     4c22          MOVE    A1,A2           ;SAVE PREVIOUS
     287 000008c0     8621          MOVE    *A1,A1,L
     288 000008d0     ca03          JRZ     PSUCIDE
     289 000008e0     482d          CMP     A1,A13          ;CHECK FOR MATCH TO CURRENT PROCESS
     290 000008f0     cbfb          JRNE    SUCLP           ;NOT FOUND KEEP LOOKING
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    7

     291 00000900     c00c          jruc    SucIt
     292 00000910           PSUCIDE:
     293 00000910     09e1          MOVI    PACTIVE,A1,L
         00000920 00000040- 
     294 00000940           PSUCLP:
     295 00000940     4c22          MOVE    A1,A2           ;SAVE PREVIOUS
     296 00000950     8621          MOVE    *A1,A1,L
     297 00000960                   LOCKON  Z
     298 000009b0     482d          CMP     A1,A13          ;CHECK FOR MATCH TO CURRENT PROCESS
     299 000009c0     cbf7          JRNE    PSUCLP          ;NOT FOUND KEEP LOOKING
     300                    
     301 000009d0           SucIt:
     302                            ;*** MOVE PROCESS TO FREE LIST ***
     303 000009d0     8a22          MOVE    *A1,*A2,L       ;LINK AROUND IN ACTIVE LIST
     304                            .IF DEBUG
     305                            move    A1,A0
     306                            callr   CkFree
     307                            .ENDIF
     308 000009e0     05a0          move    @PFREECNT,A0,W  ;inc count of free processes
         000009f0 00000100- 
     309 00000a10     1020          inc     A0
     310 00000a20     0580          move    A0,@PFREECNT,W
         00000a30 00000100- 
     311 00000a50     07a0          MOVE    @FREE,A0,L      ;GET FREE POINTER
         00000a60 00000020- 
     312 00000a80     8201          MOVE    A0,*A1,L        ;LINK INTO FREE LIST AT START
     313 00000a90     0781          MOVE    A1,@FREE,L
         00000aa0 00000020- 
     314 00000ac0     4c4d          MOVE    A2,A13          ;SET CURRENT PROCESS TO PREVIOUS
     315 00000ad0     c000          JRUC    PRCD1           ;CONTINUE WITH DISPATCH
         00000ae0     ff7b  
     316                    **************************************************************************
     317                    
     318                    
     319                    **************************************************************************
     320                    *PROCESS LIST INITIALIZE
     321                    *A13 RETURNED POINTING TO ACTIVE LIST (CRPROC)
     322 00000af0           PINIT:
     323 00000af0     098f          MMTM    SP,A0,A1,A2,A3  ;SAVE REG
         00000b00     f000  
     324 00000b10     09c3          MOVI    NPROC,A3,W      ;# OF PROCESSES TO INIT
         00000b20     0100  
     325 00000b30     0583          move    A3,@PFREECNT,W
         00000b40 00000100- 
     326 00000b60     5600          CLR     A0
     327 00000b70     0780          MOVE    A0,@ACTIVE,L    ;NULL ACTIVE LIST
         00000b80 00000000- 
     328 00000ba0     0780          MOVE    A0,@PACTIVE,L   ;NULL PRIORITY ACTIVE LIST
         00000bb0 00000040- 
     329 00000bd0     1821          MOVK    1,A1
     330 00000be0     0581          MOVE    A1,@LAST_TIMER,W        ;MAKE SURE IT KICKS OFF
         00000bf0 00000130- 
     331 00000c10     09e1          MOVI    PRCSTR,A1,L
         00000c20 00000140- 
     332 00000c40     0781          MOVE    A1,@FREE,L      ;SETUP FREE LIST
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    8

         00000c50 00000020- 
     333 00000c70           PINITL:
     334 00000c70     4c22          MOVE    A1,A2
     335 00000c80     0b01          ADDI    PRCSIZ,A1,W
         00000c90     1200  
     336 00000ca0     8222          MOVE    A1,*A2,L        ;LINK EM UP
     337 00000cb0     3ca3          DSJS    A3,PINITL       ;CONTINUE FOR NPROC
     338 00000cc0     8202          MOVE    A0,*A2,L        ;ZERO LAST LINK
     339 00000cd0     09ed          MOVI    ACTIVE,A13,L    ;INIT CURRENT PROCESS
         00000ce0 00000000- 
     340 00000d00     09af          MMFM    SP,A0,A1,A2,A3  ;RESTORE REGS
         00000d10     000f  
     341 00000d20     0960          RETS
     342                    **************************************************************************
     343                    
     344 00000d30           KILL_AND_GETPPRC                        ;create and kill priority
     345 00000d30                   push    a1
     346 00000d40     4c20          move    a1,a0
     347 00000d50     5621          clr     a1
     348 00000d60     03e1          not     a1
     349 00000d70     0d3f          callr   KILALL
         00000d80     00c3  
     350 00000d90                   pullq   a1
     351 00000da0     c02b          jruc    GETPPRC
     352                    
     353 00000db0           KILL_AND_GETPRC                 ;create and kill
     354 00000db0                   push    a1
     355 00000dc0     4c20          move    a1,a0
     356 00000dd0     5621          clr     a1
     357 00000de0     03e1          not     a1
     358 00000df0     0d3f          callr   KILALL
         00000e00     00bb  
     359 00000e10                   pullq   a1
     360 00000e20     c02d          jruc    GETPRC
     361                    
     362 00000e30           GETPPRC_OR_RETURN               ;create or return priority
     363 00000e30                   push    a1
     364 00000e40     4c20          move    a1,a0
     365 00000e50     5621          clr     a1
     366 00000e60     03e1          not     a1
     367 00000e70     0d3f          callr   EXISTP
         00000e80     00ee  
     368 00000e90                   pull    a1
     369 00000eb0     cb01          jrnz    gppor_8
     370 00000ec0     c019          jruc    GETPPRC
     371 00000ed0     4c01  gppor_8 move    a0,a1
     372 00000ee0     57ce          clr     a14             ;set zero flag
     373 00000ef0     0960          rets
     374 00000f00           GETPRC_OR_RETURN                        ;create or return
     375 00000f00                   push    a1
     376 00000f10     4c20          move    a1,a0
     377 00000f20     5621          clr     a1
     378 00000f30     03e1          not     a1
     379 00000f40     0d3f          callr   EXISTP
         00000f50     00e1  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    9

     380 00000f60                   pull    a1
     381 00000f80     cbf4          jrnz    gppor_8
     382 00000f90     c016          jruc    GETPRC
     383                    
     384 00000fa0           PROCESS_FORK
     385 00000fa0                   PUSH    A1
     386 00000fb0     b5a1          move    *a13(PROCID),a1
         00000fc0     0020  
     387 00000fd0     0d3f          CALLR   GETPRC
         00000fe0     0011  
     388 00000ff0                   PULLQ   A1
     389 00001000     0960          RETS
     390                    
     391 00001010           PPROCESS_FORK
     392 00001010                   PUSH    A1
     393 00001020     b5a1          move    *a13(PROCID),a1
         00001030     0020  
     394 00001040                   PULLQ   A1
     395 00001050     0960          RETS
     396                    
     397                    **************************************************************************
     398                    *CREATE A PROCESS
     399                    *A1=ID,A7=PC,A8,A9,A10,A11 PASSED PARAMETERS
     400                    *A13=CURRENT PROCESS
     401                    *A0 IS RETURNED POINTING TO CREATED PROCESS
     402 00001060           GETPPRC:
     403 00001060     098f          MMTM    SP,A2,A13
         00001070     2004  
     404 00001080     05a0          move    @PRIORITY,A0,W
         00001090 000000c0- 
     405 000010b0     c10e          jrp     GetIt           ;executing priority list
     406 000010c0     09ed          movi    PACTIVE,A13
         000010d0 00000040- 
     407 000010f0     c00a          jruc    GetIt
     408 00001100           GETPRC:
     409 00001100     098f          MMTM    SP,A2,A13
         00001110     2004  
     410 00001120     05a0          move    @PRIORITY,A0,W
         00001130 000000c0- 
     411 00001150     ca04          jrz     GetIt           ;executing reg list
     412 00001160     ce03          jrn     GetIt           ;executing reg list
     413 00001170     09ed          movi    ACTIVE,A13
         00001180 00000000- 
     414 000011a0           GetIt:
     415 000011a0     07a0          MOVE    @FREE,A0,L
         000011b0 00000020- 
     416 000011d0     ca20          JREQ    GETPX           ;NONE AVAILABLE
     417 000011e0     05a2          move    @PFREECNT,A2,W  ;dec count of free processes
         000011f0 00000100- 
     418 00001210     1422          dec     A2
     419 00001220     0582          move    A2,@PFREECNT,W
         00001230 00000100- 
     420                            .IF     DEBUG
     421                            jrn     $               ;WANT
     422                            .ENDIF
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   10

     423 00001250     8602          MOVE    *A0,A2,L
     424 00001260     0782          MOVE    A2,@FREE,L      ;REMOVE FROM FREE LIST
         00001270 00000020- 
     425 00001290     8ba0          MOVE    *A13,*A0,L      ;LINK INTO ACTIVE LIST AFTER CURRENT PROCESS
     426 000012a0     820d          MOVE    A0,*A13,L       ;CRPROC>>NEW PROC
     427 000012b0     b020          MOVE    A1,*A0(PROCID)
         000012c0     0020  
     428 000012d0     4c02          MOVE    A0,A2
     429 000012e0     0b02          ADDI    PDATA,A2
         000012f0     0100  
     430 00001300     0982          MMTM    A2,A7,A8,A9,A10,A11
         00001310     01f0  
     431 00001320     4c02          move    A0,A2
     432 00001330     0b02          addi    PRCSIZ,A2
         00001340     1200  
     433 00001350     b240          MOVE    A2,*A0(PSPTR),L ;PUT IN STACK POINTER
         00001360     0040  
     434 00001370     1822          MOVK    1,A2            ;INIT SLEEP TIME
     435 00001380     b040          MOVE    A2,*A0(PTIME)
         00001390     0030  
     436 000013a0     5642          CLR     A2
     437 000013b0     b040          MOVE    A2,*A0(PCOMM),W ;CLEAR THE COMMUNICATION LINE ON INIT
         000013c0     08f0  
     438 000013d0     4c00          move    A0,A0           ;set non-zero flag
     439 000013e0           GETPX:
     440 000013e0     09af          MMFM    SP,A2,A13
         000013f0     2004  
     441 00001400     0960          RETS
     442                    **************************************************************************
     443                    
     444                    **************************************************************************
     445                    * XFERPROC - TRANSFER CONTROL OF AN EXISTING PROCESS
     446                    * A0 = PTR OF PROCESS TO BE XFER'D
     447                    * A1 = NEW I.D.
     448                    * A7 = WAKE UP
     449                    * A8 - A11 = PASSED TO THE XFER'D PROC
     450 00001410           XFERPROC
     451 00001410     098f          mmtm    SP,A2,A12
         00001420     2008  
     452 00001430     4c02          MOVE    A0,A2
     453 00001440     0b02          ADDI    PDATA,A2
         00001450     0100  
     454 00001460     4c0c          move    A0,A12                  ;RESET PROCESS STACK POINTER
     455 00001470     0b0c          addi    PRCSIZ,A12
         00001480     1200  
     456 00001490     0982          MMTM    A2,A7,A8,A9,A10,A11,A12 ;STUFF wake, regs, p stack ptr
         000014a0     01f8  
     457 000014b0     182c          movk    1,A12
     458 000014c0     a182          move    A12,-*A2,W              ;WAKE UP AS SOON AS POSSIBLE
     459 000014d0     a022          move    A1,-*A2,W               ;ID
     460 000014e0     09af          mmfm    SP,A2,A12
         000014f0     1004  
     461 00001500     0960          RETS
     462                    **************************************************************************
     463                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   11

     464                    **************************************************************************
     465                    *                                                                        *
     466                    * PROC_INT - INTERRUPT A PROCESS TO ANOTHER ROUTINE THAT WILL RETP BACK. *
     467                    * A0 = PTR OF PROCESS TO BE XFER'D                                       *
     468                    * A7 = WAKE UP                                                           *
     469                    *                                                                        *
     470                    **************************************************************************
     471 00001510           PROC_INT
     472 00001510     098f          mmtm    SP,A1,A2
         00001520     6000  
     473 00001530     b602          move    *A0(PWAKE),A2,L
         00001540     00e0  
     474 00001550     b2e0          move    A7,*A0(PWAKE),L         ;set new wake up
         00001560     00e0  
     475 00001570     b601          MOVE    *A0(PSPTR),A1,L         ;GET THE STACK POINTER
         00001580     0040  
     476 00001590     a241          move    A2,-*A1,L               ;Push old wake up
     477 000015a0     b220          MOVE    A1,*A0(PSPTR),L         ;RESET THE STACK POINTER
         000015b0     0040  
     478 000015c0     1821          MOVK    1,A1
     479 000015d0     b020          MOVE    A1,*A0(PTIME),W         ;WAKE UP AS SOON AS POSSIBLE
         000015e0     0030  
     480 000015f0     09af          mmfm    SP,A1,A2
         00001600     0006  
     481 00001610     0960          RETS
     482                    
     483                    **************************************************************************
     484                    *                                                                        *
     485                    * CkPlinks - DEBUG ONLY FUNCTION TO CHECK IF ANY FOREGROUND OBJECTS      *
     486                    *          OPLINK FIELD MATCHES A13.                                     *
     487                    *                                                                        *
     488                    **************************************************************************
     489                    ;;;     .IF DEBUG
     490                    ;;;CkPlinks:
     491                    ;;;     mmtm    SP,A0,A1,A2
     492                    ;;;     movi    FGLIST,A0
     493                    ;;;     MOVE    A0,A2
     494                    ;;;CkPlink:
     495                    ;;;     move    *A0,A0,L
     496                    ;;;     cmp     A0,A2
     497                    ;;;     jreq    PlinkX
     498                    ;;;     move    *A0(OPLINK),A1,L
     499                    ;;;     cmp     A13,A1
     500                    ;;;     jreq    $
     501                    ;;;     jruc    CkPlink
     502                    ;;;PlinkX:
     503                    ;;;     mmfm    SP,A0,A1,A2
     504                    ;;;     rets
     505                    ;;;
     506                    ;;;     .ENDIF
     507                    
     508                    **************************************************************************
     509                            .IF DEBUG
     510                    CkFree:
     511                    ;* CALLED W/ PROC TO BE FREED IN A0 - IF PROC ON FREE LIST HANG
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   12

     512                            PUSH    A1
     513                            movi    FREE,A1,L
     514                    FreeCkLp:
     515                            move    *A1,A1,L
     516                            jrz     FreeCkX
     517                            cmp     A1,A0
     518                            jrne    FreeCkLp
     519                            ;*** GOT PROCESS TO BE FREED ON FREE LIST, LOG IT
     520                            jruc    $
     521                    
     522                    FreeCkX:
     523                            PULLQ   A1
     524                            rets
     525                            .ENDIF
     526                    **************************************************************************
     527                    
     528                    **************************************************************************
     529                    *KILL PROCESS
     530                    *A0 POINTS TO PROCESS TO KILL
     531                    *IF PROCESS NOT PRESENT, CAUSES ERROR
     532                    *TO KILL YOURSELF SUCIDE MUST BE USED,
     533                    *IF YOU ATTEMPT TO KILL YOURSELF IT WILL JUST RETURN
     534 00001620           KILL:
     535 00001620     480d          CMP     A0,A13          ;KILLING YOURSELF?
     536 00001630     ca10          JREQ    KILLXXX         ;BR = YES, JUST ESCAPE
     537 00001640     098f          MMTM    SP,A1,A2
         00001650     6000  
     538                            .IF DEBUG
     539                            move    A13,A1
     540                            move    A0,A13
     541                    ;;;     callr   CkPlinks
     542                            callr   CkFree
     543                            move    A1,A13
     544                            .ENDIF
     545                    
     546 00001660     09e1          MOVI    ACTIVE,A1,L
         00001670 00000000- 
     547 00001690     0d3f          callr   KILLP
         000016a0     000a  
     548 000016b0     cb06          jrnz    KILLX
     549 000016c0     09e1          MOVI    PACTIVE,A1,L
         000016d0 00000040- 
     550 000016f0     0d3f          callr   KILLP
         00001700     0004  
     551 00001710     0300          jrnz    KILLX
     552                            ;*** CANT FIND TO KILL, LOG AN ERROR ***
     553                            .IF DEBUG
     554                            jruc    $
     555                            .ENDIF
     556 00001720           KILLX
     557 00001720     09af          MMFM    SP,A1,A2
         00001730     0006  
     558 00001740           KILLXXX
     559 00001740     0960          RETS
     560                    
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   13

     561 00001750           KILLP:
     562 00001750     4c22          MOVE    A1,A2           ;SAVE PREVIOUS
     563 00001760     8621          MOVE    *A1,A1,L
     564 00001770     ca1c          JRZ     KILLPX
     565 00001780     4820          CMP     A1,A0
     566 00001790     cbfb          JRNE    KILLP           ;NOT FOUND KEEP LOOKING
     567                    
     568                            ;*** KILL IT ***
     569 000017a0     8a02          MOVE    *A0,*A2,L       ;LINK AROUND IN ACTIVE LIST
     570 000017b0     07a1          MOVE    @FREE,A1,L      ;LINK INTO FREE LIST AT START
         000017c0 00000020- 
     571 000017e0     8220          MOVE    A1,*A0,L
     572 000017f0     0780          MOVE    A0,@FREE,L
         00001800 00000020- 
     573                    
     574 00001820     07a1          move    @NXTPRC,A1,L
         00001830 000000e0- 
     575 00001850     4820          cmp     A1,A0
     576 00001860     cb06          jrne    SkNewNxt
     577 00001870     09e1          movi    ACTIVE,A1
         00001880 00000000- 
     578 000018a0     0781          move    A1,@NXTPRC,L
         000018b0 000000e0- 
     579 000018d0           SkNewNxt:
     580                    
     581 000018d0     05a2          move    @PFREECNT,A2,W  ;inc count of free processes
         000018e0 00000100- 
     582 00001900     1022          inc     A2
     583 00001910     0582          move    A2,@PFREECNT,W  ;also clears Z bit
         00001920 00000100- 
     584 00001940           KILLPX:
     585 00001940     0960          rets
     586                    **************************************************************************
     587                    
     588                    
     589                    **************************************************************************
     590                    *                                                                        *
     591                    * KILLPROC_ALL - KILL ALL OF THE PROCESSES WITH GIVEN I.D.               *
     592                    *               EXCEPT CALLING PROCESS.                                  *
     593                    * A0 = PROCESS I.D. TO KILL                                              *
     594                    *                                                                        *
     595                    **************************************************************************
     596 00001950           KILLPROC_ALL
     597 00001950                   PUSH    A1
     598 00001960     5621          CLR     A1
     599 00001970     03e1          NOT     A1
     600 00001980     0d3f          CALLR   KILALL
         00001990     0002  
     601 000019a0                   PULLQ   A1
     602 000019b0     0960          RETS
     603                    
     604                    **********************************************************************
     605                    *KILL A CLASS OF PROCESSES
     606                    *A0=PROCID (16 BITS) ,A1=MASK (16 BITS)
     607                    *MASK BITS OF ZERO ARE DONT CARES
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   14

     608                    *WILL NOT KILL CALLING PROCESS (A13)
     609 000019c0           KILALL:
     610 000019c0     098f          MMTM    SP,A0,A2,A3,A5
         000019d0     b400  
     611 000019e0     0500          SEXT    A0              ;SAFETY OP
     612 000019f0     5020          AND     A1,A0           ;FORM MATCH
     613 00001a00     09e2          MOVI    ACTIVE,A2,L
         00001a10 00000000- 
     614 00001a30     0d3f          callr   KILALP
         00001a40     000e  
     615 00001a50     09e2          MOVI    PACTIVE,A2,L
         00001a60 00000040- 
     616 00001a80     0d3f          callr   KILALP
         00001a90     0009  
     617 00001aa0     09e0          movi    ACTIVE,A0
         00001ab0 00000000- 
     618 00001ad0     0780          move    A0,@NXTPRC,L
         00001ae0 000000e0- 
     619 00001b00     09af          MMFM    SP,A0,A2,A3,A5
         00001b10     002d  
     620 00001b20     0960          RETS
     621                    
     622 00001b30           KILALP:
     623 00001b30     4c43          MOVE    A2,A3           ;SAVE PREVIOUS
     624 00001b40     8642          MOVE    *A2,A2,L        ;GET NEXT
     625 00001b50     ca18          JREQ    KILALX          ;ALL DONE
     626 00001b60     b44e          MOVE    *A2(PROCID),A14
         00001b70     0020  
     627 00001b80     502e          AND     A1,A14          ;CAN DONT CARE BITS
     628 00001b90     480e          CMP     A0,A14          ;MATCH?
     629 00001ba0     cbf8          JRNE    KILALP          ;NO
     630                    
     631 00001bb0     484d          CMP     A2,A13          ;CURRENT PROCESS?
     632 00001bc0     caf6          JREQ    KILALP          ;YES DONT KILL
     633                    
     634 00001bd0     8a43          MOVE    *A2,*A3,L       ;LINK AROUND IN ACTIVE LIST
     635 00001be0     07a5          MOVE    @FREE,A5,L      ;LINK INTO FREE LIST AT START
         00001bf0 00000020- 
     636 00001c10     82a2          MOVE    A5,*A2,L
     637 00001c20     0782          MOVE    A2,@FREE,L      ;POINT FREE TO CELL
         00001c30 00000020- 
     638 00001c50     05a2          move    @PFREECNT,A2,W  ;inc count of free processes
         00001c60 00000100- 
     639 00001c80     1022          inc     A2
     640 00001c90     0582          move    A2,@PFREECNT,W
         00001ca0 00000100- 
     641 00001cc0     4c62          MOVE    A3,A2
     642 00001cd0     c0e5          JRUC    KILALP          ;KILL THE REST
     643 00001ce0           KILALX:
     644 00001ce0     0960          rets
     645                    **********************************************************************
     646                    
     647                    **************************************************************************
     648                    *                                                                        *
     649                    * EXISTP_ALL - CHECK FOR THE EXISTANCE OF A PROCESS OF A GIVEN PROCESS   *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   15

     650                    *               I.D. OTHER THAN THE CALLING PROCESS.                     *
     651                    * A0 = PROCESS I.D.                                                      *
     652                    * RETURNS:                                                               *
     653                    *        Z = NO PROCESSES FOUND                                          *
     654                    *               A0 = 0                                                   *
     655                    *       NZ = MATCHING PROCESS FOUND                                      *
     656                    *               A0 = PTR TO PROCESS                                      *
     657                    *                                                                        *
     658                    **************************************************************************
     659 00001cf0           EXISTP_ALL
     660 00001cf0                   PUSH    A1
     661 00001d00     5621          CLR     A1
     662 00001d10     03e1          NOT     A1
     663 00001d20     0d3f          CALLR   EXISTP
         00001d30     0003  
     664 00001d40                   PULL    A1
     665 00001d60     0960          RETS
     666                    
     667                    **************************************************************************
     668                    *FIND IF AT LEAST ONE PROCESS, OTHER THAN CALLING PROCESS,
     669                    *EXISTS.
     670                    *A0=PROCID (16 BITS) ,A1=MASK (16 BITS)
     671                    *MASK BITS OF ZERO ARE DONT CARES
     672                    *RETURNS:
     673                    * Z BIT SET = NO MATCH, A0 = 0
     674                    * Z BIT CLR = MATCH,    A0 = PTR TO PROCESS
     675                    *
     676 00001d70           EXISTP: ;*** CHECK BOTH LISTS ***
     677 00001d70     098f          MMTM    SP,A1,A2,A4
         00001d80     6800  
     678 00001d90     0500          SEXT    A0              ;SAFETY OP
     679 00001da0     5020          AND     A1,A0           ;FORM MATCH
     680 00001db0     09e2          MOVI    ACTIVE,A2,L
         00001dc0 00000000- 
     681 00001de0     0d3f          callr   EXNXT
         00001df0     0017  
     682 00001e00     cb06          jrnz    FOUNDP
     683 00001e10     09e2          MOVI    PACTIVE,A2,L
         00001e20 00000040- 
     684 00001e40     0d3f          callr   EXNXT
         00001e50     0011  
     685 00001e60     0300          JRNZ    FOUNDP
     686 00001e70           FOUNDP:
     687 00001e70     4c40          MOVE    A2,A0
     688 00001e80     09af          MMFM    SP,A1,A2,A4
         00001e90     0016  
     689 00001ea0     0960          RETS
     690                    
     691                    
     692 00001eb0           PEXISTP: ;*** CHECK PRIORITY LIST ***
     693 00001eb0     098f          MMTM    SP,A1,A2,A4
         00001ec0     6800  
     694 00001ed0     5020          AND     A1,A0           ;FORM MATCH
     695 00001ee0     09e2          MOVI    PACTIVE,A2,L
         00001ef0 00000040- 
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   16

     696 00001f10     0d3f          callr   EXNXT
         00001f20     0004  
     697 00001f30     4c40          MOVE    A2,A0
     698 00001f40     09af          MMFM    SP,A1,A2,A4
         00001f50     0016  
     699 00001f60     0960          RETS
     700                    
     701                    
     702 00001f70           EXNXT:
     703 00001f70     8642          MOVE    *A2,A2,L        ;GET NEXT
     704 00001f80     ca07          JREQ    EXSC            ;ALL DONE
     705 00001f90     b444          MOVE    *A2(PROCID),A4
         00001fa0     0020  
     706 00001fb0     5024          AND     A1,A4           ;CAN DONT CARE BITS
     707 00001fc0     4804          CMP     A0,A4           ;MATCH?
     708 00001fd0     cbf9          JRNE    EXNXT           ;NO
     709                    
     710 00001fe0     484d          CMP     A2,A13          ;CURRENT PROCESS?
     711 00001ff0     caf7          JREQ    EXNXT           ;YES, THEN WE DON'T CARE
     712 00002000           EXSC
     713 00002000     0960          RETS
     714                    **************************************************************************
     715                    
     716                    
     717                    **************************************************************************
     718                    *                                                                        *
     719                    * COUNT_PROCESSES - COUNT THE NUMBER OF PROCESSES OF A GIVEN I.D.        *
     720                    *               CURRENTLY ACTIVE  (BOTH LISTS).                          *
     721                    * COUNT_PACTIVE - JUST PRIORITY                                          *
     722                    * COUNT_ACTIVE  - JUST REGULAR                                           *
     723                    *               INCLUDES CALLING PROCESS IN COUNT, IF IT MATCHES.        *
     724                    * A1 = PROCESS I.D. TO COUNT                                             *
     725                    * RETURNS:                                                               *
     726                    *       A0 = COUNT                                                       *
     727                    *       Z BIT REFLECTS VALUE IN A0                                       *
     728                    *                                                                        *
     729                    **************************************************************************
     730 00002010           COUNT_PROCESSES
     731 00002010     098f          MMTM    SP,A2,A6
         00002020     2200  
     732 00002030     09e2          MOVI    ACTIVE,A2
         00002040 00000000- 
     733 00002060     0d3f          CALLR   COUNT_PRCLIST
         00002070     000a  
     734 00002080     4c06          MOVE    A0,A6
     735 00002090     09e2          MOVI    PACTIVE,A2
         000020a0 00000040- 
     736 000020c0     0d3f          CALLR   COUNT_PRCLIST
         000020d0     0004  
     737 000020e0     4006          ADD     A0,A6
     738 000020f0     09af          MMFM    SP,A2,A6
         00002100     0044  
     739 00002110     0960          RETS
     740                    
     741 00002120           COUNT_PRCLIST
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   17

     742 00002120     5600          CLR     A0              ;CLEAR COUNT
     743 00002130     4c42          MOVE    A2,A2
     744 00002140     ca08          JRZ     CP_X            ;BR = EMPTY
     745 00002150           CP_LOOP
     746 00002150     b44e          MOVE    *A2(PROCID),A14,W
         00002160     0020  
     747 00002170     482e          CMP     A1,A14          ;SHALL WE COUNT THIS ONE?
     748 00002180     cb01          JRNE    CP_NEXT         ;BR = NO
     749 00002190     1020          INC     A0              ;TALLY ANOTHER
     750 000021a0           CP_NEXT
     751 000021a0     8642          MOVE    *A2,A2,L        ;GET NEXT
     752 000021b0     cbf9          JRNE    CP_LOOP         ;BR = DEFINITELY MORE TO DO
     753 000021c0     4c00          MOVE    A0,A0
     754 000021d0           CP_X
     755 000021d0     0960          RETS
     756                    
     757                    
     758                    **************************************************************************
     759                    *GET A PRESERVED REGISTER FROM A SLEEPING PROCESS
     760                    *A0 = PTR TO SLEEPER
     761 000021e0     b60b  GETA11  move    *A0(PA11),A11,L
         000021f0     0060  
     762 00002200     0960          RETS
     763 00002210     b60a  GETA10  move    *A0(PA10),A10,L
         00002220     0080  
     764 00002230     0960          RETS
     765 00002240     b609  GETA9   move    *A0(PA9),A9,L
         00002250     00a0  
     766 00002260     0960          RETS
     767 00002270     b608  GETA8   move    *A0(PA8),A8,L
         00002280     00c0  
     768 00002290     0960          RETS
     769 000022a0     b607  GETWAKE move    *A0(PWAKE),A7,L
         000022b0     00e0  
     770 000022c0     0960          RETS
     771                    
     772 000022d0           GETREGS
     773 000022d0     b60b          move    *A0(PA11),A11,L
         000022e0     0060  
     774 000022f0     b60a          move    *A0(PA10),A10,L
         00002300     0080  
     775 00002310     b609          move    *A0(PA9),A9,L
         00002320     00a0  
     776 00002330     b608          move    *A0(PA8),A8,L
         00002340     00c0  
     777 00002350     0960          RETS
     778                    
     779 00002360     b360  PUTA11  move    A11,*A0(PA11),L
         00002370     0060  
     780 00002380     0960          RETS
     781 00002390     b340  PUTA10  move    A10,*A0(PA10),L
         000023a0     0080  
     782 000023b0     0960          RETS
     783 000023c0     b320  PUTA9   move    A9,*A0(PA9),L
         000023d0     00a0  
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   18

     784 000023e0     0960          RETS
     785 000023f0     b300  PUTA8   move    A8,*A0(PA8),L
         00002400     00c0  
     786 00002410     0960          RETS
     787                    
     788                    ;*** PUTWAKE - FAST XFERPROC THAT DOESN'T CHANGE REGS (A8-A11) OF PROC ***
     789 00002420           PUTWAKE PUSH    A2
     790 00002430     b2e0          move    A7,*A0(PWAKE),L
         00002440     00e0  
     791 00002450     4c02          move    A0,A2
     792 00002460     0b02          addi    PRCSIZ,A2
         00002470     1200  
     793 00002480     b240          move    A2,*A0(PSPTR),L ;RESET PROCESS STACK POINTER
         00002490     0040  
     794 000024a0     5642          clr     A2
     795 000024b0     b040          move    A2,*A0(PTIME),W
         000024c0     0030  
     796 000024d0                   PULLQ   A2
     797 000024e0     0960          RETS
     798                    
     799 000024f0           PUTREGS
     800 000024f0     b360          move    A11,*A0(PA11),L
         00002500     0060  
     801 00002510     b340          move    A10,*A0(PA10),L
         00002520     0080  
     802 00002530     b320          move    A9,*A0(PA9),L
         00002540     00a0  
     803 00002550     b300          move    A8,*A0(PA8),L
         00002560     00c0  
     804 00002570     0960          RETS
     805                    **************************************************************************
     806                    
     807                    
     808                    **************************************************************************
     809                    *GET A LONG WORD FROM THE STACK OF A SLEEPING PROCESS
     810                    *A0 = PTR TO SLEEPING PROC
     811                    *A1 = OFFSET OF WORD FROM STACK POINTER
     812                    *A2 = CURRENT STACK PTR
     813                    *RETURN(S)
     814                    *A1 = LONG WORD
     815                    ****GETSLW      PUSH    A2
     816                    ****    MOVE    *A0(PSPTR),A2,L         ;GET THE STACK POINTER
     817                    ****    ADD     A1,A2                   ;ADD THE OFFSET
     818                    ****    MOVE    *A2,A1,L                ;MOVE IN THE LONG WORD
     819                    ****    PULLQ   A2
     820                    ****    RETS
     821                    
     822                    *PUT A LONG WORD INTO THE STACK OF A SLEEPING PROCESS
     823                    *A0 = PTR TO SLEEPING PROC
     824                    *A1 = INDEX INTO STACK
     825                    *A2 = VALUE TO PUT
     826                    ****PUTSLW      PUSH    A3
     827                    ****    MOVE    *A0(PSPTR),A3,L         ;GET THE STACK POINTER
     828                    ****    ADD     A1,A3                   ;ADD THE OFFSET
     829                    ****    MOVE    A2,*A3,L
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   19

     830                    ****    PULLQ   A3
     831                    ****    RETS
     832                    
     833                    ;*** CLEARS SLEEP TIME OF PROCESS IN A0 ***
     834 00002580           WAKEUP: PUSH    A1
     835 00002590     5621          clr     A1
     836 000025a0     b020          move    A1,*A0(PTIME),W
         000025b0     0030  
     837 000025c0                   PULLQ   A1
     838 000025d0     0960          rets
     839                    
     840                    
     841                    **************************************************************************
     842                    *                                                                        *
     843                    * OBJPROC_KILL - KILL PROCESS CONTROLLING AN OBJECT.                     *
     844                    * A8 = PTR TO OBJECT                                                     *
     845                    * NOTE: IF NO PROCESS IS ASSOCIATED, NOTHING IS DONE.                    *
     846                    *       YOU MUST USE SUCIDE IF YOU ARE THE CONTROLLING PROCESS.          *
     847                    *                                                                        *
     848                    **************************************************************************
     849                    ;;;OBJPROC_KILL:
     850                    ;;;     PUSH    A0
     851                    ;;;     MOVE    *A8(OPLINK),A0,L
     852                    ;;;     JRZ     OBJPROC_NOK
     853                    ;;;     CLRM    *A8(OPLINK),L           ;WASTE THE OPLINK
     854                    ;;;     CALLR   KILL
     855                    ;;;OBJPROC_NOK:
     856                    ;;;     PULLQ   A0
     857                    ;;;     RETS
     858                    
     859                    ;WFD 8-8-94
     860                    **************************************************************************
     861                    *                                                                        *
     862                    *       OBJPROC_KILL_MULTI                                               *
     863                    *                                                                        *
     864                    *       Kill controlling processes of all objects of a                   *
     865                    *       multi-parter.                                                    *
     866                    *                                                                        *
     867                    *       A8 = Ptr to part to start with.                                  *
     868                    *                                                                        *
     869                    **************************************************************************
     870                    ;;;OBJPROC_KILL_MULTI
     871                    ;;;     PUSH    A8
     872                    ;;;OKM_LOOP
     873                    ;;;     CALLR   OBJPROC_KILL
     874                    ;;;     MOVE    *A8(OPARTS),A8,L
     875                    ;;;     JRNZ    OKM_LOOP
     876                    ;;;     PULLQ   A8
     877                    ;;;     RETS
     878                    ;;;;WFD 8-8-94
     879                    
     880                    **************************************************************************
     881                    *                                                                        *
     882                    * OBJPROC_XFER - TRANSFER OBJECT CONTROL PROCESS TO NEW PROCESS          *
     883                    * A1 = NEW PROC I.D.                                                     *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   20

     884                    * A7 = NEW PROC ADDRESS                                                  *
     885                    * A8 = PTR TO OBJECT                                                     *
     886                    *                                                                        *
     887                    **************************************************************************
     888                    ;;;OBJPROC_XFER:
     889                    ;;;     PUSH    A0
     890                    ;;;     MOVE    *A8(OPLINK),A0,L
     891                    ;;;     JRZ     OBJPROC_XFERX
     892                    ;;;     CALLR   PUTWAKE
     893                    ;;;     MOVE    A1,*A0(PROCID),W
     894                    ;;;OBJPROC_XFERX:
     895                    ;;;     PULLQ   A0
     896                    ;;;     RETS
     897                    
     898                    **************************************************************************
     899                    *                                                                        *
     900                    * OBJPROC_INT - INTERRUPT THE PROCESS ASSOCIATED WITH THE GIVEN          *
     901                    *               OBJECT TRANFERRING EXECUTION TO A NEW ADDRESS.           *
     902                    *               THE CURRENT WAKEUP ADDRESS WILL BE PUSHED ONTO           *
     903                    *               THE PROCESS STACK SUITABLE FOR RETP.                     *
     904                    * A7 = PROCESS INTERRUPT VECTOR                                          *
     905                    * A8 = PTR TO OBJECT                                                     *
     906                    * RETURNS:                                                               *
     907                    *        Z = NO PROCESS FOUND                                            *
     908                    *       NZ = INTERRUPT SUCCESSFULL                                       *
     909                    *                                                                        *
     910                    **************************************************************************
     911                    ;;;OBJPROC_INT:
     912                    ;;;     PUSH    A0
     913                    ;;;     MOVE    *A8(OPLINK),A0,L
     914                    ;;;     JRZ     OBJPROC_INT_X
     915                    ;;;     CALLR   PROC_INT
     916                    ;;;OBJPROC_INT_X
     917                    ;;;     PULL    A0
     918                    ;;;     RETS
     919                    
     920                    **************************************************************************
     921                    *                                                                        *
     922                    * SEND_COMM - SEND COMMUNICATION TO THIS PROCESS (VIA PCOMM).            *
     923                    * A1 = SEND WORD                                                         *
     924                    * A11 = PTR TO RECEIVING PROCESS (IF = 0 THEN NO ACTION)                 *
     925                    * A13 = PTR TO SENDING PROCESS                                           *
     926                    *                                                                        *
     927                    **************************************************************************
     928 000025e0           SEND_COMM:
     929 000025e0     4d6b          MOVE    A11,A11
     930 000025f0     ca02          JRZ     SEND_COMM_X
     931 00002600     b02b          MOVE    A1,*A11(PCOMM),W
         00002610     08f0  
     932 00002620           SEND_COMM_X:
     933 00002620     0960          RETS
     934                    
     935                    **************************************************************************
     936                    *                                                                        *
     937                    * COMM_WAIT - WAIT FOR A COMMUNICATION FROM A PROCESS (VIA PCOMM).       *
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   21

     938                    * A2 = WORD TO WAIT FOR                                                  *
     939                    * A3 = TIME OUT (IN TICKS)                                               *
     940                    * A13 = PTR TO PROCESS WAITING FOR DATA                                  *
     941                    * RETURNS:                                                               *
     942                    *        Z = COMMUNICATION RECIEVED                                      *
     943                    *       NZ = TIME OUT                                                    *
     944                    * NOTE: CALL WITH JSRP                                                   *
     945                    *                                                                        *
     946                    **************************************************************************
     947 00002630           COMM_WAIT:
     948 00002630     098c          MMTM    A12,A8,A9
         00002640     00c0  
     949 00002650     4c48          MOVE    A2,A8
     950 00002660     4c69          MOVE    A3,A9
     951 00002670           COMM_WAIT_LP:
     952 00002670                   SLEEP   1
     953 000026b0     b5a2          MOVE    *A13(PCOMM),A2,W
         000026c0     08f0  
     954 000026d0     4848          CMP     A2,A8
     955 000026e0     ca03          JREQ    COMM_WAIT_X
     956 000026f0     3d29          DSJS    A9,COMM_WAIT_LP
     957 00002700                   CLRZ
     958 00002720           COMM_WAIT_X:
     959 00002720     09ac          MMFM    A12,A8,A9
         00002730     0300  
     960 00002740                   RETP
     961                    
     962                    **************************************************************************
     963                    *                                                                        *
     964                    * COMM_WAIT_REMOTE - WAIT FOR A COMMUNICATION FROM A REMOTE PROCESS      *
     965                    *                       (VIA PCOMM).                                     *
     966                    * A2 = WORD TO WAIT FOR                                                  *
     967                    * A3 = TIME OUT (IN TICKS)                                               *
     968                    * A11 = PTR TO REMOTE PROCESS                                            *
     969                    * RETURNS:                                                               *
     970                    *        Z = COMMUNICATION RECIEVED                                      *
     971                    *       NZ = TIME OUT                                                    *
     972                    * NOTE: CALL WITH JSRP                                                   *
     973                    *                                                                        *
     974                    **************************************************************************
     975 00002770           COMM_WAIT_REMOTE:
     976 00002770     098c          MMTM    A12,A8,A9
         00002780     00c0  
     977 00002790     4c48          MOVE    A2,A8
     978 000027a0     4c69          MOVE    A3,A9
     979 000027b0           CWR_LP:
     980 000027b0                   SLEEP   1
     981 000027f0     b562          MOVE    *A11(PCOMM),A2,W
         00002800     08f0  
     982 00002810     4848          CMP     A2,A8
     983 00002820     ca03          JREQ    CWR_X
     984 00002830     3d29          DSJS    A9,CWR_LP
     985 00002840                   CLRZ
     986 00002860           CWR_X:
     987 00002860     09ac          MMFM    A12,A8,A9
TMS340 COFF Macro Assembler Version 6.10     Wed Apr 21 11:40:16 2021
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE   22

         00002870     0300  
     988 00002880                   RETP
     989                    
     990                    **************************************************************************
     991                    *                                                                        *
     992                    * SEND_COMM_WAIT - SEND COMMUNICATION AND WAIT FOR A REPLY.              *
     993                    * A1 = DATA TO SEND                                                      *
     994                    * A2 = DATA TO WAIT FOR                                                  *
     995                    * A3 = TIME OUT ON WAIT                                                  *
     996                    * A11 = PTR TO RECEIVING PROCESS                                         *
     997                    * A13 = PTR TO SENDING PROCESS                                           *
     998                    * RETURNS                                                                *
     999                    *        Z = DATA SENT, REPLY RECEIVED                                   *
    1000                    *       NZ = TIME OUT ERROR                                              *
    1001                    * NOTE: CALL WITH JSRP                                                   *
    1002                    *                                                                        *
    1003                    **************************************************************************
    1004 000028b0           SEND_COMM_WAIT:
    1005 000028b0     0d3f          CALLR   SEND_COMM
         000028c0     ffd1  
    1006 000028d0                   JSRP    COMM_WAIT
    1007 00002940                   RETP
    1008                    

 No Errors,  No Warnings
