 	.MLIB	"HHMACS.LIB"
	.FILE	"HHMATH.ASM"
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST

	.INCLUDE	"HH.INC"
	.include	"hhmath.e"
	.include	"hhmisc.g"
	.include	"hhutil.g"

; end of include files


W	.set	0
L	.set	1

	.text
	.even

**************************************************************************
*								         *
* GETSIN								 *
* ; PARMS   - A0 = theta in s15.16					 *
* ; RETURNS - A0 = sin(theta) in s15.16					 *
*								         *
**************************************************************************
GETSIN
	THETA_N	a0
	sra	8,A0
	sll	5,A0
	addi	sin_table,A0
	move	*A0,A0,L
	rets

**************************************************************************
*								         *
* GETCOS								 *
* ; PARMS   - A0 = theta in s15.16					 *
* ; RETURNS - A0 = cos(theta) in s15.16					 *
*								         *
**************************************************************************
GETCOS
	THETA_N	a0
	sra	8,A0
	sll	5,A0
	addi	cos_table,a0
	move	*A0,A0,L
	rets

**************************************************************************
*								         *
* GETSINCOS								 *
* ; PARMS   - A0 = theta in s15.16					 *
* ; RETURNS - A0 = sin(theta) in s15.16					 *
* ; RETURNS - A1 = cos(theta) in s15.16					 *
*								         *
**************************************************************************
GETSINCOS
	THETA_N	a0
	sra	8,a0
	sll	5,a0
	addi	sin_table,a0
	move	*a0(cos_table-sin_table),a1,L
	move	*a0,a0,L
	rets

**************************************************************************
*								         *
* GETATAN								 *
* ; PARMS   - A0 = tangent in s15.16 (must be from angle < pi/4)	 *
* ; RETURNS - A0 = theta in s15.16					 *
* ;mdp	note: more resolution for angles closer to pi/4			 *
*								         *
**************************************************************************
GETATAN
	srl	7,a0
	sll	4,a0
	addi	ATAN_TABLE,a0
	move	*a0,a0,W
	sll	16,a0	;clear out sign bit (we want unsigned 16 bit numbers)
	srl	16,a0
	rets

**************************************************************************
*								         *
* get_correct_y_velocity						 *
* 	input	a3 = distance						 *
* 		a1 = horizontal velocity				 *
* 		a2 = y position						 *
* 	output	a3 = y velocity						 *
*								         *
**************************************************************************
get_correct_y_velocity
	move	a3,a0
	callr	DIV		;a1 = d/v = time
	move	a2,a0
	move	a1,a2		;save time
	callr	DIV		;a1 = Y/t
	move	a1,a3		;save Y/t
	movi	[0,1800h],a0	;1/2 gravity
	move	a2,a1
	callr	MULT		;a1 = 1/2 a * time
	sub	a1,a3		;a3 = velocity
	rets

**************************************************************************
*								         *
* SQUARE								 *
* 	squares a number in the form s15:16 and returns s15:16		 *
* input:   a1 = s15:16 number						 *
* output   a1 = s15:16 number						 *
*								         *
**************************************************************************
SQUARE	mmtm	sp,a0,a2
	move	a1,a0
	sra	4,a0
	mpys	a0,a0
	sll	16,a0
	move	a1,a2
	srl	16,a2
	movx	a2,a0
	sll	8,a0
	srl	8,a1
	movy	a0,a1
	mmfm	sp,a0,a2
	rets

**************************************************************************
*								         *
* MULT									 *
* 	multiplies two numbers in the form s15:16 and returns s15:16	 *
* input    a0 = s15:16 number						 *
*          a1 = s15:16 number						 *
* output   a1 = s15:16 number						 *
*								         *
**************************************************************************
MULT	mmtm	sp,a0,a2
	sra	4,a0
	sra	4,a1
	mpys	a1,a0
	sll	16,a0
	move	a1,a2
	srl	16,a2
	movx	a2,a0
	sll	8,a0
	srl	8,a1
	movy	a0,a1
	mmfm	sp,a0,a2
	rets

**************************************************************************
*								         *
* DIV									 *
* 	divides two numbers in the form s15:16 and returns s15:16	 *
* input    a0 = s15:16 number						 *
*          a1 = s15:16 number						 *
* output   a1 = s15:16 number (a0 / a1)					 *
*								         *
**************************************************************************
DIV	mmtm	sp,a0,a2
	move	a1,a2
	move	a0,a1
	sll	16,a1
	sra	16,a0
	divs	a2,a0
	move	a0,a1
	mmfm	sp,a0,a2
	rets

**************************************************************************
*								         *
* SQUARE_ROOT								 *
* 	to get square root of a s15:16 number, we get the squareroot	 *
* 	of it as a 32 bit and then we shift left 8 bits			 *
* input:   a1 = s15:16 number (unsigned)				 *
* output:  a1 = s15:16 square root (unsigned)				 *
*								         *
**************************************************************************
SQUARE_ROOT
	callr	SQROOT
	sll	8,a1
	rets

**************************************************************************
*                                                                        *
*  SQROOT                                                                *
*                                                                        *
*  Eugene's BRILLIANT square root routine !!                             *
*                                                                        *
*  Input:   A1 = 32 bit number (unsigned)                                *
*  Returns: A1 = 16 bit square root (integer)                            *
*                                                                        *
**************************************************************************
SQROOT
	MMTM 	SP,A2,A3,A4,A5
	setf	12,1,1		;quicken multiplies (12 is about the limit we can safely go)
	LMO	A1,A2		;FIND # OF BITS
	jrz	sqrxx
	SUBK	31,A2
	NEG	A2
	ADDK	2,A2
	SRL	1,A2		;GET RID OF GARBAGE
	MOVI	32,A3
	SUB	A2,A3
	NEG	A3
	MOVK	1,A4
	RL	31,A4		;SET MSB IN A5
	SRL	A3,A4
	MOVE	A4,A3
SQRL	SRL	1,A3
	JREQ	SQRX		;FINISHED ITERATING
	MOVE	A4,A5
	MPYU	A4,A5
	CMP	A5,A1
	JRLO	SQR1
	JREQ	SQRX
	ADD	A3,A4
	JRUC	SQRL
SQR1	SUB	A3,A4
	JRUC	SQRL
SQRX	MOVE	A4,A1
sqrxx	setf	32,0,1
	MMFM	SP,A2,A3,A4,A5
	RETS

**************************************************************************
*								         *
* polar_to_rect: convert from a polar velocity (theta and r)		 *
*                        to a rectangular velocity (x and z)		 *
* 	input:  a0 = angle						 *
* 	        a1 = velocity						 *
* 	output: a0 = x velocity						 *
* 	        a1 = z velocity						 *
*								         *
**************************************************************************
polar_to_rect
	mmtm	sp,a2,a3,a4,a5
	move	a1,a2
	move	a1,a4
	callr	GETSINCOS
	mpys	a1,a2
	sll	16,a2
	srl	16,a3
	movx	a3,a2
	mpys	a0,a4
	sll	16,a4
	srl	16,a5
	movx	a5,a4
	move	a4,a1
	move	a2,a0
	mmfm	sp,a2,a3,a4,a5
	rets

**************************************************************************
*								         *
* rect_to_polar: convert from a rectangular velocity (x and z)		 *
*                        to a polar velocity (theta and r)		 *
* 	THIS IS MUCH SLOWER THAN POLAR TO RECTANGULAR			 *
* 	input:  a0 = x velocity						 *
* 	        a1 = z velocity						 *
* 	output: a0 = angle						 *
* 	        a1 = velocity						 *
* rect_to_dir: convert from a rectangular velocity (x and z)		 *
*                        to a polar angle (theta)			 *
* 	THIS IS MUCH SLOWER THAN POLAR TO RECTANGULAR			 *
* 	input:  a0 = x velocity						 *
* 	        a1 = z velocity						 *
* 	output: a0 = angle						 *
* 									 *
* 	we split the circle into 8 parts				 *
* 	 0     < a < pi/4   a = atan(y/x)				 *
* 	 pi/4  < a < pi/2   a = pi/2 - atan(x/y)			 *
* 	 pi/2  < a < 3pi/4  a = pi/2 + atan(-x/y)			 *
* 	 3pi/4 < a < pi     a = pi - atan(y/-x)				 *
* 	 pi    < a < 5pi/4  a = pi + atan(-y/-x)			 *
* 	 5pi/4 < a < 3pi/2  a = 3pi/2 - atan(-x/-y)			 *
* 	 3pi/2 < a < 7pi/4  a = 3pi/2 + atan(x/-y)			 *
* 	 7pi/4 < a < 2pi    a = 2pi - atan(-y/x)			 *
*								         *
**************************************************************************
rect_to_dir
	PUSH	a1
	callr	rttd
	PULLQ	a1
	rets
rttd	mmtm	sp,a3,a4,a5,a6,a7
	clr	a6		;set for just direction
	jruc	rtpa
rect_to_polar
	mmtm	sp,a3,a4,a5,a6,a7
	movk	1,a6		;set for both direction and magnitude
rtpa	move	a0,a4		;save x
	srl	31,a4		;move sign of x into bit 0
	sll	1,a4		;and over to bit 1
	move	a1,a5		;test sign of z
	jrnn	rtp1		;br= z not negative, leave sign alone
	inc	a4		;z sign into bit 0.  a4 = sign bits of x and z
rtp1	abs	a0		;get abs of x
	move	a0,a3		;save abs x for magnitude
	abs	a5		;get abs of z
	move	a5,a7		;save abs z for magnitude
	cmp	a5,a0		;compare x and z magnitudes
	jrlt	rtpxz		;br= x magnitude less than z
	addk	4,a4		;now a4 is bitwise x>z:signx:signz
	swap	a5,a0		;for z < x, swap registers for divide
rtpxz	move	a0,a1		;put into register pair a0:a1 for divide
	sra	16,a0		;move mantissa down
	sll	16,a1		;move fraction up
	move	a5,a5		;check for divide by zero, we are stopped
	jrz	rtp_stp		;br= we are stopped
	divs	a5,a0		;tan now in a0
	callr	GETATAN		;now a0 is angle 0 - pi/4
	sll	5,a4		;now get address to jump to to finish
	addi	rtp_table,a4
	move	*a4,a4,L
	jump	a4
rtp_stp	clr	a0		;direction is cleared for stopped puck
	jruc	smag		;now finish with magnitude if neccessary
rtp_table	.long	sqd12	;(x)<(z), x positive, z positive
		.long	sqd41	;(x)<(z), x positive, z negative
		.long	sqd21	;(x)<(z), x negative, z positive
		.long	sqd32	;(x)<(z), x negative, z negative
		.long	sqd11	;(x)>(z), x positive, z positive
		.long	sqd42	;(x)>(z), x positive, z negative
		.long	sqd22	;(x)>(z), x negative, z positive
		.long	sqd31	;(x)>(z), x negative, z negative
sqd12	movi	XD0900,a1	;angle is p/2 - atan x/y
	jruc	sqi
sqd21	movi	XD0900,a1	;angle is p2 + atan -x/y
	add	a1,a0
	jruc	smag
sqd22	movi	XD1800,a1		;angle is p - atan y/-x
	jruc	sqi
sqd31	movi	XD1800,a1		;angle is p + atan y/x
	add	a1,a0
	jruc	smag
sqd32	movi	XD2700,a1	;angle is 3p/2 - atan x/y
	jruc	sqi
sqd41	movi	XD2700,a1	;angle is 3p/2 + atan x/-y
	add	a1,a0
	jruc	smag
sqd42	movi	XD3600,a1		;angle is 2p - atan -y/x
sqi	sub	a0,a1
	move	a1,a0
sqd11				;angle is atan y/x
smag	move	a6,a6		;if we just want direction, leave
	jrz	smg9		;br= just direction
	sra	16,a3
	move	a3,a1
	mpys	a1,a3
	sra	16,a7
	move	a7,a1
	mpys	a7,a1
	add	a3,a1
	callr	SQROOT
	sll	16,a1
smg9	mmfm	sp,a3,a4,a5,a6,a7
	rets

**************************************************************************
*								         *
* find_dsquared_to_point	finds squared distance from one point to *
* find_dis_to_point		find distance from one point to another	 *
* find_dir_to_point		find angle from one point to another	 *
* find_dirdis_to_point	find distance and angle from 1 point to another	 *
* 									 *
* input	a0 = xval of point 2						 *
* 		a1 = zval of point 2					 *
* 		a2 = xval of point 1					 *
* 		a3 = zval of point 1					 *
* output	a0 = angle	(if output)				 *
* 		a1 = distance	(if output)				 *
* 		a4 = distance	(if output)				 *
*								         *
**************************************************************************
find_dis_to_point_whole
	mmtm	sp,a0,a1,a2
	setf	12,1,1		;quicken multiplies (12 is about the limit we can safely go)
	sub	a2,a0		;x distance
	sub	a3,a1		;z distance
	sra	16,a0
	sra	16,a1
	mpys	a1,a1
	move	a1,a2
	move	a0,a1
	mpys	a1,a1
	add	a2,a1
	callr	SQROOT
	move	a1,a4		;***** NOTE ***** here we assume SQROOT resets field size to 32 bits
	mmfm	sp,a0,a1,a2
	rets

find_dsquared_to_point_whole
	mmtm	sp,a0,a1,a2
	setf	12,1,1		;quicken multiplies (12 is about the limit we can safely go)
	sub	a2,a0		;x distance
	sub	a3,a1		;z distance
	sra	16,a0
	sra	16,a1
	mpys	a1,a1
	move	a1,a2
	move	a0,a1
	mpys	a1,a1
	add	a2,a1
	move	a1,a4
	setf	32,0,1
	mmfm	sp,a0,a1,a2
	rets

find_dsquared_to_point_whole_a1
	mmtm	sp,a0,a2
	setf	12,1,1
	sub	a2,a0		;x distance
	sub	a3,a1		;z distance
	sra	16,a0
	sra	16,a1
	mpys	a1,a1
	move	a1,a2
	move	a0,a1
	mpys	a1,a1
	add	a2,a1
	setf	32,0,1
	mmfm	sp,a0,a2
	rets

find_dir_to_point_182		;1-8 by 2 (1,3,5,7)
	callr	find_dir_to_point
dir_to_182
	movi	f2dtptab,a11
f2dtp1	move	*a11,a1,L
	jrn	f2dtper
	cmp	a1,a0
	jrls	f2dtp2
	addi	64,a11
	jruc	f2dtp1
	rets
f2dtp2	move	*a11(32),a0,L
	rets
f2dtper	LOCKUP

f2dtptab
	.long	XD0450,3
	.long	XD1350,5
	.long	XD2250,7
	.long	XD3150,1
	.long	XD4050,3
	.long	-1

find_dir_to_point_18
	callr	find_dir_to_point
dir_to_18
	movi	fdtp_tab,a11
fdtp_1	move	*a11,a1,L
	jrn	fdtp_er
	cmp	a1,a0
	jrls	fdtp_2
	addi	64,a11
	jruc	fdtp_1
	rets
fdtp_2	move	*a11(32),a0,L
	rets
fdtp_er	LOCKUP

fdtp_tab
	.long	XD0225,3
	.long	XD0675,4
	.long	XD1125,5
	.long	XD1575,6
	.long	XD2025,7
	.long	XD2475,8
	.long	XD2925,1
	.long	XD3375,2
	.long	XD3825,3
	.long	-1

find_dir_to_point
	sub	a2,a0
	sub	a3,a1
	jruc	rect_to_dir

find_dirdis_to_point
	sub	a2,a0
	sub	a3,a1
	jruc	rect_to_polar

find_dist_quick
	sub	a2,a0
	abs	a0
	sub	a3,a1
	abs	a1
	cmp	a1,a0
	jrls	fdq1
fdq0	srl	1,a1
	move	a1,a4
	add	a0,a4
	rets
fdq1	srl	1,a0
	move	a0,a4
	add	a1,a4
	rets

**************************************************************************
*								         *
* dir_to_radians							 *
* 	input	a0 = direction of travel (1-8)				 *
* 	output	a0 = radians						 *
*								         *
**************************************************************************
dir_to_radians
	sll	5,a0
	addi	dtr_tab,a0
	move	*a0,a0,L
	rets
dtr_tab	.long	0		;0 = 0
	.long	XD2700		;1 = 3pi/2
	.long	XD3150		;2 = 7pi/4
	.long	0		;3 = 0
	.long	XD0450		;4 = pi/4
	.long	XD0900		;5 = pi/2
	.long	XD1350		;6 = 3pi/4
	.long	XD1800		;7 = pi
	.long	XD2250		;8 = 5pi/4


**************************************************************************
*								         *
* set_obj_to_polar							 *
* 	sets object vectors to the polar coordinates specified		 *
*    input    a8 = object						 *
*             a0 = angle						 *
*             a1 = velocity						 *
*    output to puck object						 *
* 									 *
* set_obj_to_rect							 *
* 	sets object vectors to the rectangular coordinates specified	 *
*    input    a8 = object						 *
*             a0 = xvel							 *
*             a1 = zvel							 *
*    output to object							 *
*								         *
**************************************************************************
;set_obj_to_polar_18
;	PUSHQ	A0
;	CALLA	DIR_TO_18
;	MOVE	A0,*A8(ODT_DIR_18),W
;	PULLQ	A0
set_obj_to_polar
	move	a0,*a8(ODT_DIR),L
	move	a1,*a8(ODT_VEL),L
	callr	polar_to_rect
	move	a0,*a8(OXVEL),L
	move	a1,*a8(OZVEL),L
	rets
set_obj_to_rect
	move	a0,*a8(OXVEL),L
	move	a1,*a8(OZVEL),L
	callr	rect_to_polar
	move	a0,*a8(ODT_DIR),L
	move	a1,*a8(ODT_VEL),L
	rets


**************************************************************************
*								         *
* move_to_speed_x input	;a1 = old speed					 *
* 				;a2 = desired end speed			 *
* 				;a3 = amount to move close (0-255)	 *
* 		   output	;a1 = new speed				 *
* 	DO NOT TRASH A14						 *
*								         *
**************************************************************************
move_to_speed_x		;a3 = 0-255 = % of new vs old
	mmtm	sp,a2,a3,a4,a5,a6,a7
	sll	24,a3
	clr	a4
	clr	a7
	move	a1,a6
	movk	8,a5
mta	sra	1,a1
	sra	1,a2
	sll	1,a3
	jrnc	mtan
	add	a1,a4
	add	a2,a7
mtan	dsjs	a5,mta
	move	a6,a1
	sub	a4,a1
	add	a7,a1
	mmfm	sp,a2,a3,a4,a5,a6,a7
	rets

**************************************************************************
*								         *
* find_closest_distance							 *
* 	finds the shortest distance between two moving object		 *
*     	assumes objects are moving at a constant velocity		 *
* 	input	a8 = object 1						 *
* 		a9 = object 2						 *
* 	output	a0 = distance						 *
* find_closest_dist_r							 *
* 	finds the shortest distance between two moving object		 *
*     	assumes objects are moving at a constant velocity		 *
* 	input	a0 = x position difference				 *
* 		a1 = z position difference				 *
* 		a2 = xvel difference					 *
* 		a3 = zvel difference					 *
*								         *
**************************************************************************
find_closest_distance
	mmtm	sp,a1,a2,a3,a4,a5,a6,a7,a10,a11
	move	*a8(OXVAL),a14,L
	move	*a9(OXVAL),a0,L
	sub	a14,a0			;a0 = x0 difference
	move	*a8(OZVAL),a14,L
	move	*a9(OZVAL),a1,L
	sub	a14,a1			;a1 = z0 difference
	move	*a8(OXVEL),a14,L
	move	*a9(OXVEL),a2,L
	sub	a14,a2			;a2 = xvel difference
	move	*a8(OZVEL),a14,L
	move	*a9(OZVEL),a3,L
	sub	a14,a3			;a3 = zvel difference
	jruc	fcd_1
find_closest_dist_r
	mmtm	sp,a1,a2,a3,a4,a5,a6,a7,a10,a11
fcd_1	move	a2,a2
	jrz	fcd_x0			;xv difference = 0 ; special case
	move	a3,a3
	jrz	fcd_z0			;zv difference = 0 ; special case
	move	a0,a10
	mpys	a3,a10
	divs	a2,a10
	move	a1,a5
	sub	a10,a5			;a5 = a1 - a3 * a0 / a2 = z @x=0
	abs	a5
	move	a1,a10
	mpys	a2,a10
	divs	a3,a10
	move	a0,a4
	sub	a10,a4			;a4 = a0 - a2 * a1 / a3 = z @x=0
	abs	a4
	cmp	a4,a5
	jrhs	fcd2
	SWAP	a4,a5
	SWAP	a0,a2
	SWAP	a1,a3
fcd2	move	a4,a6
	move	a4,a7
	sra	16,a6
	sll	16,a7
	divs	a5,a6
	move	a6,a0
	callr	GETATAN			;a0 = atan (a4 / a5)
	callr	GETCOS
	mpys	a4,a0			;a0 = Xz0 * cos (a0) = distance
	mmfm	sp,a1,a2,a3,a4,a5,a6,a7,a10,a11
	rets
fcd_z0	move	a1,a0
fcd_x0	abs	a0
	srl	16,a0
	mmfm	sp,a1,a2,a3,a4,a5,a6,a7,a10,a11
	rets

	.data
	.even

**************************************************************************
*								         *
* ATAN_TABLE - shift atan down 7 bits (/128) and then up wordsize	 *
*            - for angles less than pi/4				 *
*								         *
**************************************************************************
ATAN_TABLE
	.word	0,128,256,384,512,640,768,896,1024,1152
	.word	1280,1408,1536,1664,1792,1919,2047,2175,2303,2431
	.word	2559,2686,2814,2942,3070,3197,3325,3453,3580,3708
	.word	3836,3963,4091,4218,4346,4473,4600,4728,4855,4982
	.word	5110,5237,5364,5491,5618,5745,5872,5999,6126,6253
	.word	6380,6507,6633,6760,6887,7013,7140,7266,7392,7519
	.word	7645,7771,7898,8024,8150,8276,8402,8528,8653,8779
	.word	8905,9030,9156,9281,9407,9532,9657,9783,9908,10033
	.word	10158,10283,10408,10532,10657,10782,10906,11031,11155,11279
	.word	11404,11528,11652,11776,11899,12023,12147,12271,12394,12518
	.word	12641,12764,12887,13010,13133,13256,13379,13502,13624,13747
	.word	13869,13991,14114,14236,14358,14480,14601,14723,14845,14966
	.word	15088,15209,15330,15451,15572,15693,15814,15934,16055,16175
	.word	16296,16416,16536,16656,16776,16895,17015,17135,17254,17373
	.word	17492,17611,17730,17849,17968,18086,18205,18323,18441,18559
	.word	18677,18795,18913,19030,19148,19265,19382,19499,19616,19733
	.word	19850,19966,20083,20199,20315,20431,20547,20663,20779,20894
	.word	21009,21125,21240,21355,21469,21584,21699,21813,21927,22042
	.word	22156,22269,22383,22497,22610,22723,22837,22950,23062,23175
	.word	23288,23400,23512,23625,23737,23848,23960,24072,24183,24294
	.word	24406,24516,24627,24738,24849,24959,25069,25179,25289,25399
	.word	25509,25618,25727,25837,25946,26055,26163,26272,26380,26489
	.word	26597,26705,26813,26920,27028,27135,27242,27349,27456,27563
	.word	27670,27776,27882,27988,28094,28200,28306,28411,28517,28622
	.word	28727,28832,28936,29041,29145,29250,29354,29458,29561,29665
	.word	29768,29872,29975,30078,30180,30283,30386,30488,30590,30692
	.word	30794,30896,30997,31098,31200,31301,31402,31502,31603,31703
	.word	31803,31904,32003,32103,32203,32302,32401,32501,32600,32698
	.word	32797,32895,32994,33092,33190,33288,33385,33483,33580,33677
	.word	33774,33871,33968,34064,34160,34257,34353,34448,34544,34640
	.word	34735,34830,34925,35020,35115,35209,35304,35398,35492,35586
	.word	35680,35773,35867,35960,36053,36146,36239,36332,36424,36516
	.word	36608,36700,36792,36884,36975,37067,37158,37249,37340,37430
	.word	37521,37611,37701,37791,37881,37971,38060,38150,38239,38328
	.word	38417,38506,38594,38683,38771,38859,38947,39035,39123,39210
	.word	39297,39385,39472,39558,39645,39732,39818,39904,39990,40076
	.word	40162,40247,40333,40418,40503,40588,40673,40758,40842,40926
	.word	41010,41094,41178,41262,41346,41429,41512,41595,41678,41761
	.word	41844,41926,42008,42090,42172,42254,42336,42418,42499,42580
	.word	42661,42742,42823,42904,42984,43064,43145,43225,43304,43384
	.word	43464,43543,43622,43701,43780,43859,43938,44016,44095,44173
	.word	44251,44329,44407,44484,44562,44639,44716,44793,44870,44947
	.word	45024,45100,45176,45252,45328,45404,45480,45556,45631,45706
	.word	45781,45856,45931,46006,46080,46155,46229,46303,46377,46451
	.word	46525,46598,46672,46745,46818,46891,46964,47037,47109,47182
	.word	47254,47326,47398,47470,47542,47613,47685,47756,47827,47898
	.word	47969,48040,48111,48181,48251,48322,48392,48462,48531,48601
	.word	48671,48740,48809,48878,48947,49016,49085,49154,49222,49290
	.word	49359,49427,49495,49562,49630,49697,49765,49832,49899,49966
	.word	50033,50100,50167,50233,50299,50366,50432,50498,50563,50629
	.word	50695,50760,50826,50891,50956,51021,51086,51150,51215,51279
	.word	51344,51408,51472,51536,51600

sin_table
	.long	0,255,511,767,1023,1279,1535,1791
	.long	2047,2303,2559,2815,3070,3326,3582,3837
	.long	4093,4348,4604,4859,5114,5369,5625,5880
	.long	6135,6389,6644,6899,7153,7408,7662,7916
	.long	8170,8424,8678,8932,9185,9439,9692,9945
	.long	10198,10451,10703,10956,11208,11460,11712,11964
	.long	12216,12467,12718,12969,13220,13471,13721,13971
	.long	14221,14471,14721,14970,15219,15468,15717,15965
	.long	16213,16461,16709,16956,17204,17450,17697,17943
	.long	18189,18435,18681,18926,19171,19416,19660,19904
	.long	20148,20391,20634,20877,21120,21362,21604,21845
	.long	22086,22327,22568,22808,23048,23287,23526,23765
	.long	24004,24242,24479,24717,24953,25190,25426,25662
	.long	25897,26132,26367,26601,26835,27068,27301,27533
	.long	27766,27997,28228,28459,28690,28920,29149,29378
	.long	29607,29835,30063,30290,30517,30743,30969,31194
	.long	31419,31644,31867,32091,32314,32536,32758,32980
	.long	33201,33421,33641,33861,34080,34298,34516,34733
	.long	34950,35166,35382,35597,35812,36026,36240,36453
	.long	36665,36877,37088,37299,37509,37719,37928,38137
	.long	38344,38552,38758,38965,39170,39375,39579,39783
	.long	39986,40189,40391,40592,40793,40993,41192,41391
	.long	41589,41787,41984,42180,42375,42570,42765,42958
	.long	43151,43344,43535,43726,43917,44106,44295,44484
	.long	44671,44858,45045,45230,45415,45599,45783,45966
	.long	46148,46329,46510,46690,46869,47048,47226,47403
	.long	47579,47755,47930,48104,48278,48450,48622,48794
	.long	48964,49134,49303,49471,49639,49806,49972,50137
	.long	50301,50465,50628,50790,50951,51112,51272,51431
	.long	51589,51747,51903,52059,52214,52369,52522,52675
	.long	52827,52978,53128,53278,53426,53574,53721,53867
	.long	54013,54157,54301,54444,54586,54727,54868,55007
	.long	55146,55284,55421,55557,55693,55827,55961,56094
	.long	56226,56357,56487,56616,56745,56872,56999,57125
	.long	57250,57374,57498,57620,57741,57862,57982,58101
	.long	58219,58336,58452,58567,58682,58795,58908,59020
	.long	59131,59240,59349,59458,59565,59671,59776,59881
	.long	59985,60087,60189,60290,60390,60489,60587,60684
	.long	60780,60875,60970,61063,61156,61247,61338,61427
	.long	61516,61604,61691,61777,61862,61946,62029,62111
	.long	62192,62272,62352,62430,62507,62584,62659,62734
	.long	62807,62880,62952,63022,63092,63161,63229,63296
	.long	63361,63426,63490,63553,63615,63676,63736,63795
	.long	63854,63911,63967,64022,64076,64129,64182,64233
	.long	64283,64333,64381,64428,64475,64520,64564,64608
	.long	64650,64692,64732,64772,64810,64848,64884,64920
	.long	64954,64988,65020,65052,65082,65112,65140,65168
	.long	65195,65220,65245,65268,65291,65313,65333,65353
	.long	65371,65389,65406,65421,65436,65449,65462,65474
	.long	65484,65494,65503,65510,65517,65522,65527,65531
	.long	65533,65535
cos_table
	.long	65535,65535,65534,65531,65528,65524,65518,65512
	.long	65504,65496,65487,65476,65465,65453,65439,65425
	.long	65410,65393,65376,65357,65338,65318,65296,65274
	.long	65251,65226,65201,65175,65147,65119,65090,65059
	.long	65028,64996,64963,64928,64893,64857,64820,64781
	.long	64742,64702,64661,64618,64575,64531,64486,64440
	.long	64393,64345,64296,64246,64195,64143,64090,64036
	.long	63981,63925,63868,63810,63751,63691,63630,63569
	.long	63506,63442,63378,63312,63245,63178,63109,63040
	.long	62969,62898,62826,62752,62678,62603,62526,62449
	.long	62371,62292,62212,62131,62049,61966,61883,61798
	.long	61712,61626,61538,61449,61360,61270,61178,61086
	.long	60993,60899,60804,60708,60611,60513,60414,60315
	.long	60214,60112,60010,59907,59802,59697,59591,59484
	.long	59376,59268,59158,59047,58936,58823,58710,58596
	.long	58481,58365,58248,58130,58011,57892,57771,57650
	.long	57528,57405,57281,57156,57030,56904,56776,56648
	.long	56519,56389,56258,56126,55994,55860,55726,55591
	.long	55455,55318,55180,55042,54902,54762,54621,54479
	.long	54337,54193,54049,53904,53758,53611,53463,53315
	.long	53165,53015,52864,52713,52560,52407,52253,52098
	.long	51942,51786,51628,51470,51311,51152,50991,50830
	.long	50668,50505,50342,50178,50013,49847,49680,49513
	.long	49345,49176,49006,48836,48665,48493,48320,48147
	.long	47973,47798,47623,47447,47270,47092,46914,46734
	.long	46555,46374,46193,46011,45828,45645,45461,45276
	.long	45091,44905,44718,44530,44342,44153,43964,43774
	.long	43583,43391,43199,43006,42813,42619,42424,42228
	.long	42032,41835,41638,41440,41241,41042,40842,40642
	.long	40441,40239,40037,39834,39630,39426,39221,39016
	.long	38810,38603,38396,38188,37980,37771,37561,37351
	.long	37141,36929,36718,36505,36292,36079,35865,35651
	.long	35435,35220,35004,34787,34570,34352,34134,33915
	.long	33696,33476,33255,33035,32813,32591,32369,32146
	.long	31923,31699,31475,31250,31025,30799,30573,30346
	.long	30119,29891,29663,29435,29206,28977,28747,28516
	.long	28286,28055,27823,27591,27359,27126,26892,26659
	.long	26425,26190,25955,25720,25485,25248,25012,24775
	.long	24538,24300,24063,23824,23586,23347,23107,22867
	.long	22627,22387,22146,21905,21664,21422,21180,20937
	.long	20695,20451,20208,19964,19720,19476,19232,18987
	.long	18742,18496,18250,18004,17758,17512,17265,17018
	.long	16770,16523,16275,16027,15778,15530,15281,15032
	.long	14783,14533,14283,14033,13783,13533,13282,13031
	.long	12780,12529,12278,12026,11775,11523,11271,11018
	.long	10766,10513,10261,10008,9755,9501,9248,8994
	.long	8741,8487,8233,7979,7725,7471,7216,6962
	.long	6707,6452,6198,5943,5688,5433,5178,4922
	.long	4667,4412,4156,3901,3645,3389,3134,2878
	.long	2622,2366,2111,1855,1599,1343,1087,831
	.long	575,319,63,-193,-449,-705,-961,-1217
	.long	-1473,-1729,-1985,-2241,-2496,-2752,-3008,-3264
	.long	-3519,-3775,-4031,-4286,-4541,-4797,-5052,-5307
	.long	-5562,-5817,-6072,-6327,-6582,-6837,-7091,-7346
	.long	-7600,-7854,-8108,-8362,-8616,-8870,-9123,-9377
	.long	-9630,-9883,-10136,-10389,-10642,-10894,-11147,-11399
	.long	-11651,-11903,-12154,-12406,-12657,-12908,-13159,-13410
	.long	-13660,-13910,-14161,-14410,-14660,-14909,-15159,-15408
	.long	-15656,-15905,-16153,-16401,-16649,-16896,-17143,-17390
	.long	-17637,-17883,-18130,-18375,-18621,-18866,-19111,-19356
	.long	-19600,-19845,-20088,-20332,-20575,-20818,-21061,-21303
	.long	-21545,-21786,-22028,-22269,-22509,-22750,-22989,-23229
	.long	-23468,-23707,-23946,-24184,-24421,-24659,-24896,-25132
	.long	-25369,-25604,-25840,-26075,-26310,-26544,-26778,-27011
	.long	-27244,-27477,-27709,-27941,-28172,-28403,-28634,-28864
	.long	-29093,-29322,-29551,-29779,-30007,-30235,-30462,-30688
	.long	-30914,-31139,-31364,-31589,-31813,-32037,-32260,-32482
	.long	-32704,-32926,-33147,-33368,-33588,-33807,-34026,-34245
	.long	-34463,-34680,-34897,-35114,-35330,-35545,-35760,-35974
	.long	-36188,-36401,-36614,-36826,-37037,-37248,-37458,-37668
	.long	-37877,-38086,-38294,-38501,-38708,-38915,-39120,-39325
	.long	-39530,-39734,-39937,-40140,-40342,-40543,-40744,-40944
	.long	-41144,-41343,-41541,-41739,-41936,-42132,-42328,-42523
	.long	-42718,-42911,-43105,-43297,-43489,-43680,-43871,-44060
	.long	-44250,-44438,-44626,-44813,-45000,-45185,-45370,-45555
	.long	-45738,-45921,-46104,-46285,-46466,-46646,-46826,-47005
	.long	-47183,-47360,-47537,-47712,-47888,-48062,-48236,-48409
	.long	-48581,-48752,-48923,-49093,-49262,-49431,-49598,-49765
	.long	-49931,-50097,-50262,-50425,-50589,-50751,-50913,-51073
	.long	-51233,-51393,-51551,-51709,-51866,-52022,-52177,-52332
	.long	-52485,-52638,-52790,-52942,-53092,-53242,-53391,-53539
	.long	-53686,-53832,-53978,-54123,-54267,-54410,-54552,-54694
	.long	-54834,-54974,-55113,-55251,-55388,-55525,-55660,-55795
	.long	-55929,-56062,-56194,-56325,-56456,-56585,-56714,-56842
	.long	-56969,-57095,-57220,-57345,-57468,-57591,-57712,-57833
	.long	-57953,-58072,-58191,-58308,-58424,-58540,-58655,-58768
	.long	-58881,-58993,-59104,-59214,-59324,-59432,-59539,-59646
	.long	-59751,-59856,-59960,-60063,-60165,-60266,-60366,-60465
	.long	-60563,-60661,-60757,-60853,-60947,-61041,-61134,-61225
	.long	-61316,-61406,-61495,-61583,-61670,-61757,-61842,-61926
	.long	-62009,-62092,-62173,-62254,-62333,-62412,-62489,-62566
	.long	-62642,-62717,-62790,-62863,-62935,-63006,-63076,-63145
	.long	-63213,-63280,-63346,-63411,-63476,-63539,-63601,-63662
	.long	-63723,-63782,-63840,-63898,-63954,-64009,-64064,-64117
	.long	-64170,-64221,-64272,-64322,-64370,-64418,-64464,-64510
	.long	-64555,-64598,-64641,-64683,-64723,-64763,-64802,-64839
	.long	-64876,-64912,-64947,-64980,-65013,-65045,-65076,-65106
	.long	-65134,-65162,-65189,-65215,-65240,-65264,-65286,-65308
	.long	-65329,-65349,-65368,-65386,-65403,-65418,-65433,-65447
	.long	-65460,-65472,-65483,-65493,-65501,-65509,-65516,-65522
	.long	-65527,-65531,-65534,-65535,-65535,-65535,-65535,-65533
	.long	-65530,-65526,-65521,-65515,-65507,-65499,-65490,-65480
	.long	-65469,-65457,-65444,-65430,-65414,-65398,-65381,-65363
	.long	-65344,-65324,-65303,-65281,-65258,-65233,-65208,-65182
	.long	-65155,-65127,-65098,-65068,-65037,-65005,-64972,-64938
	.long	-64903,-64867,-64830,-64792,-64753,-64713,-64672,-64630
	.long	-64587,-64543,-64498,-64452,-64406,-64358,-64309,-64259
	.long	-64208,-64156,-64104,-64050,-63995,-63940,-63883,-63825
	.long	-63767,-63707,-63647,-63585,-63523,-63459,-63395,-63329
	.long	-63263,-63196,-63127,-63058,-62988,-62917,-62845,-62771
	.long	-62697,-62622,-62546,-62470,-62392,-62313,-62233,-62152
	.long	-62071,-61988,-61904,-61820,-61734,-61648,-61561,-61472
	.long	-61383,-61293,-61202,-61110,-61017,-60923,-60828,-60733
	.long	-60636,-60538,-60440,-60340,-60240,-60139,-60037,-59933
	.long	-59829,-59724,-59619,-59512,-59404,-59296,-59186,-59076
	.long	-58964,-58852,-58739,-58625,-58510,-58395,-58278,-58160
	.long	-58042,-57923,-57802,-57681,-57559,-57436,-57313,-57188
	.long	-57063,-56936,-56809,-56681,-56552,-56422,-56292,-56160
	.long	-56028,-55894,-55760,-55625,-55490,-55353,-55216,-55077
	.long	-54938,-54798,-54657,-54516,-54373,-54230,-54086,-53941
	.long	-53795,-53648,-53501,-53352,-53203,-53053,-52903,-52751
	.long	-52599,-52446,-52292,-52137,-51982,-51825,-51668,-51510
	.long	-51352,-51192,-51032,-50871,-50709,-50547,-50383,-50219
	.long	-50054,-49889,-49722,-49555,-49387,-49219,-49049,-48879
	.long	-48708,-48537,-48364,-48191,-48017,-47843,-47667,-47491
	.long	-47315,-47137,-46959,-46780,-46600,-46420,-46239,-46057
	.long	-45875,-45691,-45507,-45323,-45138,-44952,-44765,-44578
	.long	-44390,-44201,-44012,-43822,-43631,-43440,-43248,-43055
	.long	-42862,-42668,-42473,-42278,-42082,-41885,-41688,-41490
	.long	-41292,-41093,-40893,-40693,-40492,-40290,-40088,-39885
	.long	-39681,-39477,-39273,-39068,-38862,-38655,-38448,-38241
	.long	-38032,-37824,-37614,-37404,-37194,-36983,-36771,-36559
	.long	-36346,-36133,-35919,-35705,-35490,-35274,-35058,-34842
	.long	-34625,-34407,-34189,-33970,-33751,-33531,-33311,-33090
	.long	-32869,-32647,-32425,-32202,-31979,-31756,-31531,-31307
	.long	-31082,-30856,-30630,-30403,-30176,-29949,-29721,-29493
	.long	-29264,-29034,-28805,-28574,-28344,-28113,-27881,-27649
	.long	-27417,-27184,-26951,-26718,-26484,-26249,-26015,-25779
	.long	-25544,-25308,-25072,-24835,-24598,-24360,-24123,-23884
	.long	-23646,-23407,-23167,-22928,-22688,-22448,-22207,-21966
	.long	-21724,-21483,-21241,-20998,-20756,-20513,-20269,-20026
	.long	-19782,-19538,-19293,-19048,-18803,-18558,-18312,-18066
	.long	-17820,-17574,-17327,-17080,-16833,-16585,-16337,-16089
	.long	-15841,-15592,-15344,-15095,-14845,-14596,-14346,-14096
	.long	-13846,-13596,-13345,-13095,-12844,-12593,-12341,-12090
	.long	-11838,-11586,-11334,-11082,-10829,-10577,-10324,-10071
	.long	-9818,-9565,-9312,-9058,-8805,-8551,-8297,-8043
	.long	-7789,-7535,-7280,-7026,-6771,-6517,-6262,-6007
	.long	-5752,-5497,-5242,-4987,-4731,-4476,-4220,-3965
	.long	-3709,-3454,-3198,-2942,-2687,-2431,-2175,-1919
	.long	-1663,-1407,-1151,-895,-639,-383,-127,129
	.long	385,641,897,1153,1409,1664,1920,2176
	.long	2432,2688,2944,3199,3455,3711,3966,4222
	.long	4477,4733,4988,5243,5498,5753,6008,6263
	.long	6518,6773,7027,7282,7536,7790,8044,8298
	.long	8552,8806,9060,9313,9566,9820,10073,10325
	.long	10578,10831,11083,11335,11587,11839,12091,12343
	.long	12594,12845,13096,13347,13597,13847,14098,14348
	.long	14597,14847,15096,15345,15594,15842,16090,16338
	.long	16586,16834,17081,17328,17575,17821,18068,18314
	.long	18559,18805,19050,19294,19539,19783,20027,20271
	.long	20514,20757,21000,21242,21484,21726,21967,22208
	.long	22449,22689,22929,23169,23408,23647,23885,24124
	.long	24362,24599,24836,25073,25309,25545,25781,26016
	.long	26251,26485,26719,26952,27186,27418,27651,27882
	.long	28114,28345,28576,28806,29035,29265,29494,29722
	.long	29950,30177,30404,30631,30857,31083,31308,31532
	.long	31757,31980,32204,32426,32648,32870,33091,33312
	.long	33532,33752,33971,34190,34408,34626,34843,35059
	.long	35275,35491,35706,35920,36134,36347,36560,36772
	.long	36984,37195,37405,37615,37825,38033,38242,38449
	.long	38656,38863,39068,39274,39478,39682,39886,40089
	.long	40291,40492,40693,40894,41093,41293,41491,41689
	.long	41886,42083,42279,42474,42668,42862,43056,43248
	.long	43440,43632,43822,44012,44202,44391,44578,44766
	.long	44952,45138,45324,45508,45692,45875,46058,46239
	.long	46421,46601,46781,46959,47138,47315,47492,47668
	.long	47843,48018,48192,48365,48537,48709,48880,49050
	.long	49219,49388,49556,49723,49889,50055,50220,50384
	.long	50547,50710,50872,51033,51193,51352,51511,51669
	.long	51826,51982,52138,52292,52446,52599,52752,52903
	.long	53054,53204,53353,53501,53649,53795,53941,54086
	.long	54230,54373,54516,54658,54798,54938,55078,55216
	.long	55353,55490,55626,55761,55895,56028,56160,56292
	.long	56422,56552,56681,56809,56936,57063,57188,57313
	.long	57437,57559,57681,57802,57923,58042,58160,58278
	.long	58395,58510,58625,58739,58852,58964,59076,59186
	.long	59296,59404,59512,59619,59724,59829,59933,60036
	.long	60139,60240,60340,60440,60538,60636,60732,60828
	.long	60923,61017,61110,61202,61293,61383,61472,61561
	.long	61648,61734,61820,61904,61988,62070,62152,62233
	.long	62313,62391,62469,62546,62622,62697,62771,62844
	.long	62916,62988,63058,63127,63195,63263,63329,63394
	.long	63459,63522,63585,63646,63707,63766,63825,63883
	.long	63939,63995,64050,64103,64156,64208,64259,64308
	.long	64357,64405,64452,64498,64543,64586,64629,64671
	.long	64712,64752,64791,64829,64866,64902,64937,64971
	.long	65004,65036,65067,65097,65126,65154,65182,65208
	.long	65233,65257,65280,65302,65323,65343,65362,65380
	.long	65397,65414,65429,65443,65456,65468,65479,65489
	.long	65498,65506,65514,65520,65525,65529,65532,65534
	.long	65535,65535,65535,65533,65530
